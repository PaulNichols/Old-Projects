'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BirdRegistrationDataset
    Inherits DataSet
    
    Private tableRingApplication As RingApplicationDataTable
    
    Private tableParty As PartyDataTable
    
    Private tableDeclaration As DeclarationDataTable
    
    Private tableConviction As ConvictionDataTable
    
    Private tableParents As ParentsDataTable
    
    Private tableMother As MotherDataTable
    
    Private tableMotherSpecimen As MotherSpecimenDataTable
    
    Private tableMotherIDMark As MotherIDMarkDataTable
    
    Private tableFather As FatherDataTable
    
    Private tableFatherSpecimen As FatherSpecimenDataTable
    
    Private tableFatherIDMark As FatherIDMarkDataTable
    
    Private tableClutch As ClutchDataTable
    
    Private tableLastLaidDate As LastLaidDateDataTable
    
    Private tableEgg As EggDataTable
    
    Private tableEggRing As EggRingDataTable
    
    Private tableEggSpecimen As EggSpecimenDataTable
    
    Private tableAdult As AdultDataTable
    
    Private tableAdultFound As AdultFoundDataTable
    
    Private tableAdultFoundBird As AdultFoundBirdDataTable
    
    Private tableFoundBirdStatements As FoundBirdStatementsDataTable
    
    Private tableFoundBirdSpecimen As FoundBirdSpecimenDataTable
    
    Private tableFoundBirdIDMark As FoundBirdIDMarkDataTable
    
    Private tableFoundRing As FoundRingDataTable
    
    Private tableAdultImported As AdultImportedDataTable
    
    Private tableAdultImportedBird As AdultImportedBirdDataTable
    
    Private tableImportedStatements As ImportedStatementsDataTable
    
    Private tableImportedSpecimen As ImportedSpecimenDataTable
    
    Private tableImportedIDMarks As ImportedIDMarksDataTable
    
    Private tableQuarantine As QuarantineDataTable
    
    Private tablePermit As PermitDataTable
    
    Private tableSource As SourceDataTable
    
    Private tableImportedRing As ImportedRingDataTable
    
    Private tableImportedParents As ImportedParentsDataTable
    
    Private tableImportedMother As ImportedMotherDataTable
    
    Private tableImportedMotherSpecimen As ImportedMotherSpecimenDataTable
    
    Private tableImportedMotherIDMark As ImportedMotherIDMarkDataTable
    
    Private tableImportedFather As ImportedFatherDataTable
    
    Private tableImportedFatherSpecimen As ImportedFatherSpecimenDataTable
    
    Private tableImportedFatherIDMark As ImportedFatherIDMarkDataTable
    
    Private tableAdultBred As AdultBredDataTable
    
    Private tableAdultBredBird As AdultBredBirdDataTable
    
    Private tableBredStatements As BredStatementsDataTable
    
    Private tableBredSpecimen As BredSpecimenDataTable
    
    Private tableBredIDMarks As BredIDMarksDataTable
    
    Private tableBredRing As BredRingDataTable
    
    Private tableAdultOther As AdultOtherDataTable
    
    Private tableAdultOtherBird As AdultOtherBirdDataTable
    
    Private tableAdultOtherStatements As AdultOtherStatementsDataTable
    
    Private tableAdultOtherSpecimen As AdultOtherSpecimenDataTable
    
    Private tableOtherIDMarks As OtherIDMarksDataTable
    
    Private tableOtherRing As OtherRingDataTable
    
    Private relationDeclaration_Conviction As DataRelation
    
    Private relationParty_Declaration As DataRelation
    
    Private relationMother_MotherSpecimen As DataRelation
    
    Private relationMother_MotherIDMark As DataRelation
    
    Private relationFather_FatherSpecimen As DataRelation
    
    Private relationFather_FatherIDMark As DataRelation
    
    Private relationParents_Mother As DataRelation
    
    Private relationParents_Father As DataRelation
    
    Private relationEgg_EggRing As DataRelation
    
    Private relationEgg_EggSpecimen As DataRelation
    
    Private relationClutch_LastLaidDate As DataRelation
    
    Private relationClutch_Egg As DataRelation
    
    Private relationAdultFoundBird_FoundBirdStatements As DataRelation
    
    Private relationAdultFoundBird_FoundBirdSpecimen As DataRelation
    
    Private relationAdultFoundBird_FoundBirdIDMark As DataRelation
    
    Private relationAdultFoundBird_FoundRing As DataRelation
    
    Private relationAdultFound_AdultFoundBird As DataRelation
    
    Private relationImportedMother_ImportedMotherSpecimen As DataRelation
    
    Private relationImportedMother_ImportedMotherIDMark As DataRelation
    
    Private relationImportedFather_ImportedFatherSpecimen As DataRelation
    
    Private relationImportedFather_ImportedFatherIDMark As DataRelation
    
    Private relationImportedParents_ImportedMother As DataRelation
    
    Private relationImportedParents_ImportedFather As DataRelation
    
    Private relationAdultImportedBird_ImportedStatements As DataRelation
    
    Private relationAdultImportedBird_ImportedSpecimen As DataRelation
    
    Private relationAdultImportedBird_ImportedIDMarks As DataRelation
    
    Private relationAdultImportedBird_Quarantine As DataRelation
    
    Private relationAdultImportedBird_Permit As DataRelation
    
    Private relationAdultImportedBird_Source As DataRelation
    
    Private relationAdultImportedBird_ImportedRing As DataRelation
    
    Private relationAdultImportedBird_ImportedParents As DataRelation
    
    Private relationAdultImported_AdultImportedBird As DataRelation
    
    Private relationAdultBredBird_BredStatements As DataRelation
    
    Private relationAdultBredBird_BredSpecimen As DataRelation
    
    Private relationAdultBredBird_BredIDMarks As DataRelation
    
    Private relationAdultBredBird_BredRing As DataRelation
    
    Private relationAdultBred_AdultBredBird As DataRelation
    
    Private relationAdultOtherBird_AdultOtherStatements As DataRelation
    
    Private relationAdultOtherBird_AdultOtherSpecimen As DataRelation
    
    Private relationAdultOtherBird_OtherIDMarks As DataRelation
    
    Private relationAdultOtherBird_OtherRing As DataRelation
    
    Private relationAdultOther_AdultOtherBird As DataRelation
    
    Private relationAdult_AdultFound As DataRelation
    
    Private relationAdult_AdultImported As DataRelation
    
    Private relationAdult_AdultBred As DataRelation
    
    Private relationAdult_AdultOther As DataRelation
    
    Private relationRingApplication_Party As DataRelation
    
    Private relationRingApplication_Parents As DataRelation
    
    Private relationRingApplication_Clutch As DataRelation
    
    Private relationRingApplication_Adult As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("RingApplication")) Is Nothing) Then
                Me.Tables.Add(New RingApplicationDataTable(ds.Tables("RingApplication")))
            End If
            If (Not (ds.Tables("Party")) Is Nothing) Then
                Me.Tables.Add(New PartyDataTable(ds.Tables("Party")))
            End If
            If (Not (ds.Tables("Declaration")) Is Nothing) Then
                Me.Tables.Add(New DeclarationDataTable(ds.Tables("Declaration")))
            End If
            If (Not (ds.Tables("Conviction")) Is Nothing) Then
                Me.Tables.Add(New ConvictionDataTable(ds.Tables("Conviction")))
            End If
            If (Not (ds.Tables("Parents")) Is Nothing) Then
                Me.Tables.Add(New ParentsDataTable(ds.Tables("Parents")))
            End If
            If (Not (ds.Tables("Mother")) Is Nothing) Then
                Me.Tables.Add(New MotherDataTable(ds.Tables("Mother")))
            End If
            If (Not (ds.Tables("MotherSpecimen")) Is Nothing) Then
                Me.Tables.Add(New MotherSpecimenDataTable(ds.Tables("MotherSpecimen")))
            End If
            If (Not (ds.Tables("MotherIDMark")) Is Nothing) Then
                Me.Tables.Add(New MotherIDMarkDataTable(ds.Tables("MotherIDMark")))
            End If
            If (Not (ds.Tables("Father")) Is Nothing) Then
                Me.Tables.Add(New FatherDataTable(ds.Tables("Father")))
            End If
            If (Not (ds.Tables("FatherSpecimen")) Is Nothing) Then
                Me.Tables.Add(New FatherSpecimenDataTable(ds.Tables("FatherSpecimen")))
            End If
            If (Not (ds.Tables("FatherIDMark")) Is Nothing) Then
                Me.Tables.Add(New FatherIDMarkDataTable(ds.Tables("FatherIDMark")))
            End If
            If (Not (ds.Tables("Clutch")) Is Nothing) Then
                Me.Tables.Add(New ClutchDataTable(ds.Tables("Clutch")))
            End If
            If (Not (ds.Tables("LastLaidDate")) Is Nothing) Then
                Me.Tables.Add(New LastLaidDateDataTable(ds.Tables("LastLaidDate")))
            End If
            If (Not (ds.Tables("Egg")) Is Nothing) Then
                Me.Tables.Add(New EggDataTable(ds.Tables("Egg")))
            End If
            If (Not (ds.Tables("EggRing")) Is Nothing) Then
                Me.Tables.Add(New EggRingDataTable(ds.Tables("EggRing")))
            End If
            If (Not (ds.Tables("EggSpecimen")) Is Nothing) Then
                Me.Tables.Add(New EggSpecimenDataTable(ds.Tables("EggSpecimen")))
            End If
            If (Not (ds.Tables("Adult")) Is Nothing) Then
                Me.Tables.Add(New AdultDataTable(ds.Tables("Adult")))
            End If
            If (Not (ds.Tables("AdultFound")) Is Nothing) Then
                Me.Tables.Add(New AdultFoundDataTable(ds.Tables("AdultFound")))
            End If
            If (Not (ds.Tables("AdultFoundBird")) Is Nothing) Then
                Me.Tables.Add(New AdultFoundBirdDataTable(ds.Tables("AdultFoundBird")))
            End If
            If (Not (ds.Tables("FoundBirdStatements")) Is Nothing) Then
                Me.Tables.Add(New FoundBirdStatementsDataTable(ds.Tables("FoundBirdStatements")))
            End If
            If (Not (ds.Tables("FoundBirdSpecimen")) Is Nothing) Then
                Me.Tables.Add(New FoundBirdSpecimenDataTable(ds.Tables("FoundBirdSpecimen")))
            End If
            If (Not (ds.Tables("FoundBirdIDMark")) Is Nothing) Then
                Me.Tables.Add(New FoundBirdIDMarkDataTable(ds.Tables("FoundBirdIDMark")))
            End If
            If (Not (ds.Tables("FoundRing")) Is Nothing) Then
                Me.Tables.Add(New FoundRingDataTable(ds.Tables("FoundRing")))
            End If
            If (Not (ds.Tables("AdultImported")) Is Nothing) Then
                Me.Tables.Add(New AdultImportedDataTable(ds.Tables("AdultImported")))
            End If
            If (Not (ds.Tables("AdultImportedBird")) Is Nothing) Then
                Me.Tables.Add(New AdultImportedBirdDataTable(ds.Tables("AdultImportedBird")))
            End If
            If (Not (ds.Tables("ImportedStatements")) Is Nothing) Then
                Me.Tables.Add(New ImportedStatementsDataTable(ds.Tables("ImportedStatements")))
            End If
            If (Not (ds.Tables("ImportedSpecimen")) Is Nothing) Then
                Me.Tables.Add(New ImportedSpecimenDataTable(ds.Tables("ImportedSpecimen")))
            End If
            If (Not (ds.Tables("ImportedIDMarks")) Is Nothing) Then
                Me.Tables.Add(New ImportedIDMarksDataTable(ds.Tables("ImportedIDMarks")))
            End If
            If (Not (ds.Tables("Quarantine")) Is Nothing) Then
                Me.Tables.Add(New QuarantineDataTable(ds.Tables("Quarantine")))
            End If
            If (Not (ds.Tables("Permit")) Is Nothing) Then
                Me.Tables.Add(New PermitDataTable(ds.Tables("Permit")))
            End If
            If (Not (ds.Tables("Source")) Is Nothing) Then
                Me.Tables.Add(New SourceDataTable(ds.Tables("Source")))
            End If
            If (Not (ds.Tables("ImportedRing")) Is Nothing) Then
                Me.Tables.Add(New ImportedRingDataTable(ds.Tables("ImportedRing")))
            End If
            If (Not (ds.Tables("ImportedParents")) Is Nothing) Then
                Me.Tables.Add(New ImportedParentsDataTable(ds.Tables("ImportedParents")))
            End If
            If (Not (ds.Tables("ImportedMother")) Is Nothing) Then
                Me.Tables.Add(New ImportedMotherDataTable(ds.Tables("ImportedMother")))
            End If
            If (Not (ds.Tables("ImportedMotherSpecimen")) Is Nothing) Then
                Me.Tables.Add(New ImportedMotherSpecimenDataTable(ds.Tables("ImportedMotherSpecimen")))
            End If
            If (Not (ds.Tables("ImportedMotherIDMark")) Is Nothing) Then
                Me.Tables.Add(New ImportedMotherIDMarkDataTable(ds.Tables("ImportedMotherIDMark")))
            End If
            If (Not (ds.Tables("ImportedFather")) Is Nothing) Then
                Me.Tables.Add(New ImportedFatherDataTable(ds.Tables("ImportedFather")))
            End If
            If (Not (ds.Tables("ImportedFatherSpecimen")) Is Nothing) Then
                Me.Tables.Add(New ImportedFatherSpecimenDataTable(ds.Tables("ImportedFatherSpecimen")))
            End If
            If (Not (ds.Tables("ImportedFatherIDMark")) Is Nothing) Then
                Me.Tables.Add(New ImportedFatherIDMarkDataTable(ds.Tables("ImportedFatherIDMark")))
            End If
            If (Not (ds.Tables("AdultBred")) Is Nothing) Then
                Me.Tables.Add(New AdultBredDataTable(ds.Tables("AdultBred")))
            End If
            If (Not (ds.Tables("AdultBredBird")) Is Nothing) Then
                Me.Tables.Add(New AdultBredBirdDataTable(ds.Tables("AdultBredBird")))
            End If
            If (Not (ds.Tables("BredStatements")) Is Nothing) Then
                Me.Tables.Add(New BredStatementsDataTable(ds.Tables("BredStatements")))
            End If
            If (Not (ds.Tables("BredSpecimen")) Is Nothing) Then
                Me.Tables.Add(New BredSpecimenDataTable(ds.Tables("BredSpecimen")))
            End If
            If (Not (ds.Tables("BredIDMarks")) Is Nothing) Then
                Me.Tables.Add(New BredIDMarksDataTable(ds.Tables("BredIDMarks")))
            End If
            If (Not (ds.Tables("BredRing")) Is Nothing) Then
                Me.Tables.Add(New BredRingDataTable(ds.Tables("BredRing")))
            End If
            If (Not (ds.Tables("AdultOther")) Is Nothing) Then
                Me.Tables.Add(New AdultOtherDataTable(ds.Tables("AdultOther")))
            End If
            If (Not (ds.Tables("AdultOtherBird")) Is Nothing) Then
                Me.Tables.Add(New AdultOtherBirdDataTable(ds.Tables("AdultOtherBird")))
            End If
            If (Not (ds.Tables("AdultOtherStatements")) Is Nothing) Then
                Me.Tables.Add(New AdultOtherStatementsDataTable(ds.Tables("AdultOtherStatements")))
            End If
            If (Not (ds.Tables("AdultOtherSpecimen")) Is Nothing) Then
                Me.Tables.Add(New AdultOtherSpecimenDataTable(ds.Tables("AdultOtherSpecimen")))
            End If
            If (Not (ds.Tables("OtherIDMarks")) Is Nothing) Then
                Me.Tables.Add(New OtherIDMarksDataTable(ds.Tables("OtherIDMarks")))
            End If
            If (Not (ds.Tables("OtherRing")) Is Nothing) Then
                Me.Tables.Add(New OtherRingDataTable(ds.Tables("OtherRing")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RingApplication As RingApplicationDataTable
        Get
            Return Me.tableRingApplication
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Party As PartyDataTable
        Get
            Return Me.tableParty
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Declaration As DeclarationDataTable
        Get
            Return Me.tableDeclaration
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Conviction As ConvictionDataTable
        Get
            Return Me.tableConviction
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Parents As ParentsDataTable
        Get
            Return Me.tableParents
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Mother As MotherDataTable
        Get
            Return Me.tableMother
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MotherSpecimen As MotherSpecimenDataTable
        Get
            Return Me.tableMotherSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MotherIDMark As MotherIDMarkDataTable
        Get
            Return Me.tableMotherIDMark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Father As FatherDataTable
        Get
            Return Me.tableFather
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FatherSpecimen As FatherSpecimenDataTable
        Get
            Return Me.tableFatherSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FatherIDMark As FatherIDMarkDataTable
        Get
            Return Me.tableFatherIDMark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clutch As ClutchDataTable
        Get
            Return Me.tableClutch
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LastLaidDate As LastLaidDateDataTable
        Get
            Return Me.tableLastLaidDate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Egg As EggDataTable
        Get
            Return Me.tableEgg
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EggRing As EggRingDataTable
        Get
            Return Me.tableEggRing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EggSpecimen As EggSpecimenDataTable
        Get
            Return Me.tableEggSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Adult As AdultDataTable
        Get
            Return Me.tableAdult
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultFound As AdultFoundDataTable
        Get
            Return Me.tableAdultFound
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultFoundBird As AdultFoundBirdDataTable
        Get
            Return Me.tableAdultFoundBird
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FoundBirdStatements As FoundBirdStatementsDataTable
        Get
            Return Me.tableFoundBirdStatements
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FoundBirdSpecimen As FoundBirdSpecimenDataTable
        Get
            Return Me.tableFoundBirdSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FoundBirdIDMark As FoundBirdIDMarkDataTable
        Get
            Return Me.tableFoundBirdIDMark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FoundRing As FoundRingDataTable
        Get
            Return Me.tableFoundRing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultImported As AdultImportedDataTable
        Get
            Return Me.tableAdultImported
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultImportedBird As AdultImportedBirdDataTable
        Get
            Return Me.tableAdultImportedBird
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedStatements As ImportedStatementsDataTable
        Get
            Return Me.tableImportedStatements
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedSpecimen As ImportedSpecimenDataTable
        Get
            Return Me.tableImportedSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedIDMarks As ImportedIDMarksDataTable
        Get
            Return Me.tableImportedIDMarks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Quarantine As QuarantineDataTable
        Get
            Return Me.tableQuarantine
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Permit As PermitDataTable
        Get
            Return Me.tablePermit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Source As SourceDataTable
        Get
            Return Me.tableSource
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedRing As ImportedRingDataTable
        Get
            Return Me.tableImportedRing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedParents As ImportedParentsDataTable
        Get
            Return Me.tableImportedParents
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedMother As ImportedMotherDataTable
        Get
            Return Me.tableImportedMother
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedMotherSpecimen As ImportedMotherSpecimenDataTable
        Get
            Return Me.tableImportedMotherSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedMotherIDMark As ImportedMotherIDMarkDataTable
        Get
            Return Me.tableImportedMotherIDMark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedFather As ImportedFatherDataTable
        Get
            Return Me.tableImportedFather
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedFatherSpecimen As ImportedFatherSpecimenDataTable
        Get
            Return Me.tableImportedFatherSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ImportedFatherIDMark As ImportedFatherIDMarkDataTable
        Get
            Return Me.tableImportedFatherIDMark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultBred As AdultBredDataTable
        Get
            Return Me.tableAdultBred
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultBredBird As AdultBredBirdDataTable
        Get
            Return Me.tableAdultBredBird
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BredStatements As BredStatementsDataTable
        Get
            Return Me.tableBredStatements
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BredSpecimen As BredSpecimenDataTable
        Get
            Return Me.tableBredSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BredIDMarks As BredIDMarksDataTable
        Get
            Return Me.tableBredIDMarks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BredRing As BredRingDataTable
        Get
            Return Me.tableBredRing
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultOther As AdultOtherDataTable
        Get
            Return Me.tableAdultOther
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultOtherBird As AdultOtherBirdDataTable
        Get
            Return Me.tableAdultOtherBird
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultOtherStatements As AdultOtherStatementsDataTable
        Get
            Return Me.tableAdultOtherStatements
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AdultOtherSpecimen As AdultOtherSpecimenDataTable
        Get
            Return Me.tableAdultOtherSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OtherIDMarks As OtherIDMarksDataTable
        Get
            Return Me.tableOtherIDMarks
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OtherRing As OtherRingDataTable
        Get
            Return Me.tableOtherRing
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BirdRegistrationDataset = CType(MyBase.Clone,BirdRegistrationDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("RingApplication")) Is Nothing) Then
            Me.Tables.Add(New RingApplicationDataTable(ds.Tables("RingApplication")))
        End If
        If (Not (ds.Tables("Party")) Is Nothing) Then
            Me.Tables.Add(New PartyDataTable(ds.Tables("Party")))
        End If
        If (Not (ds.Tables("Declaration")) Is Nothing) Then
            Me.Tables.Add(New DeclarationDataTable(ds.Tables("Declaration")))
        End If
        If (Not (ds.Tables("Conviction")) Is Nothing) Then
            Me.Tables.Add(New ConvictionDataTable(ds.Tables("Conviction")))
        End If
        If (Not (ds.Tables("Parents")) Is Nothing) Then
            Me.Tables.Add(New ParentsDataTable(ds.Tables("Parents")))
        End If
        If (Not (ds.Tables("Mother")) Is Nothing) Then
            Me.Tables.Add(New MotherDataTable(ds.Tables("Mother")))
        End If
        If (Not (ds.Tables("MotherSpecimen")) Is Nothing) Then
            Me.Tables.Add(New MotherSpecimenDataTable(ds.Tables("MotherSpecimen")))
        End If
        If (Not (ds.Tables("MotherIDMark")) Is Nothing) Then
            Me.Tables.Add(New MotherIDMarkDataTable(ds.Tables("MotherIDMark")))
        End If
        If (Not (ds.Tables("Father")) Is Nothing) Then
            Me.Tables.Add(New FatherDataTable(ds.Tables("Father")))
        End If
        If (Not (ds.Tables("FatherSpecimen")) Is Nothing) Then
            Me.Tables.Add(New FatherSpecimenDataTable(ds.Tables("FatherSpecimen")))
        End If
        If (Not (ds.Tables("FatherIDMark")) Is Nothing) Then
            Me.Tables.Add(New FatherIDMarkDataTable(ds.Tables("FatherIDMark")))
        End If
        If (Not (ds.Tables("Clutch")) Is Nothing) Then
            Me.Tables.Add(New ClutchDataTable(ds.Tables("Clutch")))
        End If
        If (Not (ds.Tables("LastLaidDate")) Is Nothing) Then
            Me.Tables.Add(New LastLaidDateDataTable(ds.Tables("LastLaidDate")))
        End If
        If (Not (ds.Tables("Egg")) Is Nothing) Then
            Me.Tables.Add(New EggDataTable(ds.Tables("Egg")))
        End If
        If (Not (ds.Tables("EggRing")) Is Nothing) Then
            Me.Tables.Add(New EggRingDataTable(ds.Tables("EggRing")))
        End If
        If (Not (ds.Tables("EggSpecimen")) Is Nothing) Then
            Me.Tables.Add(New EggSpecimenDataTable(ds.Tables("EggSpecimen")))
        End If
        If (Not (ds.Tables("Adult")) Is Nothing) Then
            Me.Tables.Add(New AdultDataTable(ds.Tables("Adult")))
        End If
        If (Not (ds.Tables("AdultFound")) Is Nothing) Then
            Me.Tables.Add(New AdultFoundDataTable(ds.Tables("AdultFound")))
        End If
        If (Not (ds.Tables("AdultFoundBird")) Is Nothing) Then
            Me.Tables.Add(New AdultFoundBirdDataTable(ds.Tables("AdultFoundBird")))
        End If
        If (Not (ds.Tables("FoundBirdStatements")) Is Nothing) Then
            Me.Tables.Add(New FoundBirdStatementsDataTable(ds.Tables("FoundBirdStatements")))
        End If
        If (Not (ds.Tables("FoundBirdSpecimen")) Is Nothing) Then
            Me.Tables.Add(New FoundBirdSpecimenDataTable(ds.Tables("FoundBirdSpecimen")))
        End If
        If (Not (ds.Tables("FoundBirdIDMark")) Is Nothing) Then
            Me.Tables.Add(New FoundBirdIDMarkDataTable(ds.Tables("FoundBirdIDMark")))
        End If
        If (Not (ds.Tables("FoundRing")) Is Nothing) Then
            Me.Tables.Add(New FoundRingDataTable(ds.Tables("FoundRing")))
        End If
        If (Not (ds.Tables("AdultImported")) Is Nothing) Then
            Me.Tables.Add(New AdultImportedDataTable(ds.Tables("AdultImported")))
        End If
        If (Not (ds.Tables("AdultImportedBird")) Is Nothing) Then
            Me.Tables.Add(New AdultImportedBirdDataTable(ds.Tables("AdultImportedBird")))
        End If
        If (Not (ds.Tables("ImportedStatements")) Is Nothing) Then
            Me.Tables.Add(New ImportedStatementsDataTable(ds.Tables("ImportedStatements")))
        End If
        If (Not (ds.Tables("ImportedSpecimen")) Is Nothing) Then
            Me.Tables.Add(New ImportedSpecimenDataTable(ds.Tables("ImportedSpecimen")))
        End If
        If (Not (ds.Tables("ImportedIDMarks")) Is Nothing) Then
            Me.Tables.Add(New ImportedIDMarksDataTable(ds.Tables("ImportedIDMarks")))
        End If
        If (Not (ds.Tables("Quarantine")) Is Nothing) Then
            Me.Tables.Add(New QuarantineDataTable(ds.Tables("Quarantine")))
        End If
        If (Not (ds.Tables("Permit")) Is Nothing) Then
            Me.Tables.Add(New PermitDataTable(ds.Tables("Permit")))
        End If
        If (Not (ds.Tables("Source")) Is Nothing) Then
            Me.Tables.Add(New SourceDataTable(ds.Tables("Source")))
        End If
        If (Not (ds.Tables("ImportedRing")) Is Nothing) Then
            Me.Tables.Add(New ImportedRingDataTable(ds.Tables("ImportedRing")))
        End If
        If (Not (ds.Tables("ImportedParents")) Is Nothing) Then
            Me.Tables.Add(New ImportedParentsDataTable(ds.Tables("ImportedParents")))
        End If
        If (Not (ds.Tables("ImportedMother")) Is Nothing) Then
            Me.Tables.Add(New ImportedMotherDataTable(ds.Tables("ImportedMother")))
        End If
        If (Not (ds.Tables("ImportedMotherSpecimen")) Is Nothing) Then
            Me.Tables.Add(New ImportedMotherSpecimenDataTable(ds.Tables("ImportedMotherSpecimen")))
        End If
        If (Not (ds.Tables("ImportedMotherIDMark")) Is Nothing) Then
            Me.Tables.Add(New ImportedMotherIDMarkDataTable(ds.Tables("ImportedMotherIDMark")))
        End If
        If (Not (ds.Tables("ImportedFather")) Is Nothing) Then
            Me.Tables.Add(New ImportedFatherDataTable(ds.Tables("ImportedFather")))
        End If
        If (Not (ds.Tables("ImportedFatherSpecimen")) Is Nothing) Then
            Me.Tables.Add(New ImportedFatherSpecimenDataTable(ds.Tables("ImportedFatherSpecimen")))
        End If
        If (Not (ds.Tables("ImportedFatherIDMark")) Is Nothing) Then
            Me.Tables.Add(New ImportedFatherIDMarkDataTable(ds.Tables("ImportedFatherIDMark")))
        End If
        If (Not (ds.Tables("AdultBred")) Is Nothing) Then
            Me.Tables.Add(New AdultBredDataTable(ds.Tables("AdultBred")))
        End If
        If (Not (ds.Tables("AdultBredBird")) Is Nothing) Then
            Me.Tables.Add(New AdultBredBirdDataTable(ds.Tables("AdultBredBird")))
        End If
        If (Not (ds.Tables("BredStatements")) Is Nothing) Then
            Me.Tables.Add(New BredStatementsDataTable(ds.Tables("BredStatements")))
        End If
        If (Not (ds.Tables("BredSpecimen")) Is Nothing) Then
            Me.Tables.Add(New BredSpecimenDataTable(ds.Tables("BredSpecimen")))
        End If
        If (Not (ds.Tables("BredIDMarks")) Is Nothing) Then
            Me.Tables.Add(New BredIDMarksDataTable(ds.Tables("BredIDMarks")))
        End If
        If (Not (ds.Tables("BredRing")) Is Nothing) Then
            Me.Tables.Add(New BredRingDataTable(ds.Tables("BredRing")))
        End If
        If (Not (ds.Tables("AdultOther")) Is Nothing) Then
            Me.Tables.Add(New AdultOtherDataTable(ds.Tables("AdultOther")))
        End If
        If (Not (ds.Tables("AdultOtherBird")) Is Nothing) Then
            Me.Tables.Add(New AdultOtherBirdDataTable(ds.Tables("AdultOtherBird")))
        End If
        If (Not (ds.Tables("AdultOtherStatements")) Is Nothing) Then
            Me.Tables.Add(New AdultOtherStatementsDataTable(ds.Tables("AdultOtherStatements")))
        End If
        If (Not (ds.Tables("AdultOtherSpecimen")) Is Nothing) Then
            Me.Tables.Add(New AdultOtherSpecimenDataTable(ds.Tables("AdultOtherSpecimen")))
        End If
        If (Not (ds.Tables("OtherIDMarks")) Is Nothing) Then
            Me.Tables.Add(New OtherIDMarksDataTable(ds.Tables("OtherIDMarks")))
        End If
        If (Not (ds.Tables("OtherRing")) Is Nothing) Then
            Me.Tables.Add(New OtherRingDataTable(ds.Tables("OtherRing")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableRingApplication = CType(Me.Tables("RingApplication"),RingApplicationDataTable)
        If (Not (Me.tableRingApplication) Is Nothing) Then
            Me.tableRingApplication.InitVars
        End If
        Me.tableParty = CType(Me.Tables("Party"),PartyDataTable)
        If (Not (Me.tableParty) Is Nothing) Then
            Me.tableParty.InitVars
        End If
        Me.tableDeclaration = CType(Me.Tables("Declaration"),DeclarationDataTable)
        If (Not (Me.tableDeclaration) Is Nothing) Then
            Me.tableDeclaration.InitVars
        End If
        Me.tableConviction = CType(Me.Tables("Conviction"),ConvictionDataTable)
        If (Not (Me.tableConviction) Is Nothing) Then
            Me.tableConviction.InitVars
        End If
        Me.tableParents = CType(Me.Tables("Parents"),ParentsDataTable)
        If (Not (Me.tableParents) Is Nothing) Then
            Me.tableParents.InitVars
        End If
        Me.tableMother = CType(Me.Tables("Mother"),MotherDataTable)
        If (Not (Me.tableMother) Is Nothing) Then
            Me.tableMother.InitVars
        End If
        Me.tableMotherSpecimen = CType(Me.Tables("MotherSpecimen"),MotherSpecimenDataTable)
        If (Not (Me.tableMotherSpecimen) Is Nothing) Then
            Me.tableMotherSpecimen.InitVars
        End If
        Me.tableMotherIDMark = CType(Me.Tables("MotherIDMark"),MotherIDMarkDataTable)
        If (Not (Me.tableMotherIDMark) Is Nothing) Then
            Me.tableMotherIDMark.InitVars
        End If
        Me.tableFather = CType(Me.Tables("Father"),FatherDataTable)
        If (Not (Me.tableFather) Is Nothing) Then
            Me.tableFather.InitVars
        End If
        Me.tableFatherSpecimen = CType(Me.Tables("FatherSpecimen"),FatherSpecimenDataTable)
        If (Not (Me.tableFatherSpecimen) Is Nothing) Then
            Me.tableFatherSpecimen.InitVars
        End If
        Me.tableFatherIDMark = CType(Me.Tables("FatherIDMark"),FatherIDMarkDataTable)
        If (Not (Me.tableFatherIDMark) Is Nothing) Then
            Me.tableFatherIDMark.InitVars
        End If
        Me.tableClutch = CType(Me.Tables("Clutch"),ClutchDataTable)
        If (Not (Me.tableClutch) Is Nothing) Then
            Me.tableClutch.InitVars
        End If
        Me.tableLastLaidDate = CType(Me.Tables("LastLaidDate"),LastLaidDateDataTable)
        If (Not (Me.tableLastLaidDate) Is Nothing) Then
            Me.tableLastLaidDate.InitVars
        End If
        Me.tableEgg = CType(Me.Tables("Egg"),EggDataTable)
        If (Not (Me.tableEgg) Is Nothing) Then
            Me.tableEgg.InitVars
        End If
        Me.tableEggRing = CType(Me.Tables("EggRing"),EggRingDataTable)
        If (Not (Me.tableEggRing) Is Nothing) Then
            Me.tableEggRing.InitVars
        End If
        Me.tableEggSpecimen = CType(Me.Tables("EggSpecimen"),EggSpecimenDataTable)
        If (Not (Me.tableEggSpecimen) Is Nothing) Then
            Me.tableEggSpecimen.InitVars
        End If
        Me.tableAdult = CType(Me.Tables("Adult"),AdultDataTable)
        If (Not (Me.tableAdult) Is Nothing) Then
            Me.tableAdult.InitVars
        End If
        Me.tableAdultFound = CType(Me.Tables("AdultFound"),AdultFoundDataTable)
        If (Not (Me.tableAdultFound) Is Nothing) Then
            Me.tableAdultFound.InitVars
        End If
        Me.tableAdultFoundBird = CType(Me.Tables("AdultFoundBird"),AdultFoundBirdDataTable)
        If (Not (Me.tableAdultFoundBird) Is Nothing) Then
            Me.tableAdultFoundBird.InitVars
        End If
        Me.tableFoundBirdStatements = CType(Me.Tables("FoundBirdStatements"),FoundBirdStatementsDataTable)
        If (Not (Me.tableFoundBirdStatements) Is Nothing) Then
            Me.tableFoundBirdStatements.InitVars
        End If
        Me.tableFoundBirdSpecimen = CType(Me.Tables("FoundBirdSpecimen"),FoundBirdSpecimenDataTable)
        If (Not (Me.tableFoundBirdSpecimen) Is Nothing) Then
            Me.tableFoundBirdSpecimen.InitVars
        End If
        Me.tableFoundBirdIDMark = CType(Me.Tables("FoundBirdIDMark"),FoundBirdIDMarkDataTable)
        If (Not (Me.tableFoundBirdIDMark) Is Nothing) Then
            Me.tableFoundBirdIDMark.InitVars
        End If
        Me.tableFoundRing = CType(Me.Tables("FoundRing"),FoundRingDataTable)
        If (Not (Me.tableFoundRing) Is Nothing) Then
            Me.tableFoundRing.InitVars
        End If
        Me.tableAdultImported = CType(Me.Tables("AdultImported"),AdultImportedDataTable)
        If (Not (Me.tableAdultImported) Is Nothing) Then
            Me.tableAdultImported.InitVars
        End If
        Me.tableAdultImportedBird = CType(Me.Tables("AdultImportedBird"),AdultImportedBirdDataTable)
        If (Not (Me.tableAdultImportedBird) Is Nothing) Then
            Me.tableAdultImportedBird.InitVars
        End If
        Me.tableImportedStatements = CType(Me.Tables("ImportedStatements"),ImportedStatementsDataTable)
        If (Not (Me.tableImportedStatements) Is Nothing) Then
            Me.tableImportedStatements.InitVars
        End If
        Me.tableImportedSpecimen = CType(Me.Tables("ImportedSpecimen"),ImportedSpecimenDataTable)
        If (Not (Me.tableImportedSpecimen) Is Nothing) Then
            Me.tableImportedSpecimen.InitVars
        End If
        Me.tableImportedIDMarks = CType(Me.Tables("ImportedIDMarks"),ImportedIDMarksDataTable)
        If (Not (Me.tableImportedIDMarks) Is Nothing) Then
            Me.tableImportedIDMarks.InitVars
        End If
        Me.tableQuarantine = CType(Me.Tables("Quarantine"),QuarantineDataTable)
        If (Not (Me.tableQuarantine) Is Nothing) Then
            Me.tableQuarantine.InitVars
        End If
        Me.tablePermit = CType(Me.Tables("Permit"),PermitDataTable)
        If (Not (Me.tablePermit) Is Nothing) Then
            Me.tablePermit.InitVars
        End If
        Me.tableSource = CType(Me.Tables("Source"),SourceDataTable)
        If (Not (Me.tableSource) Is Nothing) Then
            Me.tableSource.InitVars
        End If
        Me.tableImportedRing = CType(Me.Tables("ImportedRing"),ImportedRingDataTable)
        If (Not (Me.tableImportedRing) Is Nothing) Then
            Me.tableImportedRing.InitVars
        End If
        Me.tableImportedParents = CType(Me.Tables("ImportedParents"),ImportedParentsDataTable)
        If (Not (Me.tableImportedParents) Is Nothing) Then
            Me.tableImportedParents.InitVars
        End If
        Me.tableImportedMother = CType(Me.Tables("ImportedMother"),ImportedMotherDataTable)
        If (Not (Me.tableImportedMother) Is Nothing) Then
            Me.tableImportedMother.InitVars
        End If
        Me.tableImportedMotherSpecimen = CType(Me.Tables("ImportedMotherSpecimen"),ImportedMotherSpecimenDataTable)
        If (Not (Me.tableImportedMotherSpecimen) Is Nothing) Then
            Me.tableImportedMotherSpecimen.InitVars
        End If
        Me.tableImportedMotherIDMark = CType(Me.Tables("ImportedMotherIDMark"),ImportedMotherIDMarkDataTable)
        If (Not (Me.tableImportedMotherIDMark) Is Nothing) Then
            Me.tableImportedMotherIDMark.InitVars
        End If
        Me.tableImportedFather = CType(Me.Tables("ImportedFather"),ImportedFatherDataTable)
        If (Not (Me.tableImportedFather) Is Nothing) Then
            Me.tableImportedFather.InitVars
        End If
        Me.tableImportedFatherSpecimen = CType(Me.Tables("ImportedFatherSpecimen"),ImportedFatherSpecimenDataTable)
        If (Not (Me.tableImportedFatherSpecimen) Is Nothing) Then
            Me.tableImportedFatherSpecimen.InitVars
        End If
        Me.tableImportedFatherIDMark = CType(Me.Tables("ImportedFatherIDMark"),ImportedFatherIDMarkDataTable)
        If (Not (Me.tableImportedFatherIDMark) Is Nothing) Then
            Me.tableImportedFatherIDMark.InitVars
        End If
        Me.tableAdultBred = CType(Me.Tables("AdultBred"),AdultBredDataTable)
        If (Not (Me.tableAdultBred) Is Nothing) Then
            Me.tableAdultBred.InitVars
        End If
        Me.tableAdultBredBird = CType(Me.Tables("AdultBredBird"),AdultBredBirdDataTable)
        If (Not (Me.tableAdultBredBird) Is Nothing) Then
            Me.tableAdultBredBird.InitVars
        End If
        Me.tableBredStatements = CType(Me.Tables("BredStatements"),BredStatementsDataTable)
        If (Not (Me.tableBredStatements) Is Nothing) Then
            Me.tableBredStatements.InitVars
        End If
        Me.tableBredSpecimen = CType(Me.Tables("BredSpecimen"),BredSpecimenDataTable)
        If (Not (Me.tableBredSpecimen) Is Nothing) Then
            Me.tableBredSpecimen.InitVars
        End If
        Me.tableBredIDMarks = CType(Me.Tables("BredIDMarks"),BredIDMarksDataTable)
        If (Not (Me.tableBredIDMarks) Is Nothing) Then
            Me.tableBredIDMarks.InitVars
        End If
        Me.tableBredRing = CType(Me.Tables("BredRing"),BredRingDataTable)
        If (Not (Me.tableBredRing) Is Nothing) Then
            Me.tableBredRing.InitVars
        End If
        Me.tableAdultOther = CType(Me.Tables("AdultOther"),AdultOtherDataTable)
        If (Not (Me.tableAdultOther) Is Nothing) Then
            Me.tableAdultOther.InitVars
        End If
        Me.tableAdultOtherBird = CType(Me.Tables("AdultOtherBird"),AdultOtherBirdDataTable)
        If (Not (Me.tableAdultOtherBird) Is Nothing) Then
            Me.tableAdultOtherBird.InitVars
        End If
        Me.tableAdultOtherStatements = CType(Me.Tables("AdultOtherStatements"),AdultOtherStatementsDataTable)
        If (Not (Me.tableAdultOtherStatements) Is Nothing) Then
            Me.tableAdultOtherStatements.InitVars
        End If
        Me.tableAdultOtherSpecimen = CType(Me.Tables("AdultOtherSpecimen"),AdultOtherSpecimenDataTable)
        If (Not (Me.tableAdultOtherSpecimen) Is Nothing) Then
            Me.tableAdultOtherSpecimen.InitVars
        End If
        Me.tableOtherIDMarks = CType(Me.Tables("OtherIDMarks"),OtherIDMarksDataTable)
        If (Not (Me.tableOtherIDMarks) Is Nothing) Then
            Me.tableOtherIDMarks.InitVars
        End If
        Me.tableOtherRing = CType(Me.Tables("OtherRing"),OtherRingDataTable)
        If (Not (Me.tableOtherRing) Is Nothing) Then
            Me.tableOtherRing.InitVars
        End If
        Me.relationDeclaration_Conviction = Me.Relations("Declaration_Conviction")
        Me.relationParty_Declaration = Me.Relations("Party_Declaration")
        Me.relationMother_MotherSpecimen = Me.Relations("Mother_MotherSpecimen")
        Me.relationMother_MotherIDMark = Me.Relations("Mother_MotherIDMark")
        Me.relationFather_FatherSpecimen = Me.Relations("Father_FatherSpecimen")
        Me.relationFather_FatherIDMark = Me.Relations("Father_FatherIDMark")
        Me.relationParents_Mother = Me.Relations("Parents_Mother")
        Me.relationParents_Father = Me.Relations("Parents_Father")
        Me.relationEgg_EggRing = Me.Relations("Egg_EggRing")
        Me.relationEgg_EggSpecimen = Me.Relations("Egg_EggSpecimen")
        Me.relationClutch_LastLaidDate = Me.Relations("Clutch_LastLaidDate")
        Me.relationClutch_Egg = Me.Relations("Clutch_Egg")
        Me.relationAdultFoundBird_FoundBirdStatements = Me.Relations("AdultFoundBird_FoundBirdStatements")
        Me.relationAdultFoundBird_FoundBirdSpecimen = Me.Relations("AdultFoundBird_FoundBirdSpecimen")
        Me.relationAdultFoundBird_FoundBirdIDMark = Me.Relations("AdultFoundBird_FoundBirdIDMark")
        Me.relationAdultFoundBird_FoundRing = Me.Relations("AdultFoundBird_FoundRing")
        Me.relationAdultFound_AdultFoundBird = Me.Relations("AdultFound_AdultFoundBird")
        Me.relationImportedMother_ImportedMotherSpecimen = Me.Relations("ImportedMother_ImportedMotherSpecimen")
        Me.relationImportedMother_ImportedMotherIDMark = Me.Relations("ImportedMother_ImportedMotherIDMark")
        Me.relationImportedFather_ImportedFatherSpecimen = Me.Relations("ImportedFather_ImportedFatherSpecimen")
        Me.relationImportedFather_ImportedFatherIDMark = Me.Relations("ImportedFather_ImportedFatherIDMark")
        Me.relationImportedParents_ImportedMother = Me.Relations("ImportedParents_ImportedMother")
        Me.relationImportedParents_ImportedFather = Me.Relations("ImportedParents_ImportedFather")
        Me.relationAdultImportedBird_ImportedStatements = Me.Relations("AdultImportedBird_ImportedStatements")
        Me.relationAdultImportedBird_ImportedSpecimen = Me.Relations("AdultImportedBird_ImportedSpecimen")
        Me.relationAdultImportedBird_ImportedIDMarks = Me.Relations("AdultImportedBird_ImportedIDMarks")
        Me.relationAdultImportedBird_Quarantine = Me.Relations("AdultImportedBird_Quarantine")
        Me.relationAdultImportedBird_Permit = Me.Relations("AdultImportedBird_Permit")
        Me.relationAdultImportedBird_Source = Me.Relations("AdultImportedBird_Source")
        Me.relationAdultImportedBird_ImportedRing = Me.Relations("AdultImportedBird_ImportedRing")
        Me.relationAdultImportedBird_ImportedParents = Me.Relations("AdultImportedBird_ImportedParents")
        Me.relationAdultImported_AdultImportedBird = Me.Relations("AdultImported_AdultImportedBird")
        Me.relationAdultBredBird_BredStatements = Me.Relations("AdultBredBird_BredStatements")
        Me.relationAdultBredBird_BredSpecimen = Me.Relations("AdultBredBird_BredSpecimen")
        Me.relationAdultBredBird_BredIDMarks = Me.Relations("AdultBredBird_BredIDMarks")
        Me.relationAdultBredBird_BredRing = Me.Relations("AdultBredBird_BredRing")
        Me.relationAdultBred_AdultBredBird = Me.Relations("AdultBred_AdultBredBird")
        Me.relationAdultOtherBird_AdultOtherStatements = Me.Relations("AdultOtherBird_AdultOtherStatements")
        Me.relationAdultOtherBird_AdultOtherSpecimen = Me.Relations("AdultOtherBird_AdultOtherSpecimen")
        Me.relationAdultOtherBird_OtherIDMarks = Me.Relations("AdultOtherBird_OtherIDMarks")
        Me.relationAdultOtherBird_OtherRing = Me.Relations("AdultOtherBird_OtherRing")
        Me.relationAdultOther_AdultOtherBird = Me.Relations("AdultOther_AdultOtherBird")
        Me.relationAdult_AdultFound = Me.Relations("Adult_AdultFound")
        Me.relationAdult_AdultImported = Me.Relations("Adult_AdultImported")
        Me.relationAdult_AdultBred = Me.Relations("Adult_AdultBred")
        Me.relationAdult_AdultOther = Me.Relations("Adult_AdultOther")
        Me.relationRingApplication_Party = Me.Relations("RingApplication_Party")
        Me.relationRingApplication_Parents = Me.Relations("RingApplication_Parents")
        Me.relationRingApplication_Clutch = Me.Relations("RingApplication_Clutch")
        Me.relationRingApplication_Adult = Me.Relations("RingApplication_Adult")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BirdRegistrationDataset"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-GB")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableRingApplication = New RingApplicationDataTable
        Me.Tables.Add(Me.tableRingApplication)
        Me.tableParty = New PartyDataTable
        Me.Tables.Add(Me.tableParty)
        Me.tableDeclaration = New DeclarationDataTable
        Me.Tables.Add(Me.tableDeclaration)
        Me.tableConviction = New ConvictionDataTable
        Me.Tables.Add(Me.tableConviction)
        Me.tableParents = New ParentsDataTable
        Me.Tables.Add(Me.tableParents)
        Me.tableMother = New MotherDataTable
        Me.Tables.Add(Me.tableMother)
        Me.tableMotherSpecimen = New MotherSpecimenDataTable
        Me.Tables.Add(Me.tableMotherSpecimen)
        Me.tableMotherIDMark = New MotherIDMarkDataTable
        Me.Tables.Add(Me.tableMotherIDMark)
        Me.tableFather = New FatherDataTable
        Me.Tables.Add(Me.tableFather)
        Me.tableFatherSpecimen = New FatherSpecimenDataTable
        Me.Tables.Add(Me.tableFatherSpecimen)
        Me.tableFatherIDMark = New FatherIDMarkDataTable
        Me.Tables.Add(Me.tableFatherIDMark)
        Me.tableClutch = New ClutchDataTable
        Me.Tables.Add(Me.tableClutch)
        Me.tableLastLaidDate = New LastLaidDateDataTable
        Me.Tables.Add(Me.tableLastLaidDate)
        Me.tableEgg = New EggDataTable
        Me.Tables.Add(Me.tableEgg)
        Me.tableEggRing = New EggRingDataTable
        Me.Tables.Add(Me.tableEggRing)
        Me.tableEggSpecimen = New EggSpecimenDataTable
        Me.Tables.Add(Me.tableEggSpecimen)
        Me.tableAdult = New AdultDataTable
        Me.Tables.Add(Me.tableAdult)
        Me.tableAdultFound = New AdultFoundDataTable
        Me.Tables.Add(Me.tableAdultFound)
        Me.tableAdultFoundBird = New AdultFoundBirdDataTable
        Me.Tables.Add(Me.tableAdultFoundBird)
        Me.tableFoundBirdStatements = New FoundBirdStatementsDataTable
        Me.Tables.Add(Me.tableFoundBirdStatements)
        Me.tableFoundBirdSpecimen = New FoundBirdSpecimenDataTable
        Me.Tables.Add(Me.tableFoundBirdSpecimen)
        Me.tableFoundBirdIDMark = New FoundBirdIDMarkDataTable
        Me.Tables.Add(Me.tableFoundBirdIDMark)
        Me.tableFoundRing = New FoundRingDataTable
        Me.Tables.Add(Me.tableFoundRing)
        Me.tableAdultImported = New AdultImportedDataTable
        Me.Tables.Add(Me.tableAdultImported)
        Me.tableAdultImportedBird = New AdultImportedBirdDataTable
        Me.Tables.Add(Me.tableAdultImportedBird)
        Me.tableImportedStatements = New ImportedStatementsDataTable
        Me.Tables.Add(Me.tableImportedStatements)
        Me.tableImportedSpecimen = New ImportedSpecimenDataTable
        Me.Tables.Add(Me.tableImportedSpecimen)
        Me.tableImportedIDMarks = New ImportedIDMarksDataTable
        Me.Tables.Add(Me.tableImportedIDMarks)
        Me.tableQuarantine = New QuarantineDataTable
        Me.Tables.Add(Me.tableQuarantine)
        Me.tablePermit = New PermitDataTable
        Me.Tables.Add(Me.tablePermit)
        Me.tableSource = New SourceDataTable
        Me.Tables.Add(Me.tableSource)
        Me.tableImportedRing = New ImportedRingDataTable
        Me.Tables.Add(Me.tableImportedRing)
        Me.tableImportedParents = New ImportedParentsDataTable
        Me.Tables.Add(Me.tableImportedParents)
        Me.tableImportedMother = New ImportedMotherDataTable
        Me.Tables.Add(Me.tableImportedMother)
        Me.tableImportedMotherSpecimen = New ImportedMotherSpecimenDataTable
        Me.Tables.Add(Me.tableImportedMotherSpecimen)
        Me.tableImportedMotherIDMark = New ImportedMotherIDMarkDataTable
        Me.Tables.Add(Me.tableImportedMotherIDMark)
        Me.tableImportedFather = New ImportedFatherDataTable
        Me.Tables.Add(Me.tableImportedFather)
        Me.tableImportedFatherSpecimen = New ImportedFatherSpecimenDataTable
        Me.Tables.Add(Me.tableImportedFatherSpecimen)
        Me.tableImportedFatherIDMark = New ImportedFatherIDMarkDataTable
        Me.Tables.Add(Me.tableImportedFatherIDMark)
        Me.tableAdultBred = New AdultBredDataTable
        Me.Tables.Add(Me.tableAdultBred)
        Me.tableAdultBredBird = New AdultBredBirdDataTable
        Me.Tables.Add(Me.tableAdultBredBird)
        Me.tableBredStatements = New BredStatementsDataTable
        Me.Tables.Add(Me.tableBredStatements)
        Me.tableBredSpecimen = New BredSpecimenDataTable
        Me.Tables.Add(Me.tableBredSpecimen)
        Me.tableBredIDMarks = New BredIDMarksDataTable
        Me.Tables.Add(Me.tableBredIDMarks)
        Me.tableBredRing = New BredRingDataTable
        Me.Tables.Add(Me.tableBredRing)
        Me.tableAdultOther = New AdultOtherDataTable
        Me.Tables.Add(Me.tableAdultOther)
        Me.tableAdultOtherBird = New AdultOtherBirdDataTable
        Me.Tables.Add(Me.tableAdultOtherBird)
        Me.tableAdultOtherStatements = New AdultOtherStatementsDataTable
        Me.Tables.Add(Me.tableAdultOtherStatements)
        Me.tableAdultOtherSpecimen = New AdultOtherSpecimenDataTable
        Me.Tables.Add(Me.tableAdultOtherSpecimen)
        Me.tableOtherIDMarks = New OtherIDMarksDataTable
        Me.Tables.Add(Me.tableOtherIDMarks)
        Me.tableOtherRing = New OtherRingDataTable
        Me.Tables.Add(Me.tableOtherRing)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("RingApplication_Party", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableParty.RingApplication_IdColumn})
        Me.tableParty.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Party_Declaration", New DataColumn() {Me.tableParty.Party_IdColumn}, New DataColumn() {Me.tableDeclaration.Party_IdColumn})
        Me.tableDeclaration.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Declaration_Conviction", New DataColumn() {Me.tableDeclaration.Declaration_IdColumn}, New DataColumn() {Me.tableConviction.Declaration_IdColumn})
        Me.tableConviction.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("RingApplication_Parents", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableParents.RingApplication_IdColumn})
        Me.tableParents.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Parents_Mother", New DataColumn() {Me.tableParents.Parents_IdColumn}, New DataColumn() {Me.tableMother.Parents_IdColumn})
        Me.tableMother.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Mother_MotherSpecimen", New DataColumn() {Me.tableMother.Mother_IdColumn}, New DataColumn() {Me.tableMotherSpecimen.Mother_IdColumn})
        Me.tableMotherSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Mother_MotherIDMark", New DataColumn() {Me.tableMother.Mother_IdColumn}, New DataColumn() {Me.tableMotherIDMark.Mother_IdColumn})
        Me.tableMotherIDMark.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Parents_Father", New DataColumn() {Me.tableParents.Parents_IdColumn}, New DataColumn() {Me.tableFather.Parents_IdColumn})
        Me.tableFather.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Father_FatherSpecimen", New DataColumn() {Me.tableFather.Father_IdColumn}, New DataColumn() {Me.tableFatherSpecimen.Father_IdColumn})
        Me.tableFatherSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Father_FatherIDMark", New DataColumn() {Me.tableFather.Father_IdColumn}, New DataColumn() {Me.tableFatherIDMark.Father_IdColumn})
        Me.tableFatherIDMark.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("RingApplication_Clutch", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableClutch.RingApplication_IdColumn})
        Me.tableClutch.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Clutch_LastLaidDate", New DataColumn() {Me.tableClutch.Clutch_IdColumn}, New DataColumn() {Me.tableLastLaidDate.Clutch_IdColumn})
        Me.tableLastLaidDate.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Clutch_Egg", New DataColumn() {Me.tableClutch.Clutch_IdColumn}, New DataColumn() {Me.tableEgg.Clutch_IdColumn})
        Me.tableEgg.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Egg_EggRing", New DataColumn() {Me.tableEgg.Egg_IdColumn}, New DataColumn() {Me.tableEggRing.Egg_IdColumn})
        Me.tableEggRing.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Egg_EggSpecimen", New DataColumn() {Me.tableEgg.Egg_IdColumn}, New DataColumn() {Me.tableEggSpecimen.Egg_IdColumn})
        Me.tableEggSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("RingApplication_Adult", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableAdult.RingApplication_IdColumn})
        Me.tableAdult.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Adult_AdultFound", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultFound.Adult_IdColumn})
        Me.tableAdultFound.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultFound_AdultFoundBird", New DataColumn() {Me.tableAdultFound.AdultFound_IdColumn}, New DataColumn() {Me.tableAdultFoundBird.AdultFound_IdColumn})
        Me.tableAdultFoundBird.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultFoundBird_FoundBirdStatements", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundBirdStatements.AdultFoundBird_IdColumn})
        Me.tableFoundBirdStatements.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultFoundBird_FoundBirdSpecimen", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundBirdSpecimen.AdultFoundBird_IdColumn})
        Me.tableFoundBirdSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultFoundBird_FoundBirdIDMark", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundBirdIDMark.AdultFoundBird_IdColumn})
        Me.tableFoundBirdIDMark.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultFoundBird_FoundRing", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundRing.AdultFoundBird_IdColumn})
        Me.tableFoundRing.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Adult_AdultImported", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultImported.Adult_IdColumn})
        Me.tableAdultImported.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImported_AdultImportedBird", New DataColumn() {Me.tableAdultImported.AdultImported_IdColumn}, New DataColumn() {Me.tableAdultImportedBird.AdultImported_IdColumn})
        Me.tableAdultImportedBird.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_ImportedStatements", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedStatements.AdultImportedBird_IdColumn})
        Me.tableImportedStatements.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_ImportedSpecimen", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedSpecimen.AdultImportedBird_IdColumn})
        Me.tableImportedSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_ImportedIDMarks", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedIDMarks.AdultImportedBird_IdColumn})
        Me.tableImportedIDMarks.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_Quarantine", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableQuarantine.AdultImportedBird_IdColumn})
        Me.tableQuarantine.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_Permit", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tablePermit.AdultImportedBird_IdColumn})
        Me.tablePermit.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_Source", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableSource.AdultImportedBird_IdColumn})
        Me.tableSource.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_ImportedRing", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedRing.AdultImportedBird_IdColumn})
        Me.tableImportedRing.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultImportedBird_ImportedParents", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedParents.AdultImportedBird_IdColumn})
        Me.tableImportedParents.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ImportedParents_ImportedMother", New DataColumn() {Me.tableImportedParents.ImportedParents_IdColumn}, New DataColumn() {Me.tableImportedMother.ImportedParents_IdColumn})
        Me.tableImportedMother.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ImportedMother_ImportedMotherSpecimen", New DataColumn() {Me.tableImportedMother.ImportedMother_IdColumn}, New DataColumn() {Me.tableImportedMotherSpecimen.ImportedMother_IdColumn})
        Me.tableImportedMotherSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ImportedMother_ImportedMotherIDMark", New DataColumn() {Me.tableImportedMother.ImportedMother_IdColumn}, New DataColumn() {Me.tableImportedMotherIDMark.ImportedMother_IdColumn})
        Me.tableImportedMotherIDMark.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ImportedParents_ImportedFather", New DataColumn() {Me.tableImportedParents.ImportedParents_IdColumn}, New DataColumn() {Me.tableImportedFather.ImportedParents_IdColumn})
        Me.tableImportedFather.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ImportedFather_ImportedFatherSpecimen", New DataColumn() {Me.tableImportedFather.ImportedFather_IdColumn}, New DataColumn() {Me.tableImportedFatherSpecimen.ImportedFather_IdColumn})
        Me.tableImportedFatherSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("ImportedFather_ImportedFatherIDMark", New DataColumn() {Me.tableImportedFather.ImportedFather_IdColumn}, New DataColumn() {Me.tableImportedFatherIDMark.ImportedFather_IdColumn})
        Me.tableImportedFatherIDMark.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Adult_AdultBred", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultBred.Adult_IdColumn})
        Me.tableAdultBred.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultBred_AdultBredBird", New DataColumn() {Me.tableAdultBred.AdultBred_IdColumn}, New DataColumn() {Me.tableAdultBredBird.AdultBred_IdColumn})
        Me.tableAdultBredBird.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultBredBird_BredStatements", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredStatements.AdultBredBird_IdColumn})
        Me.tableBredStatements.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultBredBird_BredSpecimen", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredSpecimen.AdultBredBird_IdColumn})
        Me.tableBredSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultBredBird_BredIDMarks", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredIDMarks.AdultBredBird_IdColumn})
        Me.tableBredIDMarks.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultBredBird_BredRing", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredRing.AdultBredBird_IdColumn})
        Me.tableBredRing.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("Adult_AdultOther", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultOther.Adult_IdColumn})
        Me.tableAdultOther.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultOther_AdultOtherBird", New DataColumn() {Me.tableAdultOther.AdultOther_IdColumn}, New DataColumn() {Me.tableAdultOtherBird.AdultOther_IdColumn})
        Me.tableAdultOtherBird.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultOtherBird_AdultOtherStatements", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableAdultOtherStatements.AdultOtherBird_IdColumn})
        Me.tableAdultOtherStatements.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultOtherBird_AdultOtherSpecimen", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableAdultOtherSpecimen.AdultOtherBird_IdColumn})
        Me.tableAdultOtherSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultOtherBird_OtherIDMarks", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableOtherIDMarks.AdultOtherBird_IdColumn})
        Me.tableOtherIDMarks.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("AdultOtherBird_OtherRing", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableOtherRing.AdultOtherBird_IdColumn})
        Me.tableOtherRing.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationDeclaration_Conviction = New DataRelation("Declaration_Conviction", New DataColumn() {Me.tableDeclaration.Declaration_IdColumn}, New DataColumn() {Me.tableConviction.Declaration_IdColumn}, false)
        Me.relationDeclaration_Conviction.Nested = true
        Me.Relations.Add(Me.relationDeclaration_Conviction)
        Me.relationParty_Declaration = New DataRelation("Party_Declaration", New DataColumn() {Me.tableParty.Party_IdColumn}, New DataColumn() {Me.tableDeclaration.Party_IdColumn}, false)
        Me.relationParty_Declaration.Nested = true
        Me.Relations.Add(Me.relationParty_Declaration)
        Me.relationMother_MotherSpecimen = New DataRelation("Mother_MotherSpecimen", New DataColumn() {Me.tableMother.Mother_IdColumn}, New DataColumn() {Me.tableMotherSpecimen.Mother_IdColumn}, false)
        Me.relationMother_MotherSpecimen.Nested = true
        Me.Relations.Add(Me.relationMother_MotherSpecimen)
        Me.relationMother_MotherIDMark = New DataRelation("Mother_MotherIDMark", New DataColumn() {Me.tableMother.Mother_IdColumn}, New DataColumn() {Me.tableMotherIDMark.Mother_IdColumn}, false)
        Me.relationMother_MotherIDMark.Nested = true
        Me.Relations.Add(Me.relationMother_MotherIDMark)
        Me.relationFather_FatherSpecimen = New DataRelation("Father_FatherSpecimen", New DataColumn() {Me.tableFather.Father_IdColumn}, New DataColumn() {Me.tableFatherSpecimen.Father_IdColumn}, false)
        Me.relationFather_FatherSpecimen.Nested = true
        Me.Relations.Add(Me.relationFather_FatherSpecimen)
        Me.relationFather_FatherIDMark = New DataRelation("Father_FatherIDMark", New DataColumn() {Me.tableFather.Father_IdColumn}, New DataColumn() {Me.tableFatherIDMark.Father_IdColumn}, false)
        Me.relationFather_FatherIDMark.Nested = true
        Me.Relations.Add(Me.relationFather_FatherIDMark)
        Me.relationParents_Mother = New DataRelation("Parents_Mother", New DataColumn() {Me.tableParents.Parents_IdColumn}, New DataColumn() {Me.tableMother.Parents_IdColumn}, false)
        Me.relationParents_Mother.Nested = true
        Me.Relations.Add(Me.relationParents_Mother)
        Me.relationParents_Father = New DataRelation("Parents_Father", New DataColumn() {Me.tableParents.Parents_IdColumn}, New DataColumn() {Me.tableFather.Parents_IdColumn}, false)
        Me.relationParents_Father.Nested = true
        Me.Relations.Add(Me.relationParents_Father)
        Me.relationEgg_EggRing = New DataRelation("Egg_EggRing", New DataColumn() {Me.tableEgg.Egg_IdColumn}, New DataColumn() {Me.tableEggRing.Egg_IdColumn}, false)
        Me.relationEgg_EggRing.Nested = true
        Me.Relations.Add(Me.relationEgg_EggRing)
        Me.relationEgg_EggSpecimen = New DataRelation("Egg_EggSpecimen", New DataColumn() {Me.tableEgg.Egg_IdColumn}, New DataColumn() {Me.tableEggSpecimen.Egg_IdColumn}, false)
        Me.relationEgg_EggSpecimen.Nested = true
        Me.Relations.Add(Me.relationEgg_EggSpecimen)
        Me.relationClutch_LastLaidDate = New DataRelation("Clutch_LastLaidDate", New DataColumn() {Me.tableClutch.Clutch_IdColumn}, New DataColumn() {Me.tableLastLaidDate.Clutch_IdColumn}, false)
        Me.relationClutch_LastLaidDate.Nested = true
        Me.Relations.Add(Me.relationClutch_LastLaidDate)
        Me.relationClutch_Egg = New DataRelation("Clutch_Egg", New DataColumn() {Me.tableClutch.Clutch_IdColumn}, New DataColumn() {Me.tableEgg.Clutch_IdColumn}, false)
        Me.relationClutch_Egg.Nested = true
        Me.Relations.Add(Me.relationClutch_Egg)
        Me.relationAdultFoundBird_FoundBirdStatements = New DataRelation("AdultFoundBird_FoundBirdStatements", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundBirdStatements.AdultFoundBird_IdColumn}, false)
        Me.relationAdultFoundBird_FoundBirdStatements.Nested = true
        Me.Relations.Add(Me.relationAdultFoundBird_FoundBirdStatements)
        Me.relationAdultFoundBird_FoundBirdSpecimen = New DataRelation("AdultFoundBird_FoundBirdSpecimen", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundBirdSpecimen.AdultFoundBird_IdColumn}, false)
        Me.relationAdultFoundBird_FoundBirdSpecimen.Nested = true
        Me.Relations.Add(Me.relationAdultFoundBird_FoundBirdSpecimen)
        Me.relationAdultFoundBird_FoundBirdIDMark = New DataRelation("AdultFoundBird_FoundBirdIDMark", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundBirdIDMark.AdultFoundBird_IdColumn}, false)
        Me.relationAdultFoundBird_FoundBirdIDMark.Nested = true
        Me.Relations.Add(Me.relationAdultFoundBird_FoundBirdIDMark)
        Me.relationAdultFoundBird_FoundRing = New DataRelation("AdultFoundBird_FoundRing", New DataColumn() {Me.tableAdultFoundBird.AdultFoundBird_IdColumn}, New DataColumn() {Me.tableFoundRing.AdultFoundBird_IdColumn}, false)
        Me.relationAdultFoundBird_FoundRing.Nested = true
        Me.Relations.Add(Me.relationAdultFoundBird_FoundRing)
        Me.relationAdultFound_AdultFoundBird = New DataRelation("AdultFound_AdultFoundBird", New DataColumn() {Me.tableAdultFound.AdultFound_IdColumn}, New DataColumn() {Me.tableAdultFoundBird.AdultFound_IdColumn}, false)
        Me.relationAdultFound_AdultFoundBird.Nested = true
        Me.Relations.Add(Me.relationAdultFound_AdultFoundBird)
        Me.relationImportedMother_ImportedMotherSpecimen = New DataRelation("ImportedMother_ImportedMotherSpecimen", New DataColumn() {Me.tableImportedMother.ImportedMother_IdColumn}, New DataColumn() {Me.tableImportedMotherSpecimen.ImportedMother_IdColumn}, false)
        Me.relationImportedMother_ImportedMotherSpecimen.Nested = true
        Me.Relations.Add(Me.relationImportedMother_ImportedMotherSpecimen)
        Me.relationImportedMother_ImportedMotherIDMark = New DataRelation("ImportedMother_ImportedMotherIDMark", New DataColumn() {Me.tableImportedMother.ImportedMother_IdColumn}, New DataColumn() {Me.tableImportedMotherIDMark.ImportedMother_IdColumn}, false)
        Me.relationImportedMother_ImportedMotherIDMark.Nested = true
        Me.Relations.Add(Me.relationImportedMother_ImportedMotherIDMark)
        Me.relationImportedFather_ImportedFatherSpecimen = New DataRelation("ImportedFather_ImportedFatherSpecimen", New DataColumn() {Me.tableImportedFather.ImportedFather_IdColumn}, New DataColumn() {Me.tableImportedFatherSpecimen.ImportedFather_IdColumn}, false)
        Me.relationImportedFather_ImportedFatherSpecimen.Nested = true
        Me.Relations.Add(Me.relationImportedFather_ImportedFatherSpecimen)
        Me.relationImportedFather_ImportedFatherIDMark = New DataRelation("ImportedFather_ImportedFatherIDMark", New DataColumn() {Me.tableImportedFather.ImportedFather_IdColumn}, New DataColumn() {Me.tableImportedFatherIDMark.ImportedFather_IdColumn}, false)
        Me.relationImportedFather_ImportedFatherIDMark.Nested = true
        Me.Relations.Add(Me.relationImportedFather_ImportedFatherIDMark)
        Me.relationImportedParents_ImportedMother = New DataRelation("ImportedParents_ImportedMother", New DataColumn() {Me.tableImportedParents.ImportedParents_IdColumn}, New DataColumn() {Me.tableImportedMother.ImportedParents_IdColumn}, false)
        Me.relationImportedParents_ImportedMother.Nested = true
        Me.Relations.Add(Me.relationImportedParents_ImportedMother)
        Me.relationImportedParents_ImportedFather = New DataRelation("ImportedParents_ImportedFather", New DataColumn() {Me.tableImportedParents.ImportedParents_IdColumn}, New DataColumn() {Me.tableImportedFather.ImportedParents_IdColumn}, false)
        Me.relationImportedParents_ImportedFather.Nested = true
        Me.Relations.Add(Me.relationImportedParents_ImportedFather)
        Me.relationAdultImportedBird_ImportedStatements = New DataRelation("AdultImportedBird_ImportedStatements", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedStatements.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_ImportedStatements.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_ImportedStatements)
        Me.relationAdultImportedBird_ImportedSpecimen = New DataRelation("AdultImportedBird_ImportedSpecimen", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedSpecimen.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_ImportedSpecimen.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_ImportedSpecimen)
        Me.relationAdultImportedBird_ImportedIDMarks = New DataRelation("AdultImportedBird_ImportedIDMarks", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedIDMarks.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_ImportedIDMarks.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_ImportedIDMarks)
        Me.relationAdultImportedBird_Quarantine = New DataRelation("AdultImportedBird_Quarantine", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableQuarantine.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_Quarantine.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_Quarantine)
        Me.relationAdultImportedBird_Permit = New DataRelation("AdultImportedBird_Permit", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tablePermit.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_Permit.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_Permit)
        Me.relationAdultImportedBird_Source = New DataRelation("AdultImportedBird_Source", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableSource.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_Source.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_Source)
        Me.relationAdultImportedBird_ImportedRing = New DataRelation("AdultImportedBird_ImportedRing", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedRing.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_ImportedRing.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_ImportedRing)
        Me.relationAdultImportedBird_ImportedParents = New DataRelation("AdultImportedBird_ImportedParents", New DataColumn() {Me.tableAdultImportedBird.AdultImportedBird_IdColumn}, New DataColumn() {Me.tableImportedParents.AdultImportedBird_IdColumn}, false)
        Me.relationAdultImportedBird_ImportedParents.Nested = true
        Me.Relations.Add(Me.relationAdultImportedBird_ImportedParents)
        Me.relationAdultImported_AdultImportedBird = New DataRelation("AdultImported_AdultImportedBird", New DataColumn() {Me.tableAdultImported.AdultImported_IdColumn}, New DataColumn() {Me.tableAdultImportedBird.AdultImported_IdColumn}, false)
        Me.relationAdultImported_AdultImportedBird.Nested = true
        Me.Relations.Add(Me.relationAdultImported_AdultImportedBird)
        Me.relationAdultBredBird_BredStatements = New DataRelation("AdultBredBird_BredStatements", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredStatements.AdultBredBird_IdColumn}, false)
        Me.relationAdultBredBird_BredStatements.Nested = true
        Me.Relations.Add(Me.relationAdultBredBird_BredStatements)
        Me.relationAdultBredBird_BredSpecimen = New DataRelation("AdultBredBird_BredSpecimen", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredSpecimen.AdultBredBird_IdColumn}, false)
        Me.relationAdultBredBird_BredSpecimen.Nested = true
        Me.Relations.Add(Me.relationAdultBredBird_BredSpecimen)
        Me.relationAdultBredBird_BredIDMarks = New DataRelation("AdultBredBird_BredIDMarks", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredIDMarks.AdultBredBird_IdColumn}, false)
        Me.relationAdultBredBird_BredIDMarks.Nested = true
        Me.Relations.Add(Me.relationAdultBredBird_BredIDMarks)
        Me.relationAdultBredBird_BredRing = New DataRelation("AdultBredBird_BredRing", New DataColumn() {Me.tableAdultBredBird.AdultBredBird_IdColumn}, New DataColumn() {Me.tableBredRing.AdultBredBird_IdColumn}, false)
        Me.relationAdultBredBird_BredRing.Nested = true
        Me.Relations.Add(Me.relationAdultBredBird_BredRing)
        Me.relationAdultBred_AdultBredBird = New DataRelation("AdultBred_AdultBredBird", New DataColumn() {Me.tableAdultBred.AdultBred_IdColumn}, New DataColumn() {Me.tableAdultBredBird.AdultBred_IdColumn}, false)
        Me.relationAdultBred_AdultBredBird.Nested = true
        Me.Relations.Add(Me.relationAdultBred_AdultBredBird)
        Me.relationAdultOtherBird_AdultOtherStatements = New DataRelation("AdultOtherBird_AdultOtherStatements", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableAdultOtherStatements.AdultOtherBird_IdColumn}, false)
        Me.relationAdultOtherBird_AdultOtherStatements.Nested = true
        Me.Relations.Add(Me.relationAdultOtherBird_AdultOtherStatements)
        Me.relationAdultOtherBird_AdultOtherSpecimen = New DataRelation("AdultOtherBird_AdultOtherSpecimen", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableAdultOtherSpecimen.AdultOtherBird_IdColumn}, false)
        Me.relationAdultOtherBird_AdultOtherSpecimen.Nested = true
        Me.Relations.Add(Me.relationAdultOtherBird_AdultOtherSpecimen)
        Me.relationAdultOtherBird_OtherIDMarks = New DataRelation("AdultOtherBird_OtherIDMarks", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableOtherIDMarks.AdultOtherBird_IdColumn}, false)
        Me.relationAdultOtherBird_OtherIDMarks.Nested = true
        Me.Relations.Add(Me.relationAdultOtherBird_OtherIDMarks)
        Me.relationAdultOtherBird_OtherRing = New DataRelation("AdultOtherBird_OtherRing", New DataColumn() {Me.tableAdultOtherBird.AdultOtherBird_IdColumn}, New DataColumn() {Me.tableOtherRing.AdultOtherBird_IdColumn}, false)
        Me.relationAdultOtherBird_OtherRing.Nested = true
        Me.Relations.Add(Me.relationAdultOtherBird_OtherRing)
        Me.relationAdultOther_AdultOtherBird = New DataRelation("AdultOther_AdultOtherBird", New DataColumn() {Me.tableAdultOther.AdultOther_IdColumn}, New DataColumn() {Me.tableAdultOtherBird.AdultOther_IdColumn}, false)
        Me.relationAdultOther_AdultOtherBird.Nested = true
        Me.Relations.Add(Me.relationAdultOther_AdultOtherBird)
        Me.relationAdult_AdultFound = New DataRelation("Adult_AdultFound", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultFound.Adult_IdColumn}, false)
        Me.relationAdult_AdultFound.Nested = true
        Me.Relations.Add(Me.relationAdult_AdultFound)
        Me.relationAdult_AdultImported = New DataRelation("Adult_AdultImported", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultImported.Adult_IdColumn}, false)
        Me.relationAdult_AdultImported.Nested = true
        Me.Relations.Add(Me.relationAdult_AdultImported)
        Me.relationAdult_AdultBred = New DataRelation("Adult_AdultBred", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultBred.Adult_IdColumn}, false)
        Me.relationAdult_AdultBred.Nested = true
        Me.Relations.Add(Me.relationAdult_AdultBred)
        Me.relationAdult_AdultOther = New DataRelation("Adult_AdultOther", New DataColumn() {Me.tableAdult.Adult_IdColumn}, New DataColumn() {Me.tableAdultOther.Adult_IdColumn}, false)
        Me.relationAdult_AdultOther.Nested = true
        Me.Relations.Add(Me.relationAdult_AdultOther)
        Me.relationRingApplication_Party = New DataRelation("RingApplication_Party", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableParty.RingApplication_IdColumn}, false)
        Me.relationRingApplication_Party.Nested = true
        Me.Relations.Add(Me.relationRingApplication_Party)
        Me.relationRingApplication_Parents = New DataRelation("RingApplication_Parents", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableParents.RingApplication_IdColumn}, false)
        Me.relationRingApplication_Parents.Nested = true
        Me.Relations.Add(Me.relationRingApplication_Parents)
        Me.relationRingApplication_Clutch = New DataRelation("RingApplication_Clutch", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableClutch.RingApplication_IdColumn}, false)
        Me.relationRingApplication_Clutch.Nested = true
        Me.Relations.Add(Me.relationRingApplication_Clutch)
        Me.relationRingApplication_Adult = New DataRelation("RingApplication_Adult", New DataColumn() {Me.tableRingApplication.RingApplication_IdColumn}, New DataColumn() {Me.tableAdult.RingApplication_IdColumn}, false)
        Me.relationRingApplication_Adult.Nested = true
        Me.Relations.Add(Me.relationRingApplication_Adult)
    End Sub
    
    Private Function ShouldSerializeRingApplication() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeParty() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeDeclaration() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeConviction() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeParents() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMother() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMotherSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeMotherIDMark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFather() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFatherSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFatherIDMark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeClutch() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeLastLaidDate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEgg() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEggRing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeEggSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdult() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultFound() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultFoundBird() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFoundBirdStatements() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFoundBirdSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFoundBirdIDMark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFoundRing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultImported() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultImportedBird() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedStatements() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedIDMarks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeQuarantine() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePermit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSource() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedRing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedParents() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedMother() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedMotherSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedMotherIDMark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedFather() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedFatherSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeImportedFatherIDMark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultBred() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultBredBird() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBredStatements() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBredSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBredIDMarks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBredRing() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultOther() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultOtherBird() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultOtherStatements() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeAdultOtherSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOtherIDMarks() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeOtherRing() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub RingApplicationRowChangeEventHandler(ByVal sender As Object, ByVal e As RingApplicationRowChangeEvent)
    
    Public Delegate Sub PartyRowChangeEventHandler(ByVal sender As Object, ByVal e As PartyRowChangeEvent)
    
    Public Delegate Sub DeclarationRowChangeEventHandler(ByVal sender As Object, ByVal e As DeclarationRowChangeEvent)
    
    Public Delegate Sub ConvictionRowChangeEventHandler(ByVal sender As Object, ByVal e As ConvictionRowChangeEvent)
    
    Public Delegate Sub ParentsRowChangeEventHandler(ByVal sender As Object, ByVal e As ParentsRowChangeEvent)
    
    Public Delegate Sub MotherRowChangeEventHandler(ByVal sender As Object, ByVal e As MotherRowChangeEvent)
    
    Public Delegate Sub MotherSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As MotherSpecimenRowChangeEvent)
    
    Public Delegate Sub MotherIDMarkRowChangeEventHandler(ByVal sender As Object, ByVal e As MotherIDMarkRowChangeEvent)
    
    Public Delegate Sub FatherRowChangeEventHandler(ByVal sender As Object, ByVal e As FatherRowChangeEvent)
    
    Public Delegate Sub FatherSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As FatherSpecimenRowChangeEvent)
    
    Public Delegate Sub FatherIDMarkRowChangeEventHandler(ByVal sender As Object, ByVal e As FatherIDMarkRowChangeEvent)
    
    Public Delegate Sub ClutchRowChangeEventHandler(ByVal sender As Object, ByVal e As ClutchRowChangeEvent)
    
    Public Delegate Sub LastLaidDateRowChangeEventHandler(ByVal sender As Object, ByVal e As LastLaidDateRowChangeEvent)
    
    Public Delegate Sub EggRowChangeEventHandler(ByVal sender As Object, ByVal e As EggRowChangeEvent)
    
    Public Delegate Sub EggRingRowChangeEventHandler(ByVal sender As Object, ByVal e As EggRingRowChangeEvent)
    
    Public Delegate Sub EggSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As EggSpecimenRowChangeEvent)
    
    Public Delegate Sub AdultRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultRowChangeEvent)
    
    Public Delegate Sub AdultFoundRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultFoundRowChangeEvent)
    
    Public Delegate Sub AdultFoundBirdRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultFoundBirdRowChangeEvent)
    
    Public Delegate Sub FoundBirdStatementsRowChangeEventHandler(ByVal sender As Object, ByVal e As FoundBirdStatementsRowChangeEvent)
    
    Public Delegate Sub FoundBirdSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As FoundBirdSpecimenRowChangeEvent)
    
    Public Delegate Sub FoundBirdIDMarkRowChangeEventHandler(ByVal sender As Object, ByVal e As FoundBirdIDMarkRowChangeEvent)
    
    Public Delegate Sub FoundRingRowChangeEventHandler(ByVal sender As Object, ByVal e As FoundRingRowChangeEvent)
    
    Public Delegate Sub AdultImportedRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultImportedRowChangeEvent)
    
    Public Delegate Sub AdultImportedBirdRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultImportedBirdRowChangeEvent)
    
    Public Delegate Sub ImportedStatementsRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedStatementsRowChangeEvent)
    
    Public Delegate Sub ImportedSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedSpecimenRowChangeEvent)
    
    Public Delegate Sub ImportedIDMarksRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedIDMarksRowChangeEvent)
    
    Public Delegate Sub QuarantineRowChangeEventHandler(ByVal sender As Object, ByVal e As QuarantineRowChangeEvent)
    
    Public Delegate Sub PermitRowChangeEventHandler(ByVal sender As Object, ByVal e As PermitRowChangeEvent)
    
    Public Delegate Sub SourceRowChangeEventHandler(ByVal sender As Object, ByVal e As SourceRowChangeEvent)
    
    Public Delegate Sub ImportedRingRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedRingRowChangeEvent)
    
    Public Delegate Sub ImportedParentsRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedParentsRowChangeEvent)
    
    Public Delegate Sub ImportedMotherRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedMotherRowChangeEvent)
    
    Public Delegate Sub ImportedMotherSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedMotherSpecimenRowChangeEvent)
    
    Public Delegate Sub ImportedMotherIDMarkRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedMotherIDMarkRowChangeEvent)
    
    Public Delegate Sub ImportedFatherRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedFatherRowChangeEvent)
    
    Public Delegate Sub ImportedFatherSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedFatherSpecimenRowChangeEvent)
    
    Public Delegate Sub ImportedFatherIDMarkRowChangeEventHandler(ByVal sender As Object, ByVal e As ImportedFatherIDMarkRowChangeEvent)
    
    Public Delegate Sub AdultBredRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultBredRowChangeEvent)
    
    Public Delegate Sub AdultBredBirdRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultBredBirdRowChangeEvent)
    
    Public Delegate Sub BredStatementsRowChangeEventHandler(ByVal sender As Object, ByVal e As BredStatementsRowChangeEvent)
    
    Public Delegate Sub BredSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As BredSpecimenRowChangeEvent)
    
    Public Delegate Sub BredIDMarksRowChangeEventHandler(ByVal sender As Object, ByVal e As BredIDMarksRowChangeEvent)
    
    Public Delegate Sub BredRingRowChangeEventHandler(ByVal sender As Object, ByVal e As BredRingRowChangeEvent)
    
    Public Delegate Sub AdultOtherRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultOtherRowChangeEvent)
    
    Public Delegate Sub AdultOtherBirdRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultOtherBirdRowChangeEvent)
    
    Public Delegate Sub AdultOtherStatementsRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultOtherStatementsRowChangeEvent)
    
    Public Delegate Sub AdultOtherSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As AdultOtherSpecimenRowChangeEvent)
    
    Public Delegate Sub OtherIDMarksRowChangeEventHandler(ByVal sender As Object, ByVal e As OtherIDMarksRowChangeEvent)
    
    Public Delegate Sub OtherRingRowChangeEventHandler(ByVal sender As Object, ByVal e As OtherRingRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RingApplicationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationMethodId As DataColumn
        
        Private columnApplicationReference As DataColumn
        
        Private columnKeeperAcknowledgment As DataColumn
        
        Private columnIsInspectionRequired As DataColumn
        
        Private columnApplicationStatus As DataColumn
        
        Private columnPaymentStatus As DataColumn
        
        Private columnApplicationType As DataColumn
        
        Private columnAssignedTo As DataColumn
        
        Private columnDORReceivedDate As DataColumn
        
        Private columnCancellationReason As DataColumn
        
        Private columnCancellationRefusalReason As DataColumn
        
        Private columnReasonForEggsButNoParent As DataColumn
        
        Private columnRefuseLetterReportId As DataColumn
        
        Private columnSubmittedDate As DataColumn
        
        Private columnDeclineReason As DataColumn
        
        Private columnNextActionDate As DataColumn
        
        Private columnRelatedRingApplication As DataColumn
        
        Private columnSLAClock As DataColumn
        
        Private columnSLAStart As DataColumn
        
        Private columnInspectorDecisionMade As DataColumn
        
        Private columnReceivedDate As DataColumn
        
        Private columnDORApplicationMethodId As DataColumn
        
        Private columnDORPrintJobId As DataColumn
        
        Private columnRingApplication_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("RingApplication")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationMethodIdColumn As DataColumn
            Get
                Return Me.columnApplicationMethodId
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationReferenceColumn As DataColumn
            Get
                Return Me.columnApplicationReference
            End Get
        End Property
        
        Friend ReadOnly Property KeeperAcknowledgmentColumn As DataColumn
            Get
                Return Me.columnKeeperAcknowledgment
            End Get
        End Property
        
        Friend ReadOnly Property IsInspectionRequiredColumn As DataColumn
            Get
                Return Me.columnIsInspectionRequired
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationStatusColumn As DataColumn
            Get
                Return Me.columnApplicationStatus
            End Get
        End Property
        
        Friend ReadOnly Property PaymentStatusColumn As DataColumn
            Get
                Return Me.columnPaymentStatus
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationTypeColumn As DataColumn
            Get
                Return Me.columnApplicationType
            End Get
        End Property
        
        Friend ReadOnly Property AssignedToColumn As DataColumn
            Get
                Return Me.columnAssignedTo
            End Get
        End Property
        
        Friend ReadOnly Property DORReceivedDateColumn As DataColumn
            Get
                Return Me.columnDORReceivedDate
            End Get
        End Property
        
        Friend ReadOnly Property CancellationReasonColumn As DataColumn
            Get
                Return Me.columnCancellationReason
            End Get
        End Property
        
        Friend ReadOnly Property CancellationRefusalReasonColumn As DataColumn
            Get
                Return Me.columnCancellationRefusalReason
            End Get
        End Property
        
        Friend ReadOnly Property ReasonForEggsButNoParentColumn As DataColumn
            Get
                Return Me.columnReasonForEggsButNoParent
            End Get
        End Property
        
        Friend ReadOnly Property RefuseLetterReportIdColumn As DataColumn
            Get
                Return Me.columnRefuseLetterReportId
            End Get
        End Property
        
        Friend ReadOnly Property SubmittedDateColumn As DataColumn
            Get
                Return Me.columnSubmittedDate
            End Get
        End Property
        
        Friend ReadOnly Property DeclineReasonColumn As DataColumn
            Get
                Return Me.columnDeclineReason
            End Get
        End Property
        
        Friend ReadOnly Property NextActionDateColumn As DataColumn
            Get
                Return Me.columnNextActionDate
            End Get
        End Property
        
        Friend ReadOnly Property RelatedRingApplicationColumn As DataColumn
            Get
                Return Me.columnRelatedRingApplication
            End Get
        End Property
        
        Friend ReadOnly Property SLAClockColumn As DataColumn
            Get
                Return Me.columnSLAClock
            End Get
        End Property
        
        Friend ReadOnly Property SLAStartColumn As DataColumn
            Get
                Return Me.columnSLAStart
            End Get
        End Property
        
        Friend ReadOnly Property InspectorDecisionMadeColumn As DataColumn
            Get
                Return Me.columnInspectorDecisionMade
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedDateColumn As DataColumn
            Get
                Return Me.columnReceivedDate
            End Get
        End Property
        
        Friend ReadOnly Property DORApplicationMethodIdColumn As DataColumn
            Get
                Return Me.columnDORApplicationMethodId
            End Get
        End Property
        
        Friend ReadOnly Property DORPrintJobIdColumn As DataColumn
            Get
                Return Me.columnDORPrintJobId
            End Get
        End Property
        
        Friend ReadOnly Property RingApplication_IdColumn As DataColumn
            Get
                Return Me.columnRingApplication_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RingApplicationRow
            Get
                Return CType(Me.Rows(index),RingApplicationRow)
            End Get
        End Property
        
        Public Event RingApplicationRowChanged As RingApplicationRowChangeEventHandler
        
        Public Event RingApplicationRowChanging As RingApplicationRowChangeEventHandler
        
        Public Event RingApplicationRowDeleted As RingApplicationRowChangeEventHandler
        
        Public Event RingApplicationRowDeleting As RingApplicationRowChangeEventHandler
        
        Public Overloads Sub AddRingApplicationRow(ByVal row As RingApplicationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRingApplicationRow( _
                    ByVal ApplicationMethodId As Integer,  _
                    ByVal ApplicationReference As Integer,  _
                    ByVal KeeperAcknowledgment As Boolean,  _
                    ByVal IsInspectionRequired As Boolean,  _
                    ByVal ApplicationStatus As Integer,  _
                    ByVal PaymentStatus As Integer,  _
                    ByVal ApplicationType As String,  _
                    ByVal AssignedTo As Integer,  _
                    ByVal DORReceivedDate As Date,  _
                    ByVal CancellationReason As String,  _
                    ByVal CancellationRefusalReason As String,  _
                    ByVal ReasonForEggsButNoParent As String,  _
                    ByVal RefuseLetterReportId As Integer,  _
                    ByVal SubmittedDate As Date,  _
                    ByVal DeclineReason As String,  _
                    ByVal NextActionDate As Date,  _
                    ByVal RelatedRingApplication As Integer,  _
                    ByVal SLAClock As Integer,  _
                    ByVal SLAStart As Date,  _
                    ByVal InspectorDecisionMade As Boolean,  _
                    ByVal ReceivedDate As Date,  _
                    ByVal DORApplicationMethodId As Integer,  _
                    ByVal DORPrintJobId As Integer) As RingApplicationRow
            Dim rowRingApplicationRow As RingApplicationRow = CType(Me.NewRow,RingApplicationRow)
            rowRingApplicationRow.ItemArray = New Object() {ApplicationMethodId, ApplicationReference, KeeperAcknowledgment, IsInspectionRequired, ApplicationStatus, PaymentStatus, ApplicationType, AssignedTo, DORReceivedDate, CancellationReason, CancellationRefusalReason, ReasonForEggsButNoParent, RefuseLetterReportId, SubmittedDate, DeclineReason, NextActionDate, RelatedRingApplication, SLAClock, SLAStart, InspectorDecisionMade, ReceivedDate, DORApplicationMethodId, DORPrintJobId, Nothing}
            Me.Rows.Add(rowRingApplicationRow)
            Return rowRingApplicationRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RingApplicationDataTable = CType(MyBase.Clone,RingApplicationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RingApplicationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationMethodId = Me.Columns("ApplicationMethodId")
            Me.columnApplicationReference = Me.Columns("ApplicationReference")
            Me.columnKeeperAcknowledgment = Me.Columns("KeeperAcknowledgment")
            Me.columnIsInspectionRequired = Me.Columns("IsInspectionRequired")
            Me.columnApplicationStatus = Me.Columns("ApplicationStatus")
            Me.columnPaymentStatus = Me.Columns("PaymentStatus")
            Me.columnApplicationType = Me.Columns("ApplicationType")
            Me.columnAssignedTo = Me.Columns("AssignedTo")
            Me.columnDORReceivedDate = Me.Columns("DORReceivedDate")
            Me.columnCancellationReason = Me.Columns("CancellationReason")
            Me.columnCancellationRefusalReason = Me.Columns("CancellationRefusalReason")
            Me.columnReasonForEggsButNoParent = Me.Columns("ReasonForEggsButNoParent")
            Me.columnRefuseLetterReportId = Me.Columns("RefuseLetterReportId")
            Me.columnSubmittedDate = Me.Columns("SubmittedDate")
            Me.columnDeclineReason = Me.Columns("DeclineReason")
            Me.columnNextActionDate = Me.Columns("NextActionDate")
            Me.columnRelatedRingApplication = Me.Columns("RelatedRingApplication")
            Me.columnSLAClock = Me.Columns("SLAClock")
            Me.columnSLAStart = Me.Columns("SLAStart")
            Me.columnInspectorDecisionMade = Me.Columns("InspectorDecisionMade")
            Me.columnReceivedDate = Me.Columns("ReceivedDate")
            Me.columnDORApplicationMethodId = Me.Columns("DORApplicationMethodId")
            Me.columnDORPrintJobId = Me.Columns("DORPrintJobId")
            Me.columnRingApplication_Id = Me.Columns("RingApplication_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationMethodId = New DataColumn("ApplicationMethodId", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnApplicationMethodId)
            Me.columnApplicationReference = New DataColumn("ApplicationReference", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnApplicationReference)
            Me.columnKeeperAcknowledgment = New DataColumn("KeeperAcknowledgment", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnKeeperAcknowledgment)
            Me.columnIsInspectionRequired = New DataColumn("IsInspectionRequired", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnIsInspectionRequired)
            Me.columnApplicationStatus = New DataColumn("ApplicationStatus", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnApplicationStatus)
            Me.columnPaymentStatus = New DataColumn("PaymentStatus", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPaymentStatus)
            Me.columnApplicationType = New DataColumn("ApplicationType", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnApplicationType)
            Me.columnAssignedTo = New DataColumn("AssignedTo", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnAssignedTo)
            Me.columnDORReceivedDate = New DataColumn("DORReceivedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDORReceivedDate)
            Me.columnCancellationReason = New DataColumn("CancellationReason", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCancellationReason)
            Me.columnCancellationRefusalReason = New DataColumn("CancellationRefusalReason", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCancellationRefusalReason)
            Me.columnReasonForEggsButNoParent = New DataColumn("ReasonForEggsButNoParent", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnReasonForEggsButNoParent)
            Me.columnRefuseLetterReportId = New DataColumn("RefuseLetterReportId", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnRefuseLetterReportId)
            Me.columnSubmittedDate = New DataColumn("SubmittedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnSubmittedDate)
            Me.columnDeclineReason = New DataColumn("DeclineReason", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDeclineReason)
            Me.columnNextActionDate = New DataColumn("NextActionDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnNextActionDate)
            Me.columnRelatedRingApplication = New DataColumn("RelatedRingApplication", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnRelatedRingApplication)
            Me.columnSLAClock = New DataColumn("SLAClock", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnSLAClock)
            Me.columnSLAStart = New DataColumn("SLAStart", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnSLAStart)
            Me.columnInspectorDecisionMade = New DataColumn("InspectorDecisionMade", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnInspectorDecisionMade)
            Me.columnReceivedDate = New DataColumn("ReceivedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnReceivedDate)
            Me.columnDORApplicationMethodId = New DataColumn("DORApplicationMethodId", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDORApplicationMethodId)
            Me.columnDORPrintJobId = New DataColumn("DORPrintJobId", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDORPrintJobId)
            Me.columnRingApplication_Id = New DataColumn("RingApplication_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnRingApplication_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnRingApplication_Id}, true))
            Me.columnApplicationMethodId.AllowDBNull = false
            Me.columnApplicationMethodId.Namespace = ""
            Me.columnApplicationReference.AllowDBNull = false
            Me.columnApplicationReference.Namespace = ""
            Me.columnKeeperAcknowledgment.Namespace = ""
            Me.columnIsInspectionRequired.AllowDBNull = false
            Me.columnIsInspectionRequired.Namespace = ""
            Me.columnApplicationStatus.AllowDBNull = false
            Me.columnApplicationStatus.Namespace = ""
            Me.columnPaymentStatus.AllowDBNull = false
            Me.columnPaymentStatus.Namespace = ""
            Me.columnApplicationType.Namespace = ""
            Me.columnAssignedTo.Namespace = ""
            Me.columnDORReceivedDate.Namespace = ""
            Me.columnCancellationReason.Namespace = ""
            Me.columnCancellationRefusalReason.Namespace = ""
            Me.columnReasonForEggsButNoParent.Namespace = ""
            Me.columnRefuseLetterReportId.Namespace = ""
            Me.columnSubmittedDate.Namespace = ""
            Me.columnDeclineReason.Namespace = ""
            Me.columnNextActionDate.Namespace = ""
            Me.columnRelatedRingApplication.Namespace = ""
            Me.columnSLAClock.Namespace = ""
            Me.columnSLAStart.Namespace = ""
            Me.columnInspectorDecisionMade.Namespace = ""
            Me.columnReceivedDate.Namespace = ""
            Me.columnDORApplicationMethodId.Namespace = ""
            Me.columnDORPrintJobId.Namespace = ""
            Me.columnRingApplication_Id.AutoIncrement = true
            Me.columnRingApplication_Id.AllowDBNull = false
            Me.columnRingApplication_Id.Unique = true
        End Sub
        
        Public Function NewRingApplicationRow() As RingApplicationRow
            Return CType(Me.NewRow,RingApplicationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RingApplicationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RingApplicationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RingApplicationRowChangedEvent) Is Nothing) Then
                RaiseEvent RingApplicationRowChanged(Me, New RingApplicationRowChangeEvent(CType(e.Row,RingApplicationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RingApplicationRowChangingEvent) Is Nothing) Then
                RaiseEvent RingApplicationRowChanging(Me, New RingApplicationRowChangeEvent(CType(e.Row,RingApplicationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RingApplicationRowDeletedEvent) Is Nothing) Then
                RaiseEvent RingApplicationRowDeleted(Me, New RingApplicationRowChangeEvent(CType(e.Row,RingApplicationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RingApplicationRowDeletingEvent) Is Nothing) Then
                RaiseEvent RingApplicationRowDeleting(Me, New RingApplicationRowChangeEvent(CType(e.Row,RingApplicationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRingApplicationRow(ByVal row As RingApplicationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RingApplicationRow
        Inherits DataRow
        
        Private tableRingApplication As RingApplicationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRingApplication = CType(Me.Table,RingApplicationDataTable)
        End Sub
        
        Public Property ApplicationMethodId As Integer
            Get
                Return CType(Me(Me.tableRingApplication.ApplicationMethodIdColumn),Integer)
            End Get
            Set
                Me(Me.tableRingApplication.ApplicationMethodIdColumn) = value
            End Set
        End Property
        
        Public Property ApplicationReference As Integer
            Get
                Return CType(Me(Me.tableRingApplication.ApplicationReferenceColumn),Integer)
            End Get
            Set
                Me(Me.tableRingApplication.ApplicationReferenceColumn) = value
            End Set
        End Property
        
        Public Property KeeperAcknowledgment As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.KeeperAcknowledgmentColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.KeeperAcknowledgmentColumn) = value
            End Set
        End Property
        
        Public Property IsInspectionRequired As Boolean
            Get
                Return CType(Me(Me.tableRingApplication.IsInspectionRequiredColumn),Boolean)
            End Get
            Set
                Me(Me.tableRingApplication.IsInspectionRequiredColumn) = value
            End Set
        End Property
        
        Public Property ApplicationStatus As Integer
            Get
                Return CType(Me(Me.tableRingApplication.ApplicationStatusColumn),Integer)
            End Get
            Set
                Me(Me.tableRingApplication.ApplicationStatusColumn) = value
            End Set
        End Property
        
        Public Property PaymentStatus As Integer
            Get
                Return CType(Me(Me.tableRingApplication.PaymentStatusColumn),Integer)
            End Get
            Set
                Me(Me.tableRingApplication.PaymentStatusColumn) = value
            End Set
        End Property
        
        Public Property ApplicationType As String
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.ApplicationTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.ApplicationTypeColumn) = value
            End Set
        End Property
        
        Public Property AssignedTo As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.AssignedToColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.AssignedToColumn) = value
            End Set
        End Property
        
        Public Property DORReceivedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.DORReceivedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.DORReceivedDateColumn) = value
            End Set
        End Property
        
        Public Property CancellationReason As String
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.CancellationReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.CancellationReasonColumn) = value
            End Set
        End Property
        
        Public Property CancellationRefusalReason As String
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.CancellationRefusalReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.CancellationRefusalReasonColumn) = value
            End Set
        End Property
        
        Public Property ReasonForEggsButNoParent As String
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.ReasonForEggsButNoParentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.ReasonForEggsButNoParentColumn) = value
            End Set
        End Property
        
        Public Property RefuseLetterReportId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.RefuseLetterReportIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.RefuseLetterReportIdColumn) = value
            End Set
        End Property
        
        Public Property SubmittedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.SubmittedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.SubmittedDateColumn) = value
            End Set
        End Property
        
        Public Property DeclineReason As String
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.DeclineReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.DeclineReasonColumn) = value
            End Set
        End Property
        
        Public Property NextActionDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.NextActionDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.NextActionDateColumn) = value
            End Set
        End Property
        
        Public Property RelatedRingApplication As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.RelatedRingApplicationColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.RelatedRingApplicationColumn) = value
            End Set
        End Property
        
        Public Property SLAClock As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.SLAClockColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.SLAClockColumn) = value
            End Set
        End Property
        
        Public Property SLAStart As Date
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.SLAStartColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.SLAStartColumn) = value
            End Set
        End Property
        
        Public Property InspectorDecisionMade As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.InspectorDecisionMadeColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.InspectorDecisionMadeColumn) = value
            End Set
        End Property
        
        Public Property ReceivedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.ReceivedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.ReceivedDateColumn) = value
            End Set
        End Property
        
        Public Property DORApplicationMethodId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.DORApplicationMethodIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.DORApplicationMethodIdColumn) = value
            End Set
        End Property
        
        Public Property DORPrintJobId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRingApplication.DORPrintJobIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRingApplication.DORPrintJobIdColumn) = value
            End Set
        End Property
        
        Public Function IsKeeperAcknowledgmentNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.KeeperAcknowledgmentColumn)
        End Function
        
        Public Sub SetKeeperAcknowledgmentNull()
            Me(Me.tableRingApplication.KeeperAcknowledgmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationTypeNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.ApplicationTypeColumn)
        End Function
        
        Public Sub SetApplicationTypeNull()
            Me(Me.tableRingApplication.ApplicationTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAssignedToNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.AssignedToColumn)
        End Function
        
        Public Sub SetAssignedToNull()
            Me(Me.tableRingApplication.AssignedToColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDORReceivedDateNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.DORReceivedDateColumn)
        End Function
        
        Public Sub SetDORReceivedDateNull()
            Me(Me.tableRingApplication.DORReceivedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCancellationReasonNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.CancellationReasonColumn)
        End Function
        
        Public Sub SetCancellationReasonNull()
            Me(Me.tableRingApplication.CancellationReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCancellationRefusalReasonNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.CancellationRefusalReasonColumn)
        End Function
        
        Public Sub SetCancellationRefusalReasonNull()
            Me(Me.tableRingApplication.CancellationRefusalReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReasonForEggsButNoParentNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.ReasonForEggsButNoParentColumn)
        End Function
        
        Public Sub SetReasonForEggsButNoParentNull()
            Me(Me.tableRingApplication.ReasonForEggsButNoParentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRefuseLetterReportIdNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.RefuseLetterReportIdColumn)
        End Function
        
        Public Sub SetRefuseLetterReportIdNull()
            Me(Me.tableRingApplication.RefuseLetterReportIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubmittedDateNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.SubmittedDateColumn)
        End Function
        
        Public Sub SetSubmittedDateNull()
            Me(Me.tableRingApplication.SubmittedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeclineReasonNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.DeclineReasonColumn)
        End Function
        
        Public Sub SetDeclineReasonNull()
            Me(Me.tableRingApplication.DeclineReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNextActionDateNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.NextActionDateColumn)
        End Function
        
        Public Sub SetNextActionDateNull()
            Me(Me.tableRingApplication.NextActionDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelatedRingApplicationNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.RelatedRingApplicationColumn)
        End Function
        
        Public Sub SetRelatedRingApplicationNull()
            Me(Me.tableRingApplication.RelatedRingApplicationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSLAClockNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.SLAClockColumn)
        End Function
        
        Public Sub SetSLAClockNull()
            Me(Me.tableRingApplication.SLAClockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSLAStartNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.SLAStartColumn)
        End Function
        
        Public Sub SetSLAStartNull()
            Me(Me.tableRingApplication.SLAStartColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInspectorDecisionMadeNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.InspectorDecisionMadeColumn)
        End Function
        
        Public Sub SetInspectorDecisionMadeNull()
            Me(Me.tableRingApplication.InspectorDecisionMadeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedDateNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.ReceivedDateColumn)
        End Function
        
        Public Sub SetReceivedDateNull()
            Me(Me.tableRingApplication.ReceivedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDORApplicationMethodIdNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.DORApplicationMethodIdColumn)
        End Function
        
        Public Sub SetDORApplicationMethodIdNull()
            Me(Me.tableRingApplication.DORApplicationMethodIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDORPrintJobIdNull() As Boolean
            Return Me.IsNull(Me.tableRingApplication.DORPrintJobIdColumn)
        End Function
        
        Public Sub SetDORPrintJobIdNull()
            Me(Me.tableRingApplication.DORPrintJobIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPartyRows() As PartyRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("RingApplication_Party")),PartyRow())
        End Function
        
        Public Function GetParentsRows() As ParentsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("RingApplication_Parents")),ParentsRow())
        End Function
        
        Public Function GetClutchRows() As ClutchRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("RingApplication_Clutch")),ClutchRow())
        End Function
        
        Public Function GetAdultRows() As AdultRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("RingApplication_Adult")),AdultRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RingApplicationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RingApplicationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RingApplicationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RingApplicationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PartyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPartyID As DataColumn
        
        Private columnPartyAddressID As DataColumn
        
        Private columnAddressReason As DataColumn
        
        Private columnParty_Id As DataColumn
        
        Private columnRingApplication_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Party")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PartyIDColumn As DataColumn
            Get
                Return Me.columnPartyID
            End Get
        End Property
        
        Friend ReadOnly Property PartyAddressIDColumn As DataColumn
            Get
                Return Me.columnPartyAddressID
            End Get
        End Property
        
        Friend ReadOnly Property AddressReasonColumn As DataColumn
            Get
                Return Me.columnAddressReason
            End Get
        End Property
        
        Friend ReadOnly Property Party_IdColumn As DataColumn
            Get
                Return Me.columnParty_Id
            End Get
        End Property
        
        Friend ReadOnly Property RingApplication_IdColumn As DataColumn
            Get
                Return Me.columnRingApplication_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PartyRow
            Get
                Return CType(Me.Rows(index),PartyRow)
            End Get
        End Property
        
        Public Event PartyRowChanged As PartyRowChangeEventHandler
        
        Public Event PartyRowChanging As PartyRowChangeEventHandler
        
        Public Event PartyRowDeleted As PartyRowChangeEventHandler
        
        Public Event PartyRowDeleting As PartyRowChangeEventHandler
        
        Public Overloads Sub AddPartyRow(ByVal row As PartyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPartyRow(ByVal PartyID As Integer, ByVal PartyAddressID As Integer, ByVal AddressReason As String, ByVal parentRingApplicationRowByRingApplication_Party As RingApplicationRow) As PartyRow
            Dim rowPartyRow As PartyRow = CType(Me.NewRow,PartyRow)
            rowPartyRow.ItemArray = New Object() {PartyID, PartyAddressID, AddressReason, Nothing, parentRingApplicationRowByRingApplication_Party(23)}
            Me.Rows.Add(rowPartyRow)
            Return rowPartyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PartyDataTable = CType(MyBase.Clone,PartyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PartyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPartyID = Me.Columns("PartyID")
            Me.columnPartyAddressID = Me.Columns("PartyAddressID")
            Me.columnAddressReason = Me.Columns("AddressReason")
            Me.columnParty_Id = Me.Columns("Party_Id")
            Me.columnRingApplication_Id = Me.Columns("RingApplication_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPartyID = New DataColumn("PartyID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyID)
            Me.columnPartyAddressID = New DataColumn("PartyAddressID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyAddressID)
            Me.columnAddressReason = New DataColumn("AddressReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressReason)
            Me.columnParty_Id = New DataColumn("Party_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnParty_Id)
            Me.columnRingApplication_Id = New DataColumn("RingApplication_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnRingApplication_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnParty_Id}, true))
            Me.columnPartyID.AllowDBNull = false
            Me.columnParty_Id.AutoIncrement = true
            Me.columnParty_Id.AllowDBNull = false
            Me.columnParty_Id.Unique = true
        End Sub
        
        Public Function NewPartyRow() As PartyRow
            Return CType(Me.NewRow,PartyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PartyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PartyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PartyRowChangedEvent) Is Nothing) Then
                RaiseEvent PartyRowChanged(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PartyRowChangingEvent) Is Nothing) Then
                RaiseEvent PartyRowChanging(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PartyRowDeletedEvent) Is Nothing) Then
                RaiseEvent PartyRowDeleted(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PartyRowDeletingEvent) Is Nothing) Then
                RaiseEvent PartyRowDeleting(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePartyRow(ByVal row As PartyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PartyRow
        Inherits DataRow
        
        Private tableParty As PartyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParty = CType(Me.Table,PartyDataTable)
        End Sub
        
        Public Property PartyID As Integer
            Get
                Return CType(Me(Me.tableParty.PartyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableParty.PartyIDColumn) = value
            End Set
        End Property
        
        Public Property PartyAddressID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParty.PartyAddressIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty.PartyAddressIDColumn) = value
            End Set
        End Property
        
        Public Property AddressReason As String
            Get
                Try 
                    Return CType(Me(Me.tableParty.AddressReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty.AddressReasonColumn) = value
            End Set
        End Property
        
        Public Property RingApplicationRow As RingApplicationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RingApplication_Party")),RingApplicationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RingApplication_Party"))
            End Set
        End Property
        
        Public Function IsPartyAddressIDNull() As Boolean
            Return Me.IsNull(Me.tableParty.PartyAddressIDColumn)
        End Function
        
        Public Sub SetPartyAddressIDNull()
            Me(Me.tableParty.PartyAddressIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressReasonNull() As Boolean
            Return Me.IsNull(Me.tableParty.AddressReasonColumn)
        End Function
        
        Public Sub SetAddressReasonNull()
            Me(Me.tableParty.AddressReasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetDeclarationRows() As DeclarationRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Party_Declaration")),DeclarationRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PartyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PartyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PartyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PartyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeclarationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecialRequirements As DataColumn
        
        Private columnIsUnderEighteen As DataColumn
        
        Private columnSpecialPenalty As DataColumn
        
        Private columnOtherAnimalOffence As DataColumn
        
        Private columnTrueAndCorrect As DataColumn
        
        Private columnDeclaration_Id As DataColumn
        
        Private columnParty_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Declaration")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecialRequirementsColumn As DataColumn
            Get
                Return Me.columnSpecialRequirements
            End Get
        End Property
        
        Friend ReadOnly Property IsUnderEighteenColumn As DataColumn
            Get
                Return Me.columnIsUnderEighteen
            End Get
        End Property
        
        Friend ReadOnly Property SpecialPenaltyColumn As DataColumn
            Get
                Return Me.columnSpecialPenalty
            End Get
        End Property
        
        Friend ReadOnly Property OtherAnimalOffenceColumn As DataColumn
            Get
                Return Me.columnOtherAnimalOffence
            End Get
        End Property
        
        Friend ReadOnly Property TrueAndCorrectColumn As DataColumn
            Get
                Return Me.columnTrueAndCorrect
            End Get
        End Property
        
        Friend ReadOnly Property Declaration_IdColumn As DataColumn
            Get
                Return Me.columnDeclaration_Id
            End Get
        End Property
        
        Friend ReadOnly Property Party_IdColumn As DataColumn
            Get
                Return Me.columnParty_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeclarationRow
            Get
                Return CType(Me.Rows(index),DeclarationRow)
            End Get
        End Property
        
        Public Event DeclarationRowChanged As DeclarationRowChangeEventHandler
        
        Public Event DeclarationRowChanging As DeclarationRowChangeEventHandler
        
        Public Event DeclarationRowDeleted As DeclarationRowChangeEventHandler
        
        Public Event DeclarationRowDeleting As DeclarationRowChangeEventHandler
        
        Public Overloads Sub AddDeclarationRow(ByVal row As DeclarationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDeclarationRow(ByVal SpecialRequirements As String, ByVal IsUnderEighteen As Boolean, ByVal SpecialPenalty As Boolean, ByVal OtherAnimalOffence As Boolean, ByVal TrueAndCorrect As Boolean, ByVal parentPartyRowByParty_Declaration As PartyRow) As DeclarationRow
            Dim rowDeclarationRow As DeclarationRow = CType(Me.NewRow,DeclarationRow)
            rowDeclarationRow.ItemArray = New Object() {SpecialRequirements, IsUnderEighteen, SpecialPenalty, OtherAnimalOffence, TrueAndCorrect, Nothing, parentPartyRowByParty_Declaration(3)}
            Me.Rows.Add(rowDeclarationRow)
            Return rowDeclarationRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DeclarationDataTable = CType(MyBase.Clone,DeclarationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DeclarationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecialRequirements = Me.Columns("SpecialRequirements")
            Me.columnIsUnderEighteen = Me.Columns("IsUnderEighteen")
            Me.columnSpecialPenalty = Me.Columns("SpecialPenalty")
            Me.columnOtherAnimalOffence = Me.Columns("OtherAnimalOffence")
            Me.columnTrueAndCorrect = Me.Columns("TrueAndCorrect")
            Me.columnDeclaration_Id = Me.Columns("Declaration_Id")
            Me.columnParty_Id = Me.Columns("Party_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecialRequirements = New DataColumn("SpecialRequirements", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialRequirements)
            Me.columnIsUnderEighteen = New DataColumn("IsUnderEighteen", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsUnderEighteen)
            Me.columnSpecialPenalty = New DataColumn("SpecialPenalty", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialPenalty)
            Me.columnOtherAnimalOffence = New DataColumn("OtherAnimalOffence", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherAnimalOffence)
            Me.columnTrueAndCorrect = New DataColumn("TrueAndCorrect", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTrueAndCorrect)
            Me.columnDeclaration_Id = New DataColumn("Declaration_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDeclaration_Id)
            Me.columnParty_Id = New DataColumn("Party_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnParty_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnDeclaration_Id}, true))
            Me.columnSpecialRequirements.AllowDBNull = false
            Me.columnIsUnderEighteen.AllowDBNull = false
            Me.columnSpecialPenalty.AllowDBNull = false
            Me.columnOtherAnimalOffence.AllowDBNull = false
            Me.columnTrueAndCorrect.AllowDBNull = false
            Me.columnDeclaration_Id.AutoIncrement = true
            Me.columnDeclaration_Id.AllowDBNull = false
            Me.columnDeclaration_Id.Unique = true
        End Sub
        
        Public Function NewDeclarationRow() As DeclarationRow
            Return CType(Me.NewRow,DeclarationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DeclarationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DeclarationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeclarationRowChangedEvent) Is Nothing) Then
                RaiseEvent DeclarationRowChanged(Me, New DeclarationRowChangeEvent(CType(e.Row,DeclarationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeclarationRowChangingEvent) Is Nothing) Then
                RaiseEvent DeclarationRowChanging(Me, New DeclarationRowChangeEvent(CType(e.Row,DeclarationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeclarationRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeclarationRowDeleted(Me, New DeclarationRowChangeEvent(CType(e.Row,DeclarationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeclarationRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeclarationRowDeleting(Me, New DeclarationRowChangeEvent(CType(e.Row,DeclarationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDeclarationRow(ByVal row As DeclarationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeclarationRow
        Inherits DataRow
        
        Private tableDeclaration As DeclarationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeclaration = CType(Me.Table,DeclarationDataTable)
        End Sub
        
        Public Property SpecialRequirements As String
            Get
                Return CType(Me(Me.tableDeclaration.SpecialRequirementsColumn),String)
            End Get
            Set
                Me(Me.tableDeclaration.SpecialRequirementsColumn) = value
            End Set
        End Property
        
        Public Property IsUnderEighteen As Boolean
            Get
                Return CType(Me(Me.tableDeclaration.IsUnderEighteenColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeclaration.IsUnderEighteenColumn) = value
            End Set
        End Property
        
        Public Property SpecialPenalty As Boolean
            Get
                Return CType(Me(Me.tableDeclaration.SpecialPenaltyColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeclaration.SpecialPenaltyColumn) = value
            End Set
        End Property
        
        Public Property OtherAnimalOffence As Boolean
            Get
                Return CType(Me(Me.tableDeclaration.OtherAnimalOffenceColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeclaration.OtherAnimalOffenceColumn) = value
            End Set
        End Property
        
        Public Property TrueAndCorrect As Boolean
            Get
                Return CType(Me(Me.tableDeclaration.TrueAndCorrectColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeclaration.TrueAndCorrectColumn) = value
            End Set
        End Property
        
        Public Property PartyRow As PartyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Party_Declaration")),PartyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Party_Declaration"))
            End Set
        End Property
        
        Public Function GetConvictionRows() As ConvictionRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Declaration_Conviction")),ConvictionRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DeclarationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DeclarationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DeclarationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DeclarationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConvictionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private column_Date As DataColumn
        
        Private columnCourt As DataColumn
        
        Private columnOffence As DataColumn
        
        Private columnDeclaration_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Conviction")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property _DateColumn As DataColumn
            Get
                Return Me.column_Date
            End Get
        End Property
        
        Friend ReadOnly Property CourtColumn As DataColumn
            Get
                Return Me.columnCourt
            End Get
        End Property
        
        Friend ReadOnly Property OffenceColumn As DataColumn
            Get
                Return Me.columnOffence
            End Get
        End Property
        
        Friend ReadOnly Property Declaration_IdColumn As DataColumn
            Get
                Return Me.columnDeclaration_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConvictionRow
            Get
                Return CType(Me.Rows(index),ConvictionRow)
            End Get
        End Property
        
        Public Event ConvictionRowChanged As ConvictionRowChangeEventHandler
        
        Public Event ConvictionRowChanging As ConvictionRowChangeEventHandler
        
        Public Event ConvictionRowDeleted As ConvictionRowChangeEventHandler
        
        Public Event ConvictionRowDeleting As ConvictionRowChangeEventHandler
        
        Public Overloads Sub AddConvictionRow(ByVal row As ConvictionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddConvictionRow(ByVal _Date As Date, ByVal Court As String, ByVal Offence As String, ByVal parentDeclarationRowByDeclaration_Conviction As DeclarationRow) As ConvictionRow
            Dim rowConvictionRow As ConvictionRow = CType(Me.NewRow,ConvictionRow)
            rowConvictionRow.ItemArray = New Object() {_Date, Court, Offence, parentDeclarationRowByDeclaration_Conviction(5)}
            Me.Rows.Add(rowConvictionRow)
            Return rowConvictionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ConvictionDataTable = CType(MyBase.Clone,ConvictionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ConvictionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.column_Date = Me.Columns("Date")
            Me.columnCourt = Me.Columns("Court")
            Me.columnOffence = Me.Columns("Offence")
            Me.columnDeclaration_Id = Me.Columns("Declaration_Id")
        End Sub
        
        Private Sub InitClass()
            Me.column_Date = New DataColumn("Date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_Date)
            Me.columnCourt = New DataColumn("Court", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCourt)
            Me.columnOffence = New DataColumn("Offence", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOffence)
            Me.columnDeclaration_Id = New DataColumn("Declaration_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnDeclaration_Id)
            Me.column_Date.AllowDBNull = false
            Me.columnCourt.AllowDBNull = false
            Me.columnOffence.AllowDBNull = false
        End Sub
        
        Public Function NewConvictionRow() As ConvictionRow
            Return CType(Me.NewRow,ConvictionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ConvictionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConvictionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConvictionRowChangedEvent) Is Nothing) Then
                RaiseEvent ConvictionRowChanged(Me, New ConvictionRowChangeEvent(CType(e.Row,ConvictionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConvictionRowChangingEvent) Is Nothing) Then
                RaiseEvent ConvictionRowChanging(Me, New ConvictionRowChangeEvent(CType(e.Row,ConvictionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConvictionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConvictionRowDeleted(Me, New ConvictionRowChangeEvent(CType(e.Row,ConvictionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConvictionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConvictionRowDeleting(Me, New ConvictionRowChangeEvent(CType(e.Row,ConvictionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveConvictionRow(ByVal row As ConvictionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConvictionRow
        Inherits DataRow
        
        Private tableConviction As ConvictionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableConviction = CType(Me.Table,ConvictionDataTable)
        End Sub
        
        Public Property _Date As Date
            Get
                Return CType(Me(Me.tableConviction._DateColumn),Date)
            End Get
            Set
                Me(Me.tableConviction._DateColumn) = value
            End Set
        End Property
        
        Public Property Court As String
            Get
                Return CType(Me(Me.tableConviction.CourtColumn),String)
            End Get
            Set
                Me(Me.tableConviction.CourtColumn) = value
            End Set
        End Property
        
        Public Property Offence As String
            Get
                Return CType(Me(Me.tableConviction.OffenceColumn),String)
            End Get
            Set
                Me(Me.tableConviction.OffenceColumn) = value
            End Set
        End Property
        
        Public Property DeclarationRow As DeclarationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Declaration_Conviction")),DeclarationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Declaration_Conviction"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ConvictionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ConvictionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ConvictionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ConvictionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParentsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnParents_Id As DataColumn
        
        Private columnRingApplication_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Parents")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Parents_IdColumn As DataColumn
            Get
                Return Me.columnParents_Id
            End Get
        End Property
        
        Friend ReadOnly Property RingApplication_IdColumn As DataColumn
            Get
                Return Me.columnRingApplication_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ParentsRow
            Get
                Return CType(Me.Rows(index),ParentsRow)
            End Get
        End Property
        
        Public Event ParentsRowChanged As ParentsRowChangeEventHandler
        
        Public Event ParentsRowChanging As ParentsRowChangeEventHandler
        
        Public Event ParentsRowDeleted As ParentsRowChangeEventHandler
        
        Public Event ParentsRowDeleting As ParentsRowChangeEventHandler
        
        Public Overloads Sub AddParentsRow(ByVal row As ParentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddParentsRow(ByVal parentRingApplicationRowByRingApplication_Parents As RingApplicationRow) As ParentsRow
            Dim rowParentsRow As ParentsRow = CType(Me.NewRow,ParentsRow)
            rowParentsRow.ItemArray = New Object() {Nothing, parentRingApplicationRowByRingApplication_Parents(23)}
            Me.Rows.Add(rowParentsRow)
            Return rowParentsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ParentsDataTable = CType(MyBase.Clone,ParentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ParentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnParents_Id = Me.Columns("Parents_Id")
            Me.columnRingApplication_Id = Me.Columns("RingApplication_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnParents_Id = New DataColumn("Parents_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnParents_Id)
            Me.columnRingApplication_Id = New DataColumn("RingApplication_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnRingApplication_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnParents_Id}, true))
            Me.columnParents_Id.AutoIncrement = true
            Me.columnParents_Id.AllowDBNull = false
            Me.columnParents_Id.Unique = true
        End Sub
        
        Public Function NewParentsRow() As ParentsRow
            Return CType(Me.NewRow,ParentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ParentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParentsRowChangedEvent) Is Nothing) Then
                RaiseEvent ParentsRowChanged(Me, New ParentsRowChangeEvent(CType(e.Row,ParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParentsRowChangingEvent) Is Nothing) Then
                RaiseEvent ParentsRowChanging(Me, New ParentsRowChangeEvent(CType(e.Row,ParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParentsRowDeleted(Me, New ParentsRowChangeEvent(CType(e.Row,ParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParentsRowDeleting(Me, New ParentsRowChangeEvent(CType(e.Row,ParentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveParentsRow(ByVal row As ParentsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParentsRow
        Inherits DataRow
        
        Private tableParents As ParentsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParents = CType(Me.Table,ParentsDataTable)
        End Sub
        
        Public Property RingApplicationRow As RingApplicationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RingApplication_Parents")),RingApplicationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RingApplication_Parents"))
            End Set
        End Property
        
        Public Function GetMotherRows() As MotherRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Parents_Mother")),MotherRow())
        End Function
        
        Public Function GetFatherRows() As FatherRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Parents_Father")),FatherRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ParentsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ParentsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ParentsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ParentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMother_Id As DataColumn
        
        Private columnParents_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Mother")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Mother_IdColumn As DataColumn
            Get
                Return Me.columnMother_Id
            End Get
        End Property
        
        Friend ReadOnly Property Parents_IdColumn As DataColumn
            Get
                Return Me.columnParents_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MotherRow
            Get
                Return CType(Me.Rows(index),MotherRow)
            End Get
        End Property
        
        Public Event MotherRowChanged As MotherRowChangeEventHandler
        
        Public Event MotherRowChanging As MotherRowChangeEventHandler
        
        Public Event MotherRowDeleted As MotherRowChangeEventHandler
        
        Public Event MotherRowDeleting As MotherRowChangeEventHandler
        
        Public Overloads Sub AddMotherRow(ByVal row As MotherRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMotherRow(ByVal parentParentsRowByParents_Mother As ParentsRow) As MotherRow
            Dim rowMotherRow As MotherRow = CType(Me.NewRow,MotherRow)
            rowMotherRow.ItemArray = New Object() {Nothing, parentParentsRowByParents_Mother(0)}
            Me.Rows.Add(rowMotherRow)
            Return rowMotherRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MotherDataTable = CType(MyBase.Clone,MotherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MotherDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMother_Id = Me.Columns("Mother_Id")
            Me.columnParents_Id = Me.Columns("Parents_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnMother_Id = New DataColumn("Mother_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMother_Id)
            Me.columnParents_Id = New DataColumn("Parents_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnParents_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMother_Id}, true))
            Me.columnMother_Id.AutoIncrement = true
            Me.columnMother_Id.AllowDBNull = false
            Me.columnMother_Id.Unique = true
        End Sub
        
        Public Function NewMotherRow() As MotherRow
            Return CType(Me.NewRow,MotherRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MotherRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MotherRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MotherRowChangedEvent) Is Nothing) Then
                RaiseEvent MotherRowChanged(Me, New MotherRowChangeEvent(CType(e.Row,MotherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MotherRowChangingEvent) Is Nothing) Then
                RaiseEvent MotherRowChanging(Me, New MotherRowChangeEvent(CType(e.Row,MotherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MotherRowDeletedEvent) Is Nothing) Then
                RaiseEvent MotherRowDeleted(Me, New MotherRowChangeEvent(CType(e.Row,MotherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MotherRowDeletingEvent) Is Nothing) Then
                RaiseEvent MotherRowDeleting(Me, New MotherRowChangeEvent(CType(e.Row,MotherRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMotherRow(ByVal row As MotherRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherRow
        Inherits DataRow
        
        Private tableMother As MotherDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMother = CType(Me.Table,MotherDataTable)
        End Sub
        
        Public Property ParentsRow As ParentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Parents_Mother")),ParentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Parents_Mother"))
            End Set
        End Property
        
        Public Function GetMotherSpecimenRows() As MotherSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Mother_MotherSpecimen")),MotherSpecimenRow())
        End Function
        
        Public Function GetMotherIDMarkRows() As MotherIDMarkRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Mother_MotherIDMark")),MotherIDMarkRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MotherRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MotherRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MotherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnMother_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("MotherSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Mother_IdColumn As DataColumn
            Get
                Return Me.columnMother_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MotherSpecimenRow
            Get
                Return CType(Me.Rows(index),MotherSpecimenRow)
            End Get
        End Property
        
        Public Event MotherSpecimenRowChanged As MotherSpecimenRowChangeEventHandler
        
        Public Event MotherSpecimenRowChanging As MotherSpecimenRowChangeEventHandler
        
        Public Event MotherSpecimenRowDeleted As MotherSpecimenRowChangeEventHandler
        
        Public Event MotherSpecimenRowDeleting As MotherSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddMotherSpecimenRow(ByVal row As MotherSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMotherSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentMotherRowByMother_MotherSpecimen As MotherRow) As MotherSpecimenRow
            Dim rowMotherSpecimenRow As MotherSpecimenRow = CType(Me.NewRow,MotherSpecimenRow)
            rowMotherSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentMotherRowByMother_MotherSpecimen(0)}
            Me.Rows.Add(rowMotherSpecimenRow)
            Return rowMotherSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MotherSpecimenDataTable = CType(MyBase.Clone,MotherSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MotherSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnMother_Id = Me.Columns("Mother_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnMother_Id = New DataColumn("Mother_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMother_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewMotherSpecimenRow() As MotherSpecimenRow
            Return CType(Me.NewRow,MotherSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MotherSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MotherSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MotherSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent MotherSpecimenRowChanged(Me, New MotherSpecimenRowChangeEvent(CType(e.Row,MotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MotherSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent MotherSpecimenRowChanging(Me, New MotherSpecimenRowChangeEvent(CType(e.Row,MotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MotherSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent MotherSpecimenRowDeleted(Me, New MotherSpecimenRowChangeEvent(CType(e.Row,MotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MotherSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent MotherSpecimenRowDeleting(Me, New MotherSpecimenRowChangeEvent(CType(e.Row,MotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMotherSpecimenRow(ByVal row As MotherSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherSpecimenRow
        Inherits DataRow
        
        Private tableMotherSpecimen As MotherSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMotherSpecimen = CType(Me.Table,MotherSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableMotherSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableMotherSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableMotherSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableMotherSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableMotherSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableMotherSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableMotherSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableMotherSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableMotherSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property MotherRow As MotherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Mother_MotherSpecimen")),MotherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Mother_MotherSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableMotherSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableMotherSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableMotherSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableMotherSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableMotherSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableMotherSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableMotherSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableMotherSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableMotherSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MotherSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MotherSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MotherSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherIDMarkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnMother_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("MotherIDMark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property Mother_IdColumn As DataColumn
            Get
                Return Me.columnMother_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As MotherIDMarkRow
            Get
                Return CType(Me.Rows(index),MotherIDMarkRow)
            End Get
        End Property
        
        Public Event MotherIDMarkRowChanged As MotherIDMarkRowChangeEventHandler
        
        Public Event MotherIDMarkRowChanging As MotherIDMarkRowChangeEventHandler
        
        Public Event MotherIDMarkRowDeleted As MotherIDMarkRowChangeEventHandler
        
        Public Event MotherIDMarkRowDeleting As MotherIDMarkRowChangeEventHandler
        
        Public Overloads Sub AddMotherIDMarkRow(ByVal row As MotherIDMarkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddMotherIDMarkRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentMotherRowByMother_MotherIDMark As MotherRow) As MotherIDMarkRow
            Dim rowMotherIDMarkRow As MotherIDMarkRow = CType(Me.NewRow,MotherIDMarkRow)
            rowMotherIDMarkRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentMotherRowByMother_MotherIDMark(0)}
            Me.Rows.Add(rowMotherIDMarkRow)
            Return rowMotherIDMarkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As MotherIDMarkDataTable = CType(MyBase.Clone,MotherIDMarkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New MotherIDMarkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnMother_Id = Me.Columns("Mother_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnMother_Id = New DataColumn("Mother_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnMother_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewMotherIDMarkRow() As MotherIDMarkRow
            Return CType(Me.NewRow,MotherIDMarkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New MotherIDMarkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MotherIDMarkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MotherIDMarkRowChangedEvent) Is Nothing) Then
                RaiseEvent MotherIDMarkRowChanged(Me, New MotherIDMarkRowChangeEvent(CType(e.Row,MotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MotherIDMarkRowChangingEvent) Is Nothing) Then
                RaiseEvent MotherIDMarkRowChanging(Me, New MotherIDMarkRowChangeEvent(CType(e.Row,MotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MotherIDMarkRowDeletedEvent) Is Nothing) Then
                RaiseEvent MotherIDMarkRowDeleted(Me, New MotherIDMarkRowChangeEvent(CType(e.Row,MotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MotherIDMarkRowDeletingEvent) Is Nothing) Then
                RaiseEvent MotherIDMarkRowDeleting(Me, New MotherIDMarkRowChangeEvent(CType(e.Row,MotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveMotherIDMarkRow(ByVal row As MotherIDMarkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherIDMarkRow
        Inherits DataRow
        
        Private tableMotherIDMark As MotherIDMarkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableMotherIDMark = CType(Me.Table,MotherIDMarkDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableMotherIDMark.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableMotherIDMark.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableMotherIDMark.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableMotherIDMark.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMotherIDMark.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherIDMark.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableMotherIDMark.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotherIDMark.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableMotherIDMark.StatusColumn),String)
            End Get
            Set
                Me(Me.tableMotherIDMark.StatusColumn) = value
            End Set
        End Property
        
        Public Property MotherRow As MotherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Mother_MotherIDMark")),MotherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Mother_MotherIDMark"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableMotherIDMark.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableMotherIDMark.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableMotherIDMark.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableMotherIDMark.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class MotherIDMarkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As MotherIDMarkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As MotherIDMarkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As MotherIDMarkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFather_Id As DataColumn
        
        Private columnParents_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Father")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Father_IdColumn As DataColumn
            Get
                Return Me.columnFather_Id
            End Get
        End Property
        
        Friend ReadOnly Property Parents_IdColumn As DataColumn
            Get
                Return Me.columnParents_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FatherRow
            Get
                Return CType(Me.Rows(index),FatherRow)
            End Get
        End Property
        
        Public Event FatherRowChanged As FatherRowChangeEventHandler
        
        Public Event FatherRowChanging As FatherRowChangeEventHandler
        
        Public Event FatherRowDeleted As FatherRowChangeEventHandler
        
        Public Event FatherRowDeleting As FatherRowChangeEventHandler
        
        Public Overloads Sub AddFatherRow(ByVal row As FatherRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFatherRow(ByVal parentParentsRowByParents_Father As ParentsRow) As FatherRow
            Dim rowFatherRow As FatherRow = CType(Me.NewRow,FatherRow)
            rowFatherRow.ItemArray = New Object() {Nothing, parentParentsRowByParents_Father(0)}
            Me.Rows.Add(rowFatherRow)
            Return rowFatherRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FatherDataTable = CType(MyBase.Clone,FatherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FatherDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFather_Id = Me.Columns("Father_Id")
            Me.columnParents_Id = Me.Columns("Parents_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFather_Id = New DataColumn("Father_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFather_Id)
            Me.columnParents_Id = New DataColumn("Parents_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnParents_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnFather_Id}, true))
            Me.columnFather_Id.AutoIncrement = true
            Me.columnFather_Id.AllowDBNull = false
            Me.columnFather_Id.Unique = true
        End Sub
        
        Public Function NewFatherRow() As FatherRow
            Return CType(Me.NewRow,FatherRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FatherRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FatherRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FatherRowChangedEvent) Is Nothing) Then
                RaiseEvent FatherRowChanged(Me, New FatherRowChangeEvent(CType(e.Row,FatherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FatherRowChangingEvent) Is Nothing) Then
                RaiseEvent FatherRowChanging(Me, New FatherRowChangeEvent(CType(e.Row,FatherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FatherRowDeletedEvent) Is Nothing) Then
                RaiseEvent FatherRowDeleted(Me, New FatherRowChangeEvent(CType(e.Row,FatherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FatherRowDeletingEvent) Is Nothing) Then
                RaiseEvent FatherRowDeleting(Me, New FatherRowChangeEvent(CType(e.Row,FatherRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFatherRow(ByVal row As FatherRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherRow
        Inherits DataRow
        
        Private tableFather As FatherDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFather = CType(Me.Table,FatherDataTable)
        End Sub
        
        Public Property ParentsRow As ParentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Parents_Father")),ParentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Parents_Father"))
            End Set
        End Property
        
        Public Function GetFatherSpecimenRows() As FatherSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Father_FatherSpecimen")),FatherSpecimenRow())
        End Function
        
        Public Function GetFatherIDMarkRows() As FatherIDMarkRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Father_FatherIDMark")),FatherIDMarkRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FatherRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FatherRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FatherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnFather_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("FatherSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Father_IdColumn As DataColumn
            Get
                Return Me.columnFather_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FatherSpecimenRow
            Get
                Return CType(Me.Rows(index),FatherSpecimenRow)
            End Get
        End Property
        
        Public Event FatherSpecimenRowChanged As FatherSpecimenRowChangeEventHandler
        
        Public Event FatherSpecimenRowChanging As FatherSpecimenRowChangeEventHandler
        
        Public Event FatherSpecimenRowDeleted As FatherSpecimenRowChangeEventHandler
        
        Public Event FatherSpecimenRowDeleting As FatherSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddFatherSpecimenRow(ByVal row As FatherSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFatherSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentFatherRowByFather_FatherSpecimen As FatherRow) As FatherSpecimenRow
            Dim rowFatherSpecimenRow As FatherSpecimenRow = CType(Me.NewRow,FatherSpecimenRow)
            rowFatherSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentFatherRowByFather_FatherSpecimen(0)}
            Me.Rows.Add(rowFatherSpecimenRow)
            Return rowFatherSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FatherSpecimenDataTable = CType(MyBase.Clone,FatherSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FatherSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnFather_Id = Me.Columns("Father_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnFather_Id = New DataColumn("Father_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFather_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewFatherSpecimenRow() As FatherSpecimenRow
            Return CType(Me.NewRow,FatherSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FatherSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FatherSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FatherSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent FatherSpecimenRowChanged(Me, New FatherSpecimenRowChangeEvent(CType(e.Row,FatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FatherSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent FatherSpecimenRowChanging(Me, New FatherSpecimenRowChangeEvent(CType(e.Row,FatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FatherSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent FatherSpecimenRowDeleted(Me, New FatherSpecimenRowChangeEvent(CType(e.Row,FatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FatherSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent FatherSpecimenRowDeleting(Me, New FatherSpecimenRowChangeEvent(CType(e.Row,FatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFatherSpecimenRow(ByVal row As FatherSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherSpecimenRow
        Inherits DataRow
        
        Private tableFatherSpecimen As FatherSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFatherSpecimen = CType(Me.Table,FatherSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableFatherSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableFatherSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableFatherSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableFatherSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableFatherSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableFatherSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableFatherSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableFatherSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableFatherSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property FatherRow As FatherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Father_FatherSpecimen")),FatherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Father_FatherSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableFatherSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableFatherSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableFatherSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableFatherSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableFatherSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableFatherSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableFatherSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableFatherSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableFatherSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FatherSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FatherSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FatherSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherIDMarkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnFather_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("FatherIDMark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property Father_IdColumn As DataColumn
            Get
                Return Me.columnFather_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FatherIDMarkRow
            Get
                Return CType(Me.Rows(index),FatherIDMarkRow)
            End Get
        End Property
        
        Public Event FatherIDMarkRowChanged As FatherIDMarkRowChangeEventHandler
        
        Public Event FatherIDMarkRowChanging As FatherIDMarkRowChangeEventHandler
        
        Public Event FatherIDMarkRowDeleted As FatherIDMarkRowChangeEventHandler
        
        Public Event FatherIDMarkRowDeleting As FatherIDMarkRowChangeEventHandler
        
        Public Overloads Sub AddFatherIDMarkRow(ByVal row As FatherIDMarkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFatherIDMarkRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentFatherRowByFather_FatherIDMark As FatherRow) As FatherIDMarkRow
            Dim rowFatherIDMarkRow As FatherIDMarkRow = CType(Me.NewRow,FatherIDMarkRow)
            rowFatherIDMarkRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentFatherRowByFather_FatherIDMark(0)}
            Me.Rows.Add(rowFatherIDMarkRow)
            Return rowFatherIDMarkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FatherIDMarkDataTable = CType(MyBase.Clone,FatherIDMarkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FatherIDMarkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnFather_Id = Me.Columns("Father_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnFather_Id = New DataColumn("Father_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnFather_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewFatherIDMarkRow() As FatherIDMarkRow
            Return CType(Me.NewRow,FatherIDMarkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FatherIDMarkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FatherIDMarkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FatherIDMarkRowChangedEvent) Is Nothing) Then
                RaiseEvent FatherIDMarkRowChanged(Me, New FatherIDMarkRowChangeEvent(CType(e.Row,FatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FatherIDMarkRowChangingEvent) Is Nothing) Then
                RaiseEvent FatherIDMarkRowChanging(Me, New FatherIDMarkRowChangeEvent(CType(e.Row,FatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FatherIDMarkRowDeletedEvent) Is Nothing) Then
                RaiseEvent FatherIDMarkRowDeleted(Me, New FatherIDMarkRowChangeEvent(CType(e.Row,FatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FatherIDMarkRowDeletingEvent) Is Nothing) Then
                RaiseEvent FatherIDMarkRowDeleting(Me, New FatherIDMarkRowChangeEvent(CType(e.Row,FatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFatherIDMarkRow(ByVal row As FatherIDMarkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherIDMarkRow
        Inherits DataRow
        
        Private tableFatherIDMark As FatherIDMarkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFatherIDMark = CType(Me.Table,FatherIDMarkDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableFatherIDMark.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableFatherIDMark.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableFatherIDMark.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableFatherIDMark.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFatherIDMark.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherIDMark.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableFatherIDMark.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFatherIDMark.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableFatherIDMark.StatusColumn),String)
            End Get
            Set
                Me(Me.tableFatherIDMark.StatusColumn) = value
            End Set
        End Property
        
        Public Property FatherRow As FatherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Father_FatherIDMark")),FatherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Father_FatherIDMark"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableFatherIDMark.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableFatherIDMark.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableFatherIDMark.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableFatherIDMark.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FatherIDMarkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FatherIDMarkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FatherIDMarkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FatherIDMarkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClutchDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIsHatched As DataColumn
        
        Private columnSpecialRequirements As DataColumn
        
        Private columnClutch_Id As DataColumn
        
        Private columnRingApplication_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Clutch")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchedColumn As DataColumn
            Get
                Return Me.columnIsHatched
            End Get
        End Property
        
        Friend ReadOnly Property SpecialRequirementsColumn As DataColumn
            Get
                Return Me.columnSpecialRequirements
            End Get
        End Property
        
        Friend ReadOnly Property Clutch_IdColumn As DataColumn
            Get
                Return Me.columnClutch_Id
            End Get
        End Property
        
        Friend ReadOnly Property RingApplication_IdColumn As DataColumn
            Get
                Return Me.columnRingApplication_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClutchRow
            Get
                Return CType(Me.Rows(index),ClutchRow)
            End Get
        End Property
        
        Public Event ClutchRowChanged As ClutchRowChangeEventHandler
        
        Public Event ClutchRowChanging As ClutchRowChangeEventHandler
        
        Public Event ClutchRowDeleted As ClutchRowChangeEventHandler
        
        Public Event ClutchRowDeleting As ClutchRowChangeEventHandler
        
        Public Overloads Sub AddClutchRow(ByVal row As ClutchRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddClutchRow(ByVal IsHatched As Boolean, ByVal SpecialRequirements As String, ByVal parentRingApplicationRowByRingApplication_Clutch As RingApplicationRow) As ClutchRow
            Dim rowClutchRow As ClutchRow = CType(Me.NewRow,ClutchRow)
            rowClutchRow.ItemArray = New Object() {IsHatched, SpecialRequirements, Nothing, parentRingApplicationRowByRingApplication_Clutch(23)}
            Me.Rows.Add(rowClutchRow)
            Return rowClutchRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ClutchDataTable = CType(MyBase.Clone,ClutchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ClutchDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIsHatched = Me.Columns("IsHatched")
            Me.columnSpecialRequirements = Me.Columns("SpecialRequirements")
            Me.columnClutch_Id = Me.Columns("Clutch_Id")
            Me.columnRingApplication_Id = Me.Columns("RingApplication_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIsHatched = New DataColumn("IsHatched", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatched)
            Me.columnSpecialRequirements = New DataColumn("SpecialRequirements", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialRequirements)
            Me.columnClutch_Id = New DataColumn("Clutch_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClutch_Id)
            Me.columnRingApplication_Id = New DataColumn("RingApplication_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnRingApplication_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnClutch_Id}, true))
            Me.columnIsHatched.AllowDBNull = false
            Me.columnSpecialRequirements.MaxLength = 500
            Me.columnClutch_Id.AutoIncrement = true
            Me.columnClutch_Id.AllowDBNull = false
            Me.columnClutch_Id.Unique = true
        End Sub
        
        Public Function NewClutchRow() As ClutchRow
            Return CType(Me.NewRow,ClutchRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ClutchRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClutchRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClutchRowChangedEvent) Is Nothing) Then
                RaiseEvent ClutchRowChanged(Me, New ClutchRowChangeEvent(CType(e.Row,ClutchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClutchRowChangingEvent) Is Nothing) Then
                RaiseEvent ClutchRowChanging(Me, New ClutchRowChangeEvent(CType(e.Row,ClutchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClutchRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClutchRowDeleted(Me, New ClutchRowChangeEvent(CType(e.Row,ClutchRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClutchRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClutchRowDeleting(Me, New ClutchRowChangeEvent(CType(e.Row,ClutchRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveClutchRow(ByVal row As ClutchRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClutchRow
        Inherits DataRow
        
        Private tableClutch As ClutchDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableClutch = CType(Me.Table,ClutchDataTable)
        End Sub
        
        Public Property IsHatched As Boolean
            Get
                Return CType(Me(Me.tableClutch.IsHatchedColumn),Boolean)
            End Get
            Set
                Me(Me.tableClutch.IsHatchedColumn) = value
            End Set
        End Property
        
        Public Property SpecialRequirements As String
            Get
                Try 
                    Return CType(Me(Me.tableClutch.SpecialRequirementsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClutch.SpecialRequirementsColumn) = value
            End Set
        End Property
        
        Public Property RingApplicationRow As RingApplicationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RingApplication_Clutch")),RingApplicationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RingApplication_Clutch"))
            End Set
        End Property
        
        Public Function IsSpecialRequirementsNull() As Boolean
            Return Me.IsNull(Me.tableClutch.SpecialRequirementsColumn)
        End Function
        
        Public Sub SetSpecialRequirementsNull()
            Me(Me.tableClutch.SpecialRequirementsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetLastLaidDateRows() As LastLaidDateRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Clutch_LastLaidDate")),LastLaidDateRow())
        End Function
        
        Public Function GetEggRows() As EggRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Clutch_Egg")),EggRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ClutchRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ClutchRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ClutchRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ClutchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LastLaidDateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIsExact As DataColumn
        
        Private columnLastLaidDate_text As DataColumn
        
        Private columnClutch_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("LastLaidDate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IsExactColumn As DataColumn
            Get
                Return Me.columnIsExact
            End Get
        End Property
        
        Friend ReadOnly Property LastLaidDate_textColumn As DataColumn
            Get
                Return Me.columnLastLaidDate_text
            End Get
        End Property
        
        Friend ReadOnly Property Clutch_IdColumn As DataColumn
            Get
                Return Me.columnClutch_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As LastLaidDateRow
            Get
                Return CType(Me.Rows(index),LastLaidDateRow)
            End Get
        End Property
        
        Public Event LastLaidDateRowChanged As LastLaidDateRowChangeEventHandler
        
        Public Event LastLaidDateRowChanging As LastLaidDateRowChangeEventHandler
        
        Public Event LastLaidDateRowDeleted As LastLaidDateRowChangeEventHandler
        
        Public Event LastLaidDateRowDeleting As LastLaidDateRowChangeEventHandler
        
        Public Overloads Sub AddLastLaidDateRow(ByVal row As LastLaidDateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddLastLaidDateRow(ByVal IsExact As Boolean, ByVal LastLaidDate_text As Date, ByVal parentClutchRowByClutch_LastLaidDate As ClutchRow) As LastLaidDateRow
            Dim rowLastLaidDateRow As LastLaidDateRow = CType(Me.NewRow,LastLaidDateRow)
            rowLastLaidDateRow.ItemArray = New Object() {IsExact, LastLaidDate_text, parentClutchRowByClutch_LastLaidDate(2)}
            Me.Rows.Add(rowLastLaidDateRow)
            Return rowLastLaidDateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As LastLaidDateDataTable = CType(MyBase.Clone,LastLaidDateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New LastLaidDateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIsExact = Me.Columns("IsExact")
            Me.columnLastLaidDate_text = Me.Columns("LastLaidDate_text")
            Me.columnClutch_Id = Me.Columns("Clutch_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIsExact = New DataColumn("IsExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnIsExact)
            Me.columnLastLaidDate_text = New DataColumn("LastLaidDate_text", GetType(System.DateTime), Nothing, System.Data.MappingType.SimpleContent)
            Me.Columns.Add(Me.columnLastLaidDate_text)
            Me.columnClutch_Id = New DataColumn("Clutch_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClutch_Id)
            Me.columnIsExact.AllowDBNull = false
            Me.columnIsExact.Namespace = ""
        End Sub
        
        Public Function NewLastLaidDateRow() As LastLaidDateRow
            Return CType(Me.NewRow,LastLaidDateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New LastLaidDateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LastLaidDateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LastLaidDateRowChangedEvent) Is Nothing) Then
                RaiseEvent LastLaidDateRowChanged(Me, New LastLaidDateRowChangeEvent(CType(e.Row,LastLaidDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LastLaidDateRowChangingEvent) Is Nothing) Then
                RaiseEvent LastLaidDateRowChanging(Me, New LastLaidDateRowChangeEvent(CType(e.Row,LastLaidDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LastLaidDateRowDeletedEvent) Is Nothing) Then
                RaiseEvent LastLaidDateRowDeleted(Me, New LastLaidDateRowChangeEvent(CType(e.Row,LastLaidDateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LastLaidDateRowDeletingEvent) Is Nothing) Then
                RaiseEvent LastLaidDateRowDeleting(Me, New LastLaidDateRowChangeEvent(CType(e.Row,LastLaidDateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveLastLaidDateRow(ByVal row As LastLaidDateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LastLaidDateRow
        Inherits DataRow
        
        Private tableLastLaidDate As LastLaidDateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableLastLaidDate = CType(Me.Table,LastLaidDateDataTable)
        End Sub
        
        Public Property IsExact As Boolean
            Get
                Return CType(Me(Me.tableLastLaidDate.IsExactColumn),Boolean)
            End Get
            Set
                Me(Me.tableLastLaidDate.IsExactColumn) = value
            End Set
        End Property
        
        Public Property LastLaidDate_text As Date
            Get
                Try 
                    Return CType(Me(Me.tableLastLaidDate.LastLaidDate_textColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLastLaidDate.LastLaidDate_textColumn) = value
            End Set
        End Property
        
        Public Property ClutchRow As ClutchRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Clutch_LastLaidDate")),ClutchRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Clutch_LastLaidDate"))
            End Set
        End Property
        
        Public Function IsLastLaidDate_textNull() As Boolean
            Return Me.IsNull(Me.tableLastLaidDate.LastLaidDate_textColumn)
        End Function
        
        Public Sub SetLastLaidDate_textNull()
            Me(Me.tableLastLaidDate.LastLaidDate_textColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class LastLaidDateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As LastLaidDateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As LastLaidDateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As LastLaidDateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCloned As DataColumn
        
        Private columnEgg_Id As DataColumn
        
        Private columnClutch_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Egg")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ClonedColumn As DataColumn
            Get
                Return Me.columnCloned
            End Get
        End Property
        
        Friend ReadOnly Property Egg_IdColumn As DataColumn
            Get
                Return Me.columnEgg_Id
            End Get
        End Property
        
        Friend ReadOnly Property Clutch_IdColumn As DataColumn
            Get
                Return Me.columnClutch_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EggRow
            Get
                Return CType(Me.Rows(index),EggRow)
            End Get
        End Property
        
        Public Event EggRowChanged As EggRowChangeEventHandler
        
        Public Event EggRowChanging As EggRowChangeEventHandler
        
        Public Event EggRowDeleted As EggRowChangeEventHandler
        
        Public Event EggRowDeleting As EggRowChangeEventHandler
        
        Public Overloads Sub AddEggRow(ByVal row As EggRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEggRow(ByVal Cloned As Boolean, ByVal parentClutchRowByClutch_Egg As ClutchRow) As EggRow
            Dim rowEggRow As EggRow = CType(Me.NewRow,EggRow)
            rowEggRow.ItemArray = New Object() {Cloned, Nothing, parentClutchRowByClutch_Egg(2)}
            Me.Rows.Add(rowEggRow)
            Return rowEggRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EggDataTable = CType(MyBase.Clone,EggDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EggDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCloned = Me.Columns("Cloned")
            Me.columnEgg_Id = Me.Columns("Egg_Id")
            Me.columnClutch_Id = Me.Columns("Clutch_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCloned = New DataColumn("Cloned", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCloned)
            Me.columnEgg_Id = New DataColumn("Egg_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnEgg_Id)
            Me.columnClutch_Id = New DataColumn("Clutch_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnClutch_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnEgg_Id}, true))
            Me.columnCloned.AllowDBNull = false
            Me.columnCloned.DefaultValue = false
            Me.columnEgg_Id.AutoIncrement = true
            Me.columnEgg_Id.AllowDBNull = false
            Me.columnEgg_Id.Unique = true
        End Sub
        
        Public Function NewEggRow() As EggRow
            Return CType(Me.NewRow,EggRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EggRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EggRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EggRowChangedEvent) Is Nothing) Then
                RaiseEvent EggRowChanged(Me, New EggRowChangeEvent(CType(e.Row,EggRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EggRowChangingEvent) Is Nothing) Then
                RaiseEvent EggRowChanging(Me, New EggRowChangeEvent(CType(e.Row,EggRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EggRowDeletedEvent) Is Nothing) Then
                RaiseEvent EggRowDeleted(Me, New EggRowChangeEvent(CType(e.Row,EggRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EggRowDeletingEvent) Is Nothing) Then
                RaiseEvent EggRowDeleting(Me, New EggRowChangeEvent(CType(e.Row,EggRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEggRow(ByVal row As EggRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggRow
        Inherits DataRow
        
        Private tableEgg As EggDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEgg = CType(Me.Table,EggDataTable)
        End Sub
        
        Public Property Cloned As Boolean
            Get
                Return CType(Me(Me.tableEgg.ClonedColumn),Boolean)
            End Get
            Set
                Me(Me.tableEgg.ClonedColumn) = value
            End Set
        End Property
        
        Public Property ClutchRow As ClutchRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Clutch_Egg")),ClutchRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Clutch_Egg"))
            End Set
        End Property
        
        Public Function GetEggRingRows() As EggRingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Egg_EggRing")),EggRingRow())
        End Function
        
        Public Function GetEggSpecimenRows() As EggSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Egg_EggSpecimen")),EggSpecimenRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EggRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EggRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EggRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggRingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnEgg_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("EggRing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property Egg_IdColumn As DataColumn
            Get
                Return Me.columnEgg_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EggRingRow
            Get
                Return CType(Me.Rows(index),EggRingRow)
            End Get
        End Property
        
        Public Event EggRingRowChanged As EggRingRowChangeEventHandler
        
        Public Event EggRingRowChanging As EggRingRowChangeEventHandler
        
        Public Event EggRingRowDeleted As EggRingRowChangeEventHandler
        
        Public Event EggRingRowDeleting As EggRingRowChangeEventHandler
        
        Public Overloads Sub AddEggRingRow(ByVal row As EggRingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEggRingRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentEggRowByEgg_EggRing As EggRow) As EggRingRow
            Dim rowEggRingRow As EggRingRow = CType(Me.NewRow,EggRingRow)
            rowEggRingRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentEggRowByEgg_EggRing(1)}
            Me.Rows.Add(rowEggRingRow)
            Return rowEggRingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EggRingDataTable = CType(MyBase.Clone,EggRingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EggRingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnEgg_Id = Me.Columns("Egg_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnEgg_Id = New DataColumn("Egg_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnEgg_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewEggRingRow() As EggRingRow
            Return CType(Me.NewRow,EggRingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EggRingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EggRingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EggRingRowChangedEvent) Is Nothing) Then
                RaiseEvent EggRingRowChanged(Me, New EggRingRowChangeEvent(CType(e.Row,EggRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EggRingRowChangingEvent) Is Nothing) Then
                RaiseEvent EggRingRowChanging(Me, New EggRingRowChangeEvent(CType(e.Row,EggRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EggRingRowDeletedEvent) Is Nothing) Then
                RaiseEvent EggRingRowDeleted(Me, New EggRingRowChangeEvent(CType(e.Row,EggRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EggRingRowDeletingEvent) Is Nothing) Then
                RaiseEvent EggRingRowDeleting(Me, New EggRingRowChangeEvent(CType(e.Row,EggRingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEggRingRow(ByVal row As EggRingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggRingRow
        Inherits DataRow
        
        Private tableEggRing As EggRingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEggRing = CType(Me.Table,EggRingDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableEggRing.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableEggRing.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableEggRing.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableEggRing.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEggRing.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggRing.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableEggRing.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggRing.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableEggRing.StatusColumn),String)
            End Get
            Set
                Me(Me.tableEggRing.StatusColumn) = value
            End Set
        End Property
        
        Public Property EggRow As EggRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Egg_EggRing")),EggRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Egg_EggRing"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableEggRing.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableEggRing.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableEggRing.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableEggRing.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggRingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EggRingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EggRingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EggRingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnEgg_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("EggSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Egg_IdColumn As DataColumn
            Get
                Return Me.columnEgg_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As EggSpecimenRow
            Get
                Return CType(Me.Rows(index),EggSpecimenRow)
            End Get
        End Property
        
        Public Event EggSpecimenRowChanged As EggSpecimenRowChangeEventHandler
        
        Public Event EggSpecimenRowChanging As EggSpecimenRowChangeEventHandler
        
        Public Event EggSpecimenRowDeleted As EggSpecimenRowChangeEventHandler
        
        Public Event EggSpecimenRowDeleting As EggSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddEggSpecimenRow(ByVal row As EggSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddEggSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentEggRowByEgg_EggSpecimen As EggRow) As EggSpecimenRow
            Dim rowEggSpecimenRow As EggSpecimenRow = CType(Me.NewRow,EggSpecimenRow)
            rowEggSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentEggRowByEgg_EggSpecimen(1)}
            Me.Rows.Add(rowEggSpecimenRow)
            Return rowEggSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As EggSpecimenDataTable = CType(MyBase.Clone,EggSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New EggSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnEgg_Id = Me.Columns("Egg_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnEgg_Id = New DataColumn("Egg_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnEgg_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewEggSpecimenRow() As EggSpecimenRow
            Return CType(Me.NewRow,EggSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New EggSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EggSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EggSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent EggSpecimenRowChanged(Me, New EggSpecimenRowChangeEvent(CType(e.Row,EggSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EggSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent EggSpecimenRowChanging(Me, New EggSpecimenRowChangeEvent(CType(e.Row,EggSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EggSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent EggSpecimenRowDeleted(Me, New EggSpecimenRowChangeEvent(CType(e.Row,EggSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EggSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent EggSpecimenRowDeleting(Me, New EggSpecimenRowChangeEvent(CType(e.Row,EggSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveEggSpecimenRow(ByVal row As EggSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggSpecimenRow
        Inherits DataRow
        
        Private tableEggSpecimen As EggSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableEggSpecimen = CType(Me.Table,EggSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableEggSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableEggSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableEggSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableEggSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableEggSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableEggSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableEggSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableEggSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableEggSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEggSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property EggRow As EggRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Egg_EggSpecimen")),EggRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Egg_EggSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableEggSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableEggSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableEggSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableEggSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableEggSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableEggSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableEggSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableEggSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableEggSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class EggSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As EggSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As EggSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As EggSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAdult_Id As DataColumn
        
        Private columnRingApplication_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Adult")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Adult_IdColumn As DataColumn
            Get
                Return Me.columnAdult_Id
            End Get
        End Property
        
        Friend ReadOnly Property RingApplication_IdColumn As DataColumn
            Get
                Return Me.columnRingApplication_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultRow
            Get
                Return CType(Me.Rows(index),AdultRow)
            End Get
        End Property
        
        Public Event AdultRowChanged As AdultRowChangeEventHandler
        
        Public Event AdultRowChanging As AdultRowChangeEventHandler
        
        Public Event AdultRowDeleted As AdultRowChangeEventHandler
        
        Public Event AdultRowDeleting As AdultRowChangeEventHandler
        
        Public Overloads Sub AddAdultRow(ByVal row As AdultRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultRow(ByVal parentRingApplicationRowByRingApplication_Adult As RingApplicationRow) As AdultRow
            Dim rowAdultRow As AdultRow = CType(Me.NewRow,AdultRow)
            rowAdultRow.ItemArray = New Object() {Nothing, parentRingApplicationRowByRingApplication_Adult(23)}
            Me.Rows.Add(rowAdultRow)
            Return rowAdultRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultDataTable = CType(MyBase.Clone,AdultDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAdult_Id = Me.Columns("Adult_Id")
            Me.columnRingApplication_Id = Me.Columns("RingApplication_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAdult_Id = New DataColumn("Adult_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdult_Id)
            Me.columnRingApplication_Id = New DataColumn("RingApplication_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnRingApplication_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdult_Id}, true))
            Me.columnAdult_Id.AutoIncrement = true
            Me.columnAdult_Id.AllowDBNull = false
            Me.columnAdult_Id.Unique = true
        End Sub
        
        Public Function NewAdultRow() As AdultRow
            Return CType(Me.NewRow,AdultRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultRowChanged(Me, New AdultRowChangeEvent(CType(e.Row,AdultRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultRowChanging(Me, New AdultRowChangeEvent(CType(e.Row,AdultRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultRowDeleted(Me, New AdultRowChangeEvent(CType(e.Row,AdultRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultRowDeleting(Me, New AdultRowChangeEvent(CType(e.Row,AdultRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultRow(ByVal row As AdultRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultRow
        Inherits DataRow
        
        Private tableAdult As AdultDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdult = CType(Me.Table,AdultDataTable)
        End Sub
        
        Public Property RingApplicationRow As RingApplicationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RingApplication_Adult")),RingApplicationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RingApplication_Adult"))
            End Set
        End Property
        
        Public Function GetAdultFoundRows() As AdultFoundRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Adult_AdultFound")),AdultFoundRow())
        End Function
        
        Public Function GetAdultImportedRows() As AdultImportedRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Adult_AdultImported")),AdultImportedRow())
        End Function
        
        Public Function GetAdultBredRows() As AdultBredRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Adult_AdultBred")),AdultBredRow())
        End Function
        
        Public Function GetAdultOtherRows() As AdultOtherRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Adult_AdultOther")),AdultOtherRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultFoundDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIsKeeperVet As DataColumn
        
        Private columnIsKeeperOfThree As DataColumn
        
        Private columnIsKeeperRSPCA As DataColumn
        
        Private columnAdultFound_Id As DataColumn
        
        Private columnAdult_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultFound")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IsKeeperVetColumn As DataColumn
            Get
                Return Me.columnIsKeeperVet
            End Get
        End Property
        
        Friend ReadOnly Property IsKeeperOfThreeColumn As DataColumn
            Get
                Return Me.columnIsKeeperOfThree
            End Get
        End Property
        
        Friend ReadOnly Property IsKeeperRSPCAColumn As DataColumn
            Get
                Return Me.columnIsKeeperRSPCA
            End Get
        End Property
        
        Friend ReadOnly Property AdultFound_IdColumn As DataColumn
            Get
                Return Me.columnAdultFound_Id
            End Get
        End Property
        
        Friend ReadOnly Property Adult_IdColumn As DataColumn
            Get
                Return Me.columnAdult_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultFoundRow
            Get
                Return CType(Me.Rows(index),AdultFoundRow)
            End Get
        End Property
        
        Public Event AdultFoundRowChanged As AdultFoundRowChangeEventHandler
        
        Public Event AdultFoundRowChanging As AdultFoundRowChangeEventHandler
        
        Public Event AdultFoundRowDeleted As AdultFoundRowChangeEventHandler
        
        Public Event AdultFoundRowDeleting As AdultFoundRowChangeEventHandler
        
        Public Overloads Sub AddAdultFoundRow(ByVal row As AdultFoundRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultFoundRow(ByVal IsKeeperVet As Boolean, ByVal IsKeeperOfThree As Boolean, ByVal IsKeeperRSPCA As Boolean, ByVal parentAdultRowByAdult_AdultFound As AdultRow) As AdultFoundRow
            Dim rowAdultFoundRow As AdultFoundRow = CType(Me.NewRow,AdultFoundRow)
            rowAdultFoundRow.ItemArray = New Object() {IsKeeperVet, IsKeeperOfThree, IsKeeperRSPCA, Nothing, parentAdultRowByAdult_AdultFound(0)}
            Me.Rows.Add(rowAdultFoundRow)
            Return rowAdultFoundRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultFoundDataTable = CType(MyBase.Clone,AdultFoundDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultFoundDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIsKeeperVet = Me.Columns("IsKeeperVet")
            Me.columnIsKeeperOfThree = Me.Columns("IsKeeperOfThree")
            Me.columnIsKeeperRSPCA = Me.Columns("IsKeeperRSPCA")
            Me.columnAdultFound_Id = Me.Columns("AdultFound_Id")
            Me.columnAdult_Id = Me.Columns("Adult_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIsKeeperVet = New DataColumn("IsKeeperVet", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsKeeperVet)
            Me.columnIsKeeperOfThree = New DataColumn("IsKeeperOfThree", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsKeeperOfThree)
            Me.columnIsKeeperRSPCA = New DataColumn("IsKeeperRSPCA", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsKeeperRSPCA)
            Me.columnAdultFound_Id = New DataColumn("AdultFound_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFound_Id)
            Me.columnAdult_Id = New DataColumn("Adult_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdult_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultFound_Id}, true))
            Me.columnIsKeeperVet.AllowDBNull = false
            Me.columnIsKeeperOfThree.AllowDBNull = false
            Me.columnIsKeeperRSPCA.AllowDBNull = false
            Me.columnAdultFound_Id.AutoIncrement = true
            Me.columnAdultFound_Id.AllowDBNull = false
            Me.columnAdultFound_Id.Unique = true
        End Sub
        
        Public Function NewAdultFoundRow() As AdultFoundRow
            Return CType(Me.NewRow,AdultFoundRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultFoundRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultFoundRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultFoundRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultFoundRowChanged(Me, New AdultFoundRowChangeEvent(CType(e.Row,AdultFoundRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultFoundRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultFoundRowChanging(Me, New AdultFoundRowChangeEvent(CType(e.Row,AdultFoundRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultFoundRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultFoundRowDeleted(Me, New AdultFoundRowChangeEvent(CType(e.Row,AdultFoundRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultFoundRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultFoundRowDeleting(Me, New AdultFoundRowChangeEvent(CType(e.Row,AdultFoundRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultFoundRow(ByVal row As AdultFoundRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultFoundRow
        Inherits DataRow
        
        Private tableAdultFound As AdultFoundDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultFound = CType(Me.Table,AdultFoundDataTable)
        End Sub
        
        Public Property IsKeeperVet As Boolean
            Get
                Return CType(Me(Me.tableAdultFound.IsKeeperVetColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultFound.IsKeeperVetColumn) = value
            End Set
        End Property
        
        Public Property IsKeeperOfThree As Boolean
            Get
                Return CType(Me(Me.tableAdultFound.IsKeeperOfThreeColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultFound.IsKeeperOfThreeColumn) = value
            End Set
        End Property
        
        Public Property IsKeeperRSPCA As Boolean
            Get
                Return CType(Me(Me.tableAdultFound.IsKeeperRSPCAColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultFound.IsKeeperRSPCAColumn) = value
            End Set
        End Property
        
        Public Property AdultRow As AdultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Adult_AdultFound")),AdultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Adult_AdultFound"))
            End Set
        End Property
        
        Public Function GetAdultFoundBirdRows() As AdultFoundBirdRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultFound_AdultFoundBird")),AdultFoundBirdRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultFoundRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultFoundRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultFoundRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultFoundRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultFoundBirdDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDateFound As DataColumn
        
        Private columnDateAcquired As DataColumn
        
        Private columnInjuryDetails As DataColumn
        
        Private columnAcquisitionMethod As DataColumn
        
        Private columnAcquisitionDetails As DataColumn
        
        Private columnKeptAddress As DataColumn
        
        Private columnAdultFoundBird_Id As DataColumn
        
        Private columnAdultFound_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultFoundBird")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DateFoundColumn As DataColumn
            Get
                Return Me.columnDateFound
            End Get
        End Property
        
        Friend ReadOnly Property DateAcquiredColumn As DataColumn
            Get
                Return Me.columnDateAcquired
            End Get
        End Property
        
        Friend ReadOnly Property InjuryDetailsColumn As DataColumn
            Get
                Return Me.columnInjuryDetails
            End Get
        End Property
        
        Friend ReadOnly Property AcquisitionMethodColumn As DataColumn
            Get
                Return Me.columnAcquisitionMethod
            End Get
        End Property
        
        Friend ReadOnly Property AcquisitionDetailsColumn As DataColumn
            Get
                Return Me.columnAcquisitionDetails
            End Get
        End Property
        
        Friend ReadOnly Property KeptAddressColumn As DataColumn
            Get
                Return Me.columnKeptAddress
            End Get
        End Property
        
        Friend ReadOnly Property AdultFoundBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultFoundBird_Id
            End Get
        End Property
        
        Friend ReadOnly Property AdultFound_IdColumn As DataColumn
            Get
                Return Me.columnAdultFound_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultFoundBirdRow
            Get
                Return CType(Me.Rows(index),AdultFoundBirdRow)
            End Get
        End Property
        
        Public Event AdultFoundBirdRowChanged As AdultFoundBirdRowChangeEventHandler
        
        Public Event AdultFoundBirdRowChanging As AdultFoundBirdRowChangeEventHandler
        
        Public Event AdultFoundBirdRowDeleted As AdultFoundBirdRowChangeEventHandler
        
        Public Event AdultFoundBirdRowDeleting As AdultFoundBirdRowChangeEventHandler
        
        Public Overloads Sub AddAdultFoundBirdRow(ByVal row As AdultFoundBirdRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultFoundBirdRow(ByVal DateFound As Date, ByVal DateAcquired As Date, ByVal InjuryDetails As String, ByVal AcquisitionMethod As String, ByVal AcquisitionDetails As String, ByVal KeptAddress As Integer, ByVal parentAdultFoundRowByAdultFound_AdultFoundBird As AdultFoundRow) As AdultFoundBirdRow
            Dim rowAdultFoundBirdRow As AdultFoundBirdRow = CType(Me.NewRow,AdultFoundBirdRow)
            rowAdultFoundBirdRow.ItemArray = New Object() {DateFound, DateAcquired, InjuryDetails, AcquisitionMethod, AcquisitionDetails, KeptAddress, Nothing, parentAdultFoundRowByAdultFound_AdultFoundBird(3)}
            Me.Rows.Add(rowAdultFoundBirdRow)
            Return rowAdultFoundBirdRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultFoundBirdDataTable = CType(MyBase.Clone,AdultFoundBirdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultFoundBirdDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDateFound = Me.Columns("DateFound")
            Me.columnDateAcquired = Me.Columns("DateAcquired")
            Me.columnInjuryDetails = Me.Columns("InjuryDetails")
            Me.columnAcquisitionMethod = Me.Columns("AcquisitionMethod")
            Me.columnAcquisitionDetails = Me.Columns("AcquisitionDetails")
            Me.columnKeptAddress = Me.Columns("KeptAddress")
            Me.columnAdultFoundBird_Id = Me.Columns("AdultFoundBird_Id")
            Me.columnAdultFound_Id = Me.Columns("AdultFound_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDateFound = New DataColumn("DateFound", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateFound)
            Me.columnDateAcquired = New DataColumn("DateAcquired", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateAcquired)
            Me.columnInjuryDetails = New DataColumn("InjuryDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInjuryDetails)
            Me.columnAcquisitionMethod = New DataColumn("AcquisitionMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquisitionMethod)
            Me.columnAcquisitionDetails = New DataColumn("AcquisitionDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquisitionDetails)
            Me.columnKeptAddress = New DataColumn("KeptAddress", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeptAddress)
            Me.columnAdultFoundBird_Id = New DataColumn("AdultFoundBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFoundBird_Id)
            Me.columnAdultFound_Id = New DataColumn("AdultFound_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFound_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultFoundBird_Id}, true))
            Me.columnDateFound.AllowDBNull = false
            Me.columnInjuryDetails.AllowDBNull = false
            Me.columnAcquisitionMethod.AllowDBNull = false
            Me.columnAdultFoundBird_Id.AutoIncrement = true
            Me.columnAdultFoundBird_Id.AllowDBNull = false
            Me.columnAdultFoundBird_Id.Unique = true
        End Sub
        
        Public Function NewAdultFoundBirdRow() As AdultFoundBirdRow
            Return CType(Me.NewRow,AdultFoundBirdRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultFoundBirdRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultFoundBirdRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultFoundBirdRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultFoundBirdRowChanged(Me, New AdultFoundBirdRowChangeEvent(CType(e.Row,AdultFoundBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultFoundBirdRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultFoundBirdRowChanging(Me, New AdultFoundBirdRowChangeEvent(CType(e.Row,AdultFoundBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultFoundBirdRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultFoundBirdRowDeleted(Me, New AdultFoundBirdRowChangeEvent(CType(e.Row,AdultFoundBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultFoundBirdRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultFoundBirdRowDeleting(Me, New AdultFoundBirdRowChangeEvent(CType(e.Row,AdultFoundBirdRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultFoundBirdRow(ByVal row As AdultFoundBirdRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultFoundBirdRow
        Inherits DataRow
        
        Private tableAdultFoundBird As AdultFoundBirdDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultFoundBird = CType(Me.Table,AdultFoundBirdDataTable)
        End Sub
        
        Public Property DateFound As Date
            Get
                Return CType(Me(Me.tableAdultFoundBird.DateFoundColumn),Date)
            End Get
            Set
                Me(Me.tableAdultFoundBird.DateFoundColumn) = value
            End Set
        End Property
        
        Public Property DateAcquired As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdultFoundBird.DateAcquiredColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultFoundBird.DateAcquiredColumn) = value
            End Set
        End Property
        
        Public Property InjuryDetails As String
            Get
                Return CType(Me(Me.tableAdultFoundBird.InjuryDetailsColumn),String)
            End Get
            Set
                Me(Me.tableAdultFoundBird.InjuryDetailsColumn) = value
            End Set
        End Property
        
        Public Property AcquisitionMethod As String
            Get
                Return CType(Me(Me.tableAdultFoundBird.AcquisitionMethodColumn),String)
            End Get
            Set
                Me(Me.tableAdultFoundBird.AcquisitionMethodColumn) = value
            End Set
        End Property
        
        Public Property AcquisitionDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultFoundBird.AcquisitionDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultFoundBird.AcquisitionDetailsColumn) = value
            End Set
        End Property
        
        Public Property KeptAddress As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultFoundBird.KeptAddressColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultFoundBird.KeptAddressColumn) = value
            End Set
        End Property
        
        Public Property AdultFoundRow As AdultFoundRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultFound_AdultFoundBird")),AdultFoundRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultFound_AdultFoundBird"))
            End Set
        End Property
        
        Public Function IsDateAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableAdultFoundBird.DateAcquiredColumn)
        End Function
        
        Public Sub SetDateAcquiredNull()
            Me(Me.tableAdultFoundBird.DateAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcquisitionDetailsNull() As Boolean
            Return Me.IsNull(Me.tableAdultFoundBird.AcquisitionDetailsColumn)
        End Function
        
        Public Sub SetAcquisitionDetailsNull()
            Me(Me.tableAdultFoundBird.AcquisitionDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeptAddressNull() As Boolean
            Return Me.IsNull(Me.tableAdultFoundBird.KeptAddressColumn)
        End Function
        
        Public Sub SetKeptAddressNull()
            Me(Me.tableAdultFoundBird.KeptAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetFoundBirdStatementsRows() As FoundBirdStatementsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultFoundBird_FoundBirdStatements")),FoundBirdStatementsRow())
        End Function
        
        Public Function GetFoundBirdSpecimenRows() As FoundBirdSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultFoundBird_FoundBirdSpecimen")),FoundBirdSpecimenRow())
        End Function
        
        Public Function GetFoundBirdIDMarkRows() As FoundBirdIDMarkRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultFoundBird_FoundBirdIDMark")),FoundBirdIDMarkRow())
        End Function
        
        Public Function GetFoundRingRows() As FoundRingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultFoundBird_FoundRing")),FoundRingRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultFoundBirdRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultFoundBirdRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultFoundBirdRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultFoundBirdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdStatementsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInspectorSignedDORConfirmMarksFitted As DataColumn
        
        Private columnKeeperConfirmsIDMarksFitted As DataColumn
        
        Private columnAdultFoundBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("FoundBirdStatements")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InspectorSignedDORConfirmMarksFittedColumn As DataColumn
            Get
                Return Me.columnInspectorSignedDORConfirmMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property KeeperConfirmsIDMarksFittedColumn As DataColumn
            Get
                Return Me.columnKeeperConfirmsIDMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property AdultFoundBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultFoundBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FoundBirdStatementsRow
            Get
                Return CType(Me.Rows(index),FoundBirdStatementsRow)
            End Get
        End Property
        
        Public Event FoundBirdStatementsRowChanged As FoundBirdStatementsRowChangeEventHandler
        
        Public Event FoundBirdStatementsRowChanging As FoundBirdStatementsRowChangeEventHandler
        
        Public Event FoundBirdStatementsRowDeleted As FoundBirdStatementsRowChangeEventHandler
        
        Public Event FoundBirdStatementsRowDeleting As FoundBirdStatementsRowChangeEventHandler
        
        Public Overloads Sub AddFoundBirdStatementsRow(ByVal row As FoundBirdStatementsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFoundBirdStatementsRow(ByVal InspectorSignedDORConfirmMarksFitted As Boolean, ByVal KeeperConfirmsIDMarksFitted As Boolean, ByVal parentAdultFoundBirdRowByAdultFoundBird_FoundBirdStatements As AdultFoundBirdRow) As FoundBirdStatementsRow
            Dim rowFoundBirdStatementsRow As FoundBirdStatementsRow = CType(Me.NewRow,FoundBirdStatementsRow)
            rowFoundBirdStatementsRow.ItemArray = New Object() {InspectorSignedDORConfirmMarksFitted, KeeperConfirmsIDMarksFitted, parentAdultFoundBirdRowByAdultFoundBird_FoundBirdStatements(6)}
            Me.Rows.Add(rowFoundBirdStatementsRow)
            Return rowFoundBirdStatementsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FoundBirdStatementsDataTable = CType(MyBase.Clone,FoundBirdStatementsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FoundBirdStatementsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInspectorSignedDORConfirmMarksFitted = Me.Columns("InspectorSignedDORConfirmMarksFitted")
            Me.columnKeeperConfirmsIDMarksFitted = Me.Columns("KeeperConfirmsIDMarksFitted")
            Me.columnAdultFoundBird_Id = Me.Columns("AdultFoundBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnInspectorSignedDORConfirmMarksFitted = New DataColumn("InspectorSignedDORConfirmMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInspectorSignedDORConfirmMarksFitted)
            Me.columnKeeperConfirmsIDMarksFitted = New DataColumn("KeeperConfirmsIDMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperConfirmsIDMarksFitted)
            Me.columnAdultFoundBird_Id = New DataColumn("AdultFoundBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFoundBird_Id)
        End Sub
        
        Public Function NewFoundBirdStatementsRow() As FoundBirdStatementsRow
            Return CType(Me.NewRow,FoundBirdStatementsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FoundBirdStatementsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FoundBirdStatementsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FoundBirdStatementsRowChangedEvent) Is Nothing) Then
                RaiseEvent FoundBirdStatementsRowChanged(Me, New FoundBirdStatementsRowChangeEvent(CType(e.Row,FoundBirdStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FoundBirdStatementsRowChangingEvent) Is Nothing) Then
                RaiseEvent FoundBirdStatementsRowChanging(Me, New FoundBirdStatementsRowChangeEvent(CType(e.Row,FoundBirdStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FoundBirdStatementsRowDeletedEvent) Is Nothing) Then
                RaiseEvent FoundBirdStatementsRowDeleted(Me, New FoundBirdStatementsRowChangeEvent(CType(e.Row,FoundBirdStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FoundBirdStatementsRowDeletingEvent) Is Nothing) Then
                RaiseEvent FoundBirdStatementsRowDeleting(Me, New FoundBirdStatementsRowChangeEvent(CType(e.Row,FoundBirdStatementsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFoundBirdStatementsRow(ByVal row As FoundBirdStatementsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdStatementsRow
        Inherits DataRow
        
        Private tableFoundBirdStatements As FoundBirdStatementsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFoundBirdStatements = CType(Me.Table,FoundBirdStatementsDataTable)
        End Sub
        
        Public Property InspectorSignedDORConfirmMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdStatements.InspectorSignedDORConfirmMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdStatements.InspectorSignedDORConfirmMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property KeeperConfirmsIDMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdStatements.KeeperConfirmsIDMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdStatements.KeeperConfirmsIDMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property AdultFoundBirdRow As AdultFoundBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultFoundBird_FoundBirdStatements")),AdultFoundBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultFoundBird_FoundBirdStatements"))
            End Set
        End Property
        
        Public Function IsInspectorSignedDORConfirmMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdStatements.InspectorSignedDORConfirmMarksFittedColumn)
        End Function
        
        Public Sub SetInspectorSignedDORConfirmMarksFittedNull()
            Me(Me.tableFoundBirdStatements.InspectorSignedDORConfirmMarksFittedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperConfirmsIDMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdStatements.KeeperConfirmsIDMarksFittedColumn)
        End Function
        
        Public Sub SetKeeperConfirmsIDMarksFittedNull()
            Me(Me.tableFoundBirdStatements.KeeperConfirmsIDMarksFittedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdStatementsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FoundBirdStatementsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FoundBirdStatementsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FoundBirdStatementsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnAdultFoundBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("FoundBirdSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property AdultFoundBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultFoundBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FoundBirdSpecimenRow
            Get
                Return CType(Me.Rows(index),FoundBirdSpecimenRow)
            End Get
        End Property
        
        Public Event FoundBirdSpecimenRowChanged As FoundBirdSpecimenRowChangeEventHandler
        
        Public Event FoundBirdSpecimenRowChanging As FoundBirdSpecimenRowChangeEventHandler
        
        Public Event FoundBirdSpecimenRowDeleted As FoundBirdSpecimenRowChangeEventHandler
        
        Public Event FoundBirdSpecimenRowDeleting As FoundBirdSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddFoundBirdSpecimenRow(ByVal row As FoundBirdSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFoundBirdSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentAdultFoundBirdRowByAdultFoundBird_FoundBirdSpecimen As AdultFoundBirdRow) As FoundBirdSpecimenRow
            Dim rowFoundBirdSpecimenRow As FoundBirdSpecimenRow = CType(Me.NewRow,FoundBirdSpecimenRow)
            rowFoundBirdSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentAdultFoundBirdRowByAdultFoundBird_FoundBirdSpecimen(6)}
            Me.Rows.Add(rowFoundBirdSpecimenRow)
            Return rowFoundBirdSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FoundBirdSpecimenDataTable = CType(MyBase.Clone,FoundBirdSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FoundBirdSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnAdultFoundBird_Id = Me.Columns("AdultFoundBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnAdultFoundBird_Id = New DataColumn("AdultFoundBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFoundBird_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewFoundBirdSpecimenRow() As FoundBirdSpecimenRow
            Return CType(Me.NewRow,FoundBirdSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FoundBirdSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FoundBirdSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FoundBirdSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent FoundBirdSpecimenRowChanged(Me, New FoundBirdSpecimenRowChangeEvent(CType(e.Row,FoundBirdSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FoundBirdSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent FoundBirdSpecimenRowChanging(Me, New FoundBirdSpecimenRowChangeEvent(CType(e.Row,FoundBirdSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FoundBirdSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent FoundBirdSpecimenRowDeleted(Me, New FoundBirdSpecimenRowChangeEvent(CType(e.Row,FoundBirdSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FoundBirdSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent FoundBirdSpecimenRowDeleting(Me, New FoundBirdSpecimenRowChangeEvent(CType(e.Row,FoundBirdSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFoundBirdSpecimenRow(ByVal row As FoundBirdSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdSpecimenRow
        Inherits DataRow
        
        Private tableFoundBirdSpecimen As FoundBirdSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFoundBirdSpecimen = CType(Me.Table,FoundBirdSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableFoundBirdSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableFoundBirdSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableFoundBirdSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableFoundBirdSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property AdultFoundBirdRow As AdultFoundBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultFoundBird_FoundBirdSpecimen")),AdultFoundBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultFoundBird_FoundBirdSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableFoundBirdSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableFoundBirdSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableFoundBirdSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableFoundBirdSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableFoundBirdSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableFoundBirdSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableFoundBirdSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableFoundBirdSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FoundBirdSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FoundBirdSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FoundBirdSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdIDMarkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultFoundBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("FoundBirdIDMark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultFoundBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultFoundBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FoundBirdIDMarkRow
            Get
                Return CType(Me.Rows(index),FoundBirdIDMarkRow)
            End Get
        End Property
        
        Public Event FoundBirdIDMarkRowChanged As FoundBirdIDMarkRowChangeEventHandler
        
        Public Event FoundBirdIDMarkRowChanging As FoundBirdIDMarkRowChangeEventHandler
        
        Public Event FoundBirdIDMarkRowDeleted As FoundBirdIDMarkRowChangeEventHandler
        
        Public Event FoundBirdIDMarkRowDeleting As FoundBirdIDMarkRowChangeEventHandler
        
        Public Overloads Sub AddFoundBirdIDMarkRow(ByVal row As FoundBirdIDMarkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFoundBirdIDMarkRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultFoundBirdRowByAdultFoundBird_FoundBirdIDMark As AdultFoundBirdRow) As FoundBirdIDMarkRow
            Dim rowFoundBirdIDMarkRow As FoundBirdIDMarkRow = CType(Me.NewRow,FoundBirdIDMarkRow)
            rowFoundBirdIDMarkRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultFoundBirdRowByAdultFoundBird_FoundBirdIDMark(6)}
            Me.Rows.Add(rowFoundBirdIDMarkRow)
            Return rowFoundBirdIDMarkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FoundBirdIDMarkDataTable = CType(MyBase.Clone,FoundBirdIDMarkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FoundBirdIDMarkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultFoundBird_Id = Me.Columns("AdultFoundBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultFoundBird_Id = New DataColumn("AdultFoundBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFoundBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewFoundBirdIDMarkRow() As FoundBirdIDMarkRow
            Return CType(Me.NewRow,FoundBirdIDMarkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FoundBirdIDMarkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FoundBirdIDMarkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FoundBirdIDMarkRowChangedEvent) Is Nothing) Then
                RaiseEvent FoundBirdIDMarkRowChanged(Me, New FoundBirdIDMarkRowChangeEvent(CType(e.Row,FoundBirdIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FoundBirdIDMarkRowChangingEvent) Is Nothing) Then
                RaiseEvent FoundBirdIDMarkRowChanging(Me, New FoundBirdIDMarkRowChangeEvent(CType(e.Row,FoundBirdIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FoundBirdIDMarkRowDeletedEvent) Is Nothing) Then
                RaiseEvent FoundBirdIDMarkRowDeleted(Me, New FoundBirdIDMarkRowChangeEvent(CType(e.Row,FoundBirdIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FoundBirdIDMarkRowDeletingEvent) Is Nothing) Then
                RaiseEvent FoundBirdIDMarkRowDeleting(Me, New FoundBirdIDMarkRowChangeEvent(CType(e.Row,FoundBirdIDMarkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFoundBirdIDMarkRow(ByVal row As FoundBirdIDMarkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdIDMarkRow
        Inherits DataRow
        
        Private tableFoundBirdIDMark As FoundBirdIDMarkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFoundBirdIDMark = CType(Me.Table,FoundBirdIDMarkDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableFoundBirdIDMark.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableFoundBirdIDMark.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableFoundBirdIDMark.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableFoundBirdIDMark.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdIDMark.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdIDMark.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableFoundBirdIDMark.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundBirdIDMark.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableFoundBirdIDMark.StatusColumn),String)
            End Get
            Set
                Me(Me.tableFoundBirdIDMark.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultFoundBirdRow As AdultFoundBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultFoundBird_FoundBirdIDMark")),AdultFoundBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultFoundBird_FoundBirdIDMark"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdIDMark.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableFoundBirdIDMark.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableFoundBirdIDMark.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableFoundBirdIDMark.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundBirdIDMarkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FoundBirdIDMarkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FoundBirdIDMarkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FoundBirdIDMarkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundRingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultFoundBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("FoundRing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultFoundBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultFoundBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FoundRingRow
            Get
                Return CType(Me.Rows(index),FoundRingRow)
            End Get
        End Property
        
        Public Event FoundRingRowChanged As FoundRingRowChangeEventHandler
        
        Public Event FoundRingRowChanging As FoundRingRowChangeEventHandler
        
        Public Event FoundRingRowDeleted As FoundRingRowChangeEventHandler
        
        Public Event FoundRingRowDeleting As FoundRingRowChangeEventHandler
        
        Public Overloads Sub AddFoundRingRow(ByVal row As FoundRingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFoundRingRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultFoundBirdRowByAdultFoundBird_FoundRing As AdultFoundBirdRow) As FoundRingRow
            Dim rowFoundRingRow As FoundRingRow = CType(Me.NewRow,FoundRingRow)
            rowFoundRingRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultFoundBirdRowByAdultFoundBird_FoundRing(6)}
            Me.Rows.Add(rowFoundRingRow)
            Return rowFoundRingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FoundRingDataTable = CType(MyBase.Clone,FoundRingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FoundRingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultFoundBird_Id = Me.Columns("AdultFoundBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultFoundBird_Id = New DataColumn("AdultFoundBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultFoundBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewFoundRingRow() As FoundRingRow
            Return CType(Me.NewRow,FoundRingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FoundRingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FoundRingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FoundRingRowChangedEvent) Is Nothing) Then
                RaiseEvent FoundRingRowChanged(Me, New FoundRingRowChangeEvent(CType(e.Row,FoundRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FoundRingRowChangingEvent) Is Nothing) Then
                RaiseEvent FoundRingRowChanging(Me, New FoundRingRowChangeEvent(CType(e.Row,FoundRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FoundRingRowDeletedEvent) Is Nothing) Then
                RaiseEvent FoundRingRowDeleted(Me, New FoundRingRowChangeEvent(CType(e.Row,FoundRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FoundRingRowDeletingEvent) Is Nothing) Then
                RaiseEvent FoundRingRowDeleting(Me, New FoundRingRowChangeEvent(CType(e.Row,FoundRingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFoundRingRow(ByVal row As FoundRingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundRingRow
        Inherits DataRow
        
        Private tableFoundRing As FoundRingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFoundRing = CType(Me.Table,FoundRingDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableFoundRing.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableFoundRing.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableFoundRing.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableFoundRing.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFoundRing.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundRing.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableFoundRing.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFoundRing.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableFoundRing.StatusColumn),String)
            End Get
            Set
                Me(Me.tableFoundRing.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultFoundBirdRow As AdultFoundBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultFoundBird_FoundRing")),AdultFoundBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultFoundBird_FoundRing"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableFoundRing.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableFoundRing.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableFoundRing.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableFoundRing.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FoundRingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FoundRingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FoundRingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FoundRingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultImportedDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIsKeeperVet As DataColumn
        
        Private columnIsKeeperOfThree As DataColumn
        
        Private columnIsKeeperRSPCA As DataColumn
        
        Private columnAdultImported_Id As DataColumn
        
        Private columnAdult_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultImported")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IsKeeperVetColumn As DataColumn
            Get
                Return Me.columnIsKeeperVet
            End Get
        End Property
        
        Friend ReadOnly Property IsKeeperOfThreeColumn As DataColumn
            Get
                Return Me.columnIsKeeperOfThree
            End Get
        End Property
        
        Friend ReadOnly Property IsKeeperRSPCAColumn As DataColumn
            Get
                Return Me.columnIsKeeperRSPCA
            End Get
        End Property
        
        Friend ReadOnly Property AdultImported_IdColumn As DataColumn
            Get
                Return Me.columnAdultImported_Id
            End Get
        End Property
        
        Friend ReadOnly Property Adult_IdColumn As DataColumn
            Get
                Return Me.columnAdult_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultImportedRow
            Get
                Return CType(Me.Rows(index),AdultImportedRow)
            End Get
        End Property
        
        Public Event AdultImportedRowChanged As AdultImportedRowChangeEventHandler
        
        Public Event AdultImportedRowChanging As AdultImportedRowChangeEventHandler
        
        Public Event AdultImportedRowDeleted As AdultImportedRowChangeEventHandler
        
        Public Event AdultImportedRowDeleting As AdultImportedRowChangeEventHandler
        
        Public Overloads Sub AddAdultImportedRow(ByVal row As AdultImportedRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultImportedRow(ByVal IsKeeperVet As Boolean, ByVal IsKeeperOfThree As Boolean, ByVal IsKeeperRSPCA As Boolean, ByVal parentAdultRowByAdult_AdultImported As AdultRow) As AdultImportedRow
            Dim rowAdultImportedRow As AdultImportedRow = CType(Me.NewRow,AdultImportedRow)
            rowAdultImportedRow.ItemArray = New Object() {IsKeeperVet, IsKeeperOfThree, IsKeeperRSPCA, Nothing, parentAdultRowByAdult_AdultImported(0)}
            Me.Rows.Add(rowAdultImportedRow)
            Return rowAdultImportedRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultImportedDataTable = CType(MyBase.Clone,AdultImportedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultImportedDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIsKeeperVet = Me.Columns("IsKeeperVet")
            Me.columnIsKeeperOfThree = Me.Columns("IsKeeperOfThree")
            Me.columnIsKeeperRSPCA = Me.Columns("IsKeeperRSPCA")
            Me.columnAdultImported_Id = Me.Columns("AdultImported_Id")
            Me.columnAdult_Id = Me.Columns("Adult_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIsKeeperVet = New DataColumn("IsKeeperVet", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsKeeperVet)
            Me.columnIsKeeperOfThree = New DataColumn("IsKeeperOfThree", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsKeeperOfThree)
            Me.columnIsKeeperRSPCA = New DataColumn("IsKeeperRSPCA", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsKeeperRSPCA)
            Me.columnAdultImported_Id = New DataColumn("AdultImported_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImported_Id)
            Me.columnAdult_Id = New DataColumn("Adult_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdult_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultImported_Id}, true))
            Me.columnIsKeeperVet.AllowDBNull = false
            Me.columnIsKeeperOfThree.AllowDBNull = false
            Me.columnIsKeeperRSPCA.AllowDBNull = false
            Me.columnAdultImported_Id.AutoIncrement = true
            Me.columnAdultImported_Id.AllowDBNull = false
            Me.columnAdultImported_Id.Unique = true
        End Sub
        
        Public Function NewAdultImportedRow() As AdultImportedRow
            Return CType(Me.NewRow,AdultImportedRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultImportedRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultImportedRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultImportedRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultImportedRowChanged(Me, New AdultImportedRowChangeEvent(CType(e.Row,AdultImportedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultImportedRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultImportedRowChanging(Me, New AdultImportedRowChangeEvent(CType(e.Row,AdultImportedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultImportedRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultImportedRowDeleted(Me, New AdultImportedRowChangeEvent(CType(e.Row,AdultImportedRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultImportedRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultImportedRowDeleting(Me, New AdultImportedRowChangeEvent(CType(e.Row,AdultImportedRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultImportedRow(ByVal row As AdultImportedRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultImportedRow
        Inherits DataRow
        
        Private tableAdultImported As AdultImportedDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultImported = CType(Me.Table,AdultImportedDataTable)
        End Sub
        
        Public Property IsKeeperVet As Boolean
            Get
                Return CType(Me(Me.tableAdultImported.IsKeeperVetColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultImported.IsKeeperVetColumn) = value
            End Set
        End Property
        
        Public Property IsKeeperOfThree As Boolean
            Get
                Return CType(Me(Me.tableAdultImported.IsKeeperOfThreeColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultImported.IsKeeperOfThreeColumn) = value
            End Set
        End Property
        
        Public Property IsKeeperRSPCA As Boolean
            Get
                Return CType(Me(Me.tableAdultImported.IsKeeperRSPCAColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultImported.IsKeeperRSPCAColumn) = value
            End Set
        End Property
        
        Public Property AdultRow As AdultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Adult_AdultImported")),AdultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Adult_AdultImported"))
            End Set
        End Property
        
        Public Function GetAdultImportedBirdRows() As AdultImportedBirdRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImported_AdultImportedBird")),AdultImportedBirdRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultImportedRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultImportedRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultImportedRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultImportedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultImportedBirdDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDateAcquired As DataColumn
        
        Private columnIsWithinEU As DataColumn
        
        Private columnKeptAddress As DataColumn
        
        Private columnAcquisitionDetails As DataColumn
        
        Private columnPreviousKeeper As DataColumn
        
        Private columnPurposeOfImport As DataColumn
        
        Private columnPurposeOfImportExplanation As DataColumn
        
        Private columnImportedDate As DataColumn
        
        Private columnInjuryDetails As DataColumn
        
        Private columnDateFound As DataColumn
        
        Private columnAcquisitionMethod As DataColumn
        
        Private columnDateTaken As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Private columnAdultImported_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultImportedBird")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DateAcquiredColumn As DataColumn
            Get
                Return Me.columnDateAcquired
            End Get
        End Property
        
        Friend ReadOnly Property IsWithinEUColumn As DataColumn
            Get
                Return Me.columnIsWithinEU
            End Get
        End Property
        
        Friend ReadOnly Property KeptAddressColumn As DataColumn
            Get
                Return Me.columnKeptAddress
            End Get
        End Property
        
        Friend ReadOnly Property AcquisitionDetailsColumn As DataColumn
            Get
                Return Me.columnAcquisitionDetails
            End Get
        End Property
        
        Friend ReadOnly Property PreviousKeeperColumn As DataColumn
            Get
                Return Me.columnPreviousKeeper
            End Get
        End Property
        
        Friend ReadOnly Property PurposeOfImportColumn As DataColumn
            Get
                Return Me.columnPurposeOfImport
            End Get
        End Property
        
        Friend ReadOnly Property PurposeOfImportExplanationColumn As DataColumn
            Get
                Return Me.columnPurposeOfImportExplanation
            End Get
        End Property
        
        Friend ReadOnly Property ImportedDateColumn As DataColumn
            Get
                Return Me.columnImportedDate
            End Get
        End Property
        
        Friend ReadOnly Property InjuryDetailsColumn As DataColumn
            Get
                Return Me.columnInjuryDetails
            End Get
        End Property
        
        Friend ReadOnly Property DateFoundColumn As DataColumn
            Get
                Return Me.columnDateFound
            End Get
        End Property
        
        Friend ReadOnly Property AcquisitionMethodColumn As DataColumn
            Get
                Return Me.columnAcquisitionMethod
            End Get
        End Property
        
        Friend ReadOnly Property DateTakenColumn As DataColumn
            Get
                Return Me.columnDateTaken
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Friend ReadOnly Property AdultImported_IdColumn As DataColumn
            Get
                Return Me.columnAdultImported_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultImportedBirdRow
            Get
                Return CType(Me.Rows(index),AdultImportedBirdRow)
            End Get
        End Property
        
        Public Event AdultImportedBirdRowChanged As AdultImportedBirdRowChangeEventHandler
        
        Public Event AdultImportedBirdRowChanging As AdultImportedBirdRowChangeEventHandler
        
        Public Event AdultImportedBirdRowDeleted As AdultImportedBirdRowChangeEventHandler
        
        Public Event AdultImportedBirdRowDeleting As AdultImportedBirdRowChangeEventHandler
        
        Public Overloads Sub AddAdultImportedBirdRow(ByVal row As AdultImportedBirdRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultImportedBirdRow(ByVal DateAcquired As Date, ByVal IsWithinEU As Boolean, ByVal KeptAddress As Integer, ByVal AcquisitionDetails As String, ByVal PreviousKeeper As String, ByVal PurposeOfImport As Integer, ByVal PurposeOfImportExplanation As String, ByVal ImportedDate As Date, ByVal InjuryDetails As String, ByVal DateFound As Date, ByVal AcquisitionMethod As String, ByVal DateTaken As Date, ByVal parentAdultImportedRowByAdultImported_AdultImportedBird As AdultImportedRow) As AdultImportedBirdRow
            Dim rowAdultImportedBirdRow As AdultImportedBirdRow = CType(Me.NewRow,AdultImportedBirdRow)
            rowAdultImportedBirdRow.ItemArray = New Object() {DateAcquired, IsWithinEU, KeptAddress, AcquisitionDetails, PreviousKeeper, PurposeOfImport, PurposeOfImportExplanation, ImportedDate, InjuryDetails, DateFound, AcquisitionMethod, DateTaken, Nothing, parentAdultImportedRowByAdultImported_AdultImportedBird(3)}
            Me.Rows.Add(rowAdultImportedBirdRow)
            Return rowAdultImportedBirdRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultImportedBirdDataTable = CType(MyBase.Clone,AdultImportedBirdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultImportedBirdDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDateAcquired = Me.Columns("DateAcquired")
            Me.columnIsWithinEU = Me.Columns("IsWithinEU")
            Me.columnKeptAddress = Me.Columns("KeptAddress")
            Me.columnAcquisitionDetails = Me.Columns("AcquisitionDetails")
            Me.columnPreviousKeeper = Me.Columns("PreviousKeeper")
            Me.columnPurposeOfImport = Me.Columns("PurposeOfImport")
            Me.columnPurposeOfImportExplanation = Me.Columns("PurposeOfImportExplanation")
            Me.columnImportedDate = Me.Columns("ImportedDate")
            Me.columnInjuryDetails = Me.Columns("InjuryDetails")
            Me.columnDateFound = Me.Columns("DateFound")
            Me.columnAcquisitionMethod = Me.Columns("AcquisitionMethod")
            Me.columnDateTaken = Me.Columns("DateTaken")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
            Me.columnAdultImported_Id = Me.Columns("AdultImported_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnDateAcquired = New DataColumn("DateAcquired", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateAcquired)
            Me.columnIsWithinEU = New DataColumn("IsWithinEU", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsWithinEU)
            Me.columnKeptAddress = New DataColumn("KeptAddress", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeptAddress)
            Me.columnAcquisitionDetails = New DataColumn("AcquisitionDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquisitionDetails)
            Me.columnPreviousKeeper = New DataColumn("PreviousKeeper", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviousKeeper)
            Me.columnPurposeOfImport = New DataColumn("PurposeOfImport", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPurposeOfImport)
            Me.columnPurposeOfImportExplanation = New DataColumn("PurposeOfImportExplanation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPurposeOfImportExplanation)
            Me.columnImportedDate = New DataColumn("ImportedDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportedDate)
            Me.columnInjuryDetails = New DataColumn("InjuryDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInjuryDetails)
            Me.columnDateFound = New DataColumn("DateFound", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateFound)
            Me.columnAcquisitionMethod = New DataColumn("AcquisitionMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquisitionMethod)
            Me.columnDateTaken = New DataColumn("DateTaken", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateTaken)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnAdultImported_Id = New DataColumn("AdultImported_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImported_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultImportedBird_Id}, true))
            Me.columnIsWithinEU.AllowDBNull = false
            Me.columnAcquisitionMethod.AllowDBNull = false
            Me.columnAdultImportedBird_Id.AutoIncrement = true
            Me.columnAdultImportedBird_Id.AllowDBNull = false
            Me.columnAdultImportedBird_Id.Unique = true
        End Sub
        
        Public Function NewAdultImportedBirdRow() As AdultImportedBirdRow
            Return CType(Me.NewRow,AdultImportedBirdRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultImportedBirdRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultImportedBirdRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultImportedBirdRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultImportedBirdRowChanged(Me, New AdultImportedBirdRowChangeEvent(CType(e.Row,AdultImportedBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultImportedBirdRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultImportedBirdRowChanging(Me, New AdultImportedBirdRowChangeEvent(CType(e.Row,AdultImportedBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultImportedBirdRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultImportedBirdRowDeleted(Me, New AdultImportedBirdRowChangeEvent(CType(e.Row,AdultImportedBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultImportedBirdRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultImportedBirdRowDeleting(Me, New AdultImportedBirdRowChangeEvent(CType(e.Row,AdultImportedBirdRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultImportedBirdRow(ByVal row As AdultImportedBirdRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultImportedBirdRow
        Inherits DataRow
        
        Private tableAdultImportedBird As AdultImportedBirdDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultImportedBird = CType(Me.Table,AdultImportedBirdDataTable)
        End Sub
        
        Public Property DateAcquired As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.DateAcquiredColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.DateAcquiredColumn) = value
            End Set
        End Property
        
        Public Property IsWithinEU As Boolean
            Get
                Return CType(Me(Me.tableAdultImportedBird.IsWithinEUColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultImportedBird.IsWithinEUColumn) = value
            End Set
        End Property
        
        Public Property KeptAddress As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.KeptAddressColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.KeptAddressColumn) = value
            End Set
        End Property
        
        Public Property AcquisitionDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.AcquisitionDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.AcquisitionDetailsColumn) = value
            End Set
        End Property
        
        Public Property PreviousKeeper As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.PreviousKeeperColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.PreviousKeeperColumn) = value
            End Set
        End Property
        
        Public Property PurposeOfImport As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.PurposeOfImportColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.PurposeOfImportColumn) = value
            End Set
        End Property
        
        Public Property PurposeOfImportExplanation As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.PurposeOfImportExplanationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.PurposeOfImportExplanationColumn) = value
            End Set
        End Property
        
        Public Property ImportedDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.ImportedDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.ImportedDateColumn) = value
            End Set
        End Property
        
        Public Property InjuryDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.InjuryDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.InjuryDetailsColumn) = value
            End Set
        End Property
        
        Public Property DateFound As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.DateFoundColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.DateFoundColumn) = value
            End Set
        End Property
        
        Public Property AcquisitionMethod As String
            Get
                Return CType(Me(Me.tableAdultImportedBird.AcquisitionMethodColumn),String)
            End Get
            Set
                Me(Me.tableAdultImportedBird.AcquisitionMethodColumn) = value
            End Set
        End Property
        
        Public Property DateTaken As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdultImportedBird.DateTakenColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultImportedBird.DateTakenColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedRow As AdultImportedRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImported_AdultImportedBird")),AdultImportedRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImported_AdultImportedBird"))
            End Set
        End Property
        
        Public Function IsDateAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.DateAcquiredColumn)
        End Function
        
        Public Sub SetDateAcquiredNull()
            Me(Me.tableAdultImportedBird.DateAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeptAddressNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.KeptAddressColumn)
        End Function
        
        Public Sub SetKeptAddressNull()
            Me(Me.tableAdultImportedBird.KeptAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcquisitionDetailsNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.AcquisitionDetailsColumn)
        End Function
        
        Public Sub SetAcquisitionDetailsNull()
            Me(Me.tableAdultImportedBird.AcquisitionDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviousKeeperNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.PreviousKeeperColumn)
        End Function
        
        Public Sub SetPreviousKeeperNull()
            Me(Me.tableAdultImportedBird.PreviousKeeperColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPurposeOfImportNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.PurposeOfImportColumn)
        End Function
        
        Public Sub SetPurposeOfImportNull()
            Me(Me.tableAdultImportedBird.PurposeOfImportColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPurposeOfImportExplanationNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.PurposeOfImportExplanationColumn)
        End Function
        
        Public Sub SetPurposeOfImportExplanationNull()
            Me(Me.tableAdultImportedBird.PurposeOfImportExplanationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportedDateNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.ImportedDateColumn)
        End Function
        
        Public Sub SetImportedDateNull()
            Me(Me.tableAdultImportedBird.ImportedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInjuryDetailsNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.InjuryDetailsColumn)
        End Function
        
        Public Sub SetInjuryDetailsNull()
            Me(Me.tableAdultImportedBird.InjuryDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateFoundNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.DateFoundColumn)
        End Function
        
        Public Sub SetDateFoundNull()
            Me(Me.tableAdultImportedBird.DateFoundColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateTakenNull() As Boolean
            Return Me.IsNull(Me.tableAdultImportedBird.DateTakenColumn)
        End Function
        
        Public Sub SetDateTakenNull()
            Me(Me.tableAdultImportedBird.DateTakenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetImportedStatementsRows() As ImportedStatementsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_ImportedStatements")),ImportedStatementsRow())
        End Function
        
        Public Function GetImportedSpecimenRows() As ImportedSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_ImportedSpecimen")),ImportedSpecimenRow())
        End Function
        
        Public Function GetImportedIDMarksRows() As ImportedIDMarksRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_ImportedIDMarks")),ImportedIDMarksRow())
        End Function
        
        Public Function GetQuarantineRows() As QuarantineRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_Quarantine")),QuarantineRow())
        End Function
        
        Public Function GetPermitRows() As PermitRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_Permit")),PermitRow())
        End Function
        
        Public Function GetSourceRows() As SourceRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_Source")),SourceRow())
        End Function
        
        Public Function GetImportedRingRows() As ImportedRingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_ImportedRing")),ImportedRingRow())
        End Function
        
        Public Function GetImportedParentsRows() As ImportedParentsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultImportedBird_ImportedParents")),ImportedParentsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultImportedBirdRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultImportedBirdRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultImportedBirdRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultImportedBirdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedStatementsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInspectorSignedDORConfirmMarksFitted As DataColumn
        
        Private columnKeeperConfirmsIDMarksFitted As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedStatements")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InspectorSignedDORConfirmMarksFittedColumn As DataColumn
            Get
                Return Me.columnInspectorSignedDORConfirmMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property KeeperConfirmsIDMarksFittedColumn As DataColumn
            Get
                Return Me.columnKeeperConfirmsIDMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedStatementsRow
            Get
                Return CType(Me.Rows(index),ImportedStatementsRow)
            End Get
        End Property
        
        Public Event ImportedStatementsRowChanged As ImportedStatementsRowChangeEventHandler
        
        Public Event ImportedStatementsRowChanging As ImportedStatementsRowChangeEventHandler
        
        Public Event ImportedStatementsRowDeleted As ImportedStatementsRowChangeEventHandler
        
        Public Event ImportedStatementsRowDeleting As ImportedStatementsRowChangeEventHandler
        
        Public Overloads Sub AddImportedStatementsRow(ByVal row As ImportedStatementsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedStatementsRow(ByVal InspectorSignedDORConfirmMarksFitted As Boolean, ByVal KeeperConfirmsIDMarksFitted As Boolean, ByVal parentAdultImportedBirdRowByAdultImportedBird_ImportedStatements As AdultImportedBirdRow) As ImportedStatementsRow
            Dim rowImportedStatementsRow As ImportedStatementsRow = CType(Me.NewRow,ImportedStatementsRow)
            rowImportedStatementsRow.ItemArray = New Object() {InspectorSignedDORConfirmMarksFitted, KeeperConfirmsIDMarksFitted, parentAdultImportedBirdRowByAdultImportedBird_ImportedStatements(12)}
            Me.Rows.Add(rowImportedStatementsRow)
            Return rowImportedStatementsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedStatementsDataTable = CType(MyBase.Clone,ImportedStatementsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedStatementsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInspectorSignedDORConfirmMarksFitted = Me.Columns("InspectorSignedDORConfirmMarksFitted")
            Me.columnKeeperConfirmsIDMarksFitted = Me.Columns("KeeperConfirmsIDMarksFitted")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnInspectorSignedDORConfirmMarksFitted = New DataColumn("InspectorSignedDORConfirmMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInspectorSignedDORConfirmMarksFitted)
            Me.columnKeeperConfirmsIDMarksFitted = New DataColumn("KeeperConfirmsIDMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperConfirmsIDMarksFitted)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
        End Sub
        
        Public Function NewImportedStatementsRow() As ImportedStatementsRow
            Return CType(Me.NewRow,ImportedStatementsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedStatementsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedStatementsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedStatementsRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedStatementsRowChanged(Me, New ImportedStatementsRowChangeEvent(CType(e.Row,ImportedStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedStatementsRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedStatementsRowChanging(Me, New ImportedStatementsRowChangeEvent(CType(e.Row,ImportedStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedStatementsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedStatementsRowDeleted(Me, New ImportedStatementsRowChangeEvent(CType(e.Row,ImportedStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedStatementsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedStatementsRowDeleting(Me, New ImportedStatementsRowChangeEvent(CType(e.Row,ImportedStatementsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedStatementsRow(ByVal row As ImportedStatementsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedStatementsRow
        Inherits DataRow
        
        Private tableImportedStatements As ImportedStatementsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedStatements = CType(Me.Table,ImportedStatementsDataTable)
        End Sub
        
        Public Property InspectorSignedDORConfirmMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableImportedStatements.InspectorSignedDORConfirmMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedStatements.InspectorSignedDORConfirmMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property KeeperConfirmsIDMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableImportedStatements.KeeperConfirmsIDMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedStatements.KeeperConfirmsIDMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_ImportedStatements")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_ImportedStatements"))
            End Set
        End Property
        
        Public Function IsInspectorSignedDORConfirmMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableImportedStatements.InspectorSignedDORConfirmMarksFittedColumn)
        End Function
        
        Public Sub SetInspectorSignedDORConfirmMarksFittedNull()
            Me(Me.tableImportedStatements.InspectorSignedDORConfirmMarksFittedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperConfirmsIDMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableImportedStatements.KeeperConfirmsIDMarksFittedColumn)
        End Function
        
        Public Sub SetKeeperConfirmsIDMarksFittedNull()
            Me(Me.tableImportedStatements.KeeperConfirmsIDMarksFittedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedStatementsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedStatementsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedStatementsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedStatementsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedSpecimenRow
            Get
                Return CType(Me.Rows(index),ImportedSpecimenRow)
            End Get
        End Property
        
        Public Event ImportedSpecimenRowChanged As ImportedSpecimenRowChangeEventHandler
        
        Public Event ImportedSpecimenRowChanging As ImportedSpecimenRowChangeEventHandler
        
        Public Event ImportedSpecimenRowDeleted As ImportedSpecimenRowChangeEventHandler
        
        Public Event ImportedSpecimenRowDeleting As ImportedSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddImportedSpecimenRow(ByVal row As ImportedSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentAdultImportedBirdRowByAdultImportedBird_ImportedSpecimen As AdultImportedBirdRow) As ImportedSpecimenRow
            Dim rowImportedSpecimenRow As ImportedSpecimenRow = CType(Me.NewRow,ImportedSpecimenRow)
            rowImportedSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentAdultImportedBirdRowByAdultImportedBird_ImportedSpecimen(12)}
            Me.Rows.Add(rowImportedSpecimenRow)
            Return rowImportedSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedSpecimenDataTable = CType(MyBase.Clone,ImportedSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewImportedSpecimenRow() As ImportedSpecimenRow
            Return CType(Me.NewRow,ImportedSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedSpecimenRowChanged(Me, New ImportedSpecimenRowChangeEvent(CType(e.Row,ImportedSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedSpecimenRowChanging(Me, New ImportedSpecimenRowChangeEvent(CType(e.Row,ImportedSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedSpecimenRowDeleted(Me, New ImportedSpecimenRowChangeEvent(CType(e.Row,ImportedSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedSpecimenRowDeleting(Me, New ImportedSpecimenRowChangeEvent(CType(e.Row,ImportedSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedSpecimenRow(ByVal row As ImportedSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedSpecimenRow
        Inherits DataRow
        
        Private tableImportedSpecimen As ImportedSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedSpecimen = CType(Me.Table,ImportedSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableImportedSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableImportedSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableImportedSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableImportedSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableImportedSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableImportedSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableImportedSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableImportedSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_ImportedSpecimen")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_ImportedSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableImportedSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableImportedSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableImportedSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableImportedSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableImportedSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableImportedSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableImportedSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableImportedSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableImportedSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedIDMarksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedIDMarks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedIDMarksRow
            Get
                Return CType(Me.Rows(index),ImportedIDMarksRow)
            End Get
        End Property
        
        Public Event ImportedIDMarksRowChanged As ImportedIDMarksRowChangeEventHandler
        
        Public Event ImportedIDMarksRowChanging As ImportedIDMarksRowChangeEventHandler
        
        Public Event ImportedIDMarksRowDeleted As ImportedIDMarksRowChangeEventHandler
        
        Public Event ImportedIDMarksRowDeleting As ImportedIDMarksRowChangeEventHandler
        
        Public Overloads Sub AddImportedIDMarksRow(ByVal row As ImportedIDMarksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedIDMarksRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultImportedBirdRowByAdultImportedBird_ImportedIDMarks As AdultImportedBirdRow) As ImportedIDMarksRow
            Dim rowImportedIDMarksRow As ImportedIDMarksRow = CType(Me.NewRow,ImportedIDMarksRow)
            rowImportedIDMarksRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultImportedBirdRowByAdultImportedBird_ImportedIDMarks(12)}
            Me.Rows.Add(rowImportedIDMarksRow)
            Return rowImportedIDMarksRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedIDMarksDataTable = CType(MyBase.Clone,ImportedIDMarksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedIDMarksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewImportedIDMarksRow() As ImportedIDMarksRow
            Return CType(Me.NewRow,ImportedIDMarksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedIDMarksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedIDMarksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedIDMarksRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedIDMarksRowChanged(Me, New ImportedIDMarksRowChangeEvent(CType(e.Row,ImportedIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedIDMarksRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedIDMarksRowChanging(Me, New ImportedIDMarksRowChangeEvent(CType(e.Row,ImportedIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedIDMarksRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedIDMarksRowDeleted(Me, New ImportedIDMarksRowChangeEvent(CType(e.Row,ImportedIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedIDMarksRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedIDMarksRowDeleting(Me, New ImportedIDMarksRowChangeEvent(CType(e.Row,ImportedIDMarksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedIDMarksRow(ByVal row As ImportedIDMarksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedIDMarksRow
        Inherits DataRow
        
        Private tableImportedIDMarks As ImportedIDMarksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedIDMarks = CType(Me.Table,ImportedIDMarksDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableImportedIDMarks.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableImportedIDMarks.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableImportedIDMarks.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableImportedIDMarks.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedIDMarks.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedIDMarks.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedIDMarks.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedIDMarks.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableImportedIDMarks.StatusColumn),String)
            End Get
            Set
                Me(Me.tableImportedIDMarks.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_ImportedIDMarks")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_ImportedIDMarks"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableImportedIDMarks.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableImportedIDMarks.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableImportedIDMarks.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableImportedIDMarks.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedIDMarksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedIDMarksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedIDMarksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedIDMarksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QuarantineDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKeeperName As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Quarantine")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KeeperNameColumn As DataColumn
            Get
                Return Me.columnKeeperName
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As QuarantineRow
            Get
                Return CType(Me.Rows(index),QuarantineRow)
            End Get
        End Property
        
        Public Event QuarantineRowChanged As QuarantineRowChangeEventHandler
        
        Public Event QuarantineRowChanging As QuarantineRowChangeEventHandler
        
        Public Event QuarantineRowDeleted As QuarantineRowChangeEventHandler
        
        Public Event QuarantineRowDeleting As QuarantineRowChangeEventHandler
        
        Public Overloads Sub AddQuarantineRow(ByVal row As QuarantineRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddQuarantineRow(ByVal KeeperName As String, ByVal Address As String, ByVal EndDate As Date, ByVal parentAdultImportedBirdRowByAdultImportedBird_Quarantine As AdultImportedBirdRow) As QuarantineRow
            Dim rowQuarantineRow As QuarantineRow = CType(Me.NewRow,QuarantineRow)
            rowQuarantineRow.ItemArray = New Object() {KeeperName, Address, EndDate, parentAdultImportedBirdRowByAdultImportedBird_Quarantine(12)}
            Me.Rows.Add(rowQuarantineRow)
            Return rowQuarantineRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As QuarantineDataTable = CType(MyBase.Clone,QuarantineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New QuarantineDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKeeperName = Me.Columns("KeeperName")
            Me.columnAddress = Me.Columns("Address")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnKeeperName = New DataColumn("KeeperName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperName)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnKeeperName.AllowDBNull = false
            Me.columnAddress.AllowDBNull = false
            Me.columnEndDate.AllowDBNull = false
        End Sub
        
        Public Function NewQuarantineRow() As QuarantineRow
            Return CType(Me.NewRow,QuarantineRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New QuarantineRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QuarantineRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QuarantineRowChangedEvent) Is Nothing) Then
                RaiseEvent QuarantineRowChanged(Me, New QuarantineRowChangeEvent(CType(e.Row,QuarantineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QuarantineRowChangingEvent) Is Nothing) Then
                RaiseEvent QuarantineRowChanging(Me, New QuarantineRowChangeEvent(CType(e.Row,QuarantineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QuarantineRowDeletedEvent) Is Nothing) Then
                RaiseEvent QuarantineRowDeleted(Me, New QuarantineRowChangeEvent(CType(e.Row,QuarantineRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QuarantineRowDeletingEvent) Is Nothing) Then
                RaiseEvent QuarantineRowDeleting(Me, New QuarantineRowChangeEvent(CType(e.Row,QuarantineRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveQuarantineRow(ByVal row As QuarantineRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QuarantineRow
        Inherits DataRow
        
        Private tableQuarantine As QuarantineDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableQuarantine = CType(Me.Table,QuarantineDataTable)
        End Sub
        
        Public Property KeeperName As String
            Get
                Return CType(Me(Me.tableQuarantine.KeeperNameColumn),String)
            End Get
            Set
                Me(Me.tableQuarantine.KeeperNameColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Return CType(Me(Me.tableQuarantine.AddressColumn),String)
            End Get
            Set
                Me(Me.tableQuarantine.AddressColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Return CType(Me(Me.tableQuarantine.EndDateColumn),Date)
            End Get
            Set
                Me(Me.tableQuarantine.EndDateColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_Quarantine")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_Quarantine"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class QuarantineRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As QuarantineRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As QuarantineRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As QuarantineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PermitDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPermit_text As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Permit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Permit_textColumn As DataColumn
            Get
                Return Me.columnPermit_text
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PermitRow
            Get
                Return CType(Me.Rows(index),PermitRow)
            End Get
        End Property
        
        Public Event PermitRowChanged As PermitRowChangeEventHandler
        
        Public Event PermitRowChanging As PermitRowChangeEventHandler
        
        Public Event PermitRowDeleted As PermitRowChangeEventHandler
        
        Public Event PermitRowDeleting As PermitRowChangeEventHandler
        
        Public Overloads Sub AddPermitRow(ByVal row As PermitRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPermitRow(ByVal Permit_text As String, ByVal parentAdultImportedBirdRowByAdultImportedBird_Permit As AdultImportedBirdRow) As PermitRow
            Dim rowPermitRow As PermitRow = CType(Me.NewRow,PermitRow)
            rowPermitRow.ItemArray = New Object() {Permit_text, parentAdultImportedBirdRowByAdultImportedBird_Permit(12)}
            Me.Rows.Add(rowPermitRow)
            Return rowPermitRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PermitDataTable = CType(MyBase.Clone,PermitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PermitDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPermit_text = Me.Columns("Permit_text")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPermit_text = New DataColumn("Permit_text", GetType(System.String), Nothing, System.Data.MappingType.SimpleContent)
            Me.Columns.Add(Me.columnPermit_text)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnPermit_text.AllowDBNull = false
        End Sub
        
        Public Function NewPermitRow() As PermitRow
            Return CType(Me.NewRow,PermitRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PermitRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PermitRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PermitRowChangedEvent) Is Nothing) Then
                RaiseEvent PermitRowChanged(Me, New PermitRowChangeEvent(CType(e.Row,PermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PermitRowChangingEvent) Is Nothing) Then
                RaiseEvent PermitRowChanging(Me, New PermitRowChangeEvent(CType(e.Row,PermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PermitRowDeletedEvent) Is Nothing) Then
                RaiseEvent PermitRowDeleted(Me, New PermitRowChangeEvent(CType(e.Row,PermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PermitRowDeletingEvent) Is Nothing) Then
                RaiseEvent PermitRowDeleting(Me, New PermitRowChangeEvent(CType(e.Row,PermitRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePermitRow(ByVal row As PermitRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PermitRow
        Inherits DataRow
        
        Private tablePermit As PermitDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePermit = CType(Me.Table,PermitDataTable)
        End Sub
        
        Public Property Permit_text As String
            Get
                Return CType(Me(Me.tablePermit.Permit_textColumn),String)
            End Get
            Set
                Me(Me.tablePermit.Permit_textColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_Permit")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_Permit"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PermitRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PermitRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PermitRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PermitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SourceDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIsFromUK As DataColumn
        
        Private columnOrigin As DataColumn
        
        Private columnOrigin2 As DataColumn
        
        Private columnCaptureMethod As DataColumn
        
        Private columnEULicenseNumber As DataColumn
        
        Private columnSourceSpecialConditions As DataColumn
        
        Private columnCountryOfOrigin As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Source")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IsFromUKColumn As DataColumn
            Get
                Return Me.columnIsFromUK
            End Get
        End Property
        
        Friend ReadOnly Property OriginColumn As DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        Friend ReadOnly Property Origin2Column As DataColumn
            Get
                Return Me.columnOrigin2
            End Get
        End Property
        
        Friend ReadOnly Property CaptureMethodColumn As DataColumn
            Get
                Return Me.columnCaptureMethod
            End Get
        End Property
        
        Friend ReadOnly Property EULicenseNumberColumn As DataColumn
            Get
                Return Me.columnEULicenseNumber
            End Get
        End Property
        
        Friend ReadOnly Property SourceSpecialConditionsColumn As DataColumn
            Get
                Return Me.columnSourceSpecialConditions
            End Get
        End Property
        
        Friend ReadOnly Property CountryOfOriginColumn As DataColumn
            Get
                Return Me.columnCountryOfOrigin
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SourceRow
            Get
                Return CType(Me.Rows(index),SourceRow)
            End Get
        End Property
        
        Public Event SourceRowChanged As SourceRowChangeEventHandler
        
        Public Event SourceRowChanging As SourceRowChangeEventHandler
        
        Public Event SourceRowDeleted As SourceRowChangeEventHandler
        
        Public Event SourceRowDeleting As SourceRowChangeEventHandler
        
        Public Overloads Sub AddSourceRow(ByVal row As SourceRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSourceRow(ByVal IsFromUK As Boolean, ByVal Origin As Integer, ByVal Origin2 As Integer, ByVal CaptureMethod As String, ByVal EULicenseNumber As String, ByVal SourceSpecialConditions As String, ByVal CountryOfOrigin As Integer, ByVal parentAdultImportedBirdRowByAdultImportedBird_Source As AdultImportedBirdRow) As SourceRow
            Dim rowSourceRow As SourceRow = CType(Me.NewRow,SourceRow)
            rowSourceRow.ItemArray = New Object() {IsFromUK, Origin, Origin2, CaptureMethod, EULicenseNumber, SourceSpecialConditions, CountryOfOrigin, parentAdultImportedBirdRowByAdultImportedBird_Source(12)}
            Me.Rows.Add(rowSourceRow)
            Return rowSourceRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SourceDataTable = CType(MyBase.Clone,SourceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SourceDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIsFromUK = Me.Columns("IsFromUK")
            Me.columnOrigin = Me.Columns("Origin")
            Me.columnOrigin2 = Me.Columns("Origin2")
            Me.columnCaptureMethod = Me.Columns("CaptureMethod")
            Me.columnEULicenseNumber = Me.Columns("EULicenseNumber")
            Me.columnSourceSpecialConditions = Me.Columns("SourceSpecialConditions")
            Me.columnCountryOfOrigin = Me.Columns("CountryOfOrigin")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIsFromUK = New DataColumn("IsFromUK", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsFromUK)
            Me.columnOrigin = New DataColumn("Origin", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrigin)
            Me.columnOrigin2 = New DataColumn("Origin2", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrigin2)
            Me.columnCaptureMethod = New DataColumn("CaptureMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaptureMethod)
            Me.columnEULicenseNumber = New DataColumn("EULicenseNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEULicenseNumber)
            Me.columnSourceSpecialConditions = New DataColumn("SourceSpecialConditions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSourceSpecialConditions)
            Me.columnCountryOfOrigin = New DataColumn("CountryOfOrigin", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryOfOrigin)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnOrigin.AllowDBNull = false
            Me.columnOrigin2.AllowDBNull = false
        End Sub
        
        Public Function NewSourceRow() As SourceRow
            Return CType(Me.NewRow,SourceRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SourceRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SourceRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SourceRowChangedEvent) Is Nothing) Then
                RaiseEvent SourceRowChanged(Me, New SourceRowChangeEvent(CType(e.Row,SourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SourceRowChangingEvent) Is Nothing) Then
                RaiseEvent SourceRowChanging(Me, New SourceRowChangeEvent(CType(e.Row,SourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SourceRowDeletedEvent) Is Nothing) Then
                RaiseEvent SourceRowDeleted(Me, New SourceRowChangeEvent(CType(e.Row,SourceRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SourceRowDeletingEvent) Is Nothing) Then
                RaiseEvent SourceRowDeleting(Me, New SourceRowChangeEvent(CType(e.Row,SourceRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSourceRow(ByVal row As SourceRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SourceRow
        Inherits DataRow
        
        Private tableSource As SourceDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSource = CType(Me.Table,SourceDataTable)
        End Sub
        
        Public Property IsFromUK As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSource.IsFromUKColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSource.IsFromUKColumn) = value
            End Set
        End Property
        
        Public Property Origin As Integer
            Get
                Return CType(Me(Me.tableSource.OriginColumn),Integer)
            End Get
            Set
                Me(Me.tableSource.OriginColumn) = value
            End Set
        End Property
        
        Public Property Origin2 As Integer
            Get
                Return CType(Me(Me.tableSource.Origin2Column),Integer)
            End Get
            Set
                Me(Me.tableSource.Origin2Column) = value
            End Set
        End Property
        
        Public Property CaptureMethod As String
            Get
                Try 
                    Return CType(Me(Me.tableSource.CaptureMethodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSource.CaptureMethodColumn) = value
            End Set
        End Property
        
        Public Property EULicenseNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableSource.EULicenseNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSource.EULicenseNumberColumn) = value
            End Set
        End Property
        
        Public Property SourceSpecialConditions As String
            Get
                Try 
                    Return CType(Me(Me.tableSource.SourceSpecialConditionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSource.SourceSpecialConditionsColumn) = value
            End Set
        End Property
        
        Public Property CountryOfOrigin As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSource.CountryOfOriginColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSource.CountryOfOriginColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_Source")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_Source"))
            End Set
        End Property
        
        Public Function IsIsFromUKNull() As Boolean
            Return Me.IsNull(Me.tableSource.IsFromUKColumn)
        End Function
        
        Public Sub SetIsFromUKNull()
            Me(Me.tableSource.IsFromUKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaptureMethodNull() As Boolean
            Return Me.IsNull(Me.tableSource.CaptureMethodColumn)
        End Function
        
        Public Sub SetCaptureMethodNull()
            Me(Me.tableSource.CaptureMethodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEULicenseNumberNull() As Boolean
            Return Me.IsNull(Me.tableSource.EULicenseNumberColumn)
        End Function
        
        Public Sub SetEULicenseNumberNull()
            Me(Me.tableSource.EULicenseNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceSpecialConditionsNull() As Boolean
            Return Me.IsNull(Me.tableSource.SourceSpecialConditionsColumn)
        End Function
        
        Public Sub SetSourceSpecialConditionsNull()
            Me(Me.tableSource.SourceSpecialConditionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryOfOriginNull() As Boolean
            Return Me.IsNull(Me.tableSource.CountryOfOriginColumn)
        End Function
        
        Public Sub SetCountryOfOriginNull()
            Me(Me.tableSource.CountryOfOriginColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SourceRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SourceRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SourceRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SourceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedRingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedRing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedRingRow
            Get
                Return CType(Me.Rows(index),ImportedRingRow)
            End Get
        End Property
        
        Public Event ImportedRingRowChanged As ImportedRingRowChangeEventHandler
        
        Public Event ImportedRingRowChanging As ImportedRingRowChangeEventHandler
        
        Public Event ImportedRingRowDeleted As ImportedRingRowChangeEventHandler
        
        Public Event ImportedRingRowDeleting As ImportedRingRowChangeEventHandler
        
        Public Overloads Sub AddImportedRingRow(ByVal row As ImportedRingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedRingRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultImportedBirdRowByAdultImportedBird_ImportedRing As AdultImportedBirdRow) As ImportedRingRow
            Dim rowImportedRingRow As ImportedRingRow = CType(Me.NewRow,ImportedRingRow)
            rowImportedRingRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultImportedBirdRowByAdultImportedBird_ImportedRing(12)}
            Me.Rows.Add(rowImportedRingRow)
            Return rowImportedRingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedRingDataTable = CType(MyBase.Clone,ImportedRingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedRingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewImportedRingRow() As ImportedRingRow
            Return CType(Me.NewRow,ImportedRingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedRingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedRingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedRingRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedRingRowChanged(Me, New ImportedRingRowChangeEvent(CType(e.Row,ImportedRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedRingRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedRingRowChanging(Me, New ImportedRingRowChangeEvent(CType(e.Row,ImportedRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedRingRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedRingRowDeleted(Me, New ImportedRingRowChangeEvent(CType(e.Row,ImportedRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedRingRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedRingRowDeleting(Me, New ImportedRingRowChangeEvent(CType(e.Row,ImportedRingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedRingRow(ByVal row As ImportedRingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedRingRow
        Inherits DataRow
        
        Private tableImportedRing As ImportedRingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedRing = CType(Me.Table,ImportedRingDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableImportedRing.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableImportedRing.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableImportedRing.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableImportedRing.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedRing.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedRing.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedRing.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedRing.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableImportedRing.StatusColumn),String)
            End Get
            Set
                Me(Me.tableImportedRing.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_ImportedRing")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_ImportedRing"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableImportedRing.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableImportedRing.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableImportedRing.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableImportedRing.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedRingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedRingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedRingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedRingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedParentsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnImportedParents_Id As DataColumn
        
        Private columnAdultImportedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedParents")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ImportedParents_IdColumn As DataColumn
            Get
                Return Me.columnImportedParents_Id
            End Get
        End Property
        
        Friend ReadOnly Property AdultImportedBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultImportedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedParentsRow
            Get
                Return CType(Me.Rows(index),ImportedParentsRow)
            End Get
        End Property
        
        Public Event ImportedParentsRowChanged As ImportedParentsRowChangeEventHandler
        
        Public Event ImportedParentsRowChanging As ImportedParentsRowChangeEventHandler
        
        Public Event ImportedParentsRowDeleted As ImportedParentsRowChangeEventHandler
        
        Public Event ImportedParentsRowDeleting As ImportedParentsRowChangeEventHandler
        
        Public Overloads Sub AddImportedParentsRow(ByVal row As ImportedParentsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedParentsRow(ByVal parentAdultImportedBirdRowByAdultImportedBird_ImportedParents As AdultImportedBirdRow) As ImportedParentsRow
            Dim rowImportedParentsRow As ImportedParentsRow = CType(Me.NewRow,ImportedParentsRow)
            rowImportedParentsRow.ItemArray = New Object() {Nothing, parentAdultImportedBirdRowByAdultImportedBird_ImportedParents(12)}
            Me.Rows.Add(rowImportedParentsRow)
            Return rowImportedParentsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedParentsDataTable = CType(MyBase.Clone,ImportedParentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedParentsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnImportedParents_Id = Me.Columns("ImportedParents_Id")
            Me.columnAdultImportedBird_Id = Me.Columns("AdultImportedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnImportedParents_Id = New DataColumn("ImportedParents_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedParents_Id)
            Me.columnAdultImportedBird_Id = New DataColumn("AdultImportedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultImportedBird_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnImportedParents_Id}, true))
            Me.columnImportedParents_Id.AutoIncrement = true
            Me.columnImportedParents_Id.AllowDBNull = false
            Me.columnImportedParents_Id.Unique = true
        End Sub
        
        Public Function NewImportedParentsRow() As ImportedParentsRow
            Return CType(Me.NewRow,ImportedParentsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedParentsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedParentsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedParentsRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedParentsRowChanged(Me, New ImportedParentsRowChangeEvent(CType(e.Row,ImportedParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedParentsRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedParentsRowChanging(Me, New ImportedParentsRowChangeEvent(CType(e.Row,ImportedParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedParentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedParentsRowDeleted(Me, New ImportedParentsRowChangeEvent(CType(e.Row,ImportedParentsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedParentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedParentsRowDeleting(Me, New ImportedParentsRowChangeEvent(CType(e.Row,ImportedParentsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedParentsRow(ByVal row As ImportedParentsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedParentsRow
        Inherits DataRow
        
        Private tableImportedParents As ImportedParentsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedParents = CType(Me.Table,ImportedParentsDataTable)
        End Sub
        
        Public Property AdultImportedBirdRow As AdultImportedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultImportedBird_ImportedParents")),AdultImportedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultImportedBird_ImportedParents"))
            End Set
        End Property
        
        Public Function GetImportedMotherRows() As ImportedMotherRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ImportedParents_ImportedMother")),ImportedMotherRow())
        End Function
        
        Public Function GetImportedFatherRows() As ImportedFatherRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ImportedParents_ImportedFather")),ImportedFatherRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedParentsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedParentsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedParentsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedParentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnImportedMother_Id As DataColumn
        
        Private columnImportedParents_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedMother")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ImportedMother_IdColumn As DataColumn
            Get
                Return Me.columnImportedMother_Id
            End Get
        End Property
        
        Friend ReadOnly Property ImportedParents_IdColumn As DataColumn
            Get
                Return Me.columnImportedParents_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedMotherRow
            Get
                Return CType(Me.Rows(index),ImportedMotherRow)
            End Get
        End Property
        
        Public Event ImportedMotherRowChanged As ImportedMotherRowChangeEventHandler
        
        Public Event ImportedMotherRowChanging As ImportedMotherRowChangeEventHandler
        
        Public Event ImportedMotherRowDeleted As ImportedMotherRowChangeEventHandler
        
        Public Event ImportedMotherRowDeleting As ImportedMotherRowChangeEventHandler
        
        Public Overloads Sub AddImportedMotherRow(ByVal row As ImportedMotherRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedMotherRow(ByVal parentImportedParentsRowByImportedParents_ImportedMother As ImportedParentsRow) As ImportedMotherRow
            Dim rowImportedMotherRow As ImportedMotherRow = CType(Me.NewRow,ImportedMotherRow)
            rowImportedMotherRow.ItemArray = New Object() {Nothing, parentImportedParentsRowByImportedParents_ImportedMother(0)}
            Me.Rows.Add(rowImportedMotherRow)
            Return rowImportedMotherRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedMotherDataTable = CType(MyBase.Clone,ImportedMotherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedMotherDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnImportedMother_Id = Me.Columns("ImportedMother_Id")
            Me.columnImportedParents_Id = Me.Columns("ImportedParents_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnImportedMother_Id = New DataColumn("ImportedMother_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedMother_Id)
            Me.columnImportedParents_Id = New DataColumn("ImportedParents_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedParents_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnImportedMother_Id}, true))
            Me.columnImportedMother_Id.AutoIncrement = true
            Me.columnImportedMother_Id.AllowDBNull = false
            Me.columnImportedMother_Id.Unique = true
        End Sub
        
        Public Function NewImportedMotherRow() As ImportedMotherRow
            Return CType(Me.NewRow,ImportedMotherRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedMotherRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedMotherRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedMotherRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedMotherRowChanged(Me, New ImportedMotherRowChangeEvent(CType(e.Row,ImportedMotherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedMotherRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedMotherRowChanging(Me, New ImportedMotherRowChangeEvent(CType(e.Row,ImportedMotherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedMotherRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedMotherRowDeleted(Me, New ImportedMotherRowChangeEvent(CType(e.Row,ImportedMotherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedMotherRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedMotherRowDeleting(Me, New ImportedMotherRowChangeEvent(CType(e.Row,ImportedMotherRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedMotherRow(ByVal row As ImportedMotherRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherRow
        Inherits DataRow
        
        Private tableImportedMother As ImportedMotherDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedMother = CType(Me.Table,ImportedMotherDataTable)
        End Sub
        
        Public Property ImportedParentsRow As ImportedParentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ImportedParents_ImportedMother")),ImportedParentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ImportedParents_ImportedMother"))
            End Set
        End Property
        
        Public Function GetImportedMotherSpecimenRows() As ImportedMotherSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ImportedMother_ImportedMotherSpecimen")),ImportedMotherSpecimenRow())
        End Function
        
        Public Function GetImportedMotherIDMarkRows() As ImportedMotherIDMarkRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ImportedMother_ImportedMotherIDMark")),ImportedMotherIDMarkRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedMotherRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedMotherRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedMotherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnImportedMother_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedMotherSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property ImportedMother_IdColumn As DataColumn
            Get
                Return Me.columnImportedMother_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedMotherSpecimenRow
            Get
                Return CType(Me.Rows(index),ImportedMotherSpecimenRow)
            End Get
        End Property
        
        Public Event ImportedMotherSpecimenRowChanged As ImportedMotherSpecimenRowChangeEventHandler
        
        Public Event ImportedMotherSpecimenRowChanging As ImportedMotherSpecimenRowChangeEventHandler
        
        Public Event ImportedMotherSpecimenRowDeleted As ImportedMotherSpecimenRowChangeEventHandler
        
        Public Event ImportedMotherSpecimenRowDeleting As ImportedMotherSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddImportedMotherSpecimenRow(ByVal row As ImportedMotherSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedMotherSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentImportedMotherRowByImportedMother_ImportedMotherSpecimen As ImportedMotherRow) As ImportedMotherSpecimenRow
            Dim rowImportedMotherSpecimenRow As ImportedMotherSpecimenRow = CType(Me.NewRow,ImportedMotherSpecimenRow)
            rowImportedMotherSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentImportedMotherRowByImportedMother_ImportedMotherSpecimen(0)}
            Me.Rows.Add(rowImportedMotherSpecimenRow)
            Return rowImportedMotherSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedMotherSpecimenDataTable = CType(MyBase.Clone,ImportedMotherSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedMotherSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnImportedMother_Id = Me.Columns("ImportedMother_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnImportedMother_Id = New DataColumn("ImportedMother_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedMother_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewImportedMotherSpecimenRow() As ImportedMotherSpecimenRow
            Return CType(Me.NewRow,ImportedMotherSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedMotherSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedMotherSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedMotherSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedMotherSpecimenRowChanged(Me, New ImportedMotherSpecimenRowChangeEvent(CType(e.Row,ImportedMotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedMotherSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedMotherSpecimenRowChanging(Me, New ImportedMotherSpecimenRowChangeEvent(CType(e.Row,ImportedMotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedMotherSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedMotherSpecimenRowDeleted(Me, New ImportedMotherSpecimenRowChangeEvent(CType(e.Row,ImportedMotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedMotherSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedMotherSpecimenRowDeleting(Me, New ImportedMotherSpecimenRowChangeEvent(CType(e.Row,ImportedMotherSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedMotherSpecimenRow(ByVal row As ImportedMotherSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherSpecimenRow
        Inherits DataRow
        
        Private tableImportedMotherSpecimen As ImportedMotherSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedMotherSpecimen = CType(Me.Table,ImportedMotherSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableImportedMotherSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableImportedMotherSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableImportedMotherSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableImportedMotherSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property ImportedMotherRow As ImportedMotherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ImportedMother_ImportedMotherSpecimen")),ImportedMotherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ImportedMother_ImportedMotherSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableImportedMotherSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableImportedMotherSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableImportedMotherSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableImportedMotherSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableImportedMotherSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableImportedMotherSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableImportedMotherSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableImportedMotherSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedMotherSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedMotherSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedMotherSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherIDMarkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnImportedMother_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedMotherIDMark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property ImportedMother_IdColumn As DataColumn
            Get
                Return Me.columnImportedMother_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedMotherIDMarkRow
            Get
                Return CType(Me.Rows(index),ImportedMotherIDMarkRow)
            End Get
        End Property
        
        Public Event ImportedMotherIDMarkRowChanged As ImportedMotherIDMarkRowChangeEventHandler
        
        Public Event ImportedMotherIDMarkRowChanging As ImportedMotherIDMarkRowChangeEventHandler
        
        Public Event ImportedMotherIDMarkRowDeleted As ImportedMotherIDMarkRowChangeEventHandler
        
        Public Event ImportedMotherIDMarkRowDeleting As ImportedMotherIDMarkRowChangeEventHandler
        
        Public Overloads Sub AddImportedMotherIDMarkRow(ByVal row As ImportedMotherIDMarkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedMotherIDMarkRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentImportedMotherRowByImportedMother_ImportedMotherIDMark As ImportedMotherRow) As ImportedMotherIDMarkRow
            Dim rowImportedMotherIDMarkRow As ImportedMotherIDMarkRow = CType(Me.NewRow,ImportedMotherIDMarkRow)
            rowImportedMotherIDMarkRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentImportedMotherRowByImportedMother_ImportedMotherIDMark(0)}
            Me.Rows.Add(rowImportedMotherIDMarkRow)
            Return rowImportedMotherIDMarkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedMotherIDMarkDataTable = CType(MyBase.Clone,ImportedMotherIDMarkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedMotherIDMarkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnImportedMother_Id = Me.Columns("ImportedMother_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnImportedMother_Id = New DataColumn("ImportedMother_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedMother_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewImportedMotherIDMarkRow() As ImportedMotherIDMarkRow
            Return CType(Me.NewRow,ImportedMotherIDMarkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedMotherIDMarkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedMotherIDMarkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedMotherIDMarkRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedMotherIDMarkRowChanged(Me, New ImportedMotherIDMarkRowChangeEvent(CType(e.Row,ImportedMotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedMotherIDMarkRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedMotherIDMarkRowChanging(Me, New ImportedMotherIDMarkRowChangeEvent(CType(e.Row,ImportedMotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedMotherIDMarkRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedMotherIDMarkRowDeleted(Me, New ImportedMotherIDMarkRowChangeEvent(CType(e.Row,ImportedMotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedMotherIDMarkRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedMotherIDMarkRowDeleting(Me, New ImportedMotherIDMarkRowChangeEvent(CType(e.Row,ImportedMotherIDMarkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedMotherIDMarkRow(ByVal row As ImportedMotherIDMarkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherIDMarkRow
        Inherits DataRow
        
        Private tableImportedMotherIDMark As ImportedMotherIDMarkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedMotherIDMark = CType(Me.Table,ImportedMotherIDMarkDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableImportedMotherIDMark.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableImportedMotherIDMark.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableImportedMotherIDMark.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableImportedMotherIDMark.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherIDMark.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherIDMark.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedMotherIDMark.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedMotherIDMark.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableImportedMotherIDMark.StatusColumn),String)
            End Get
            Set
                Me(Me.tableImportedMotherIDMark.StatusColumn) = value
            End Set
        End Property
        
        Public Property ImportedMotherRow As ImportedMotherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ImportedMother_ImportedMotherIDMark")),ImportedMotherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ImportedMother_ImportedMotherIDMark"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherIDMark.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableImportedMotherIDMark.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableImportedMotherIDMark.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableImportedMotherIDMark.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedMotherIDMarkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedMotherIDMarkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedMotherIDMarkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedMotherIDMarkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnImportedFather_Id As DataColumn
        
        Private columnImportedParents_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedFather")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ImportedFather_IdColumn As DataColumn
            Get
                Return Me.columnImportedFather_Id
            End Get
        End Property
        
        Friend ReadOnly Property ImportedParents_IdColumn As DataColumn
            Get
                Return Me.columnImportedParents_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedFatherRow
            Get
                Return CType(Me.Rows(index),ImportedFatherRow)
            End Get
        End Property
        
        Public Event ImportedFatherRowChanged As ImportedFatherRowChangeEventHandler
        
        Public Event ImportedFatherRowChanging As ImportedFatherRowChangeEventHandler
        
        Public Event ImportedFatherRowDeleted As ImportedFatherRowChangeEventHandler
        
        Public Event ImportedFatherRowDeleting As ImportedFatherRowChangeEventHandler
        
        Public Overloads Sub AddImportedFatherRow(ByVal row As ImportedFatherRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedFatherRow(ByVal parentImportedParentsRowByImportedParents_ImportedFather As ImportedParentsRow) As ImportedFatherRow
            Dim rowImportedFatherRow As ImportedFatherRow = CType(Me.NewRow,ImportedFatherRow)
            rowImportedFatherRow.ItemArray = New Object() {Nothing, parentImportedParentsRowByImportedParents_ImportedFather(0)}
            Me.Rows.Add(rowImportedFatherRow)
            Return rowImportedFatherRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedFatherDataTable = CType(MyBase.Clone,ImportedFatherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedFatherDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnImportedFather_Id = Me.Columns("ImportedFather_Id")
            Me.columnImportedParents_Id = Me.Columns("ImportedParents_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnImportedFather_Id = New DataColumn("ImportedFather_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedFather_Id)
            Me.columnImportedParents_Id = New DataColumn("ImportedParents_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedParents_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnImportedFather_Id}, true))
            Me.columnImportedFather_Id.AutoIncrement = true
            Me.columnImportedFather_Id.AllowDBNull = false
            Me.columnImportedFather_Id.Unique = true
        End Sub
        
        Public Function NewImportedFatherRow() As ImportedFatherRow
            Return CType(Me.NewRow,ImportedFatherRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedFatherRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedFatherRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedFatherRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedFatherRowChanged(Me, New ImportedFatherRowChangeEvent(CType(e.Row,ImportedFatherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedFatherRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedFatherRowChanging(Me, New ImportedFatherRowChangeEvent(CType(e.Row,ImportedFatherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedFatherRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedFatherRowDeleted(Me, New ImportedFatherRowChangeEvent(CType(e.Row,ImportedFatherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedFatherRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedFatherRowDeleting(Me, New ImportedFatherRowChangeEvent(CType(e.Row,ImportedFatherRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedFatherRow(ByVal row As ImportedFatherRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherRow
        Inherits DataRow
        
        Private tableImportedFather As ImportedFatherDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedFather = CType(Me.Table,ImportedFatherDataTable)
        End Sub
        
        Public Property ImportedParentsRow As ImportedParentsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ImportedParents_ImportedFather")),ImportedParentsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ImportedParents_ImportedFather"))
            End Set
        End Property
        
        Public Function GetImportedFatherSpecimenRows() As ImportedFatherSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ImportedFather_ImportedFatherSpecimen")),ImportedFatherSpecimenRow())
        End Function
        
        Public Function GetImportedFatherIDMarkRows() As ImportedFatherIDMarkRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("ImportedFather_ImportedFatherIDMark")),ImportedFatherIDMarkRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedFatherRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedFatherRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedFatherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnImportedFather_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedFatherSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property ImportedFather_IdColumn As DataColumn
            Get
                Return Me.columnImportedFather_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedFatherSpecimenRow
            Get
                Return CType(Me.Rows(index),ImportedFatherSpecimenRow)
            End Get
        End Property
        
        Public Event ImportedFatherSpecimenRowChanged As ImportedFatherSpecimenRowChangeEventHandler
        
        Public Event ImportedFatherSpecimenRowChanging As ImportedFatherSpecimenRowChangeEventHandler
        
        Public Event ImportedFatherSpecimenRowDeleted As ImportedFatherSpecimenRowChangeEventHandler
        
        Public Event ImportedFatherSpecimenRowDeleting As ImportedFatherSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddImportedFatherSpecimenRow(ByVal row As ImportedFatherSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedFatherSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentImportedFatherRowByImportedFather_ImportedFatherSpecimen As ImportedFatherRow) As ImportedFatherSpecimenRow
            Dim rowImportedFatherSpecimenRow As ImportedFatherSpecimenRow = CType(Me.NewRow,ImportedFatherSpecimenRow)
            rowImportedFatherSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentImportedFatherRowByImportedFather_ImportedFatherSpecimen(0)}
            Me.Rows.Add(rowImportedFatherSpecimenRow)
            Return rowImportedFatherSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedFatherSpecimenDataTable = CType(MyBase.Clone,ImportedFatherSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedFatherSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnImportedFather_Id = Me.Columns("ImportedFather_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnImportedFather_Id = New DataColumn("ImportedFather_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedFather_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewImportedFatherSpecimenRow() As ImportedFatherSpecimenRow
            Return CType(Me.NewRow,ImportedFatherSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedFatherSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedFatherSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedFatherSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedFatherSpecimenRowChanged(Me, New ImportedFatherSpecimenRowChangeEvent(CType(e.Row,ImportedFatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedFatherSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedFatherSpecimenRowChanging(Me, New ImportedFatherSpecimenRowChangeEvent(CType(e.Row,ImportedFatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedFatherSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedFatherSpecimenRowDeleted(Me, New ImportedFatherSpecimenRowChangeEvent(CType(e.Row,ImportedFatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedFatherSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedFatherSpecimenRowDeleting(Me, New ImportedFatherSpecimenRowChangeEvent(CType(e.Row,ImportedFatherSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedFatherSpecimenRow(ByVal row As ImportedFatherSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherSpecimenRow
        Inherits DataRow
        
        Private tableImportedFatherSpecimen As ImportedFatherSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedFatherSpecimen = CType(Me.Table,ImportedFatherSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableImportedFatherSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableImportedFatherSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableImportedFatherSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableImportedFatherSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property ImportedFatherRow As ImportedFatherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ImportedFather_ImportedFatherSpecimen")),ImportedFatherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ImportedFather_ImportedFatherSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableImportedFatherSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableImportedFatherSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableImportedFatherSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableImportedFatherSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableImportedFatherSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableImportedFatherSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableImportedFatherSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableImportedFatherSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedFatherSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedFatherSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedFatherSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherIDMarkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnImportedFather_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("ImportedFatherIDMark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property ImportedFather_IdColumn As DataColumn
            Get
                Return Me.columnImportedFather_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ImportedFatherIDMarkRow
            Get
                Return CType(Me.Rows(index),ImportedFatherIDMarkRow)
            End Get
        End Property
        
        Public Event ImportedFatherIDMarkRowChanged As ImportedFatherIDMarkRowChangeEventHandler
        
        Public Event ImportedFatherIDMarkRowChanging As ImportedFatherIDMarkRowChangeEventHandler
        
        Public Event ImportedFatherIDMarkRowDeleted As ImportedFatherIDMarkRowChangeEventHandler
        
        Public Event ImportedFatherIDMarkRowDeleting As ImportedFatherIDMarkRowChangeEventHandler
        
        Public Overloads Sub AddImportedFatherIDMarkRow(ByVal row As ImportedFatherIDMarkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddImportedFatherIDMarkRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentImportedFatherRowByImportedFather_ImportedFatherIDMark As ImportedFatherRow) As ImportedFatherIDMarkRow
            Dim rowImportedFatherIDMarkRow As ImportedFatherIDMarkRow = CType(Me.NewRow,ImportedFatherIDMarkRow)
            rowImportedFatherIDMarkRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentImportedFatherRowByImportedFather_ImportedFatherIDMark(0)}
            Me.Rows.Add(rowImportedFatherIDMarkRow)
            Return rowImportedFatherIDMarkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ImportedFatherIDMarkDataTable = CType(MyBase.Clone,ImportedFatherIDMarkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ImportedFatherIDMarkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnImportedFather_Id = Me.Columns("ImportedFather_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnImportedFather_Id = New DataColumn("ImportedFather_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnImportedFather_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewImportedFatherIDMarkRow() As ImportedFatherIDMarkRow
            Return CType(Me.NewRow,ImportedFatherIDMarkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ImportedFatherIDMarkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ImportedFatherIDMarkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ImportedFatherIDMarkRowChangedEvent) Is Nothing) Then
                RaiseEvent ImportedFatherIDMarkRowChanged(Me, New ImportedFatherIDMarkRowChangeEvent(CType(e.Row,ImportedFatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ImportedFatherIDMarkRowChangingEvent) Is Nothing) Then
                RaiseEvent ImportedFatherIDMarkRowChanging(Me, New ImportedFatherIDMarkRowChangeEvent(CType(e.Row,ImportedFatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ImportedFatherIDMarkRowDeletedEvent) Is Nothing) Then
                RaiseEvent ImportedFatherIDMarkRowDeleted(Me, New ImportedFatherIDMarkRowChangeEvent(CType(e.Row,ImportedFatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ImportedFatherIDMarkRowDeletingEvent) Is Nothing) Then
                RaiseEvent ImportedFatherIDMarkRowDeleting(Me, New ImportedFatherIDMarkRowChangeEvent(CType(e.Row,ImportedFatherIDMarkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveImportedFatherIDMarkRow(ByVal row As ImportedFatherIDMarkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherIDMarkRow
        Inherits DataRow
        
        Private tableImportedFatherIDMark As ImportedFatherIDMarkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableImportedFatherIDMark = CType(Me.Table,ImportedFatherIDMarkDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableImportedFatherIDMark.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableImportedFatherIDMark.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableImportedFatherIDMark.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableImportedFatherIDMark.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherIDMark.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherIDMark.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableImportedFatherIDMark.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableImportedFatherIDMark.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableImportedFatherIDMark.StatusColumn),String)
            End Get
            Set
                Me(Me.tableImportedFatherIDMark.StatusColumn) = value
            End Set
        End Property
        
        Public Property ImportedFatherRow As ImportedFatherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ImportedFather_ImportedFatherIDMark")),ImportedFatherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ImportedFather_ImportedFatherIDMark"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherIDMark.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableImportedFatherIDMark.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableImportedFatherIDMark.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableImportedFatherIDMark.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ImportedFatherIDMarkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ImportedFatherIDMarkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ImportedFatherIDMarkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ImportedFatherIDMarkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultBredDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAdultBred_Id As DataColumn
        
        Private columnAdult_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultBred")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AdultBred_IdColumn As DataColumn
            Get
                Return Me.columnAdultBred_Id
            End Get
        End Property
        
        Friend ReadOnly Property Adult_IdColumn As DataColumn
            Get
                Return Me.columnAdult_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultBredRow
            Get
                Return CType(Me.Rows(index),AdultBredRow)
            End Get
        End Property
        
        Public Event AdultBredRowChanged As AdultBredRowChangeEventHandler
        
        Public Event AdultBredRowChanging As AdultBredRowChangeEventHandler
        
        Public Event AdultBredRowDeleted As AdultBredRowChangeEventHandler
        
        Public Event AdultBredRowDeleting As AdultBredRowChangeEventHandler
        
        Public Overloads Sub AddAdultBredRow(ByVal row As AdultBredRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultBredRow(ByVal parentAdultRowByAdult_AdultBred As AdultRow) As AdultBredRow
            Dim rowAdultBredRow As AdultBredRow = CType(Me.NewRow,AdultBredRow)
            rowAdultBredRow.ItemArray = New Object() {Nothing, parentAdultRowByAdult_AdultBred(0)}
            Me.Rows.Add(rowAdultBredRow)
            Return rowAdultBredRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultBredDataTable = CType(MyBase.Clone,AdultBredDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultBredDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAdultBred_Id = Me.Columns("AdultBred_Id")
            Me.columnAdult_Id = Me.Columns("Adult_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAdultBred_Id = New DataColumn("AdultBred_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBred_Id)
            Me.columnAdult_Id = New DataColumn("Adult_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdult_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultBred_Id}, true))
            Me.columnAdultBred_Id.AutoIncrement = true
            Me.columnAdultBred_Id.AllowDBNull = false
            Me.columnAdultBred_Id.Unique = true
        End Sub
        
        Public Function NewAdultBredRow() As AdultBredRow
            Return CType(Me.NewRow,AdultBredRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultBredRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultBredRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultBredRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultBredRowChanged(Me, New AdultBredRowChangeEvent(CType(e.Row,AdultBredRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultBredRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultBredRowChanging(Me, New AdultBredRowChangeEvent(CType(e.Row,AdultBredRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultBredRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultBredRowDeleted(Me, New AdultBredRowChangeEvent(CType(e.Row,AdultBredRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultBredRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultBredRowDeleting(Me, New AdultBredRowChangeEvent(CType(e.Row,AdultBredRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultBredRow(ByVal row As AdultBredRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultBredRow
        Inherits DataRow
        
        Private tableAdultBred As AdultBredDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultBred = CType(Me.Table,AdultBredDataTable)
        End Sub
        
        Public Property AdultRow As AdultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Adult_AdultBred")),AdultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Adult_AdultBred"))
            End Set
        End Property
        
        Public Function GetAdultBredBirdRows() As AdultBredBirdRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultBred_AdultBredBird")),AdultBredBirdRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultBredRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultBredRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultBredRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultBredRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultBredBirdDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAdultBredBird_Id As DataColumn
        
        Private columnAdultBred_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultBredBird")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AdultBredBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultBredBird_Id
            End Get
        End Property
        
        Friend ReadOnly Property AdultBred_IdColumn As DataColumn
            Get
                Return Me.columnAdultBred_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultBredBirdRow
            Get
                Return CType(Me.Rows(index),AdultBredBirdRow)
            End Get
        End Property
        
        Public Event AdultBredBirdRowChanged As AdultBredBirdRowChangeEventHandler
        
        Public Event AdultBredBirdRowChanging As AdultBredBirdRowChangeEventHandler
        
        Public Event AdultBredBirdRowDeleted As AdultBredBirdRowChangeEventHandler
        
        Public Event AdultBredBirdRowDeleting As AdultBredBirdRowChangeEventHandler
        
        Public Overloads Sub AddAdultBredBirdRow(ByVal row As AdultBredBirdRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultBredBirdRow(ByVal parentAdultBredRowByAdultBred_AdultBredBird As AdultBredRow) As AdultBredBirdRow
            Dim rowAdultBredBirdRow As AdultBredBirdRow = CType(Me.NewRow,AdultBredBirdRow)
            rowAdultBredBirdRow.ItemArray = New Object() {Nothing, parentAdultBredRowByAdultBred_AdultBredBird(0)}
            Me.Rows.Add(rowAdultBredBirdRow)
            Return rowAdultBredBirdRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultBredBirdDataTable = CType(MyBase.Clone,AdultBredBirdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultBredBirdDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAdultBredBird_Id = Me.Columns("AdultBredBird_Id")
            Me.columnAdultBred_Id = Me.Columns("AdultBred_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAdultBredBird_Id = New DataColumn("AdultBredBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBredBird_Id)
            Me.columnAdultBred_Id = New DataColumn("AdultBred_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBred_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultBredBird_Id}, true))
            Me.columnAdultBredBird_Id.AutoIncrement = true
            Me.columnAdultBredBird_Id.AllowDBNull = false
            Me.columnAdultBredBird_Id.Unique = true
        End Sub
        
        Public Function NewAdultBredBirdRow() As AdultBredBirdRow
            Return CType(Me.NewRow,AdultBredBirdRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultBredBirdRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultBredBirdRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultBredBirdRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultBredBirdRowChanged(Me, New AdultBredBirdRowChangeEvent(CType(e.Row,AdultBredBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultBredBirdRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultBredBirdRowChanging(Me, New AdultBredBirdRowChangeEvent(CType(e.Row,AdultBredBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultBredBirdRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultBredBirdRowDeleted(Me, New AdultBredBirdRowChangeEvent(CType(e.Row,AdultBredBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultBredBirdRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultBredBirdRowDeleting(Me, New AdultBredBirdRowChangeEvent(CType(e.Row,AdultBredBirdRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultBredBirdRow(ByVal row As AdultBredBirdRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultBredBirdRow
        Inherits DataRow
        
        Private tableAdultBredBird As AdultBredBirdDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultBredBird = CType(Me.Table,AdultBredBirdDataTable)
        End Sub
        
        Public Property AdultBredRow As AdultBredRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultBred_AdultBredBird")),AdultBredRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultBred_AdultBredBird"))
            End Set
        End Property
        
        Public Function GetBredStatementsRows() As BredStatementsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultBredBird_BredStatements")),BredStatementsRow())
        End Function
        
        Public Function GetBredSpecimenRows() As BredSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultBredBird_BredSpecimen")),BredSpecimenRow())
        End Function
        
        Public Function GetBredIDMarksRows() As BredIDMarksRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultBredBird_BredIDMarks")),BredIDMarksRow())
        End Function
        
        Public Function GetBredRingRows() As BredRingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultBredBird_BredRing")),BredRingRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultBredBirdRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultBredBirdRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultBredBirdRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultBredBirdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredStatementsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInspectorSignedDORConfirmMarksFitted As DataColumn
        
        Private columnKeeperConfirmsIDMarksFitted As DataColumn
        
        Private columnAdultBredBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("BredStatements")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InspectorSignedDORConfirmMarksFittedColumn As DataColumn
            Get
                Return Me.columnInspectorSignedDORConfirmMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property KeeperConfirmsIDMarksFittedColumn As DataColumn
            Get
                Return Me.columnKeeperConfirmsIDMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property AdultBredBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultBredBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BredStatementsRow
            Get
                Return CType(Me.Rows(index),BredStatementsRow)
            End Get
        End Property
        
        Public Event BredStatementsRowChanged As BredStatementsRowChangeEventHandler
        
        Public Event BredStatementsRowChanging As BredStatementsRowChangeEventHandler
        
        Public Event BredStatementsRowDeleted As BredStatementsRowChangeEventHandler
        
        Public Event BredStatementsRowDeleting As BredStatementsRowChangeEventHandler
        
        Public Overloads Sub AddBredStatementsRow(ByVal row As BredStatementsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBredStatementsRow(ByVal InspectorSignedDORConfirmMarksFitted As Boolean, ByVal KeeperConfirmsIDMarksFitted As Boolean, ByVal parentAdultBredBirdRowByAdultBredBird_BredStatements As AdultBredBirdRow) As BredStatementsRow
            Dim rowBredStatementsRow As BredStatementsRow = CType(Me.NewRow,BredStatementsRow)
            rowBredStatementsRow.ItemArray = New Object() {InspectorSignedDORConfirmMarksFitted, KeeperConfirmsIDMarksFitted, parentAdultBredBirdRowByAdultBredBird_BredStatements(0)}
            Me.Rows.Add(rowBredStatementsRow)
            Return rowBredStatementsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BredStatementsDataTable = CType(MyBase.Clone,BredStatementsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BredStatementsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInspectorSignedDORConfirmMarksFitted = Me.Columns("InspectorSignedDORConfirmMarksFitted")
            Me.columnKeeperConfirmsIDMarksFitted = Me.Columns("KeeperConfirmsIDMarksFitted")
            Me.columnAdultBredBird_Id = Me.Columns("AdultBredBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnInspectorSignedDORConfirmMarksFitted = New DataColumn("InspectorSignedDORConfirmMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInspectorSignedDORConfirmMarksFitted)
            Me.columnKeeperConfirmsIDMarksFitted = New DataColumn("KeeperConfirmsIDMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperConfirmsIDMarksFitted)
            Me.columnAdultBredBird_Id = New DataColumn("AdultBredBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBredBird_Id)
        End Sub
        
        Public Function NewBredStatementsRow() As BredStatementsRow
            Return CType(Me.NewRow,BredStatementsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BredStatementsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BredStatementsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BredStatementsRowChangedEvent) Is Nothing) Then
                RaiseEvent BredStatementsRowChanged(Me, New BredStatementsRowChangeEvent(CType(e.Row,BredStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BredStatementsRowChangingEvent) Is Nothing) Then
                RaiseEvent BredStatementsRowChanging(Me, New BredStatementsRowChangeEvent(CType(e.Row,BredStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BredStatementsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BredStatementsRowDeleted(Me, New BredStatementsRowChangeEvent(CType(e.Row,BredStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BredStatementsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BredStatementsRowDeleting(Me, New BredStatementsRowChangeEvent(CType(e.Row,BredStatementsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBredStatementsRow(ByVal row As BredStatementsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredStatementsRow
        Inherits DataRow
        
        Private tableBredStatements As BredStatementsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBredStatements = CType(Me.Table,BredStatementsDataTable)
        End Sub
        
        Public Property InspectorSignedDORConfirmMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBredStatements.InspectorSignedDORConfirmMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredStatements.InspectorSignedDORConfirmMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property KeeperConfirmsIDMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBredStatements.KeeperConfirmsIDMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredStatements.KeeperConfirmsIDMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property AdultBredBirdRow As AdultBredBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultBredBird_BredStatements")),AdultBredBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultBredBird_BredStatements"))
            End Set
        End Property
        
        Public Function IsInspectorSignedDORConfirmMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableBredStatements.InspectorSignedDORConfirmMarksFittedColumn)
        End Function
        
        Public Sub SetInspectorSignedDORConfirmMarksFittedNull()
            Me(Me.tableBredStatements.InspectorSignedDORConfirmMarksFittedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperConfirmsIDMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableBredStatements.KeeperConfirmsIDMarksFittedColumn)
        End Function
        
        Public Sub SetKeeperConfirmsIDMarksFittedNull()
            Me(Me.tableBredStatements.KeeperConfirmsIDMarksFittedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredStatementsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BredStatementsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BredStatementsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BredStatementsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnAdultBredBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("BredSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property AdultBredBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultBredBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BredSpecimenRow
            Get
                Return CType(Me.Rows(index),BredSpecimenRow)
            End Get
        End Property
        
        Public Event BredSpecimenRowChanged As BredSpecimenRowChangeEventHandler
        
        Public Event BredSpecimenRowChanging As BredSpecimenRowChangeEventHandler
        
        Public Event BredSpecimenRowDeleted As BredSpecimenRowChangeEventHandler
        
        Public Event BredSpecimenRowDeleting As BredSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddBredSpecimenRow(ByVal row As BredSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBredSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentAdultBredBirdRowByAdultBredBird_BredSpecimen As AdultBredBirdRow) As BredSpecimenRow
            Dim rowBredSpecimenRow As BredSpecimenRow = CType(Me.NewRow,BredSpecimenRow)
            rowBredSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentAdultBredBirdRowByAdultBredBird_BredSpecimen(0)}
            Me.Rows.Add(rowBredSpecimenRow)
            Return rowBredSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BredSpecimenDataTable = CType(MyBase.Clone,BredSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BredSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnAdultBredBird_Id = Me.Columns("AdultBredBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnAdultBredBird_Id = New DataColumn("AdultBredBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBredBird_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewBredSpecimenRow() As BredSpecimenRow
            Return CType(Me.NewRow,BredSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BredSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BredSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BredSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent BredSpecimenRowChanged(Me, New BredSpecimenRowChangeEvent(CType(e.Row,BredSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BredSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent BredSpecimenRowChanging(Me, New BredSpecimenRowChangeEvent(CType(e.Row,BredSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BredSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent BredSpecimenRowDeleted(Me, New BredSpecimenRowChangeEvent(CType(e.Row,BredSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BredSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent BredSpecimenRowDeleting(Me, New BredSpecimenRowChangeEvent(CType(e.Row,BredSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBredSpecimenRow(ByVal row As BredSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredSpecimenRow
        Inherits DataRow
        
        Private tableBredSpecimen As BredSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBredSpecimen = CType(Me.Table,BredSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableBredSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableBredSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableBredSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableBredSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableBredSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableBredSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableBredSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableBredSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableBredSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property AdultBredBirdRow As AdultBredBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultBredBird_BredSpecimen")),AdultBredBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultBredBird_BredSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableBredSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableBredSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableBredSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableBredSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableBredSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableBredSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableBredSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBredSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableBredSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BredSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BredSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BredSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredIDMarksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultBredBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("BredIDMarks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultBredBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultBredBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BredIDMarksRow
            Get
                Return CType(Me.Rows(index),BredIDMarksRow)
            End Get
        End Property
        
        Public Event BredIDMarksRowChanged As BredIDMarksRowChangeEventHandler
        
        Public Event BredIDMarksRowChanging As BredIDMarksRowChangeEventHandler
        
        Public Event BredIDMarksRowDeleted As BredIDMarksRowChangeEventHandler
        
        Public Event BredIDMarksRowDeleting As BredIDMarksRowChangeEventHandler
        
        Public Overloads Sub AddBredIDMarksRow(ByVal row As BredIDMarksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBredIDMarksRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultBredBirdRowByAdultBredBird_BredIDMarks As AdultBredBirdRow) As BredIDMarksRow
            Dim rowBredIDMarksRow As BredIDMarksRow = CType(Me.NewRow,BredIDMarksRow)
            rowBredIDMarksRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultBredBirdRowByAdultBredBird_BredIDMarks(0)}
            Me.Rows.Add(rowBredIDMarksRow)
            Return rowBredIDMarksRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BredIDMarksDataTable = CType(MyBase.Clone,BredIDMarksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BredIDMarksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultBredBird_Id = Me.Columns("AdultBredBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultBredBird_Id = New DataColumn("AdultBredBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBredBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewBredIDMarksRow() As BredIDMarksRow
            Return CType(Me.NewRow,BredIDMarksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BredIDMarksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BredIDMarksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BredIDMarksRowChangedEvent) Is Nothing) Then
                RaiseEvent BredIDMarksRowChanged(Me, New BredIDMarksRowChangeEvent(CType(e.Row,BredIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BredIDMarksRowChangingEvent) Is Nothing) Then
                RaiseEvent BredIDMarksRowChanging(Me, New BredIDMarksRowChangeEvent(CType(e.Row,BredIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BredIDMarksRowDeletedEvent) Is Nothing) Then
                RaiseEvent BredIDMarksRowDeleted(Me, New BredIDMarksRowChangeEvent(CType(e.Row,BredIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BredIDMarksRowDeletingEvent) Is Nothing) Then
                RaiseEvent BredIDMarksRowDeleting(Me, New BredIDMarksRowChangeEvent(CType(e.Row,BredIDMarksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBredIDMarksRow(ByVal row As BredIDMarksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredIDMarksRow
        Inherits DataRow
        
        Private tableBredIDMarks As BredIDMarksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBredIDMarks = CType(Me.Table,BredIDMarksDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableBredIDMarks.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableBredIDMarks.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableBredIDMarks.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableBredIDMarks.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBredIDMarks.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredIDMarks.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableBredIDMarks.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredIDMarks.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableBredIDMarks.StatusColumn),String)
            End Get
            Set
                Me(Me.tableBredIDMarks.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultBredBirdRow As AdultBredBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultBredBird_BredIDMarks")),AdultBredBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultBredBird_BredIDMarks"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableBredIDMarks.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableBredIDMarks.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableBredIDMarks.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableBredIDMarks.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredIDMarksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BredIDMarksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BredIDMarksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BredIDMarksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredRingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultBredBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("BredRing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultBredBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultBredBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BredRingRow
            Get
                Return CType(Me.Rows(index),BredRingRow)
            End Get
        End Property
        
        Public Event BredRingRowChanged As BredRingRowChangeEventHandler
        
        Public Event BredRingRowChanging As BredRingRowChangeEventHandler
        
        Public Event BredRingRowDeleted As BredRingRowChangeEventHandler
        
        Public Event BredRingRowDeleting As BredRingRowChangeEventHandler
        
        Public Overloads Sub AddBredRingRow(ByVal row As BredRingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBredRingRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultBredBirdRowByAdultBredBird_BredRing As AdultBredBirdRow) As BredRingRow
            Dim rowBredRingRow As BredRingRow = CType(Me.NewRow,BredRingRow)
            rowBredRingRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultBredBirdRowByAdultBredBird_BredRing(0)}
            Me.Rows.Add(rowBredRingRow)
            Return rowBredRingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BredRingDataTable = CType(MyBase.Clone,BredRingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BredRingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultBredBird_Id = Me.Columns("AdultBredBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultBredBird_Id = New DataColumn("AdultBredBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultBredBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewBredRingRow() As BredRingRow
            Return CType(Me.NewRow,BredRingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BredRingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BredRingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BredRingRowChangedEvent) Is Nothing) Then
                RaiseEvent BredRingRowChanged(Me, New BredRingRowChangeEvent(CType(e.Row,BredRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BredRingRowChangingEvent) Is Nothing) Then
                RaiseEvent BredRingRowChanging(Me, New BredRingRowChangeEvent(CType(e.Row,BredRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BredRingRowDeletedEvent) Is Nothing) Then
                RaiseEvent BredRingRowDeleted(Me, New BredRingRowChangeEvent(CType(e.Row,BredRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BredRingRowDeletingEvent) Is Nothing) Then
                RaiseEvent BredRingRowDeleting(Me, New BredRingRowChangeEvent(CType(e.Row,BredRingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBredRingRow(ByVal row As BredRingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredRingRow
        Inherits DataRow
        
        Private tableBredRing As BredRingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBredRing = CType(Me.Table,BredRingDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableBredRing.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableBredRing.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableBredRing.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableBredRing.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBredRing.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredRing.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableBredRing.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBredRing.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableBredRing.StatusColumn),String)
            End Get
            Set
                Me(Me.tableBredRing.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultBredBirdRow As AdultBredBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultBredBird_BredRing")),AdultBredBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultBredBird_BredRing"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableBredRing.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableBredRing.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableBredRing.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableBredRing.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BredRingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BredRingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BredRingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BredRingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAdultOther_Id As DataColumn
        
        Private columnAdult_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultOther")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AdultOther_IdColumn As DataColumn
            Get
                Return Me.columnAdultOther_Id
            End Get
        End Property
        
        Friend ReadOnly Property Adult_IdColumn As DataColumn
            Get
                Return Me.columnAdult_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultOtherRow
            Get
                Return CType(Me.Rows(index),AdultOtherRow)
            End Get
        End Property
        
        Public Event AdultOtherRowChanged As AdultOtherRowChangeEventHandler
        
        Public Event AdultOtherRowChanging As AdultOtherRowChangeEventHandler
        
        Public Event AdultOtherRowDeleted As AdultOtherRowChangeEventHandler
        
        Public Event AdultOtherRowDeleting As AdultOtherRowChangeEventHandler
        
        Public Overloads Sub AddAdultOtherRow(ByVal row As AdultOtherRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultOtherRow(ByVal parentAdultRowByAdult_AdultOther As AdultRow) As AdultOtherRow
            Dim rowAdultOtherRow As AdultOtherRow = CType(Me.NewRow,AdultOtherRow)
            rowAdultOtherRow.ItemArray = New Object() {Nothing, parentAdultRowByAdult_AdultOther(0)}
            Me.Rows.Add(rowAdultOtherRow)
            Return rowAdultOtherRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultOtherDataTable = CType(MyBase.Clone,AdultOtherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultOtherDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAdultOther_Id = Me.Columns("AdultOther_Id")
            Me.columnAdult_Id = Me.Columns("Adult_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAdultOther_Id = New DataColumn("AdultOther_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOther_Id)
            Me.columnAdult_Id = New DataColumn("Adult_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdult_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultOther_Id}, true))
            Me.columnAdultOther_Id.AutoIncrement = true
            Me.columnAdultOther_Id.AllowDBNull = false
            Me.columnAdultOther_Id.Unique = true
        End Sub
        
        Public Function NewAdultOtherRow() As AdultOtherRow
            Return CType(Me.NewRow,AdultOtherRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultOtherRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultOtherRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultOtherRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultOtherRowChanged(Me, New AdultOtherRowChangeEvent(CType(e.Row,AdultOtherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultOtherRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultOtherRowChanging(Me, New AdultOtherRowChangeEvent(CType(e.Row,AdultOtherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultOtherRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultOtherRowDeleted(Me, New AdultOtherRowChangeEvent(CType(e.Row,AdultOtherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultOtherRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultOtherRowDeleting(Me, New AdultOtherRowChangeEvent(CType(e.Row,AdultOtherRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultOtherRow(ByVal row As AdultOtherRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherRow
        Inherits DataRow
        
        Private tableAdultOther As AdultOtherDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultOther = CType(Me.Table,AdultOtherDataTable)
        End Sub
        
        Public Property AdultRow As AdultRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Adult_AdultOther")),AdultRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Adult_AdultOther"))
            End Set
        End Property
        
        Public Function GetAdultOtherBirdRows() As AdultOtherBirdRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultOther_AdultOtherBird")),AdultOtherBirdRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultOtherRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultOtherRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultOtherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherBirdDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAcquisitionMethod As DataColumn
        
        Private columnAcquisitionDetails As DataColumn
        
        Private columnDateAcquired As DataColumn
        
        Private columnPreviousKeeper As DataColumn
        
        Private columnEvidenceExplanation As DataColumn
        
        Private columnKeptAddress As DataColumn
        
        Private columnAdultOtherBird_Id As DataColumn
        
        Private columnAdultOther_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultOtherBird")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AcquisitionMethodColumn As DataColumn
            Get
                Return Me.columnAcquisitionMethod
            End Get
        End Property
        
        Friend ReadOnly Property AcquisitionDetailsColumn As DataColumn
            Get
                Return Me.columnAcquisitionDetails
            End Get
        End Property
        
        Friend ReadOnly Property DateAcquiredColumn As DataColumn
            Get
                Return Me.columnDateAcquired
            End Get
        End Property
        
        Friend ReadOnly Property PreviousKeeperColumn As DataColumn
            Get
                Return Me.columnPreviousKeeper
            End Get
        End Property
        
        Friend ReadOnly Property EvidenceExplanationColumn As DataColumn
            Get
                Return Me.columnEvidenceExplanation
            End Get
        End Property
        
        Friend ReadOnly Property KeptAddressColumn As DataColumn
            Get
                Return Me.columnKeptAddress
            End Get
        End Property
        
        Friend ReadOnly Property AdultOtherBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultOtherBird_Id
            End Get
        End Property
        
        Friend ReadOnly Property AdultOther_IdColumn As DataColumn
            Get
                Return Me.columnAdultOther_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultOtherBirdRow
            Get
                Return CType(Me.Rows(index),AdultOtherBirdRow)
            End Get
        End Property
        
        Public Event AdultOtherBirdRowChanged As AdultOtherBirdRowChangeEventHandler
        
        Public Event AdultOtherBirdRowChanging As AdultOtherBirdRowChangeEventHandler
        
        Public Event AdultOtherBirdRowDeleted As AdultOtherBirdRowChangeEventHandler
        
        Public Event AdultOtherBirdRowDeleting As AdultOtherBirdRowChangeEventHandler
        
        Public Overloads Sub AddAdultOtherBirdRow(ByVal row As AdultOtherBirdRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultOtherBirdRow(ByVal AcquisitionMethod As String, ByVal AcquisitionDetails As String, ByVal DateAcquired As Date, ByVal PreviousKeeper As String, ByVal EvidenceExplanation As String, ByVal KeptAddress As Integer, ByVal parentAdultOtherRowByAdultOther_AdultOtherBird As AdultOtherRow) As AdultOtherBirdRow
            Dim rowAdultOtherBirdRow As AdultOtherBirdRow = CType(Me.NewRow,AdultOtherBirdRow)
            rowAdultOtherBirdRow.ItemArray = New Object() {AcquisitionMethod, AcquisitionDetails, DateAcquired, PreviousKeeper, EvidenceExplanation, KeptAddress, Nothing, parentAdultOtherRowByAdultOther_AdultOtherBird(0)}
            Me.Rows.Add(rowAdultOtherBirdRow)
            Return rowAdultOtherBirdRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultOtherBirdDataTable = CType(MyBase.Clone,AdultOtherBirdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultOtherBirdDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAcquisitionMethod = Me.Columns("AcquisitionMethod")
            Me.columnAcquisitionDetails = Me.Columns("AcquisitionDetails")
            Me.columnDateAcquired = Me.Columns("DateAcquired")
            Me.columnPreviousKeeper = Me.Columns("PreviousKeeper")
            Me.columnEvidenceExplanation = Me.Columns("EvidenceExplanation")
            Me.columnKeptAddress = Me.Columns("KeptAddress")
            Me.columnAdultOtherBird_Id = Me.Columns("AdultOtherBird_Id")
            Me.columnAdultOther_Id = Me.Columns("AdultOther_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnAcquisitionMethod = New DataColumn("AcquisitionMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquisitionMethod)
            Me.columnAcquisitionDetails = New DataColumn("AcquisitionDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcquisitionDetails)
            Me.columnDateAcquired = New DataColumn("DateAcquired", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateAcquired)
            Me.columnPreviousKeeper = New DataColumn("PreviousKeeper", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviousKeeper)
            Me.columnEvidenceExplanation = New DataColumn("EvidenceExplanation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEvidenceExplanation)
            Me.columnKeptAddress = New DataColumn("KeptAddress", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeptAddress)
            Me.columnAdultOtherBird_Id = New DataColumn("AdultOtherBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOtherBird_Id)
            Me.columnAdultOther_Id = New DataColumn("AdultOther_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOther_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnAdultOtherBird_Id}, true))
            Me.columnAcquisitionMethod.AllowDBNull = false
            Me.columnDateAcquired.AllowDBNull = false
            Me.columnAdultOtherBird_Id.AutoIncrement = true
            Me.columnAdultOtherBird_Id.AllowDBNull = false
            Me.columnAdultOtherBird_Id.Unique = true
        End Sub
        
        Public Function NewAdultOtherBirdRow() As AdultOtherBirdRow
            Return CType(Me.NewRow,AdultOtherBirdRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultOtherBirdRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultOtherBirdRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultOtherBirdRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultOtherBirdRowChanged(Me, New AdultOtherBirdRowChangeEvent(CType(e.Row,AdultOtherBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultOtherBirdRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultOtherBirdRowChanging(Me, New AdultOtherBirdRowChangeEvent(CType(e.Row,AdultOtherBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultOtherBirdRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultOtherBirdRowDeleted(Me, New AdultOtherBirdRowChangeEvent(CType(e.Row,AdultOtherBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultOtherBirdRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultOtherBirdRowDeleting(Me, New AdultOtherBirdRowChangeEvent(CType(e.Row,AdultOtherBirdRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultOtherBirdRow(ByVal row As AdultOtherBirdRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherBirdRow
        Inherits DataRow
        
        Private tableAdultOtherBird As AdultOtherBirdDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultOtherBird = CType(Me.Table,AdultOtherBirdDataTable)
        End Sub
        
        Public Property AcquisitionMethod As String
            Get
                Return CType(Me(Me.tableAdultOtherBird.AcquisitionMethodColumn),String)
            End Get
            Set
                Me(Me.tableAdultOtherBird.AcquisitionMethodColumn) = value
            End Set
        End Property
        
        Public Property AcquisitionDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherBird.AcquisitionDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherBird.AcquisitionDetailsColumn) = value
            End Set
        End Property
        
        Public Property DateAcquired As Date
            Get
                Return CType(Me(Me.tableAdultOtherBird.DateAcquiredColumn),Date)
            End Get
            Set
                Me(Me.tableAdultOtherBird.DateAcquiredColumn) = value
            End Set
        End Property
        
        Public Property PreviousKeeper As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherBird.PreviousKeeperColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherBird.PreviousKeeperColumn) = value
            End Set
        End Property
        
        Public Property EvidenceExplanation As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherBird.EvidenceExplanationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherBird.EvidenceExplanationColumn) = value
            End Set
        End Property
        
        Public Property KeptAddress As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherBird.KeptAddressColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherBird.KeptAddressColumn) = value
            End Set
        End Property
        
        Public Property AdultOtherRow As AdultOtherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultOther_AdultOtherBird")),AdultOtherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultOther_AdultOtherBird"))
            End Set
        End Property
        
        Public Function IsAcquisitionDetailsNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherBird.AcquisitionDetailsColumn)
        End Function
        
        Public Sub SetAcquisitionDetailsNull()
            Me(Me.tableAdultOtherBird.AcquisitionDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviousKeeperNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherBird.PreviousKeeperColumn)
        End Function
        
        Public Sub SetPreviousKeeperNull()
            Me(Me.tableAdultOtherBird.PreviousKeeperColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEvidenceExplanationNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherBird.EvidenceExplanationColumn)
        End Function
        
        Public Sub SetEvidenceExplanationNull()
            Me(Me.tableAdultOtherBird.EvidenceExplanationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeptAddressNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherBird.KeptAddressColumn)
        End Function
        
        Public Sub SetKeptAddressNull()
            Me(Me.tableAdultOtherBird.KeptAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetAdultOtherStatementsRows() As AdultOtherStatementsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultOtherBird_AdultOtherStatements")),AdultOtherStatementsRow())
        End Function
        
        Public Function GetAdultOtherSpecimenRows() As AdultOtherSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultOtherBird_AdultOtherSpecimen")),AdultOtherSpecimenRow())
        End Function
        
        Public Function GetOtherIDMarksRows() As OtherIDMarksRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultOtherBird_OtherIDMarks")),OtherIDMarksRow())
        End Function
        
        Public Function GetOtherRingRows() As OtherRingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("AdultOtherBird_OtherRing")),OtherRingRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherBirdRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultOtherBirdRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultOtherBirdRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultOtherBirdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherStatementsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnInspectorSignedDORConfirmMarksFitted As DataColumn
        
        Private columnKeeperConfirmsIDMarksFitted As DataColumn
        
        Private columnAdultOtherBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultOtherStatements")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property InspectorSignedDORConfirmMarksFittedColumn As DataColumn
            Get
                Return Me.columnInspectorSignedDORConfirmMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property KeeperConfirmsIDMarksFittedColumn As DataColumn
            Get
                Return Me.columnKeeperConfirmsIDMarksFitted
            End Get
        End Property
        
        Friend ReadOnly Property AdultOtherBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultOtherBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultOtherStatementsRow
            Get
                Return CType(Me.Rows(index),AdultOtherStatementsRow)
            End Get
        End Property
        
        Public Event AdultOtherStatementsRowChanged As AdultOtherStatementsRowChangeEventHandler
        
        Public Event AdultOtherStatementsRowChanging As AdultOtherStatementsRowChangeEventHandler
        
        Public Event AdultOtherStatementsRowDeleted As AdultOtherStatementsRowChangeEventHandler
        
        Public Event AdultOtherStatementsRowDeleting As AdultOtherStatementsRowChangeEventHandler
        
        Public Overloads Sub AddAdultOtherStatementsRow(ByVal row As AdultOtherStatementsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultOtherStatementsRow(ByVal InspectorSignedDORConfirmMarksFitted As Boolean, ByVal KeeperConfirmsIDMarksFitted As Boolean, ByVal parentAdultOtherBirdRowByAdultOtherBird_AdultOtherStatements As AdultOtherBirdRow) As AdultOtherStatementsRow
            Dim rowAdultOtherStatementsRow As AdultOtherStatementsRow = CType(Me.NewRow,AdultOtherStatementsRow)
            rowAdultOtherStatementsRow.ItemArray = New Object() {InspectorSignedDORConfirmMarksFitted, KeeperConfirmsIDMarksFitted, parentAdultOtherBirdRowByAdultOtherBird_AdultOtherStatements(6)}
            Me.Rows.Add(rowAdultOtherStatementsRow)
            Return rowAdultOtherStatementsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultOtherStatementsDataTable = CType(MyBase.Clone,AdultOtherStatementsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultOtherStatementsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnInspectorSignedDORConfirmMarksFitted = Me.Columns("InspectorSignedDORConfirmMarksFitted")
            Me.columnKeeperConfirmsIDMarksFitted = Me.Columns("KeeperConfirmsIDMarksFitted")
            Me.columnAdultOtherBird_Id = Me.Columns("AdultOtherBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnInspectorSignedDORConfirmMarksFitted = New DataColumn("InspectorSignedDORConfirmMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInspectorSignedDORConfirmMarksFitted)
            Me.columnKeeperConfirmsIDMarksFitted = New DataColumn("KeeperConfirmsIDMarksFitted", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperConfirmsIDMarksFitted)
            Me.columnAdultOtherBird_Id = New DataColumn("AdultOtherBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOtherBird_Id)
        End Sub
        
        Public Function NewAdultOtherStatementsRow() As AdultOtherStatementsRow
            Return CType(Me.NewRow,AdultOtherStatementsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultOtherStatementsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultOtherStatementsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultOtherStatementsRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultOtherStatementsRowChanged(Me, New AdultOtherStatementsRowChangeEvent(CType(e.Row,AdultOtherStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultOtherStatementsRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultOtherStatementsRowChanging(Me, New AdultOtherStatementsRowChangeEvent(CType(e.Row,AdultOtherStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultOtherStatementsRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultOtherStatementsRowDeleted(Me, New AdultOtherStatementsRowChangeEvent(CType(e.Row,AdultOtherStatementsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultOtherStatementsRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultOtherStatementsRowDeleting(Me, New AdultOtherStatementsRowChangeEvent(CType(e.Row,AdultOtherStatementsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultOtherStatementsRow(ByVal row As AdultOtherStatementsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherStatementsRow
        Inherits DataRow
        
        Private tableAdultOtherStatements As AdultOtherStatementsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultOtherStatements = CType(Me.Table,AdultOtherStatementsDataTable)
        End Sub
        
        Public Property InspectorSignedDORConfirmMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherStatements.InspectorSignedDORConfirmMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherStatements.InspectorSignedDORConfirmMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property KeeperConfirmsIDMarksFitted As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherStatements.KeeperConfirmsIDMarksFittedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherStatements.KeeperConfirmsIDMarksFittedColumn) = value
            End Set
        End Property
        
        Public Property AdultOtherBirdRow As AdultOtherBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultOtherBird_AdultOtherStatements")),AdultOtherBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultOtherBird_AdultOtherStatements"))
            End Set
        End Property
        
        Public Function IsInspectorSignedDORConfirmMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherStatements.InspectorSignedDORConfirmMarksFittedColumn)
        End Function
        
        Public Sub SetInspectorSignedDORConfirmMarksFittedNull()
            Me(Me.tableAdultOtherStatements.InspectorSignedDORConfirmMarksFittedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperConfirmsIDMarksFittedNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherStatements.KeeperConfirmsIDMarksFittedColumn)
        End Function
        
        Public Sub SetKeeperConfirmsIDMarksFittedNull()
            Me(Me.tableAdultOtherStatements.KeeperConfirmsIDMarksFittedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherStatementsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultOtherStatementsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultOtherStatementsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultOtherStatementsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusId As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnECAnnex As DataColumn
        
        Private columnAdultOtherBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("AdultOtherSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusIdColumn As DataColumn
            Get
                Return Me.columnAgeStatusId
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property ECAnnexColumn As DataColumn
            Get
                Return Me.columnECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property AdultOtherBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultOtherBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As AdultOtherSpecimenRow
            Get
                Return CType(Me.Rows(index),AdultOtherSpecimenRow)
            End Get
        End Property
        
        Public Event AdultOtherSpecimenRowChanged As AdultOtherSpecimenRowChangeEventHandler
        
        Public Event AdultOtherSpecimenRowChanging As AdultOtherSpecimenRowChangeEventHandler
        
        Public Event AdultOtherSpecimenRowDeleted As AdultOtherSpecimenRowChangeEventHandler
        
        Public Event AdultOtherSpecimenRowDeleting As AdultOtherSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddAdultOtherSpecimenRow(ByVal row As AdultOtherSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddAdultOtherSpecimenRow(ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusId As Integer, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal FateCode As Integer, ByVal ECAnnex As String, ByVal parentAdultOtherBirdRowByAdultOtherBird_AdultOtherSpecimen As AdultOtherBirdRow) As AdultOtherSpecimenRow
            Dim rowAdultOtherSpecimenRow As AdultOtherSpecimenRow = CType(Me.NewRow,AdultOtherSpecimenRow)
            rowAdultOtherSpecimenRow.ItemArray = New Object() {SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusId, Gender, RegistrationDocumentReference, Article10Reference, FateCode, ECAnnex, parentAdultOtherBirdRowByAdultOtherBird_AdultOtherSpecimen(6)}
            Me.Rows.Add(rowAdultOtherSpecimenRow)
            Return rowAdultOtherSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As AdultOtherSpecimenDataTable = CType(MyBase.Clone,AdultOtherSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New AdultOtherSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusId = Me.Columns("AgeStatusId")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnECAnnex = Me.Columns("ECAnnex")
            Me.columnAdultOtherBird_Id = Me.Columns("AdultOtherBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusId = New DataColumn("AgeStatusId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusId)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnECAnnex = New DataColumn("ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnECAnnex)
            Me.columnAdultOtherBird_Id = New DataColumn("AdultOtherBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOtherBird_Id)
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewAdultOtherSpecimenRow() As AdultOtherSpecimenRow
            Return CType(Me.NewRow,AdultOtherSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New AdultOtherSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AdultOtherSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AdultOtherSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent AdultOtherSpecimenRowChanged(Me, New AdultOtherSpecimenRowChangeEvent(CType(e.Row,AdultOtherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AdultOtherSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent AdultOtherSpecimenRowChanging(Me, New AdultOtherSpecimenRowChangeEvent(CType(e.Row,AdultOtherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AdultOtherSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent AdultOtherSpecimenRowDeleted(Me, New AdultOtherSpecimenRowChangeEvent(CType(e.Row,AdultOtherSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AdultOtherSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent AdultOtherSpecimenRowDeleting(Me, New AdultOtherSpecimenRowChangeEvent(CType(e.Row,AdultOtherSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveAdultOtherSpecimenRow(ByVal row As AdultOtherSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherSpecimenRow
        Inherits DataRow
        
        Private tableAdultOtherSpecimen As AdultOtherSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableAdultOtherSpecimen = CType(Me.Table,AdultOtherSpecimenDataTable)
        End Sub
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableAdultOtherSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableAdultOtherSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableAdultOtherSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusId As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.AgeStatusIdColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.AgeStatusIdColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableAdultOtherSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.FateCodeColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableAdultOtherSpecimen.ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAdultOtherSpecimen.ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property AdultOtherBirdRow As AdultOtherBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultOtherBird_AdultOtherSpecimen")),AdultOtherBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultOtherBird_AdultOtherSpecimen"))
            End Set
        End Property
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableAdultOtherSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableAdultOtherSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableAdultOtherSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusIdNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.AgeStatusIdColumn)
        End Function
        
        Public Sub SetAgeStatusIdNull()
            Me(Me.tableAdultOtherSpecimen.AgeStatusIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableAdultOtherSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableAdultOtherSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateCodeNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.FateCodeColumn)
        End Function
        
        Public Sub SetFateCodeNull()
            Me(Me.tableAdultOtherSpecimen.FateCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableAdultOtherSpecimen.ECAnnexColumn)
        End Function
        
        Public Sub SetECAnnexNull()
            Me(Me.tableAdultOtherSpecimen.ECAnnexColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class AdultOtherSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As AdultOtherSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As AdultOtherSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As AdultOtherSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OtherIDMarksDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultOtherBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("OtherIDMarks")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultOtherBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultOtherBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OtherIDMarksRow
            Get
                Return CType(Me.Rows(index),OtherIDMarksRow)
            End Get
        End Property
        
        Public Event OtherIDMarksRowChanged As OtherIDMarksRowChangeEventHandler
        
        Public Event OtherIDMarksRowChanging As OtherIDMarksRowChangeEventHandler
        
        Public Event OtherIDMarksRowDeleted As OtherIDMarksRowChangeEventHandler
        
        Public Event OtherIDMarksRowDeleting As OtherIDMarksRowChangeEventHandler
        
        Public Overloads Sub AddOtherIDMarksRow(ByVal row As OtherIDMarksRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOtherIDMarksRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultOtherBirdRowByAdultOtherBird_OtherIDMarks As AdultOtherBirdRow) As OtherIDMarksRow
            Dim rowOtherIDMarksRow As OtherIDMarksRow = CType(Me.NewRow,OtherIDMarksRow)
            rowOtherIDMarksRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultOtherBirdRowByAdultOtherBird_OtherIDMarks(6)}
            Me.Rows.Add(rowOtherIDMarksRow)
            Return rowOtherIDMarksRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OtherIDMarksDataTable = CType(MyBase.Clone,OtherIDMarksDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OtherIDMarksDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultOtherBird_Id = Me.Columns("AdultOtherBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultOtherBird_Id = New DataColumn("AdultOtherBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOtherBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewOtherIDMarksRow() As OtherIDMarksRow
            Return CType(Me.NewRow,OtherIDMarksRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OtherIDMarksRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OtherIDMarksRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OtherIDMarksRowChangedEvent) Is Nothing) Then
                RaiseEvent OtherIDMarksRowChanged(Me, New OtherIDMarksRowChangeEvent(CType(e.Row,OtherIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OtherIDMarksRowChangingEvent) Is Nothing) Then
                RaiseEvent OtherIDMarksRowChanging(Me, New OtherIDMarksRowChangeEvent(CType(e.Row,OtherIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OtherIDMarksRowDeletedEvent) Is Nothing) Then
                RaiseEvent OtherIDMarksRowDeleted(Me, New OtherIDMarksRowChangeEvent(CType(e.Row,OtherIDMarksRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OtherIDMarksRowDeletingEvent) Is Nothing) Then
                RaiseEvent OtherIDMarksRowDeleting(Me, New OtherIDMarksRowChangeEvent(CType(e.Row,OtherIDMarksRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOtherIDMarksRow(ByVal row As OtherIDMarksRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OtherIDMarksRow
        Inherits DataRow
        
        Private tableOtherIDMarks As OtherIDMarksDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOtherIDMarks = CType(Me.Table,OtherIDMarksDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableOtherIDMarks.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableOtherIDMarks.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableOtherIDMarks.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableOtherIDMarks.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOtherIDMarks.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOtherIDMarks.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableOtherIDMarks.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOtherIDMarks.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableOtherIDMarks.StatusColumn),String)
            End Get
            Set
                Me(Me.tableOtherIDMarks.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultOtherBirdRow As AdultOtherBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultOtherBird_OtherIDMarks")),AdultOtherBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultOtherBird_OtherIDMarks"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableOtherIDMarks.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableOtherIDMarks.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableOtherIDMarks.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableOtherIDMarks.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OtherIDMarksRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OtherIDMarksRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OtherIDMarksRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OtherIDMarksRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OtherRingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnFateReason As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnAdultOtherBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("OtherRing")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property FateReasonColumn As DataColumn
            Get
                Return Me.columnFateReason
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property AdultOtherBird_IdColumn As DataColumn
            Get
                Return Me.columnAdultOtherBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As OtherRingRow
            Get
                Return CType(Me.Rows(index),OtherRingRow)
            End Get
        End Property
        
        Public Event OtherRingRowChanged As OtherRingRowChangeEventHandler
        
        Public Event OtherRingRowChanging As OtherRingRowChangeEventHandler
        
        Public Event OtherRingRowDeleted As OtherRingRowChangeEventHandler
        
        Public Event OtherRingRowDeleting As OtherRingRowChangeEventHandler
        
        Public Overloads Sub AddOtherRingRow(ByVal row As OtherRingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddOtherRingRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal FateReason As String, ByVal Status As String, ByVal parentAdultOtherBirdRowByAdultOtherBird_OtherRing As AdultOtherBirdRow) As OtherRingRow
            Dim rowOtherRingRow As OtherRingRow = CType(Me.NewRow,OtherRingRow)
            rowOtherRingRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, FateReason, Status, parentAdultOtherBirdRowByAdultOtherBird_OtherRing(6)}
            Me.Rows.Add(rowOtherRingRow)
            Return rowOtherRingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As OtherRingDataTable = CType(MyBase.Clone,OtherRingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New OtherRingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnFateReason = Me.Columns("FateReason")
            Me.columnStatus = Me.Columns("Status")
            Me.columnAdultOtherBird_Id = Me.Columns("AdultOtherBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnFateReason = New DataColumn("FateReason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateReason)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnAdultOtherBird_Id = New DataColumn("AdultOtherBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnAdultOtherBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.DefaultValue = "NotSet"
        End Sub
        
        Public Function NewOtherRingRow() As OtherRingRow
            Return CType(Me.NewRow,OtherRingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New OtherRingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OtherRingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OtherRingRowChangedEvent) Is Nothing) Then
                RaiseEvent OtherRingRowChanged(Me, New OtherRingRowChangeEvent(CType(e.Row,OtherRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OtherRingRowChangingEvent) Is Nothing) Then
                RaiseEvent OtherRingRowChanging(Me, New OtherRingRowChangeEvent(CType(e.Row,OtherRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OtherRingRowDeletedEvent) Is Nothing) Then
                RaiseEvent OtherRingRowDeleted(Me, New OtherRingRowChangeEvent(CType(e.Row,OtherRingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OtherRingRowDeletingEvent) Is Nothing) Then
                RaiseEvent OtherRingRowDeleting(Me, New OtherRingRowChangeEvent(CType(e.Row,OtherRingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveOtherRingRow(ByVal row As OtherRingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OtherRingRow
        Inherits DataRow
        
        Private tableOtherRing As OtherRingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableOtherRing = CType(Me.Table,OtherRingDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableOtherRing.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableOtherRing.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableOtherRing.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableOtherRing.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOtherRing.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOtherRing.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property FateReason As String
            Get
                Try 
                    Return CType(Me(Me.tableOtherRing.FateReasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOtherRing.FateReasonColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Return CType(Me(Me.tableOtherRing.StatusColumn),String)
            End Get
            Set
                Me(Me.tableOtherRing.StatusColumn) = value
            End Set
        End Property
        
        Public Property AdultOtherBirdRow As AdultOtherBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AdultOtherBird_OtherRing")),AdultOtherBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AdultOtherBird_OtherRing"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableOtherRing.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableOtherRing.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateReasonNull() As Boolean
            Return Me.IsNull(Me.tableOtherRing.FateReasonColumn)
        End Function
        
        Public Sub SetFateReasonNull()
            Me(Me.tableOtherRing.FateReasonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class OtherRingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As OtherRingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As OtherRingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As OtherRingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
