'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BirdNotificationDataset
    Inherits DataSet
    
    Private tableBirdNotification As BirdNotificationDataTable
    
    Private tableParty As PartyDataTable
    
    Private tableNotifiedBird As NotifiedBirdDataTable
    
    Private tableNotifiedSpecimen As NotifiedSpecimenDataTable
    
    Private tableNotifiedIDMark As NotifiedIDMarkDataTable
    
    Private tableFate As FateDataTable
    
    Private tableNewKeeper As NewKeeperDataTable
    
    Private tableKeeper As KeeperDataTable
    
    Private relationNotifiedBird_NotifiedSpecimen As DataRelation
    
    Private relationNotifiedBird_NotifiedIDMark As DataRelation
    
    Private relationNewKeeper_Keeper As DataRelation
    
    Private relationBirdNotification_Party As DataRelation
    
    Private relationBirdNotification_NotifiedBird As DataRelation
    
    Private relationBirdNotification_Fate As DataRelation
    
    Private relationBirdNotification_NewKeeper As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BirdNotification")) Is Nothing) Then
                Me.Tables.Add(New BirdNotificationDataTable(ds.Tables("BirdNotification")))
            End If
            If (Not (ds.Tables("Party")) Is Nothing) Then
                Me.Tables.Add(New PartyDataTable(ds.Tables("Party")))
            End If
            If (Not (ds.Tables("NotifiedBird")) Is Nothing) Then
                Me.Tables.Add(New NotifiedBirdDataTable(ds.Tables("NotifiedBird")))
            End If
            If (Not (ds.Tables("NotifiedSpecimen")) Is Nothing) Then
                Me.Tables.Add(New NotifiedSpecimenDataTable(ds.Tables("NotifiedSpecimen")))
            End If
            If (Not (ds.Tables("NotifiedIDMark")) Is Nothing) Then
                Me.Tables.Add(New NotifiedIDMarkDataTable(ds.Tables("NotifiedIDMark")))
            End If
            If (Not (ds.Tables("Fate")) Is Nothing) Then
                Me.Tables.Add(New FateDataTable(ds.Tables("Fate")))
            End If
            If (Not (ds.Tables("NewKeeper")) Is Nothing) Then
                Me.Tables.Add(New NewKeeperDataTable(ds.Tables("NewKeeper")))
            End If
            If (Not (ds.Tables("Keeper")) Is Nothing) Then
                Me.Tables.Add(New KeeperDataTable(ds.Tables("Keeper")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BirdNotification As BirdNotificationDataTable
        Get
            Return Me.tableBirdNotification
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Party As PartyDataTable
        Get
            Return Me.tableParty
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NotifiedBird As NotifiedBirdDataTable
        Get
            Return Me.tableNotifiedBird
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NotifiedSpecimen As NotifiedSpecimenDataTable
        Get
            Return Me.tableNotifiedSpecimen
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NotifiedIDMark As NotifiedIDMarkDataTable
        Get
            Return Me.tableNotifiedIDMark
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Fate As FateDataTable
        Get
            Return Me.tableFate
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property NewKeeper As NewKeeperDataTable
        Get
            Return Me.tableNewKeeper
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Keeper As KeeperDataTable
        Get
            Return Me.tableKeeper
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BirdNotificationDataset = CType(MyBase.Clone,BirdNotificationDataset)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BirdNotification")) Is Nothing) Then
            Me.Tables.Add(New BirdNotificationDataTable(ds.Tables("BirdNotification")))
        End If
        If (Not (ds.Tables("Party")) Is Nothing) Then
            Me.Tables.Add(New PartyDataTable(ds.Tables("Party")))
        End If
        If (Not (ds.Tables("NotifiedBird")) Is Nothing) Then
            Me.Tables.Add(New NotifiedBirdDataTable(ds.Tables("NotifiedBird")))
        End If
        If (Not (ds.Tables("NotifiedSpecimen")) Is Nothing) Then
            Me.Tables.Add(New NotifiedSpecimenDataTable(ds.Tables("NotifiedSpecimen")))
        End If
        If (Not (ds.Tables("NotifiedIDMark")) Is Nothing) Then
            Me.Tables.Add(New NotifiedIDMarkDataTable(ds.Tables("NotifiedIDMark")))
        End If
        If (Not (ds.Tables("Fate")) Is Nothing) Then
            Me.Tables.Add(New FateDataTable(ds.Tables("Fate")))
        End If
        If (Not (ds.Tables("NewKeeper")) Is Nothing) Then
            Me.Tables.Add(New NewKeeperDataTable(ds.Tables("NewKeeper")))
        End If
        If (Not (ds.Tables("Keeper")) Is Nothing) Then
            Me.Tables.Add(New KeeperDataTable(ds.Tables("Keeper")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBirdNotification = CType(Me.Tables("BirdNotification"),BirdNotificationDataTable)
        If (Not (Me.tableBirdNotification) Is Nothing) Then
            Me.tableBirdNotification.InitVars
        End If
        Me.tableParty = CType(Me.Tables("Party"),PartyDataTable)
        If (Not (Me.tableParty) Is Nothing) Then
            Me.tableParty.InitVars
        End If
        Me.tableNotifiedBird = CType(Me.Tables("NotifiedBird"),NotifiedBirdDataTable)
        If (Not (Me.tableNotifiedBird) Is Nothing) Then
            Me.tableNotifiedBird.InitVars
        End If
        Me.tableNotifiedSpecimen = CType(Me.Tables("NotifiedSpecimen"),NotifiedSpecimenDataTable)
        If (Not (Me.tableNotifiedSpecimen) Is Nothing) Then
            Me.tableNotifiedSpecimen.InitVars
        End If
        Me.tableNotifiedIDMark = CType(Me.Tables("NotifiedIDMark"),NotifiedIDMarkDataTable)
        If (Not (Me.tableNotifiedIDMark) Is Nothing) Then
            Me.tableNotifiedIDMark.InitVars
        End If
        Me.tableFate = CType(Me.Tables("Fate"),FateDataTable)
        If (Not (Me.tableFate) Is Nothing) Then
            Me.tableFate.InitVars
        End If
        Me.tableNewKeeper = CType(Me.Tables("NewKeeper"),NewKeeperDataTable)
        If (Not (Me.tableNewKeeper) Is Nothing) Then
            Me.tableNewKeeper.InitVars
        End If
        Me.tableKeeper = CType(Me.Tables("Keeper"),KeeperDataTable)
        If (Not (Me.tableKeeper) Is Nothing) Then
            Me.tableKeeper.InitVars
        End If
        Me.relationNotifiedBird_NotifiedSpecimen = Me.Relations("NotifiedBird_NotifiedSpecimen")
        Me.relationNotifiedBird_NotifiedIDMark = Me.Relations("NotifiedBird_NotifiedIDMark")
        Me.relationNewKeeper_Keeper = Me.Relations("NewKeeper_Keeper")
        Me.relationBirdNotification_Party = Me.Relations("BirdNotification_Party")
        Me.relationBirdNotification_NotifiedBird = Me.Relations("BirdNotification_NotifiedBird")
        Me.relationBirdNotification_Fate = Me.Relations("BirdNotification_Fate")
        Me.relationBirdNotification_NewKeeper = Me.Relations("BirdNotification_NewKeeper")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BirdNotificationDataset"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-GB")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBirdNotification = New BirdNotificationDataTable
        Me.Tables.Add(Me.tableBirdNotification)
        Me.tableParty = New PartyDataTable
        Me.Tables.Add(Me.tableParty)
        Me.tableNotifiedBird = New NotifiedBirdDataTable
        Me.Tables.Add(Me.tableNotifiedBird)
        Me.tableNotifiedSpecimen = New NotifiedSpecimenDataTable
        Me.Tables.Add(Me.tableNotifiedSpecimen)
        Me.tableNotifiedIDMark = New NotifiedIDMarkDataTable
        Me.Tables.Add(Me.tableNotifiedIDMark)
        Me.tableFate = New FateDataTable
        Me.Tables.Add(Me.tableFate)
        Me.tableNewKeeper = New NewKeeperDataTable
        Me.Tables.Add(Me.tableNewKeeper)
        Me.tableKeeper = New KeeperDataTable
        Me.Tables.Add(Me.tableKeeper)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BirdNotification_Party", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableParty.BirdNotification_IdColumn})
        Me.tableParty.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BirdNotification_NotifiedBird", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableNotifiedBird.BirdNotification_IdColumn})
        Me.tableNotifiedBird.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NotifiedBird_NotifiedSpecimen", New DataColumn() {Me.tableNotifiedBird.NotifiedBird_IdColumn}, New DataColumn() {Me.tableNotifiedSpecimen.NotifiedBird_IdColumn})
        Me.tableNotifiedSpecimen.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NotifiedBird_NotifiedIDMark", New DataColumn() {Me.tableNotifiedBird.NotifiedBird_IdColumn}, New DataColumn() {Me.tableNotifiedIDMark.NotifiedBird_IdColumn})
        Me.tableNotifiedIDMark.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BirdNotification_Fate", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableFate.BirdNotification_IdColumn})
        Me.tableFate.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BirdNotification_NewKeeper", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableNewKeeper.BirdNotification_IdColumn})
        Me.tableNewKeeper.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("NewKeeper_Keeper", New DataColumn() {Me.tableNewKeeper.NewKeeper_IdColumn}, New DataColumn() {Me.tableKeeper.NewKeeper_IdColumn})
        Me.tableKeeper.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationNotifiedBird_NotifiedSpecimen = New DataRelation("NotifiedBird_NotifiedSpecimen", New DataColumn() {Me.tableNotifiedBird.NotifiedBird_IdColumn}, New DataColumn() {Me.tableNotifiedSpecimen.NotifiedBird_IdColumn}, false)
        Me.relationNotifiedBird_NotifiedSpecimen.Nested = true
        Me.Relations.Add(Me.relationNotifiedBird_NotifiedSpecimen)
        Me.relationNotifiedBird_NotifiedIDMark = New DataRelation("NotifiedBird_NotifiedIDMark", New DataColumn() {Me.tableNotifiedBird.NotifiedBird_IdColumn}, New DataColumn() {Me.tableNotifiedIDMark.NotifiedBird_IdColumn}, false)
        Me.relationNotifiedBird_NotifiedIDMark.Nested = true
        Me.Relations.Add(Me.relationNotifiedBird_NotifiedIDMark)
        Me.relationNewKeeper_Keeper = New DataRelation("NewKeeper_Keeper", New DataColumn() {Me.tableNewKeeper.NewKeeper_IdColumn}, New DataColumn() {Me.tableKeeper.NewKeeper_IdColumn}, false)
        Me.relationNewKeeper_Keeper.Nested = true
        Me.Relations.Add(Me.relationNewKeeper_Keeper)
        Me.relationBirdNotification_Party = New DataRelation("BirdNotification_Party", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableParty.BirdNotification_IdColumn}, false)
        Me.relationBirdNotification_Party.Nested = true
        Me.Relations.Add(Me.relationBirdNotification_Party)
        Me.relationBirdNotification_NotifiedBird = New DataRelation("BirdNotification_NotifiedBird", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableNotifiedBird.BirdNotification_IdColumn}, false)
        Me.relationBirdNotification_NotifiedBird.Nested = true
        Me.Relations.Add(Me.relationBirdNotification_NotifiedBird)
        Me.relationBirdNotification_Fate = New DataRelation("BirdNotification_Fate", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableFate.BirdNotification_IdColumn}, false)
        Me.relationBirdNotification_Fate.Nested = true
        Me.Relations.Add(Me.relationBirdNotification_Fate)
        Me.relationBirdNotification_NewKeeper = New DataRelation("BirdNotification_NewKeeper", New DataColumn() {Me.tableBirdNotification.BirdNotification_IdColumn}, New DataColumn() {Me.tableNewKeeper.BirdNotification_IdColumn}, false)
        Me.relationBirdNotification_NewKeeper.Nested = true
        Me.Relations.Add(Me.relationBirdNotification_NewKeeper)
    End Sub
    
    Private Function ShouldSerializeBirdNotification() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeParty() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNotifiedBird() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNotifiedSpecimen() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNotifiedIDMark() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeFate() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeNewKeeper() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeKeeper() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BirdNotificationRowChangeEventHandler(ByVal sender As Object, ByVal e As BirdNotificationRowChangeEvent)
    
    Public Delegate Sub PartyRowChangeEventHandler(ByVal sender As Object, ByVal e As PartyRowChangeEvent)
    
    Public Delegate Sub NotifiedBirdRowChangeEventHandler(ByVal sender As Object, ByVal e As NotifiedBirdRowChangeEvent)
    
    Public Delegate Sub NotifiedSpecimenRowChangeEventHandler(ByVal sender As Object, ByVal e As NotifiedSpecimenRowChangeEvent)
    
    Public Delegate Sub NotifiedIDMarkRowChangeEventHandler(ByVal sender As Object, ByVal e As NotifiedIDMarkRowChangeEvent)
    
    Public Delegate Sub FateRowChangeEventHandler(ByVal sender As Object, ByVal e As FateRowChangeEvent)
    
    Public Delegate Sub NewKeeperRowChangeEventHandler(ByVal sender As Object, ByVal e As NewKeeperRowChangeEvent)
    
    Public Delegate Sub KeeperRowChangeEventHandler(ByVal sender As Object, ByVal e As KeeperRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BirdNotificationDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationReference As DataColumn
        
        Private columnApplicationStatus As DataColumn
        
        Private columnReleaseDetailsToCaller As DataColumn
        
        Private columnAdditionalInformation As DataColumn
        
        Private columnBirdNotification_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("BirdNotification")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationReferenceColumn As DataColumn
            Get
                Return Me.columnApplicationReference
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationStatusColumn As DataColumn
            Get
                Return Me.columnApplicationStatus
            End Get
        End Property
        
        Friend ReadOnly Property ReleaseDetailsToCallerColumn As DataColumn
            Get
                Return Me.columnReleaseDetailsToCaller
            End Get
        End Property
        
        Friend ReadOnly Property AdditionalInformationColumn As DataColumn
            Get
                Return Me.columnAdditionalInformation
            End Get
        End Property
        
        Friend ReadOnly Property BirdNotification_IdColumn As DataColumn
            Get
                Return Me.columnBirdNotification_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BirdNotificationRow
            Get
                Return CType(Me.Rows(index),BirdNotificationRow)
            End Get
        End Property
        
        Public Event BirdNotificationRowChanged As BirdNotificationRowChangeEventHandler
        
        Public Event BirdNotificationRowChanging As BirdNotificationRowChangeEventHandler
        
        Public Event BirdNotificationRowDeleted As BirdNotificationRowChangeEventHandler
        
        Public Event BirdNotificationRowDeleting As BirdNotificationRowChangeEventHandler
        
        Public Overloads Sub AddBirdNotificationRow(ByVal row As BirdNotificationRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBirdNotificationRow(ByVal ApplicationReference As Integer, ByVal ApplicationStatus As Integer, ByVal ReleaseDetailsToCaller As Boolean, ByVal AdditionalInformation As String) As BirdNotificationRow
            Dim rowBirdNotificationRow As BirdNotificationRow = CType(Me.NewRow,BirdNotificationRow)
            rowBirdNotificationRow.ItemArray = New Object() {ApplicationReference, ApplicationStatus, ReleaseDetailsToCaller, AdditionalInformation, Nothing}
            Me.Rows.Add(rowBirdNotificationRow)
            Return rowBirdNotificationRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BirdNotificationDataTable = CType(MyBase.Clone,BirdNotificationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BirdNotificationDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationReference = Me.Columns("ApplicationReference")
            Me.columnApplicationStatus = Me.Columns("ApplicationStatus")
            Me.columnReleaseDetailsToCaller = Me.Columns("ReleaseDetailsToCaller")
            Me.columnAdditionalInformation = Me.Columns("AdditionalInformation")
            Me.columnBirdNotification_Id = Me.Columns("BirdNotification_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationReference = New DataColumn("ApplicationReference", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnApplicationReference)
            Me.columnApplicationStatus = New DataColumn("ApplicationStatus", GetType(System.Int32), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnApplicationStatus)
            Me.columnReleaseDetailsToCaller = New DataColumn("ReleaseDetailsToCaller", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReleaseDetailsToCaller)
            Me.columnAdditionalInformation = New DataColumn("AdditionalInformation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdditionalInformation)
            Me.columnBirdNotification_Id = New DataColumn("BirdNotification_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBirdNotification_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnBirdNotification_Id}, true))
            Me.columnApplicationReference.AllowDBNull = false
            Me.columnApplicationReference.Namespace = ""
            Me.columnApplicationStatus.AllowDBNull = false
            Me.columnApplicationStatus.Namespace = ""
            Me.columnReleaseDetailsToCaller.AllowDBNull = false
            Me.columnBirdNotification_Id.AutoIncrement = true
            Me.columnBirdNotification_Id.AllowDBNull = false
            Me.columnBirdNotification_Id.Unique = true
        End Sub
        
        Public Function NewBirdNotificationRow() As BirdNotificationRow
            Return CType(Me.NewRow,BirdNotificationRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BirdNotificationRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BirdNotificationRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BirdNotificationRowChangedEvent) Is Nothing) Then
                RaiseEvent BirdNotificationRowChanged(Me, New BirdNotificationRowChangeEvent(CType(e.Row,BirdNotificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BirdNotificationRowChangingEvent) Is Nothing) Then
                RaiseEvent BirdNotificationRowChanging(Me, New BirdNotificationRowChangeEvent(CType(e.Row,BirdNotificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BirdNotificationRowDeletedEvent) Is Nothing) Then
                RaiseEvent BirdNotificationRowDeleted(Me, New BirdNotificationRowChangeEvent(CType(e.Row,BirdNotificationRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BirdNotificationRowDeletingEvent) Is Nothing) Then
                RaiseEvent BirdNotificationRowDeleting(Me, New BirdNotificationRowChangeEvent(CType(e.Row,BirdNotificationRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBirdNotificationRow(ByVal row As BirdNotificationRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BirdNotificationRow
        Inherits DataRow
        
        Private tableBirdNotification As BirdNotificationDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBirdNotification = CType(Me.Table,BirdNotificationDataTable)
        End Sub
        
        Public Property ApplicationReference As Integer
            Get
                Return CType(Me(Me.tableBirdNotification.ApplicationReferenceColumn),Integer)
            End Get
            Set
                Me(Me.tableBirdNotification.ApplicationReferenceColumn) = value
            End Set
        End Property
        
        Public Property ApplicationStatus As Integer
            Get
                Return CType(Me(Me.tableBirdNotification.ApplicationStatusColumn),Integer)
            End Get
            Set
                Me(Me.tableBirdNotification.ApplicationStatusColumn) = value
            End Set
        End Property
        
        Public Property ReleaseDetailsToCaller As Boolean
            Get
                Return CType(Me(Me.tableBirdNotification.ReleaseDetailsToCallerColumn),Boolean)
            End Get
            Set
                Me(Me.tableBirdNotification.ReleaseDetailsToCallerColumn) = value
            End Set
        End Property
        
        Public Property AdditionalInformation As String
            Get
                Try 
                    Return CType(Me(Me.tableBirdNotification.AdditionalInformationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBirdNotification.AdditionalInformationColumn) = value
            End Set
        End Property
        
        Public Function IsAdditionalInformationNull() As Boolean
            Return Me.IsNull(Me.tableBirdNotification.AdditionalInformationColumn)
        End Function
        
        Public Sub SetAdditionalInformationNull()
            Me(Me.tableBirdNotification.AdditionalInformationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetPartyRows() As PartyRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BirdNotification_Party")),PartyRow())
        End Function
        
        Public Function GetNotifiedBirdRows() As NotifiedBirdRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BirdNotification_NotifiedBird")),NotifiedBirdRow())
        End Function
        
        Public Function GetFateRows() As FateRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BirdNotification_Fate")),FateRow())
        End Function
        
        Public Function GetNewKeeperRows() As NewKeeperRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BirdNotification_NewKeeper")),NewKeeperRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BirdNotificationRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BirdNotificationRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BirdNotificationRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BirdNotificationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PartyDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPartyID As DataColumn
        
        Private columnTransferDate As DataColumn
        
        Private columnTransferMethod As DataColumn
        
        Private columnBirdNotification_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Party")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PartyIDColumn As DataColumn
            Get
                Return Me.columnPartyID
            End Get
        End Property
        
        Friend ReadOnly Property TransferDateColumn As DataColumn
            Get
                Return Me.columnTransferDate
            End Get
        End Property
        
        Friend ReadOnly Property TransferMethodColumn As DataColumn
            Get
                Return Me.columnTransferMethod
            End Get
        End Property
        
        Friend ReadOnly Property BirdNotification_IdColumn As DataColumn
            Get
                Return Me.columnBirdNotification_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PartyRow
            Get
                Return CType(Me.Rows(index),PartyRow)
            End Get
        End Property
        
        Public Event PartyRowChanged As PartyRowChangeEventHandler
        
        Public Event PartyRowChanging As PartyRowChangeEventHandler
        
        Public Event PartyRowDeleted As PartyRowChangeEventHandler
        
        Public Event PartyRowDeleting As PartyRowChangeEventHandler
        
        Public Overloads Sub AddPartyRow(ByVal row As PartyRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPartyRow(ByVal PartyID As Integer, ByVal TransferDate As Date, ByVal TransferMethod As String, ByVal parentBirdNotificationRowByBirdNotification_Party As BirdNotificationRow) As PartyRow
            Dim rowPartyRow As PartyRow = CType(Me.NewRow,PartyRow)
            rowPartyRow.ItemArray = New Object() {PartyID, TransferDate, TransferMethod, parentBirdNotificationRowByBirdNotification_Party(4)}
            Me.Rows.Add(rowPartyRow)
            Return rowPartyRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PartyDataTable = CType(MyBase.Clone,PartyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PartyDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPartyID = Me.Columns("PartyID")
            Me.columnTransferDate = Me.Columns("TransferDate")
            Me.columnTransferMethod = Me.Columns("TransferMethod")
            Me.columnBirdNotification_Id = Me.Columns("BirdNotification_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnPartyID = New DataColumn("PartyID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyID)
            Me.columnTransferDate = New DataColumn("TransferDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransferDate)
            Me.columnTransferMethod = New DataColumn("TransferMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransferMethod)
            Me.columnBirdNotification_Id = New DataColumn("BirdNotification_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBirdNotification_Id)
            Me.columnPartyID.AllowDBNull = false
            Me.columnTransferDate.AllowDBNull = false
        End Sub
        
        Public Function NewPartyRow() As PartyRow
            Return CType(Me.NewRow,PartyRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PartyRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PartyRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PartyRowChangedEvent) Is Nothing) Then
                RaiseEvent PartyRowChanged(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PartyRowChangingEvent) Is Nothing) Then
                RaiseEvent PartyRowChanging(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PartyRowDeletedEvent) Is Nothing) Then
                RaiseEvent PartyRowDeleted(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PartyRowDeletingEvent) Is Nothing) Then
                RaiseEvent PartyRowDeleting(Me, New PartyRowChangeEvent(CType(e.Row,PartyRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePartyRow(ByVal row As PartyRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PartyRow
        Inherits DataRow
        
        Private tableParty As PartyDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParty = CType(Me.Table,PartyDataTable)
        End Sub
        
        Public Property PartyID As Integer
            Get
                Return CType(Me(Me.tableParty.PartyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableParty.PartyIDColumn) = value
            End Set
        End Property
        
        Public Property TransferDate As Date
            Get
                Return CType(Me(Me.tableParty.TransferDateColumn),Date)
            End Get
            Set
                Me(Me.tableParty.TransferDateColumn) = value
            End Set
        End Property
        
        Public Property TransferMethod As String
            Get
                Try 
                    Return CType(Me(Me.tableParty.TransferMethodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty.TransferMethodColumn) = value
            End Set
        End Property
        
        Public Property BirdNotificationRow As BirdNotificationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BirdNotification_Party")),BirdNotificationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BirdNotification_Party"))
            End Set
        End Property
        
        Public Function IsTransferMethodNull() As Boolean
            Return Me.IsNull(Me.tableParty.TransferMethodColumn)
        End Function
        
        Public Sub SetTransferMethodNull()
            Me(Me.tableParty.TransferMethodColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PartyRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PartyRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PartyRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PartyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedBirdDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNotifiedBird_Id As DataColumn
        
        Private columnBirdNotification_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("NotifiedBird")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NotifiedBird_IdColumn As DataColumn
            Get
                Return Me.columnNotifiedBird_Id
            End Get
        End Property
        
        Friend ReadOnly Property BirdNotification_IdColumn As DataColumn
            Get
                Return Me.columnBirdNotification_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NotifiedBirdRow
            Get
                Return CType(Me.Rows(index),NotifiedBirdRow)
            End Get
        End Property
        
        Public Event NotifiedBirdRowChanged As NotifiedBirdRowChangeEventHandler
        
        Public Event NotifiedBirdRowChanging As NotifiedBirdRowChangeEventHandler
        
        Public Event NotifiedBirdRowDeleted As NotifiedBirdRowChangeEventHandler
        
        Public Event NotifiedBirdRowDeleting As NotifiedBirdRowChangeEventHandler
        
        Public Overloads Sub AddNotifiedBirdRow(ByVal row As NotifiedBirdRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNotifiedBirdRow(ByVal parentBirdNotificationRowByBirdNotification_NotifiedBird As BirdNotificationRow) As NotifiedBirdRow
            Dim rowNotifiedBirdRow As NotifiedBirdRow = CType(Me.NewRow,NotifiedBirdRow)
            rowNotifiedBirdRow.ItemArray = New Object() {Nothing, parentBirdNotificationRowByBirdNotification_NotifiedBird(4)}
            Me.Rows.Add(rowNotifiedBirdRow)
            Return rowNotifiedBirdRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NotifiedBirdDataTable = CType(MyBase.Clone,NotifiedBirdDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NotifiedBirdDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNotifiedBird_Id = Me.Columns("NotifiedBird_Id")
            Me.columnBirdNotification_Id = Me.Columns("BirdNotification_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnNotifiedBird_Id = New DataColumn("NotifiedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnNotifiedBird_Id)
            Me.columnBirdNotification_Id = New DataColumn("BirdNotification_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBirdNotification_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNotifiedBird_Id}, true))
            Me.columnNotifiedBird_Id.AutoIncrement = true
            Me.columnNotifiedBird_Id.AllowDBNull = false
            Me.columnNotifiedBird_Id.Unique = true
        End Sub
        
        Public Function NewNotifiedBirdRow() As NotifiedBirdRow
            Return CType(Me.NewRow,NotifiedBirdRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NotifiedBirdRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NotifiedBirdRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NotifiedBirdRowChangedEvent) Is Nothing) Then
                RaiseEvent NotifiedBirdRowChanged(Me, New NotifiedBirdRowChangeEvent(CType(e.Row,NotifiedBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NotifiedBirdRowChangingEvent) Is Nothing) Then
                RaiseEvent NotifiedBirdRowChanging(Me, New NotifiedBirdRowChangeEvent(CType(e.Row,NotifiedBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NotifiedBirdRowDeletedEvent) Is Nothing) Then
                RaiseEvent NotifiedBirdRowDeleted(Me, New NotifiedBirdRowChangeEvent(CType(e.Row,NotifiedBirdRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NotifiedBirdRowDeletingEvent) Is Nothing) Then
                RaiseEvent NotifiedBirdRowDeleting(Me, New NotifiedBirdRowChangeEvent(CType(e.Row,NotifiedBirdRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNotifiedBirdRow(ByVal row As NotifiedBirdRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedBirdRow
        Inherits DataRow
        
        Private tableNotifiedBird As NotifiedBirdDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNotifiedBird = CType(Me.Table,NotifiedBirdDataTable)
        End Sub
        
        Public Property BirdNotificationRow As BirdNotificationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BirdNotification_NotifiedBird")),BirdNotificationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BirdNotification_NotifiedBird"))
            End Set
        End Property
        
        Public Function GetNotifiedSpecimenRows() As NotifiedSpecimenRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NotifiedBird_NotifiedSpecimen")),NotifiedSpecimenRow())
        End Function
        
        Public Function GetNotifiedIDMarkRows() As NotifiedIDMarkRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NotifiedBird_NotifiedIDMark")),NotifiedIDMarkRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedBirdRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NotifiedBirdRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NotifiedBirdRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NotifiedBirdRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedSpecimenDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCustomerEnteredArticle10Reference As DataColumn
        
        Private columnSpecimenID As DataColumn
        
        Private columnIsAmended As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Private columnIsHatchDateExact As DataColumn
        
        Private columnAgeStatusCode As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnRegistrationDocumentReference As DataColumn
        
        Private columnArticle10Reference As DataColumn
        
        Private columnNotifiedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("NotifiedSpecimen")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CustomerEnteredArticle10ReferenceColumn As DataColumn
            Get
                Return Me.columnCustomerEnteredArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property SpecimenIDColumn As DataColumn
            Get
                Return Me.columnSpecimenID
            End Get
        End Property
        
        Friend ReadOnly Property IsAmendedColumn As DataColumn
            Get
                Return Me.columnIsAmended
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Friend ReadOnly Property IsHatchDateExactColumn As DataColumn
            Get
                Return Me.columnIsHatchDateExact
            End Get
        End Property
        
        Friend ReadOnly Property AgeStatusCodeColumn As DataColumn
            Get
                Return Me.columnAgeStatusCode
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property RegistrationDocumentReferenceColumn As DataColumn
            Get
                Return Me.columnRegistrationDocumentReference
            End Get
        End Property
        
        Friend ReadOnly Property Article10ReferenceColumn As DataColumn
            Get
                Return Me.columnArticle10Reference
            End Get
        End Property
        
        Friend ReadOnly Property NotifiedBird_IdColumn As DataColumn
            Get
                Return Me.columnNotifiedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NotifiedSpecimenRow
            Get
                Return CType(Me.Rows(index),NotifiedSpecimenRow)
            End Get
        End Property
        
        Public Event NotifiedSpecimenRowChanged As NotifiedSpecimenRowChangeEventHandler
        
        Public Event NotifiedSpecimenRowChanging As NotifiedSpecimenRowChangeEventHandler
        
        Public Event NotifiedSpecimenRowDeleted As NotifiedSpecimenRowChangeEventHandler
        
        Public Event NotifiedSpecimenRowDeleting As NotifiedSpecimenRowChangeEventHandler
        
        Public Overloads Sub AddNotifiedSpecimenRow(ByVal row As NotifiedSpecimenRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNotifiedSpecimenRow(ByVal CustomerEnteredArticle10Reference As String, ByVal SpecimenID As Integer, ByVal IsAmended As Boolean, ByVal CommonName As String, ByVal ScientificName As String, ByVal HatchDate As Date, ByVal IsHatchDateExact As Boolean, ByVal AgeStatusCode As String, ByVal Gender As Char, ByVal RegistrationDocumentReference As String, ByVal Article10Reference As String, ByVal parentNotifiedBirdRowByNotifiedBird_NotifiedSpecimen As NotifiedBirdRow) As NotifiedSpecimenRow
            Dim rowNotifiedSpecimenRow As NotifiedSpecimenRow = CType(Me.NewRow,NotifiedSpecimenRow)
            rowNotifiedSpecimenRow.ItemArray = New Object() {CustomerEnteredArticle10Reference, SpecimenID, IsAmended, CommonName, ScientificName, HatchDate, IsHatchDateExact, AgeStatusCode, Gender, RegistrationDocumentReference, Article10Reference, parentNotifiedBirdRowByNotifiedBird_NotifiedSpecimen(0)}
            Me.Rows.Add(rowNotifiedSpecimenRow)
            Return rowNotifiedSpecimenRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NotifiedSpecimenDataTable = CType(MyBase.Clone,NotifiedSpecimenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NotifiedSpecimenDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCustomerEnteredArticle10Reference = Me.Columns("CustomerEnteredArticle10Reference")
            Me.columnSpecimenID = Me.Columns("SpecimenID")
            Me.columnIsAmended = Me.Columns("IsAmended")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnHatchDate = Me.Columns("HatchDate")
            Me.columnIsHatchDateExact = Me.Columns("IsHatchDateExact")
            Me.columnAgeStatusCode = Me.Columns("AgeStatusCode")
            Me.columnGender = Me.Columns("Gender")
            Me.columnRegistrationDocumentReference = Me.Columns("RegistrationDocumentReference")
            Me.columnArticle10Reference = Me.Columns("Article10Reference")
            Me.columnNotifiedBird_Id = Me.Columns("NotifiedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnCustomerEnteredArticle10Reference = New DataColumn("CustomerEnteredArticle10Reference", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCustomerEnteredArticle10Reference)
            Me.columnSpecimenID = New DataColumn("SpecimenID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimenID)
            Me.columnIsAmended = New DataColumn("IsAmended", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAmended)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
            Me.columnIsHatchDateExact = New DataColumn("IsHatchDateExact", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsHatchDateExact)
            Me.columnAgeStatusCode = New DataColumn("AgeStatusCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgeStatusCode)
            Me.columnGender = New DataColumn("Gender", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnRegistrationDocumentReference = New DataColumn("RegistrationDocumentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRegistrationDocumentReference)
            Me.columnArticle10Reference = New DataColumn("Article10Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10Reference)
            Me.columnNotifiedBird_Id = New DataColumn("NotifiedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnNotifiedBird_Id)
            Me.columnCustomerEnteredArticle10Reference.Namespace = ""
            Me.columnIsAmended.AllowDBNull = false
            Me.columnCommonName.AllowDBNull = false
            Me.columnScientificName.AllowDBNull = false
            Me.columnGender.AllowDBNull = false
        End Sub
        
        Public Function NewNotifiedSpecimenRow() As NotifiedSpecimenRow
            Return CType(Me.NewRow,NotifiedSpecimenRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NotifiedSpecimenRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NotifiedSpecimenRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NotifiedSpecimenRowChangedEvent) Is Nothing) Then
                RaiseEvent NotifiedSpecimenRowChanged(Me, New NotifiedSpecimenRowChangeEvent(CType(e.Row,NotifiedSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NotifiedSpecimenRowChangingEvent) Is Nothing) Then
                RaiseEvent NotifiedSpecimenRowChanging(Me, New NotifiedSpecimenRowChangeEvent(CType(e.Row,NotifiedSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NotifiedSpecimenRowDeletedEvent) Is Nothing) Then
                RaiseEvent NotifiedSpecimenRowDeleted(Me, New NotifiedSpecimenRowChangeEvent(CType(e.Row,NotifiedSpecimenRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NotifiedSpecimenRowDeletingEvent) Is Nothing) Then
                RaiseEvent NotifiedSpecimenRowDeleting(Me, New NotifiedSpecimenRowChangeEvent(CType(e.Row,NotifiedSpecimenRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNotifiedSpecimenRow(ByVal row As NotifiedSpecimenRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedSpecimenRow
        Inherits DataRow
        
        Private tableNotifiedSpecimen As NotifiedSpecimenDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNotifiedSpecimen = CType(Me.Table,NotifiedSpecimenDataTable)
        End Sub
        
        Public Property CustomerEnteredArticle10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.CustomerEnteredArticle10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.CustomerEnteredArticle10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property SpecimenID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.SpecimenIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.SpecimenIDColumn) = value
            End Set
        End Property
        
        Public Property IsAmended As Boolean
            Get
                Return CType(Me(Me.tableNotifiedSpecimen.IsAmendedColumn),Boolean)
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.IsAmendedColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Return CType(Me(Me.tableNotifiedSpecimen.CommonNameColumn),String)
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Return CType(Me(Me.tableNotifiedSpecimen.ScientificNameColumn),String)
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.HatchDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property IsHatchDateExact As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.IsHatchDateExactColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.IsHatchDateExactColumn) = value
            End Set
        End Property
        
        Public Property AgeStatusCode As String
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.AgeStatusCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.AgeStatusCodeColumn) = value
            End Set
        End Property
        
        Public Property Gender As Char
            Get
                Return CType(Me(Me.tableNotifiedSpecimen.GenderColumn),Char)
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.GenderColumn) = value
            End Set
        End Property
        
        Public Property RegistrationDocumentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.RegistrationDocumentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.RegistrationDocumentReferenceColumn) = value
            End Set
        End Property
        
        Public Property Article10Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedSpecimen.Article10ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedSpecimen.Article10ReferenceColumn) = value
            End Set
        End Property
        
        Public Property NotifiedBirdRow As NotifiedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NotifiedBird_NotifiedSpecimen")),NotifiedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NotifiedBird_NotifiedSpecimen"))
            End Set
        End Property
        
        Public Function IsCustomerEnteredArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.CustomerEnteredArticle10ReferenceColumn)
        End Function
        
        Public Sub SetCustomerEnteredArticle10ReferenceNull()
            Me(Me.tableNotifiedSpecimen.CustomerEnteredArticle10ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimenIDNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.SpecimenIDColumn)
        End Function
        
        Public Sub SetSpecimenIDNull()
            Me(Me.tableNotifiedSpecimen.SpecimenIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableNotifiedSpecimen.HatchDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIsHatchDateExactNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.IsHatchDateExactColumn)
        End Function
        
        Public Sub SetIsHatchDateExactNull()
            Me(Me.tableNotifiedSpecimen.IsHatchDateExactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgeStatusCodeNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.AgeStatusCodeColumn)
        End Function
        
        Public Sub SetAgeStatusCodeNull()
            Me(Me.tableNotifiedSpecimen.AgeStatusCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRegistrationDocumentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.RegistrationDocumentReferenceColumn)
        End Function
        
        Public Sub SetRegistrationDocumentReferenceNull()
            Me(Me.tableNotifiedSpecimen.RegistrationDocumentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedSpecimen.Article10ReferenceColumn)
        End Function
        
        Public Sub SetArticle10ReferenceNull()
            Me(Me.tableNotifiedSpecimen.Article10ReferenceColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedSpecimenRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NotifiedSpecimenRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NotifiedSpecimenRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NotifiedSpecimenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedIDMarkDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIDMarkNumber As DataColumn
        
        Private columnIDMarkType As DataColumn
        
        Private columnIDMarkFate As DataColumn
        
        Private columnNotifiedBird_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("NotifiedIDMark")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkNumberColumn As DataColumn
            Get
                Return Me.columnIDMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkTypeColumn As DataColumn
            Get
                Return Me.columnIDMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IDMarkFateColumn As DataColumn
            Get
                Return Me.columnIDMarkFate
            End Get
        End Property
        
        Friend ReadOnly Property NotifiedBird_IdColumn As DataColumn
            Get
                Return Me.columnNotifiedBird_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NotifiedIDMarkRow
            Get
                Return CType(Me.Rows(index),NotifiedIDMarkRow)
            End Get
        End Property
        
        Public Event NotifiedIDMarkRowChanged As NotifiedIDMarkRowChangeEventHandler
        
        Public Event NotifiedIDMarkRowChanging As NotifiedIDMarkRowChangeEventHandler
        
        Public Event NotifiedIDMarkRowDeleted As NotifiedIDMarkRowChangeEventHandler
        
        Public Event NotifiedIDMarkRowDeleting As NotifiedIDMarkRowChangeEventHandler
        
        Public Overloads Sub AddNotifiedIDMarkRow(ByVal row As NotifiedIDMarkRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNotifiedIDMarkRow(ByVal IDMarkNumber As String, ByVal IDMarkType As Integer, ByVal IDMarkFate As Integer, ByVal parentNotifiedBirdRowByNotifiedBird_NotifiedIDMark As NotifiedBirdRow) As NotifiedIDMarkRow
            Dim rowNotifiedIDMarkRow As NotifiedIDMarkRow = CType(Me.NewRow,NotifiedIDMarkRow)
            rowNotifiedIDMarkRow.ItemArray = New Object() {IDMarkNumber, IDMarkType, IDMarkFate, parentNotifiedBirdRowByNotifiedBird_NotifiedIDMark(0)}
            Me.Rows.Add(rowNotifiedIDMarkRow)
            Return rowNotifiedIDMarkRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NotifiedIDMarkDataTable = CType(MyBase.Clone,NotifiedIDMarkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NotifiedIDMarkDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIDMarkNumber = Me.Columns("IDMarkNumber")
            Me.columnIDMarkType = Me.Columns("IDMarkType")
            Me.columnIDMarkFate = Me.Columns("IDMarkFate")
            Me.columnNotifiedBird_Id = Me.Columns("NotifiedBird_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnIDMarkNumber = New DataColumn("IDMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkNumber)
            Me.columnIDMarkType = New DataColumn("IDMarkType", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkType)
            Me.columnIDMarkFate = New DataColumn("IDMarkFate", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIDMarkFate)
            Me.columnNotifiedBird_Id = New DataColumn("NotifiedBird_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnNotifiedBird_Id)
            Me.columnIDMarkNumber.AllowDBNull = false
            Me.columnIDMarkType.AllowDBNull = false
        End Sub
        
        Public Function NewNotifiedIDMarkRow() As NotifiedIDMarkRow
            Return CType(Me.NewRow,NotifiedIDMarkRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NotifiedIDMarkRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NotifiedIDMarkRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NotifiedIDMarkRowChangedEvent) Is Nothing) Then
                RaiseEvent NotifiedIDMarkRowChanged(Me, New NotifiedIDMarkRowChangeEvent(CType(e.Row,NotifiedIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NotifiedIDMarkRowChangingEvent) Is Nothing) Then
                RaiseEvent NotifiedIDMarkRowChanging(Me, New NotifiedIDMarkRowChangeEvent(CType(e.Row,NotifiedIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NotifiedIDMarkRowDeletedEvent) Is Nothing) Then
                RaiseEvent NotifiedIDMarkRowDeleted(Me, New NotifiedIDMarkRowChangeEvent(CType(e.Row,NotifiedIDMarkRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NotifiedIDMarkRowDeletingEvent) Is Nothing) Then
                RaiseEvent NotifiedIDMarkRowDeleting(Me, New NotifiedIDMarkRowChangeEvent(CType(e.Row,NotifiedIDMarkRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNotifiedIDMarkRow(ByVal row As NotifiedIDMarkRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedIDMarkRow
        Inherits DataRow
        
        Private tableNotifiedIDMark As NotifiedIDMarkDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNotifiedIDMark = CType(Me.Table,NotifiedIDMarkDataTable)
        End Sub
        
        Public Property IDMarkNumber As String
            Get
                Return CType(Me(Me.tableNotifiedIDMark.IDMarkNumberColumn),String)
            End Get
            Set
                Me(Me.tableNotifiedIDMark.IDMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property IDMarkType As Integer
            Get
                Return CType(Me(Me.tableNotifiedIDMark.IDMarkTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableNotifiedIDMark.IDMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IDMarkFate As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNotifiedIDMark.IDMarkFateColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNotifiedIDMark.IDMarkFateColumn) = value
            End Set
        End Property
        
        Public Property NotifiedBirdRow As NotifiedBirdRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NotifiedBird_NotifiedIDMark")),NotifiedBirdRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NotifiedBird_NotifiedIDMark"))
            End Set
        End Property
        
        Public Function IsIDMarkFateNull() As Boolean
            Return Me.IsNull(Me.tableNotifiedIDMark.IDMarkFateColumn)
        End Function
        
        Public Sub SetIDMarkFateNull()
            Me(Me.tableNotifiedIDMark.IDMarkFateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NotifiedIDMarkRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NotifiedIDMarkRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NotifiedIDMarkRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NotifiedIDMarkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FateDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFateDate As DataColumn
        
        Private columnFateCode As DataColumn
        
        Private columnBirdNotification_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Fate")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FateDateColumn As DataColumn
            Get
                Return Me.columnFateDate
            End Get
        End Property
        
        Friend ReadOnly Property FateCodeColumn As DataColumn
            Get
                Return Me.columnFateCode
            End Get
        End Property
        
        Friend ReadOnly Property BirdNotification_IdColumn As DataColumn
            Get
                Return Me.columnBirdNotification_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As FateRow
            Get
                Return CType(Me.Rows(index),FateRow)
            End Get
        End Property
        
        Public Event FateRowChanged As FateRowChangeEventHandler
        
        Public Event FateRowChanging As FateRowChangeEventHandler
        
        Public Event FateRowDeleted As FateRowChangeEventHandler
        
        Public Event FateRowDeleting As FateRowChangeEventHandler
        
        Public Overloads Sub AddFateRow(ByVal row As FateRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddFateRow(ByVal FateDate As Date, ByVal FateCode As Integer, ByVal parentBirdNotificationRowByBirdNotification_Fate As BirdNotificationRow) As FateRow
            Dim rowFateRow As FateRow = CType(Me.NewRow,FateRow)
            rowFateRow.ItemArray = New Object() {FateDate, FateCode, parentBirdNotificationRowByBirdNotification_Fate(4)}
            Me.Rows.Add(rowFateRow)
            Return rowFateRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As FateDataTable = CType(MyBase.Clone,FateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New FateDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFateDate = Me.Columns("FateDate")
            Me.columnFateCode = Me.Columns("FateCode")
            Me.columnBirdNotification_Id = Me.Columns("BirdNotification_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnFateDate = New DataColumn("FateDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateDate)
            Me.columnFateCode = New DataColumn("FateCode", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateCode)
            Me.columnBirdNotification_Id = New DataColumn("BirdNotification_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBirdNotification_Id)
            Me.columnFateDate.AllowDBNull = false
            Me.columnFateCode.AllowDBNull = false
        End Sub
        
        Public Function NewFateRow() As FateRow
            Return CType(Me.NewRow,FateRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New FateRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FateRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FateRowChangedEvent) Is Nothing) Then
                RaiseEvent FateRowChanged(Me, New FateRowChangeEvent(CType(e.Row,FateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FateRowChangingEvent) Is Nothing) Then
                RaiseEvent FateRowChanging(Me, New FateRowChangeEvent(CType(e.Row,FateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FateRowDeletedEvent) Is Nothing) Then
                RaiseEvent FateRowDeleted(Me, New FateRowChangeEvent(CType(e.Row,FateRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FateRowDeletingEvent) Is Nothing) Then
                RaiseEvent FateRowDeleting(Me, New FateRowChangeEvent(CType(e.Row,FateRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveFateRow(ByVal row As FateRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FateRow
        Inherits DataRow
        
        Private tableFate As FateDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableFate = CType(Me.Table,FateDataTable)
        End Sub
        
        Public Property FateDate As Date
            Get
                Return CType(Me(Me.tableFate.FateDateColumn),Date)
            End Get
            Set
                Me(Me.tableFate.FateDateColumn) = value
            End Set
        End Property
        
        Public Property FateCode As Integer
            Get
                Return CType(Me(Me.tableFate.FateCodeColumn),Integer)
            End Get
            Set
                Me(Me.tableFate.FateCodeColumn) = value
            End Set
        End Property
        
        Public Property BirdNotificationRow As BirdNotificationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BirdNotification_Fate")),BirdNotificationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BirdNotification_Fate"))
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class FateRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As FateRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As FateRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As FateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NewKeeperDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKeeperId As DataColumn
        
        Private columnTransferMethod As DataColumn
        
        Private columnTransferDate As DataColumn
        
        Private columnNewKeeper_Id As DataColumn
        
        Private columnBirdNotification_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("NewKeeper")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KeeperIdColumn As DataColumn
            Get
                Return Me.columnKeeperId
            End Get
        End Property
        
        Friend ReadOnly Property TransferMethodColumn As DataColumn
            Get
                Return Me.columnTransferMethod
            End Get
        End Property
        
        Friend ReadOnly Property TransferDateColumn As DataColumn
            Get
                Return Me.columnTransferDate
            End Get
        End Property
        
        Friend ReadOnly Property NewKeeper_IdColumn As DataColumn
            Get
                Return Me.columnNewKeeper_Id
            End Get
        End Property
        
        Friend ReadOnly Property BirdNotification_IdColumn As DataColumn
            Get
                Return Me.columnBirdNotification_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As NewKeeperRow
            Get
                Return CType(Me.Rows(index),NewKeeperRow)
            End Get
        End Property
        
        Public Event NewKeeperRowChanged As NewKeeperRowChangeEventHandler
        
        Public Event NewKeeperRowChanging As NewKeeperRowChangeEventHandler
        
        Public Event NewKeeperRowDeleted As NewKeeperRowChangeEventHandler
        
        Public Event NewKeeperRowDeleting As NewKeeperRowChangeEventHandler
        
        Public Overloads Sub AddNewKeeperRow(ByVal row As NewKeeperRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddNewKeeperRow(ByVal KeeperId As Integer, ByVal TransferMethod As String, ByVal TransferDate As Date, ByVal parentBirdNotificationRowByBirdNotification_NewKeeper As BirdNotificationRow) As NewKeeperRow
            Dim rowNewKeeperRow As NewKeeperRow = CType(Me.NewRow,NewKeeperRow)
            rowNewKeeperRow.ItemArray = New Object() {KeeperId, TransferMethod, TransferDate, Nothing, parentBirdNotificationRowByBirdNotification_NewKeeper(4)}
            Me.Rows.Add(rowNewKeeperRow)
            Return rowNewKeeperRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As NewKeeperDataTable = CType(MyBase.Clone,NewKeeperDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New NewKeeperDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKeeperId = Me.Columns("KeeperId")
            Me.columnTransferMethod = Me.Columns("TransferMethod")
            Me.columnTransferDate = Me.Columns("TransferDate")
            Me.columnNewKeeper_Id = Me.Columns("NewKeeper_Id")
            Me.columnBirdNotification_Id = Me.Columns("BirdNotification_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnKeeperId = New DataColumn("KeeperId", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperId)
            Me.columnTransferMethod = New DataColumn("TransferMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransferMethod)
            Me.columnTransferDate = New DataColumn("TransferDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTransferDate)
            Me.columnNewKeeper_Id = New DataColumn("NewKeeper_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnNewKeeper_Id)
            Me.columnBirdNotification_Id = New DataColumn("BirdNotification_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnBirdNotification_Id)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnNewKeeper_Id}, true))
            Me.columnKeeperId.AllowDBNull = false
            Me.columnTransferDate.AllowDBNull = false
            Me.columnNewKeeper_Id.AutoIncrement = true
            Me.columnNewKeeper_Id.AllowDBNull = false
            Me.columnNewKeeper_Id.Unique = true
        End Sub
        
        Public Function NewNewKeeperRow() As NewKeeperRow
            Return CType(Me.NewRow,NewKeeperRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New NewKeeperRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NewKeeperRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NewKeeperRowChangedEvent) Is Nothing) Then
                RaiseEvent NewKeeperRowChanged(Me, New NewKeeperRowChangeEvent(CType(e.Row,NewKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NewKeeperRowChangingEvent) Is Nothing) Then
                RaiseEvent NewKeeperRowChanging(Me, New NewKeeperRowChangeEvent(CType(e.Row,NewKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NewKeeperRowDeletedEvent) Is Nothing) Then
                RaiseEvent NewKeeperRowDeleted(Me, New NewKeeperRowChangeEvent(CType(e.Row,NewKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NewKeeperRowDeletingEvent) Is Nothing) Then
                RaiseEvent NewKeeperRowDeleting(Me, New NewKeeperRowChangeEvent(CType(e.Row,NewKeeperRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveNewKeeperRow(ByVal row As NewKeeperRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NewKeeperRow
        Inherits DataRow
        
        Private tableNewKeeper As NewKeeperDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableNewKeeper = CType(Me.Table,NewKeeperDataTable)
        End Sub
        
        Public Property KeeperId As Integer
            Get
                Return CType(Me(Me.tableNewKeeper.KeeperIdColumn),Integer)
            End Get
            Set
                Me(Me.tableNewKeeper.KeeperIdColumn) = value
            End Set
        End Property
        
        Public Property TransferMethod As String
            Get
                Try 
                    Return CType(Me(Me.tableNewKeeper.TransferMethodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNewKeeper.TransferMethodColumn) = value
            End Set
        End Property
        
        Public Property TransferDate As Date
            Get
                Return CType(Me(Me.tableNewKeeper.TransferDateColumn),Date)
            End Get
            Set
                Me(Me.tableNewKeeper.TransferDateColumn) = value
            End Set
        End Property
        
        Public Property BirdNotificationRow As BirdNotificationRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BirdNotification_NewKeeper")),BirdNotificationRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BirdNotification_NewKeeper"))
            End Set
        End Property
        
        Public Function IsTransferMethodNull() As Boolean
            Return Me.IsNull(Me.tableNewKeeper.TransferMethodColumn)
        End Function
        
        Public Sub SetTransferMethodNull()
            Me(Me.tableNewKeeper.TransferMethodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetKeeperRows() As KeeperRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("NewKeeper_Keeper")),KeeperRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class NewKeeperRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As NewKeeperRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As NewKeeperRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As NewKeeperRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class KeeperDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTitle As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnSurname As DataColumn
        
        Private columnBusinessName As DataColumn
        
        Private columnAddressLine1 As DataColumn
        
        Private columnAddressLine2 As DataColumn
        
        Private columnAddressLine3 As DataColumn
        
        Private columnAddressLine4 As DataColumn
        
        Private columnTown As DataColumn
        
        Private columnPostCode As DataColumn
        
        Private columnNewKeeper_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Keeper")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TitleColumn As DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property SurnameColumn As DataColumn
            Get
                Return Me.columnSurname
            End Get
        End Property
        
        Friend ReadOnly Property BusinessNameColumn As DataColumn
            Get
                Return Me.columnBusinessName
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine1Column As DataColumn
            Get
                Return Me.columnAddressLine1
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine2Column As DataColumn
            Get
                Return Me.columnAddressLine2
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine3Column As DataColumn
            Get
                Return Me.columnAddressLine3
            End Get
        End Property
        
        Friend ReadOnly Property AddressLine4Column As DataColumn
            Get
                Return Me.columnAddressLine4
            End Get
        End Property
        
        Friend ReadOnly Property TownColumn As DataColumn
            Get
                Return Me.columnTown
            End Get
        End Property
        
        Friend ReadOnly Property PostCodeColumn As DataColumn
            Get
                Return Me.columnPostCode
            End Get
        End Property
        
        Friend ReadOnly Property NewKeeper_IdColumn As DataColumn
            Get
                Return Me.columnNewKeeper_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As KeeperRow
            Get
                Return CType(Me.Rows(index),KeeperRow)
            End Get
        End Property
        
        Public Event KeeperRowChanged As KeeperRowChangeEventHandler
        
        Public Event KeeperRowChanging As KeeperRowChangeEventHandler
        
        Public Event KeeperRowDeleted As KeeperRowChangeEventHandler
        
        Public Event KeeperRowDeleting As KeeperRowChangeEventHandler
        
        Public Overloads Sub AddKeeperRow(ByVal row As KeeperRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddKeeperRow(ByVal Title As String, ByVal FirstName As String, ByVal Surname As String, ByVal BusinessName As String, ByVal AddressLine1 As String, ByVal AddressLine2 As String, ByVal AddressLine3 As String, ByVal AddressLine4 As String, ByVal Town As String, ByVal PostCode As String, ByVal parentNewKeeperRowByNewKeeper_Keeper As NewKeeperRow) As KeeperRow
            Dim rowKeeperRow As KeeperRow = CType(Me.NewRow,KeeperRow)
            rowKeeperRow.ItemArray = New Object() {Title, FirstName, Surname, BusinessName, AddressLine1, AddressLine2, AddressLine3, AddressLine4, Town, PostCode, parentNewKeeperRowByNewKeeper_Keeper(3)}
            Me.Rows.Add(rowKeeperRow)
            Return rowKeeperRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As KeeperDataTable = CType(MyBase.Clone,KeeperDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New KeeperDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTitle = Me.Columns("Title")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnSurname = Me.Columns("Surname")
            Me.columnBusinessName = Me.Columns("BusinessName")
            Me.columnAddressLine1 = Me.Columns("AddressLine1")
            Me.columnAddressLine2 = Me.Columns("AddressLine2")
            Me.columnAddressLine3 = Me.Columns("AddressLine3")
            Me.columnAddressLine4 = Me.Columns("AddressLine4")
            Me.columnTown = Me.Columns("Town")
            Me.columnPostCode = Me.Columns("PostCode")
            Me.columnNewKeeper_Id = Me.Columns("NewKeeper_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnTitle = New DataColumn("Title", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTitle)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnSurname = New DataColumn("Surname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurname)
            Me.columnBusinessName = New DataColumn("BusinessName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBusinessName)
            Me.columnAddressLine1 = New DataColumn("AddressLine1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine1)
            Me.columnAddressLine2 = New DataColumn("AddressLine2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine2)
            Me.columnAddressLine3 = New DataColumn("AddressLine3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine3)
            Me.columnAddressLine4 = New DataColumn("AddressLine4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddressLine4)
            Me.columnTown = New DataColumn("Town", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTown)
            Me.columnPostCode = New DataColumn("PostCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPostCode)
            Me.columnNewKeeper_Id = New DataColumn("NewKeeper_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnNewKeeper_Id)
            Me.columnTitle.AllowDBNull = false
            Me.columnFirstName.AllowDBNull = false
            Me.columnSurname.AllowDBNull = false
            Me.columnAddressLine1.AllowDBNull = false
            Me.columnTown.AllowDBNull = false
            Me.columnPostCode.AllowDBNull = false
        End Sub
        
        Public Function NewKeeperRow() As KeeperRow
            Return CType(Me.NewRow,KeeperRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New KeeperRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(KeeperRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.KeeperRowChangedEvent) Is Nothing) Then
                RaiseEvent KeeperRowChanged(Me, New KeeperRowChangeEvent(CType(e.Row,KeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.KeeperRowChangingEvent) Is Nothing) Then
                RaiseEvent KeeperRowChanging(Me, New KeeperRowChangeEvent(CType(e.Row,KeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.KeeperRowDeletedEvent) Is Nothing) Then
                RaiseEvent KeeperRowDeleted(Me, New KeeperRowChangeEvent(CType(e.Row,KeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.KeeperRowDeletingEvent) Is Nothing) Then
                RaiseEvent KeeperRowDeleting(Me, New KeeperRowChangeEvent(CType(e.Row,KeeperRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveKeeperRow(ByVal row As KeeperRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class KeeperRow
        Inherits DataRow
        
        Private tableKeeper As KeeperDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableKeeper = CType(Me.Table,KeeperDataTable)
        End Sub
        
        Public Property Title As String
            Get
                Return CType(Me(Me.tableKeeper.TitleColumn),String)
            End Get
            Set
                Me(Me.tableKeeper.TitleColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Return CType(Me(Me.tableKeeper.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableKeeper.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property Surname As String
            Get
                Return CType(Me(Me.tableKeeper.SurnameColumn),String)
            End Get
            Set
                Me(Me.tableKeeper.SurnameColumn) = value
            End Set
        End Property
        
        Public Property BusinessName As String
            Get
                Try 
                    Return CType(Me(Me.tableKeeper.BusinessNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKeeper.BusinessNameColumn) = value
            End Set
        End Property
        
        Public Property AddressLine1 As String
            Get
                Return CType(Me(Me.tableKeeper.AddressLine1Column),String)
            End Get
            Set
                Me(Me.tableKeeper.AddressLine1Column) = value
            End Set
        End Property
        
        Public Property AddressLine2 As String
            Get
                Try 
                    Return CType(Me(Me.tableKeeper.AddressLine2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKeeper.AddressLine2Column) = value
            End Set
        End Property
        
        Public Property AddressLine3 As String
            Get
                Try 
                    Return CType(Me(Me.tableKeeper.AddressLine3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKeeper.AddressLine3Column) = value
            End Set
        End Property
        
        Public Property AddressLine4 As String
            Get
                Try 
                    Return CType(Me(Me.tableKeeper.AddressLine4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableKeeper.AddressLine4Column) = value
            End Set
        End Property
        
        Public Property Town As String
            Get
                Return CType(Me(Me.tableKeeper.TownColumn),String)
            End Get
            Set
                Me(Me.tableKeeper.TownColumn) = value
            End Set
        End Property
        
        Public Property PostCode As String
            Get
                Return CType(Me(Me.tableKeeper.PostCodeColumn),String)
            End Get
            Set
                Me(Me.tableKeeper.PostCodeColumn) = value
            End Set
        End Property
        
        Public Property NewKeeperRow As NewKeeperRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("NewKeeper_Keeper")),NewKeeperRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("NewKeeper_Keeper"))
            End Set
        End Property
        
        Public Function IsBusinessNameNull() As Boolean
            Return Me.IsNull(Me.tableKeeper.BusinessNameColumn)
        End Function
        
        Public Sub SetBusinessNameNull()
            Me(Me.tableKeeper.BusinessNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine2Null() As Boolean
            Return Me.IsNull(Me.tableKeeper.AddressLine2Column)
        End Function
        
        Public Sub SetAddressLine2Null()
            Me(Me.tableKeeper.AddressLine2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine3Null() As Boolean
            Return Me.IsNull(Me.tableKeeper.AddressLine3Column)
        End Function
        
        Public Sub SetAddressLine3Null()
            Me(Me.tableKeeper.AddressLine3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressLine4Null() As Boolean
            Return Me.IsNull(Me.tableKeeper.AddressLine4Column)
        End Function
        
        Public Sub SetAddressLine4Null()
            Me(Me.tableKeeper.AddressLine4Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class KeeperRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As KeeperRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As KeeperRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As KeeperRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
