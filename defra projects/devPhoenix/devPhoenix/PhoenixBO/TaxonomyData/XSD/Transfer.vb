'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


Namespace TaxonomyData
    <Serializable(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Diagnostics.DebuggerStepThrough(), _
     System.ComponentModel.ToolboxItem(True)> _
    Public Class Transfer
    Inherits DataSet
    
    Private tableVAQUATIC As VAQUATICDataTable
    
    Private tableVBRU As VBRUDataTable
    
    Private tableVAREAOFUSE As VAREAOFUSEDataTable
    
    Private tableVCOMMONNAME As VCOMMONNAMEDataTable
    
    Private tableVCOUNTRY As VCOUNTRYDataTable
    
    Private tableVDECISIONS As VDECISIONSDataTable
    
    Private tableVDISTRIBAQUA As VDISTRIBAQUADataTable
    
    Private tableVDISTRIBBRU As VDISTRIBBRUDataTable
    
    Private tableVDISTRIBCTY As VDISTRIBCTYDataTable
    
    Private tableVFAMILY As VFAMILYDataTable
    
    Private tableVGENUS As VGENUSDataTable
    
    Private tableVHIGHCOMMON As VHIGHCOMMONDataTable
    
    Private tableVHIGHDECISIONS As VHIGHDECISIONSDataTable
    
    Private tableVHIGHLEGAL As VHIGHLEGALDataTable
    
    Private tableVHIGHQUOTAS As VHIGHQUOTASDataTable
    
    Private tableVHIGHSYNONYMS As VHIGHSYNONYMSDataTable
    
    Private tableVKINGDOM As VKINGDOMDataTable
    
    Private tableVLEGAL As VLEGALDataTable
    
    Private tableVLEGALNAME As VLEGALNAMEDataTable
    
    Private tableVLEVELOFUSE As VLEVELOFUSEDataTable
    
    Private tableVNOTIFICATION As VNOTIFICATIONDataTable
    
    Private tableVPART As VPARTDataTable
    
    Private tableVQUOTAS As VQUOTASDataTable
    
    Private tableVQUOTASOURCE As VQUOTASOURCEDataTable
    
    Private tableVQUOTATERMS As VQUOTATERMSDataTable
    
    Private tableVSPECIES As VSPECIESDataTable
    
    Private tableVSYNLINK As VSYNLINKDataTable
    
    Private tableVTAXCLASS As VTAXCLASSDataTable
    
    Private tableVTAXORDER As VTAXORDERDataTable
    
    Private tableVTAXPHYLUM As VTAXPHYLUMDataTable
    
    Private tableVUSED As VUSEDDataTable
    
    Private tableVUSETYPE As VUSETYPEDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VAQUATIC")) Is Nothing) Then
                Me.Tables.Add(New VAQUATICDataTable(ds.Tables("VAQUATIC")))
            End If
            If (Not (ds.Tables("VBRU")) Is Nothing) Then
                Me.Tables.Add(New VBRUDataTable(ds.Tables("VBRU")))
            End If
            If (Not (ds.Tables("VAREAOFUSE")) Is Nothing) Then
                Me.Tables.Add(New VAREAOFUSEDataTable(ds.Tables("VAREAOFUSE")))
            End If
            If (Not (ds.Tables("VCOMMONNAME")) Is Nothing) Then
                Me.Tables.Add(New VCOMMONNAMEDataTable(ds.Tables("VCOMMONNAME")))
            End If
            If (Not (ds.Tables("VCOUNTRY")) Is Nothing) Then
                Me.Tables.Add(New VCOUNTRYDataTable(ds.Tables("VCOUNTRY")))
            End If
            If (Not (ds.Tables("VDECISIONS")) Is Nothing) Then
                Me.Tables.Add(New VDECISIONSDataTable(ds.Tables("VDECISIONS")))
            End If
            If (Not (ds.Tables("VDISTRIBAQUA")) Is Nothing) Then
                Me.Tables.Add(New VDISTRIBAQUADataTable(ds.Tables("VDISTRIBAQUA")))
            End If
            If (Not (ds.Tables("VDISTRIBBRU")) Is Nothing) Then
                Me.Tables.Add(New VDISTRIBBRUDataTable(ds.Tables("VDISTRIBBRU")))
            End If
            If (Not (ds.Tables("VDISTRIBCTY")) Is Nothing) Then
                Me.Tables.Add(New VDISTRIBCTYDataTable(ds.Tables("VDISTRIBCTY")))
            End If
            If (Not (ds.Tables("VFAMILY")) Is Nothing) Then
                Me.Tables.Add(New VFAMILYDataTable(ds.Tables("VFAMILY")))
            End If
            If (Not (ds.Tables("VGENUS")) Is Nothing) Then
                Me.Tables.Add(New VGENUSDataTable(ds.Tables("VGENUS")))
            End If
            If (Not (ds.Tables("VHIGHCOMMON")) Is Nothing) Then
                Me.Tables.Add(New VHIGHCOMMONDataTable(ds.Tables("VHIGHCOMMON")))
            End If
            If (Not (ds.Tables("VHIGHDECISIONS")) Is Nothing) Then
                Me.Tables.Add(New VHIGHDECISIONSDataTable(ds.Tables("VHIGHDECISIONS")))
            End If
            If (Not (ds.Tables("VHIGHLEGAL")) Is Nothing) Then
                Me.Tables.Add(New VHIGHLEGALDataTable(ds.Tables("VHIGHLEGAL")))
            End If
            If (Not (ds.Tables("VHIGHQUOTAS")) Is Nothing) Then
                Me.Tables.Add(New VHIGHQUOTASDataTable(ds.Tables("VHIGHQUOTAS")))
            End If
            If (Not (ds.Tables("VHIGHSYNONYMS")) Is Nothing) Then
                Me.Tables.Add(New VHIGHSYNONYMSDataTable(ds.Tables("VHIGHSYNONYMS")))
            End If
            If (Not (ds.Tables("VKINGDOM")) Is Nothing) Then
                Me.Tables.Add(New VKINGDOMDataTable(ds.Tables("VKINGDOM")))
            End If
            If (Not (ds.Tables("VLEGAL")) Is Nothing) Then
                Me.Tables.Add(New VLEGALDataTable(ds.Tables("VLEGAL")))
            End If
            If (Not (ds.Tables("VLEGALNAME")) Is Nothing) Then
                Me.Tables.Add(New VLEGALNAMEDataTable(ds.Tables("VLEGALNAME")))
            End If
            If (Not (ds.Tables("VLEVELOFUSE")) Is Nothing) Then
                Me.Tables.Add(New VLEVELOFUSEDataTable(ds.Tables("VLEVELOFUSE")))
            End If
            If (Not (ds.Tables("VNOTIFICATION")) Is Nothing) Then
                Me.Tables.Add(New VNOTIFICATIONDataTable(ds.Tables("VNOTIFICATION")))
            End If
            If (Not (ds.Tables("VPART")) Is Nothing) Then
                Me.Tables.Add(New VPARTDataTable(ds.Tables("VPART")))
            End If
            If (Not (ds.Tables("VQUOTAS")) Is Nothing) Then
                Me.Tables.Add(New VQUOTASDataTable(ds.Tables("VQUOTAS")))
            End If
            If (Not (ds.Tables("VQUOTASOURCE")) Is Nothing) Then
                Me.Tables.Add(New VQUOTASOURCEDataTable(ds.Tables("VQUOTASOURCE")))
            End If
            If (Not (ds.Tables("VQUOTATERMS")) Is Nothing) Then
                Me.Tables.Add(New VQUOTATERMSDataTable(ds.Tables("VQUOTATERMS")))
            End If
            If (Not (ds.Tables("VSPECIES")) Is Nothing) Then
                Me.Tables.Add(New VSPECIESDataTable(ds.Tables("VSPECIES")))
            End If
            If (Not (ds.Tables("VSYNLINK")) Is Nothing) Then
                Me.Tables.Add(New VSYNLINKDataTable(ds.Tables("VSYNLINK")))
            End If
            If (Not (ds.Tables("VTAXCLASS")) Is Nothing) Then
                Me.Tables.Add(New VTAXCLASSDataTable(ds.Tables("VTAXCLASS")))
            End If
            If (Not (ds.Tables("VTAXORDER")) Is Nothing) Then
                Me.Tables.Add(New VTAXORDERDataTable(ds.Tables("VTAXORDER")))
            End If
            If (Not (ds.Tables("VTAXPHYLUM")) Is Nothing) Then
                Me.Tables.Add(New VTAXPHYLUMDataTable(ds.Tables("VTAXPHYLUM")))
            End If
            If (Not (ds.Tables("VUSED")) Is Nothing) Then
                Me.Tables.Add(New VUSEDDataTable(ds.Tables("VUSED")))
            End If
            If (Not (ds.Tables("VUSETYPE")) Is Nothing) Then
                Me.Tables.Add(New VUSETYPEDataTable(ds.Tables("VUSETYPE")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VAQUATIC As VAQUATICDataTable
        Get
            Return Me.tableVAQUATIC
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VBRU As VBRUDataTable
        Get
            Return Me.tableVBRU
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VAREAOFUSE As VAREAOFUSEDataTable
        Get
            Return Me.tableVAREAOFUSE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VCOMMONNAME As VCOMMONNAMEDataTable
        Get
            Return Me.tableVCOMMONNAME
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VCOUNTRY As VCOUNTRYDataTable
        Get
            Return Me.tableVCOUNTRY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDECISIONS As VDECISIONSDataTable
        Get
            Return Me.tableVDECISIONS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDISTRIBAQUA As VDISTRIBAQUADataTable
        Get
            Return Me.tableVDISTRIBAQUA
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDISTRIBBRU As VDISTRIBBRUDataTable
        Get
            Return Me.tableVDISTRIBBRU
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VDISTRIBCTY As VDISTRIBCTYDataTable
        Get
            Return Me.tableVDISTRIBCTY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VFAMILY As VFAMILYDataTable
        Get
            Return Me.tableVFAMILY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VGENUS As VGENUSDataTable
        Get
            Return Me.tableVGENUS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VHIGHCOMMON As VHIGHCOMMONDataTable
        Get
            Return Me.tableVHIGHCOMMON
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VHIGHDECISIONS As VHIGHDECISIONSDataTable
        Get
            Return Me.tableVHIGHDECISIONS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VHIGHLEGAL As VHIGHLEGALDataTable
        Get
            Return Me.tableVHIGHLEGAL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VHIGHQUOTAS As VHIGHQUOTASDataTable
        Get
            Return Me.tableVHIGHQUOTAS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VHIGHSYNONYMS As VHIGHSYNONYMSDataTable
        Get
            Return Me.tableVHIGHSYNONYMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VKINGDOM As VKINGDOMDataTable
        Get
            Return Me.tableVKINGDOM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VLEGAL As VLEGALDataTable
        Get
            Return Me.tableVLEGAL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VLEGALNAME As VLEGALNAMEDataTable
        Get
            Return Me.tableVLEGALNAME
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VLEVELOFUSE As VLEVELOFUSEDataTable
        Get
            Return Me.tableVLEVELOFUSE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VNOTIFICATION As VNOTIFICATIONDataTable
        Get
            Return Me.tableVNOTIFICATION
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VPART As VPARTDataTable
        Get
            Return Me.tableVPART
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VQUOTAS As VQUOTASDataTable
        Get
            Return Me.tableVQUOTAS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VQUOTASOURCE As VQUOTASOURCEDataTable
        Get
            Return Me.tableVQUOTASOURCE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VQUOTATERMS As VQUOTATERMSDataTable
        Get
            Return Me.tableVQUOTATERMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VSPECIES As VSPECIESDataTable
        Get
            Return Me.tableVSPECIES
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VSYNLINK As VSYNLINKDataTable
        Get
            Return Me.tableVSYNLINK
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VTAXCLASS As VTAXCLASSDataTable
        Get
            Return Me.tableVTAXCLASS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VTAXORDER As VTAXORDERDataTable
        Get
            Return Me.tableVTAXORDER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VTAXPHYLUM As VTAXPHYLUMDataTable
        Get
            Return Me.tableVTAXPHYLUM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VUSED As VUSEDDataTable
        Get
            Return Me.tableVUSED
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VUSETYPE As VUSETYPEDataTable
        Get
            Return Me.tableVUSETYPE
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Transfer = CType(MyBase.Clone,Transfer)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("VAQUATIC")) Is Nothing) Then
            Me.Tables.Add(New VAQUATICDataTable(ds.Tables("VAQUATIC")))
        End If
        If (Not (ds.Tables("VBRU")) Is Nothing) Then
            Me.Tables.Add(New VBRUDataTable(ds.Tables("VBRU")))
        End If
        If (Not (ds.Tables("VAREAOFUSE")) Is Nothing) Then
            Me.Tables.Add(New VAREAOFUSEDataTable(ds.Tables("VAREAOFUSE")))
        End If
        If (Not (ds.Tables("VCOMMONNAME")) Is Nothing) Then
            Me.Tables.Add(New VCOMMONNAMEDataTable(ds.Tables("VCOMMONNAME")))
        End If
        If (Not (ds.Tables("VCOUNTRY")) Is Nothing) Then
            Me.Tables.Add(New VCOUNTRYDataTable(ds.Tables("VCOUNTRY")))
        End If
        If (Not (ds.Tables("VDECISIONS")) Is Nothing) Then
            Me.Tables.Add(New VDECISIONSDataTable(ds.Tables("VDECISIONS")))
        End If
        If (Not (ds.Tables("VDISTRIBAQUA")) Is Nothing) Then
            Me.Tables.Add(New VDISTRIBAQUADataTable(ds.Tables("VDISTRIBAQUA")))
        End If
        If (Not (ds.Tables("VDISTRIBBRU")) Is Nothing) Then
            Me.Tables.Add(New VDISTRIBBRUDataTable(ds.Tables("VDISTRIBBRU")))
        End If
        If (Not (ds.Tables("VDISTRIBCTY")) Is Nothing) Then
            Me.Tables.Add(New VDISTRIBCTYDataTable(ds.Tables("VDISTRIBCTY")))
        End If
        If (Not (ds.Tables("VFAMILY")) Is Nothing) Then
            Me.Tables.Add(New VFAMILYDataTable(ds.Tables("VFAMILY")))
        End If
        If (Not (ds.Tables("VGENUS")) Is Nothing) Then
            Me.Tables.Add(New VGENUSDataTable(ds.Tables("VGENUS")))
        End If
        If (Not (ds.Tables("VHIGHCOMMON")) Is Nothing) Then
            Me.Tables.Add(New VHIGHCOMMONDataTable(ds.Tables("VHIGHCOMMON")))
        End If
        If (Not (ds.Tables("VHIGHDECISIONS")) Is Nothing) Then
            Me.Tables.Add(New VHIGHDECISIONSDataTable(ds.Tables("VHIGHDECISIONS")))
        End If
        If (Not (ds.Tables("VHIGHLEGAL")) Is Nothing) Then
            Me.Tables.Add(New VHIGHLEGALDataTable(ds.Tables("VHIGHLEGAL")))
        End If
        If (Not (ds.Tables("VHIGHQUOTAS")) Is Nothing) Then
            Me.Tables.Add(New VHIGHQUOTASDataTable(ds.Tables("VHIGHQUOTAS")))
        End If
        If (Not (ds.Tables("VHIGHSYNONYMS")) Is Nothing) Then
            Me.Tables.Add(New VHIGHSYNONYMSDataTable(ds.Tables("VHIGHSYNONYMS")))
        End If
        If (Not (ds.Tables("VKINGDOM")) Is Nothing) Then
            Me.Tables.Add(New VKINGDOMDataTable(ds.Tables("VKINGDOM")))
        End If
        If (Not (ds.Tables("VLEGAL")) Is Nothing) Then
            Me.Tables.Add(New VLEGALDataTable(ds.Tables("VLEGAL")))
        End If
        If (Not (ds.Tables("VLEGALNAME")) Is Nothing) Then
            Me.Tables.Add(New VLEGALNAMEDataTable(ds.Tables("VLEGALNAME")))
        End If
        If (Not (ds.Tables("VLEVELOFUSE")) Is Nothing) Then
            Me.Tables.Add(New VLEVELOFUSEDataTable(ds.Tables("VLEVELOFUSE")))
        End If
        If (Not (ds.Tables("VNOTIFICATION")) Is Nothing) Then
            Me.Tables.Add(New VNOTIFICATIONDataTable(ds.Tables("VNOTIFICATION")))
        End If
        If (Not (ds.Tables("VPART")) Is Nothing) Then
            Me.Tables.Add(New VPARTDataTable(ds.Tables("VPART")))
        End If
        If (Not (ds.Tables("VQUOTAS")) Is Nothing) Then
            Me.Tables.Add(New VQUOTASDataTable(ds.Tables("VQUOTAS")))
        End If
        If (Not (ds.Tables("VQUOTASOURCE")) Is Nothing) Then
            Me.Tables.Add(New VQUOTASOURCEDataTable(ds.Tables("VQUOTASOURCE")))
        End If
        If (Not (ds.Tables("VQUOTATERMS")) Is Nothing) Then
            Me.Tables.Add(New VQUOTATERMSDataTable(ds.Tables("VQUOTATERMS")))
        End If
        If (Not (ds.Tables("VSPECIES")) Is Nothing) Then
            Me.Tables.Add(New VSPECIESDataTable(ds.Tables("VSPECIES")))
        End If
        If (Not (ds.Tables("VSYNLINK")) Is Nothing) Then
            Me.Tables.Add(New VSYNLINKDataTable(ds.Tables("VSYNLINK")))
        End If
        If (Not (ds.Tables("VTAXCLASS")) Is Nothing) Then
            Me.Tables.Add(New VTAXCLASSDataTable(ds.Tables("VTAXCLASS")))
        End If
        If (Not (ds.Tables("VTAXORDER")) Is Nothing) Then
            Me.Tables.Add(New VTAXORDERDataTable(ds.Tables("VTAXORDER")))
        End If
        If (Not (ds.Tables("VTAXPHYLUM")) Is Nothing) Then
            Me.Tables.Add(New VTAXPHYLUMDataTable(ds.Tables("VTAXPHYLUM")))
        End If
        If (Not (ds.Tables("VUSED")) Is Nothing) Then
            Me.Tables.Add(New VUSEDDataTable(ds.Tables("VUSED")))
        End If
        If (Not (ds.Tables("VUSETYPE")) Is Nothing) Then
            Me.Tables.Add(New VUSETYPEDataTable(ds.Tables("VUSETYPE")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableVAQUATIC = CType(Me.Tables("VAQUATIC"),VAQUATICDataTable)
        If (Not (Me.tableVAQUATIC) Is Nothing) Then
            Me.tableVAQUATIC.InitVars
        End If
        Me.tableVBRU = CType(Me.Tables("VBRU"),VBRUDataTable)
        If (Not (Me.tableVBRU) Is Nothing) Then
            Me.tableVBRU.InitVars
        End If
        Me.tableVAREAOFUSE = CType(Me.Tables("VAREAOFUSE"),VAREAOFUSEDataTable)
        If (Not (Me.tableVAREAOFUSE) Is Nothing) Then
            Me.tableVAREAOFUSE.InitVars
        End If
        Me.tableVCOMMONNAME = CType(Me.Tables("VCOMMONNAME"),VCOMMONNAMEDataTable)
        If (Not (Me.tableVCOMMONNAME) Is Nothing) Then
            Me.tableVCOMMONNAME.InitVars
        End If
        Me.tableVCOUNTRY = CType(Me.Tables("VCOUNTRY"),VCOUNTRYDataTable)
        If (Not (Me.tableVCOUNTRY) Is Nothing) Then
            Me.tableVCOUNTRY.InitVars
        End If
        Me.tableVDECISIONS = CType(Me.Tables("VDECISIONS"),VDECISIONSDataTable)
        If (Not (Me.tableVDECISIONS) Is Nothing) Then
            Me.tableVDECISIONS.InitVars
        End If
        Me.tableVDISTRIBAQUA = CType(Me.Tables("VDISTRIBAQUA"),VDISTRIBAQUADataTable)
        If (Not (Me.tableVDISTRIBAQUA) Is Nothing) Then
            Me.tableVDISTRIBAQUA.InitVars
        End If
        Me.tableVDISTRIBBRU = CType(Me.Tables("VDISTRIBBRU"),VDISTRIBBRUDataTable)
        If (Not (Me.tableVDISTRIBBRU) Is Nothing) Then
            Me.tableVDISTRIBBRU.InitVars
        End If
        Me.tableVDISTRIBCTY = CType(Me.Tables("VDISTRIBCTY"),VDISTRIBCTYDataTable)
        If (Not (Me.tableVDISTRIBCTY) Is Nothing) Then
            Me.tableVDISTRIBCTY.InitVars
        End If
        Me.tableVFAMILY = CType(Me.Tables("VFAMILY"),VFAMILYDataTable)
        If (Not (Me.tableVFAMILY) Is Nothing) Then
            Me.tableVFAMILY.InitVars
        End If
        Me.tableVGENUS = CType(Me.Tables("VGENUS"),VGENUSDataTable)
        If (Not (Me.tableVGENUS) Is Nothing) Then
            Me.tableVGENUS.InitVars
        End If
        Me.tableVHIGHCOMMON = CType(Me.Tables("VHIGHCOMMON"),VHIGHCOMMONDataTable)
        If (Not (Me.tableVHIGHCOMMON) Is Nothing) Then
            Me.tableVHIGHCOMMON.InitVars
        End If
        Me.tableVHIGHDECISIONS = CType(Me.Tables("VHIGHDECISIONS"),VHIGHDECISIONSDataTable)
        If (Not (Me.tableVHIGHDECISIONS) Is Nothing) Then
            Me.tableVHIGHDECISIONS.InitVars
        End If
        Me.tableVHIGHLEGAL = CType(Me.Tables("VHIGHLEGAL"),VHIGHLEGALDataTable)
        If (Not (Me.tableVHIGHLEGAL) Is Nothing) Then
            Me.tableVHIGHLEGAL.InitVars
        End If
        Me.tableVHIGHQUOTAS = CType(Me.Tables("VHIGHQUOTAS"),VHIGHQUOTASDataTable)
        If (Not (Me.tableVHIGHQUOTAS) Is Nothing) Then
            Me.tableVHIGHQUOTAS.InitVars
        End If
        Me.tableVHIGHSYNONYMS = CType(Me.Tables("VHIGHSYNONYMS"),VHIGHSYNONYMSDataTable)
        If (Not (Me.tableVHIGHSYNONYMS) Is Nothing) Then
            Me.tableVHIGHSYNONYMS.InitVars
        End If
        Me.tableVKINGDOM = CType(Me.Tables("VKINGDOM"),VKINGDOMDataTable)
        If (Not (Me.tableVKINGDOM) Is Nothing) Then
            Me.tableVKINGDOM.InitVars
        End If
        Me.tableVLEGAL = CType(Me.Tables("VLEGAL"),VLEGALDataTable)
        If (Not (Me.tableVLEGAL) Is Nothing) Then
            Me.tableVLEGAL.InitVars
        End If
        Me.tableVLEGALNAME = CType(Me.Tables("VLEGALNAME"),VLEGALNAMEDataTable)
        If (Not (Me.tableVLEGALNAME) Is Nothing) Then
            Me.tableVLEGALNAME.InitVars
        End If
        Me.tableVLEVELOFUSE = CType(Me.Tables("VLEVELOFUSE"),VLEVELOFUSEDataTable)
        If (Not (Me.tableVLEVELOFUSE) Is Nothing) Then
            Me.tableVLEVELOFUSE.InitVars
        End If
        Me.tableVNOTIFICATION = CType(Me.Tables("VNOTIFICATION"),VNOTIFICATIONDataTable)
        If (Not (Me.tableVNOTIFICATION) Is Nothing) Then
            Me.tableVNOTIFICATION.InitVars
        End If
        Me.tableVPART = CType(Me.Tables("VPART"),VPARTDataTable)
        If (Not (Me.tableVPART) Is Nothing) Then
            Me.tableVPART.InitVars
        End If
        Me.tableVQUOTAS = CType(Me.Tables("VQUOTAS"),VQUOTASDataTable)
        If (Not (Me.tableVQUOTAS) Is Nothing) Then
            Me.tableVQUOTAS.InitVars
        End If
        Me.tableVQUOTASOURCE = CType(Me.Tables("VQUOTASOURCE"),VQUOTASOURCEDataTable)
        If (Not (Me.tableVQUOTASOURCE) Is Nothing) Then
            Me.tableVQUOTASOURCE.InitVars
        End If
        Me.tableVQUOTATERMS = CType(Me.Tables("VQUOTATERMS"),VQUOTATERMSDataTable)
        If (Not (Me.tableVQUOTATERMS) Is Nothing) Then
            Me.tableVQUOTATERMS.InitVars
        End If
        Me.tableVSPECIES = CType(Me.Tables("VSPECIES"),VSPECIESDataTable)
        If (Not (Me.tableVSPECIES) Is Nothing) Then
            Me.tableVSPECIES.InitVars
        End If
        Me.tableVSYNLINK = CType(Me.Tables("VSYNLINK"),VSYNLINKDataTable)
        If (Not (Me.tableVSYNLINK) Is Nothing) Then
            Me.tableVSYNLINK.InitVars
        End If
        Me.tableVTAXCLASS = CType(Me.Tables("VTAXCLASS"),VTAXCLASSDataTable)
        If (Not (Me.tableVTAXCLASS) Is Nothing) Then
            Me.tableVTAXCLASS.InitVars
        End If
        Me.tableVTAXORDER = CType(Me.Tables("VTAXORDER"),VTAXORDERDataTable)
        If (Not (Me.tableVTAXORDER) Is Nothing) Then
            Me.tableVTAXORDER.InitVars
        End If
        Me.tableVTAXPHYLUM = CType(Me.Tables("VTAXPHYLUM"),VTAXPHYLUMDataTable)
        If (Not (Me.tableVTAXPHYLUM) Is Nothing) Then
            Me.tableVTAXPHYLUM.InitVars
        End If
        Me.tableVUSED = CType(Me.Tables("VUSED"),VUSEDDataTable)
        If (Not (Me.tableVUSED) Is Nothing) Then
            Me.tableVUSED.InitVars
        End If
        Me.tableVUSETYPE = CType(Me.Tables("VUSETYPE"),VUSETYPEDataTable)
        If (Not (Me.tableVUSETYPE) Is Nothing) Then
            Me.tableVUSETYPE.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Transfer"
        Me.Prefix = ""
        Me.Namespace = ""
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableVAQUATIC = New VAQUATICDataTable
        Me.Tables.Add(Me.tableVAQUATIC)
        Me.tableVBRU = New VBRUDataTable
        Me.Tables.Add(Me.tableVBRU)
        Me.tableVAREAOFUSE = New VAREAOFUSEDataTable
        Me.Tables.Add(Me.tableVAREAOFUSE)
        Me.tableVCOMMONNAME = New VCOMMONNAMEDataTable
        Me.Tables.Add(Me.tableVCOMMONNAME)
        Me.tableVCOUNTRY = New VCOUNTRYDataTable
        Me.Tables.Add(Me.tableVCOUNTRY)
        Me.tableVDECISIONS = New VDECISIONSDataTable
        Me.Tables.Add(Me.tableVDECISIONS)
        Me.tableVDISTRIBAQUA = New VDISTRIBAQUADataTable
        Me.Tables.Add(Me.tableVDISTRIBAQUA)
        Me.tableVDISTRIBBRU = New VDISTRIBBRUDataTable
        Me.Tables.Add(Me.tableVDISTRIBBRU)
        Me.tableVDISTRIBCTY = New VDISTRIBCTYDataTable
        Me.Tables.Add(Me.tableVDISTRIBCTY)
        Me.tableVFAMILY = New VFAMILYDataTable
        Me.Tables.Add(Me.tableVFAMILY)
        Me.tableVGENUS = New VGENUSDataTable
        Me.Tables.Add(Me.tableVGENUS)
        Me.tableVHIGHCOMMON = New VHIGHCOMMONDataTable
        Me.Tables.Add(Me.tableVHIGHCOMMON)
        Me.tableVHIGHDECISIONS = New VHIGHDECISIONSDataTable
        Me.Tables.Add(Me.tableVHIGHDECISIONS)
        Me.tableVHIGHLEGAL = New VHIGHLEGALDataTable
        Me.Tables.Add(Me.tableVHIGHLEGAL)
        Me.tableVHIGHQUOTAS = New VHIGHQUOTASDataTable
        Me.Tables.Add(Me.tableVHIGHQUOTAS)
        Me.tableVHIGHSYNONYMS = New VHIGHSYNONYMSDataTable
        Me.Tables.Add(Me.tableVHIGHSYNONYMS)
        Me.tableVKINGDOM = New VKINGDOMDataTable
        Me.Tables.Add(Me.tableVKINGDOM)
        Me.tableVLEGAL = New VLEGALDataTable
        Me.Tables.Add(Me.tableVLEGAL)
        Me.tableVLEGALNAME = New VLEGALNAMEDataTable
        Me.Tables.Add(Me.tableVLEGALNAME)
        Me.tableVLEVELOFUSE = New VLEVELOFUSEDataTable
        Me.Tables.Add(Me.tableVLEVELOFUSE)
        Me.tableVNOTIFICATION = New VNOTIFICATIONDataTable
        Me.Tables.Add(Me.tableVNOTIFICATION)
        Me.tableVPART = New VPARTDataTable
        Me.Tables.Add(Me.tableVPART)
        Me.tableVQUOTAS = New VQUOTASDataTable
        Me.Tables.Add(Me.tableVQUOTAS)
        Me.tableVQUOTASOURCE = New VQUOTASOURCEDataTable
        Me.Tables.Add(Me.tableVQUOTASOURCE)
        Me.tableVQUOTATERMS = New VQUOTATERMSDataTable
        Me.Tables.Add(Me.tableVQUOTATERMS)
        Me.tableVSPECIES = New VSPECIESDataTable
        Me.Tables.Add(Me.tableVSPECIES)
        Me.tableVSYNLINK = New VSYNLINKDataTable
        Me.Tables.Add(Me.tableVSYNLINK)
        Me.tableVTAXCLASS = New VTAXCLASSDataTable
        Me.Tables.Add(Me.tableVTAXCLASS)
        Me.tableVTAXORDER = New VTAXORDERDataTable
        Me.Tables.Add(Me.tableVTAXORDER)
        Me.tableVTAXPHYLUM = New VTAXPHYLUMDataTable
        Me.Tables.Add(Me.tableVTAXPHYLUM)
        Me.tableVUSED = New VUSEDDataTable
        Me.Tables.Add(Me.tableVUSED)
        Me.tableVUSETYPE = New VUSETYPEDataTable
        Me.Tables.Add(Me.tableVUSETYPE)
    End Sub
    
    Private Function ShouldSerializeVAQUATIC() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVBRU() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVAREAOFUSE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVCOMMONNAME() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVCOUNTRY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVDECISIONS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVDISTRIBAQUA() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVDISTRIBBRU() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVDISTRIBCTY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVFAMILY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVGENUS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVHIGHCOMMON() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVHIGHDECISIONS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVHIGHLEGAL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVHIGHQUOTAS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVHIGHSYNONYMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVKINGDOM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVLEGAL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVLEGALNAME() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVLEVELOFUSE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVNOTIFICATION() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVPART() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVQUOTAS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVQUOTASOURCE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVQUOTATERMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVSPECIES() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVSYNLINK() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVTAXCLASS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVTAXORDER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVTAXPHYLUM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVUSED() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVUSETYPE() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub VAQUATICRowChangeEventHandler(ByVal sender As Object, ByVal e As VAQUATICRowChangeEvent)
    
    Public Delegate Sub VBRURowChangeEventHandler(ByVal sender As Object, ByVal e As VBRURowChangeEvent)
    
    Public Delegate Sub VAREAOFUSERowChangeEventHandler(ByVal sender As Object, ByVal e As VAREAOFUSERowChangeEvent)
    
    Public Delegate Sub VCOMMONNAMERowChangeEventHandler(ByVal sender As Object, ByVal e As VCOMMONNAMERowChangeEvent)
    
    Public Delegate Sub VCOUNTRYRowChangeEventHandler(ByVal sender As Object, ByVal e As VCOUNTRYRowChangeEvent)
    
    Public Delegate Sub VDECISIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As VDECISIONSRowChangeEvent)
    
    Public Delegate Sub VDISTRIBAQUARowChangeEventHandler(ByVal sender As Object, ByVal e As VDISTRIBAQUARowChangeEvent)
    
    Public Delegate Sub VDISTRIBBRURowChangeEventHandler(ByVal sender As Object, ByVal e As VDISTRIBBRURowChangeEvent)
    
    Public Delegate Sub VDISTRIBCTYRowChangeEventHandler(ByVal sender As Object, ByVal e As VDISTRIBCTYRowChangeEvent)
    
    Public Delegate Sub VFAMILYRowChangeEventHandler(ByVal sender As Object, ByVal e As VFAMILYRowChangeEvent)
    
    Public Delegate Sub VGENUSRowChangeEventHandler(ByVal sender As Object, ByVal e As VGENUSRowChangeEvent)
    
    Public Delegate Sub VHIGHCOMMONRowChangeEventHandler(ByVal sender As Object, ByVal e As VHIGHCOMMONRowChangeEvent)
    
    Public Delegate Sub VHIGHDECISIONSRowChangeEventHandler(ByVal sender As Object, ByVal e As VHIGHDECISIONSRowChangeEvent)
    
    Public Delegate Sub VHIGHLEGALRowChangeEventHandler(ByVal sender As Object, ByVal e As VHIGHLEGALRowChangeEvent)
    
    Public Delegate Sub VHIGHQUOTASRowChangeEventHandler(ByVal sender As Object, ByVal e As VHIGHQUOTASRowChangeEvent)
    
    Public Delegate Sub VHIGHSYNONYMSRowChangeEventHandler(ByVal sender As Object, ByVal e As VHIGHSYNONYMSRowChangeEvent)
    
    Public Delegate Sub VKINGDOMRowChangeEventHandler(ByVal sender As Object, ByVal e As VKINGDOMRowChangeEvent)
    
    Public Delegate Sub VLEGALRowChangeEventHandler(ByVal sender As Object, ByVal e As VLEGALRowChangeEvent)
    
    Public Delegate Sub VLEGALNAMERowChangeEventHandler(ByVal sender As Object, ByVal e As VLEGALNAMERowChangeEvent)
    
    Public Delegate Sub VLEVELOFUSERowChangeEventHandler(ByVal sender As Object, ByVal e As VLEVELOFUSERowChangeEvent)
    
    Public Delegate Sub VNOTIFICATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As VNOTIFICATIONRowChangeEvent)
    
    Public Delegate Sub VPARTRowChangeEventHandler(ByVal sender As Object, ByVal e As VPARTRowChangeEvent)
    
    Public Delegate Sub VQUOTASRowChangeEventHandler(ByVal sender As Object, ByVal e As VQUOTASRowChangeEvent)
    
    Public Delegate Sub VQUOTASOURCERowChangeEventHandler(ByVal sender As Object, ByVal e As VQUOTASOURCERowChangeEvent)
    
    Public Delegate Sub VQUOTATERMSRowChangeEventHandler(ByVal sender As Object, ByVal e As VQUOTATERMSRowChangeEvent)
    
    Public Delegate Sub VSPECIESRowChangeEventHandler(ByVal sender As Object, ByVal e As VSPECIESRowChangeEvent)
    
    Public Delegate Sub VSYNLINKRowChangeEventHandler(ByVal sender As Object, ByVal e As VSYNLINKRowChangeEvent)
    
    Public Delegate Sub VTAXCLASSRowChangeEventHandler(ByVal sender As Object, ByVal e As VTAXCLASSRowChangeEvent)
    
    Public Delegate Sub VTAXORDERRowChangeEventHandler(ByVal sender As Object, ByVal e As VTAXORDERRowChangeEvent)
    
    Public Delegate Sub VTAXPHYLUMRowChangeEventHandler(ByVal sender As Object, ByVal e As VTAXPHYLUMRowChangeEvent)
    
    Public Delegate Sub VUSEDRowChangeEventHandler(ByVal sender As Object, ByVal e As VUSEDRowChangeEvent)
    
    Public Delegate Sub VUSETYPERowChangeEventHandler(ByVal sender As Object, ByVal e As VUSETYPERowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VAQUATICDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAQURECID As DataColumn
        
        Private columnAQUTYPE As DataColumn
        
        Private columnAQUNAME As DataColumn
        
        Private columnAQUSUBNAME As DataColumn
        
        Private columnAQUNOTES As DataColumn
        
        Friend Sub New()
            MyBase.New("VAQUATIC")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AQURECIDColumn As DataColumn
            Get
                Return Me.columnAQURECID
            End Get
        End Property
        
        Friend ReadOnly Property AQUTYPEColumn As DataColumn
            Get
                Return Me.columnAQUTYPE
            End Get
        End Property
        
        Friend ReadOnly Property AQUNAMEColumn As DataColumn
            Get
                Return Me.columnAQUNAME
            End Get
        End Property
        
        Friend ReadOnly Property AQUSUBNAMEColumn As DataColumn
            Get
                Return Me.columnAQUSUBNAME
            End Get
        End Property
        
        Friend ReadOnly Property AQUNOTESColumn As DataColumn
            Get
                Return Me.columnAQUNOTES
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VAQUATICRow
            Get
                Return CType(Me.Rows(index),VAQUATICRow)
            End Get
        End Property
        
        Public Event VAQUATICRowChanged As VAQUATICRowChangeEventHandler
        
        Public Event VAQUATICRowChanging As VAQUATICRowChangeEventHandler
        
        Public Event VAQUATICRowDeleted As VAQUATICRowChangeEventHandler
        
        Public Event VAQUATICRowDeleting As VAQUATICRowChangeEventHandler
        
        Public Overloads Sub AddVAQUATICRow(ByVal row As VAQUATICRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVAQUATICRow(ByVal AQURECID As Long, ByVal AQUTYPE As String, ByVal AQUNAME As String, ByVal AQUSUBNAME As String, ByVal AQUNOTES As String) As VAQUATICRow
            Dim rowVAQUATICRow As VAQUATICRow = CType(Me.NewRow,VAQUATICRow)
            rowVAQUATICRow.ItemArray = New Object() {AQURECID, AQUTYPE, AQUNAME, AQUSUBNAME, AQUNOTES}
            Me.Rows.Add(rowVAQUATICRow)
            Return rowVAQUATICRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VAQUATICDataTable = CType(MyBase.Clone,VAQUATICDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VAQUATICDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAQURECID = Me.Columns("AQURECID")
            Me.columnAQUTYPE = Me.Columns("AQUTYPE")
            Me.columnAQUNAME = Me.Columns("AQUNAME")
            Me.columnAQUSUBNAME = Me.Columns("AQUSUBNAME")
            Me.columnAQUNOTES = Me.Columns("AQUNOTES")
        End Sub
        
        Private Sub InitClass()
            Me.columnAQURECID = New DataColumn("AQURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQURECID)
            Me.columnAQUTYPE = New DataColumn("AQUTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQUTYPE)
            Me.columnAQUNAME = New DataColumn("AQUNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQUNAME)
            Me.columnAQUSUBNAME = New DataColumn("AQUSUBNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQUSUBNAME)
            Me.columnAQUNOTES = New DataColumn("AQUNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQUNOTES)
            Me.columnAQURECID.AllowDBNull = false
            Me.columnAQUTYPE.AllowDBNull = false
            Me.columnAQUTYPE.MaxLength = 15
            Me.columnAQUNAME.AllowDBNull = false
            Me.columnAQUNAME.MaxLength = 50
            Me.columnAQUSUBNAME.MaxLength = 30
            Me.columnAQUNOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVAQUATICRow() As VAQUATICRow
            Return CType(Me.NewRow,VAQUATICRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VAQUATICRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VAQUATICRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VAQUATICRowChangedEvent) Is Nothing) Then
                RaiseEvent VAQUATICRowChanged(Me, New VAQUATICRowChangeEvent(CType(e.Row,VAQUATICRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VAQUATICRowChangingEvent) Is Nothing) Then
                RaiseEvent VAQUATICRowChanging(Me, New VAQUATICRowChangeEvent(CType(e.Row,VAQUATICRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VAQUATICRowDeletedEvent) Is Nothing) Then
                RaiseEvent VAQUATICRowDeleted(Me, New VAQUATICRowChangeEvent(CType(e.Row,VAQUATICRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VAQUATICRowDeletingEvent) Is Nothing) Then
                RaiseEvent VAQUATICRowDeleting(Me, New VAQUATICRowChangeEvent(CType(e.Row,VAQUATICRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVAQUATICRow(ByVal row As VAQUATICRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VAQUATICRow
        Inherits DataRow
        
        Private tableVAQUATIC As VAQUATICDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVAQUATIC = CType(Me.Table,VAQUATICDataTable)
        End Sub
        
        Public Property AQURECID As Long
            Get
                Return CType(Me(Me.tableVAQUATIC.AQURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVAQUATIC.AQURECIDColumn) = value
            End Set
        End Property
        
        Public Property AQUTYPE As String
            Get
                Return CType(Me(Me.tableVAQUATIC.AQUTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVAQUATIC.AQUTYPEColumn) = value
            End Set
        End Property
        
        Public Property AQUNAME As String
            Get
                Return CType(Me(Me.tableVAQUATIC.AQUNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVAQUATIC.AQUNAMEColumn) = value
            End Set
        End Property
        
        Public Property AQUSUBNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVAQUATIC.AQUSUBNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVAQUATIC.AQUSUBNAMEColumn) = value
            End Set
        End Property
        
        Public Property AQUNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVAQUATIC.AQUNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVAQUATIC.AQUNOTESColumn) = value
            End Set
        End Property
        
        Public Function IsAQUSUBNAMENull() As Boolean
            Return Me.IsNull(Me.tableVAQUATIC.AQUSUBNAMEColumn)
        End Function
        
        Public Sub SetAQUSUBNAMENull()
            Me(Me.tableVAQUATIC.AQUSUBNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAQUNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVAQUATIC.AQUNOTESColumn)
        End Function
        
        Public Sub SetAQUNOTESNull()
            Me(Me.tableVAQUATIC.AQUNOTESColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VAQUATICRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VAQUATICRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VAQUATICRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VAQUATICRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VBRUDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBRURECID As DataColumn
        
        Private columnBRUCTYRECID As DataColumn
        
        Private columnBRUVALID As DataColumn
        
        Private columnBRUWCMCNAME As DataColumn
        
        Private columnBRULEVEL3NAME As DataColumn
        
        Private columnBRULEVEL4CODE As DataColumn
        
        Private columnBRULEVEL4NAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VBRU")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BRURECIDColumn As DataColumn
            Get
                Return Me.columnBRURECID
            End Get
        End Property
        
        Friend ReadOnly Property BRUCTYRECIDColumn As DataColumn
            Get
                Return Me.columnBRUCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property BRUVALIDColumn As DataColumn
            Get
                Return Me.columnBRUVALID
            End Get
        End Property
        
        Friend ReadOnly Property BRUWCMCNAMEColumn As DataColumn
            Get
                Return Me.columnBRUWCMCNAME
            End Get
        End Property
        
        Friend ReadOnly Property BRULEVEL3NAMEColumn As DataColumn
            Get
                Return Me.columnBRULEVEL3NAME
            End Get
        End Property
        
        Friend ReadOnly Property BRULEVEL4CODEColumn As DataColumn
            Get
                Return Me.columnBRULEVEL4CODE
            End Get
        End Property
        
        Friend ReadOnly Property BRULEVEL4NAMEColumn As DataColumn
            Get
                Return Me.columnBRULEVEL4NAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VBRURow
            Get
                Return CType(Me.Rows(index),VBRURow)
            End Get
        End Property
        
        Public Event VBRURowChanged As VBRURowChangeEventHandler
        
        Public Event VBRURowChanging As VBRURowChangeEventHandler
        
        Public Event VBRURowDeleted As VBRURowChangeEventHandler
        
        Public Event VBRURowDeleting As VBRURowChangeEventHandler
        
        Public Overloads Sub AddVBRURow(ByVal row As VBRURow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVBRURow(ByVal BRURECID As Long, ByVal BRUCTYRECID As Long, ByVal BRUVALID As Boolean, ByVal BRUWCMCNAME As String, ByVal BRULEVEL3NAME As String, ByVal BRULEVEL4CODE As String, ByVal BRULEVEL4NAME As String) As VBRURow
            Dim rowVBRURow As VBRURow = CType(Me.NewRow,VBRURow)
            rowVBRURow.ItemArray = New Object() {BRURECID, BRUCTYRECID, BRUVALID, BRUWCMCNAME, BRULEVEL3NAME, BRULEVEL4CODE, BRULEVEL4NAME}
            Me.Rows.Add(rowVBRURow)
            Return rowVBRURow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VBRUDataTable = CType(MyBase.Clone,VBRUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VBRUDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBRURECID = Me.Columns("BRURECID")
            Me.columnBRUCTYRECID = Me.Columns("BRUCTYRECID")
            Me.columnBRUVALID = Me.Columns("BRUVALID")
            Me.columnBRUWCMCNAME = Me.Columns("BRUWCMCNAME")
            Me.columnBRULEVEL3NAME = Me.Columns("BRULEVEL3NAME")
            Me.columnBRULEVEL4CODE = Me.Columns("BRULEVEL4CODE")
            Me.columnBRULEVEL4NAME = Me.Columns("BRULEVEL4NAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnBRURECID = New DataColumn("BRURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRURECID)
            Me.columnBRUCTYRECID = New DataColumn("BRUCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRUCTYRECID)
            Me.columnBRUVALID = New DataColumn("BRUVALID", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRUVALID)
            Me.columnBRUWCMCNAME = New DataColumn("BRUWCMCNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRUWCMCNAME)
            Me.columnBRULEVEL3NAME = New DataColumn("BRULEVEL3NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRULEVEL3NAME)
            Me.columnBRULEVEL4CODE = New DataColumn("BRULEVEL4CODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRULEVEL4CODE)
            Me.columnBRULEVEL4NAME = New DataColumn("BRULEVEL4NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBRULEVEL4NAME)
            Me.columnBRURECID.AllowDBNull = false
            Me.columnBRUCTYRECID.AllowDBNull = false
            Me.columnBRUVALID.AllowDBNull = false
            Me.columnBRUWCMCNAME.MaxLength = 40
            Me.columnBRULEVEL3NAME.MaxLength = 40
            Me.columnBRULEVEL4CODE.MaxLength = 7
            Me.columnBRULEVEL4NAME.MaxLength = 40
        End Sub
        
        Public Function NewVBRURow() As VBRURow
            Return CType(Me.NewRow,VBRURow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VBRURow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VBRURow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VBRURowChangedEvent) Is Nothing) Then
                RaiseEvent VBRURowChanged(Me, New VBRURowChangeEvent(CType(e.Row,VBRURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VBRURowChangingEvent) Is Nothing) Then
                RaiseEvent VBRURowChanging(Me, New VBRURowChangeEvent(CType(e.Row,VBRURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VBRURowDeletedEvent) Is Nothing) Then
                RaiseEvent VBRURowDeleted(Me, New VBRURowChangeEvent(CType(e.Row,VBRURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VBRURowDeletingEvent) Is Nothing) Then
                RaiseEvent VBRURowDeleting(Me, New VBRURowChangeEvent(CType(e.Row,VBRURow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVBRURow(ByVal row As VBRURow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VBRURow
        Inherits DataRow
        
        Private tableVBRU As VBRUDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVBRU = CType(Me.Table,VBRUDataTable)
        End Sub
        
        Public Property BRURECID As Long
            Get
                Return CType(Me(Me.tableVBRU.BRURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVBRU.BRURECIDColumn) = value
            End Set
        End Property
        
        Public Property BRUCTYRECID As Long
            Get
                Return CType(Me(Me.tableVBRU.BRUCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVBRU.BRUCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property BRUVALID As Boolean
            Get
                Return CType(Me(Me.tableVBRU.BRUVALIDColumn),Boolean)
            End Get
            Set
                Me(Me.tableVBRU.BRUVALIDColumn) = value
            End Set
        End Property
        
        Public Property BRUWCMCNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVBRU.BRUWCMCNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBRU.BRUWCMCNAMEColumn) = value
            End Set
        End Property
        
        Public Property BRULEVEL3NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVBRU.BRULEVEL3NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBRU.BRULEVEL3NAMEColumn) = value
            End Set
        End Property
        
        Public Property BRULEVEL4CODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVBRU.BRULEVEL4CODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBRU.BRULEVEL4CODEColumn) = value
            End Set
        End Property
        
        Public Property BRULEVEL4NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVBRU.BRULEVEL4NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVBRU.BRULEVEL4NAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBRUWCMCNAMENull() As Boolean
            Return Me.IsNull(Me.tableVBRU.BRUWCMCNAMEColumn)
        End Function
        
        Public Sub SetBRUWCMCNAMENull()
            Me(Me.tableVBRU.BRUWCMCNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBRULEVEL3NAMENull() As Boolean
            Return Me.IsNull(Me.tableVBRU.BRULEVEL3NAMEColumn)
        End Function
        
        Public Sub SetBRULEVEL3NAMENull()
            Me(Me.tableVBRU.BRULEVEL3NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBRULEVEL4CODENull() As Boolean
            Return Me.IsNull(Me.tableVBRU.BRULEVEL4CODEColumn)
        End Function
        
        Public Sub SetBRULEVEL4CODENull()
            Me(Me.tableVBRU.BRULEVEL4CODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBRULEVEL4NAMENull() As Boolean
            Return Me.IsNull(Me.tableVBRU.BRULEVEL4NAMEColumn)
        End Function
        
        Public Sub SetBRULEVEL4NAMENull()
            Me(Me.tableVBRU.BRULEVEL4NAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VBRURowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VBRURow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VBRURow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VBRURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VAREAOFUSEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAOURECID As DataColumn
        
        Private columnAOUDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("VAREAOFUSE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AOURECIDColumn As DataColumn
            Get
                Return Me.columnAOURECID
            End Get
        End Property
        
        Friend ReadOnly Property AOUDESCColumn As DataColumn
            Get
                Return Me.columnAOUDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VAREAOFUSERow
            Get
                Return CType(Me.Rows(index),VAREAOFUSERow)
            End Get
        End Property
        
        Public Event VAREAOFUSERowChanged As VAREAOFUSERowChangeEventHandler
        
        Public Event VAREAOFUSERowChanging As VAREAOFUSERowChangeEventHandler
        
        Public Event VAREAOFUSERowDeleted As VAREAOFUSERowChangeEventHandler
        
        Public Event VAREAOFUSERowDeleting As VAREAOFUSERowChangeEventHandler
        
        Public Overloads Sub AddVAREAOFUSERow(ByVal row As VAREAOFUSERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVAREAOFUSERow(ByVal AOURECID As Long, ByVal AOUDESC As String) As VAREAOFUSERow
            Dim rowVAREAOFUSERow As VAREAOFUSERow = CType(Me.NewRow,VAREAOFUSERow)
            rowVAREAOFUSERow.ItemArray = New Object() {AOURECID, AOUDESC}
            Me.Rows.Add(rowVAREAOFUSERow)
            Return rowVAREAOFUSERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VAREAOFUSEDataTable = CType(MyBase.Clone,VAREAOFUSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VAREAOFUSEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAOURECID = Me.Columns("AOURECID")
            Me.columnAOUDESC = Me.Columns("AOUDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnAOURECID = New DataColumn("AOURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAOURECID)
            Me.columnAOUDESC = New DataColumn("AOUDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAOUDESC)
            Me.columnAOURECID.AllowDBNull = false
            Me.columnAOUDESC.AllowDBNull = false
            Me.columnAOUDESC.MaxLength = 70
        End Sub
        
        Public Function NewVAREAOFUSERow() As VAREAOFUSERow
            Return CType(Me.NewRow,VAREAOFUSERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VAREAOFUSERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VAREAOFUSERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VAREAOFUSERowChangedEvent) Is Nothing) Then
                RaiseEvent VAREAOFUSERowChanged(Me, New VAREAOFUSERowChangeEvent(CType(e.Row,VAREAOFUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VAREAOFUSERowChangingEvent) Is Nothing) Then
                RaiseEvent VAREAOFUSERowChanging(Me, New VAREAOFUSERowChangeEvent(CType(e.Row,VAREAOFUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VAREAOFUSERowDeletedEvent) Is Nothing) Then
                RaiseEvent VAREAOFUSERowDeleted(Me, New VAREAOFUSERowChangeEvent(CType(e.Row,VAREAOFUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VAREAOFUSERowDeletingEvent) Is Nothing) Then
                RaiseEvent VAREAOFUSERowDeleting(Me, New VAREAOFUSERowChangeEvent(CType(e.Row,VAREAOFUSERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVAREAOFUSERow(ByVal row As VAREAOFUSERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VAREAOFUSERow
        Inherits DataRow
        
        Private tableVAREAOFUSE As VAREAOFUSEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVAREAOFUSE = CType(Me.Table,VAREAOFUSEDataTable)
        End Sub
        
        Public Property AOURECID As Long
            Get
                Return CType(Me(Me.tableVAREAOFUSE.AOURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVAREAOFUSE.AOURECIDColumn) = value
            End Set
        End Property
        
        Public Property AOUDESC As String
            Get
                Return CType(Me(Me.tableVAREAOFUSE.AOUDESCColumn),String)
            End Get
            Set
                Me(Me.tableVAREAOFUSE.AOUDESCColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VAREAOFUSERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VAREAOFUSERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VAREAOFUSERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VAREAOFUSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VCOMMONNAMEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOMRECID As DataColumn
        
        Private columnCOMAOURECID As DataColumn
        
        Private columnCOMSPCRECID As DataColumn
        
        Private columnCOMCODE As DataColumn
        
        Private columnCOMNAME As DataColumn
        
        Private columnCOMPRODUCTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VCOMMONNAME")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COMRECIDColumn As DataColumn
            Get
                Return Me.columnCOMRECID
            End Get
        End Property
        
        Friend ReadOnly Property COMAOURECIDColumn As DataColumn
            Get
                Return Me.columnCOMAOURECID
            End Get
        End Property
        
        Friend ReadOnly Property COMSPCRECIDColumn As DataColumn
            Get
                Return Me.columnCOMSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property COMCODEColumn As DataColumn
            Get
                Return Me.columnCOMCODE
            End Get
        End Property
        
        Friend ReadOnly Property COMNAMEColumn As DataColumn
            Get
                Return Me.columnCOMNAME
            End Get
        End Property
        
        Friend ReadOnly Property COMPRODUCTNAMEColumn As DataColumn
            Get
                Return Me.columnCOMPRODUCTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VCOMMONNAMERow
            Get
                Return CType(Me.Rows(index),VCOMMONNAMERow)
            End Get
        End Property
        
        Public Event VCOMMONNAMERowChanged As VCOMMONNAMERowChangeEventHandler
        
        Public Event VCOMMONNAMERowChanging As VCOMMONNAMERowChangeEventHandler
        
        Public Event VCOMMONNAMERowDeleted As VCOMMONNAMERowChangeEventHandler
        
        Public Event VCOMMONNAMERowDeleting As VCOMMONNAMERowChangeEventHandler
        
        Public Overloads Sub AddVCOMMONNAMERow(ByVal row As VCOMMONNAMERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVCOMMONNAMERow(ByVal COMRECID As Long, ByVal COMAOURECID As Long, ByVal COMSPCRECID As Long, ByVal COMCODE As String, ByVal COMNAME As String, ByVal COMPRODUCTNAME As Boolean) As VCOMMONNAMERow
            Dim rowVCOMMONNAMERow As VCOMMONNAMERow = CType(Me.NewRow,VCOMMONNAMERow)
            rowVCOMMONNAMERow.ItemArray = New Object() {COMRECID, COMAOURECID, COMSPCRECID, COMCODE, COMNAME, COMPRODUCTNAME}
            Me.Rows.Add(rowVCOMMONNAMERow)
            Return rowVCOMMONNAMERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VCOMMONNAMEDataTable = CType(MyBase.Clone,VCOMMONNAMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VCOMMONNAMEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOMRECID = Me.Columns("COMRECID")
            Me.columnCOMAOURECID = Me.Columns("COMAOURECID")
            Me.columnCOMSPCRECID = Me.Columns("COMSPCRECID")
            Me.columnCOMCODE = Me.Columns("COMCODE")
            Me.columnCOMNAME = Me.Columns("COMNAME")
            Me.columnCOMPRODUCTNAME = Me.Columns("COMPRODUCTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOMRECID = New DataColumn("COMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMRECID)
            Me.columnCOMAOURECID = New DataColumn("COMAOURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMAOURECID)
            Me.columnCOMSPCRECID = New DataColumn("COMSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMSPCRECID)
            Me.columnCOMCODE = New DataColumn("COMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMCODE)
            Me.columnCOMNAME = New DataColumn("COMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMNAME)
            Me.columnCOMPRODUCTNAME = New DataColumn("COMPRODUCTNAME", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPRODUCTNAME)
            Me.columnCOMRECID.AllowDBNull = false
            Me.columnCOMAOURECID.AllowDBNull = false
            Me.columnCOMSPCRECID.AllowDBNull = false
            Me.columnCOMCODE.AllowDBNull = false
            Me.columnCOMCODE.MaxLength = 3
            Me.columnCOMNAME.AllowDBNull = false
            Me.columnCOMNAME.MaxLength = 250
            Me.columnCOMPRODUCTNAME.AllowDBNull = false
        End Sub
        
        Public Function NewVCOMMONNAMERow() As VCOMMONNAMERow
            Return CType(Me.NewRow,VCOMMONNAMERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VCOMMONNAMERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VCOMMONNAMERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VCOMMONNAMERowChangedEvent) Is Nothing) Then
                RaiseEvent VCOMMONNAMERowChanged(Me, New VCOMMONNAMERowChangeEvent(CType(e.Row,VCOMMONNAMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VCOMMONNAMERowChangingEvent) Is Nothing) Then
                RaiseEvent VCOMMONNAMERowChanging(Me, New VCOMMONNAMERowChangeEvent(CType(e.Row,VCOMMONNAMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VCOMMONNAMERowDeletedEvent) Is Nothing) Then
                RaiseEvent VCOMMONNAMERowDeleted(Me, New VCOMMONNAMERowChangeEvent(CType(e.Row,VCOMMONNAMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VCOMMONNAMERowDeletingEvent) Is Nothing) Then
                RaiseEvent VCOMMONNAMERowDeleting(Me, New VCOMMONNAMERowChangeEvent(CType(e.Row,VCOMMONNAMERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVCOMMONNAMERow(ByVal row As VCOMMONNAMERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VCOMMONNAMERow
        Inherits DataRow
        
        Private tableVCOMMONNAME As VCOMMONNAMEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVCOMMONNAME = CType(Me.Table,VCOMMONNAMEDataTable)
        End Sub
        
        Public Property COMRECID As Long
            Get
                Return CType(Me(Me.tableVCOMMONNAME.COMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVCOMMONNAME.COMRECIDColumn) = value
            End Set
        End Property
        
        Public Property COMAOURECID As Long
            Get
                Return CType(Me(Me.tableVCOMMONNAME.COMAOURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVCOMMONNAME.COMAOURECIDColumn) = value
            End Set
        End Property
        
        Public Property COMSPCRECID As Long
            Get
                Return CType(Me(Me.tableVCOMMONNAME.COMSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVCOMMONNAME.COMSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property COMCODE As String
            Get
                Return CType(Me(Me.tableVCOMMONNAME.COMCODEColumn),String)
            End Get
            Set
                Me(Me.tableVCOMMONNAME.COMCODEColumn) = value
            End Set
        End Property
        
        Public Property COMNAME As String
            Get
                Return CType(Me(Me.tableVCOMMONNAME.COMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVCOMMONNAME.COMNAMEColumn) = value
            End Set
        End Property
        
        Public Property COMPRODUCTNAME As Boolean
            Get
                Return CType(Me(Me.tableVCOMMONNAME.COMPRODUCTNAMEColumn),Boolean)
            End Get
            Set
                Me(Me.tableVCOMMONNAME.COMPRODUCTNAMEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VCOMMONNAMERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VCOMMONNAMERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VCOMMONNAMERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VCOMMONNAMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VCOUNTRYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCTYRECID As DataColumn
        
        Private columnCTYISO3166 As DataColumn
        
        Private columnCTYBRU As DataColumn
        
        Private columnCTYISO2 As DataColumn
        
        Private columnCTYISO3 As DataColumn
        
        Private columnCTYSHORT As DataColumn
        
        Private columnCTYLONG As DataColumn
        
        Private columnCTYPARENTISO3 As DataColumn
        
        Friend Sub New()
            MyBase.New("VCOUNTRY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CTYRECIDColumn As DataColumn
            Get
                Return Me.columnCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property CTYISO3166Column As DataColumn
            Get
                Return Me.columnCTYISO3166
            End Get
        End Property
        
        Friend ReadOnly Property CTYBRUColumn As DataColumn
            Get
                Return Me.columnCTYBRU
            End Get
        End Property
        
        Friend ReadOnly Property CTYISO2Column As DataColumn
            Get
                Return Me.columnCTYISO2
            End Get
        End Property
        
        Friend ReadOnly Property CTYISO3Column As DataColumn
            Get
                Return Me.columnCTYISO3
            End Get
        End Property
        
        Friend ReadOnly Property CTYSHORTColumn As DataColumn
            Get
                Return Me.columnCTYSHORT
            End Get
        End Property
        
        Friend ReadOnly Property CTYLONGColumn As DataColumn
            Get
                Return Me.columnCTYLONG
            End Get
        End Property
        
        Friend ReadOnly Property CTYPARENTISO3Column As DataColumn
            Get
                Return Me.columnCTYPARENTISO3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VCOUNTRYRow
            Get
                Return CType(Me.Rows(index),VCOUNTRYRow)
            End Get
        End Property
        
        Public Event VCOUNTRYRowChanged As VCOUNTRYRowChangeEventHandler
        
        Public Event VCOUNTRYRowChanging As VCOUNTRYRowChangeEventHandler
        
        Public Event VCOUNTRYRowDeleted As VCOUNTRYRowChangeEventHandler
        
        Public Event VCOUNTRYRowDeleting As VCOUNTRYRowChangeEventHandler
        
        Public Overloads Sub AddVCOUNTRYRow(ByVal row As VCOUNTRYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVCOUNTRYRow(ByVal CTYRECID As Long, ByVal CTYISO3166 As Boolean, ByVal CTYBRU As Boolean, ByVal CTYISO2 As String, ByVal CTYISO3 As String, ByVal CTYSHORT As String, ByVal CTYLONG As String, ByVal CTYPARENTISO3 As String) As VCOUNTRYRow
            Dim rowVCOUNTRYRow As VCOUNTRYRow = CType(Me.NewRow,VCOUNTRYRow)
            rowVCOUNTRYRow.ItemArray = New Object() {CTYRECID, CTYISO3166, CTYBRU, CTYISO2, CTYISO3, CTYSHORT, CTYLONG, CTYPARENTISO3}
            Me.Rows.Add(rowVCOUNTRYRow)
            Return rowVCOUNTRYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VCOUNTRYDataTable = CType(MyBase.Clone,VCOUNTRYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VCOUNTRYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCTYRECID = Me.Columns("CTYRECID")
            Me.columnCTYISO3166 = Me.Columns("CTYISO3166")
            Me.columnCTYBRU = Me.Columns("CTYBRU")
            Me.columnCTYISO2 = Me.Columns("CTYISO2")
            Me.columnCTYISO3 = Me.Columns("CTYISO3")
            Me.columnCTYSHORT = Me.Columns("CTYSHORT")
            Me.columnCTYLONG = Me.Columns("CTYLONG")
            Me.columnCTYPARENTISO3 = Me.Columns("CTYPARENTISO3")
        End Sub
        
        Private Sub InitClass()
            Me.columnCTYRECID = New DataColumn("CTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYRECID)
            Me.columnCTYISO3166 = New DataColumn("CTYISO3166", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYISO3166)
            Me.columnCTYBRU = New DataColumn("CTYBRU", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYBRU)
            Me.columnCTYISO2 = New DataColumn("CTYISO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYISO2)
            Me.columnCTYISO3 = New DataColumn("CTYISO3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYISO3)
            Me.columnCTYSHORT = New DataColumn("CTYSHORT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYSHORT)
            Me.columnCTYLONG = New DataColumn("CTYLONG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYLONG)
            Me.columnCTYPARENTISO3 = New DataColumn("CTYPARENTISO3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTYPARENTISO3)
            Me.columnCTYRECID.AllowDBNull = false
            Me.columnCTYISO3166.AllowDBNull = false
            Me.columnCTYBRU.AllowDBNull = false
            Me.columnCTYISO2.MaxLength = 2
            Me.columnCTYISO3.MaxLength = 3
            Me.columnCTYSHORT.AllowDBNull = false
            Me.columnCTYSHORT.MaxLength = 50
            Me.columnCTYLONG.MaxLength = 70
            Me.columnCTYPARENTISO3.MaxLength = 3
        End Sub
        
        Public Function NewVCOUNTRYRow() As VCOUNTRYRow
            Return CType(Me.NewRow,VCOUNTRYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VCOUNTRYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VCOUNTRYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VCOUNTRYRowChangedEvent) Is Nothing) Then
                RaiseEvent VCOUNTRYRowChanged(Me, New VCOUNTRYRowChangeEvent(CType(e.Row,VCOUNTRYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VCOUNTRYRowChangingEvent) Is Nothing) Then
                RaiseEvent VCOUNTRYRowChanging(Me, New VCOUNTRYRowChangeEvent(CType(e.Row,VCOUNTRYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VCOUNTRYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VCOUNTRYRowDeleted(Me, New VCOUNTRYRowChangeEvent(CType(e.Row,VCOUNTRYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VCOUNTRYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VCOUNTRYRowDeleting(Me, New VCOUNTRYRowChangeEvent(CType(e.Row,VCOUNTRYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVCOUNTRYRow(ByVal row As VCOUNTRYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VCOUNTRYRow
        Inherits DataRow
        
        Private tableVCOUNTRY As VCOUNTRYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVCOUNTRY = CType(Me.Table,VCOUNTRYDataTable)
        End Sub
        
        Public Property CTYRECID As Long
            Get
                Return CType(Me(Me.tableVCOUNTRY.CTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property CTYISO3166 As Boolean
            Get
                Return CType(Me(Me.tableVCOUNTRY.CTYISO3166Column),Boolean)
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYISO3166Column) = value
            End Set
        End Property
        
        Public Property CTYBRU As Boolean
            Get
                Return CType(Me(Me.tableVCOUNTRY.CTYBRUColumn),Boolean)
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYBRUColumn) = value
            End Set
        End Property
        
        Public Property CTYISO2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVCOUNTRY.CTYISO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYISO2Column) = value
            End Set
        End Property
        
        Public Property CTYISO3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVCOUNTRY.CTYISO3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYISO3Column) = value
            End Set
        End Property
        
        Public Property CTYSHORT As String
            Get
                Return CType(Me(Me.tableVCOUNTRY.CTYSHORTColumn),String)
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYSHORTColumn) = value
            End Set
        End Property
        
        Public Property CTYLONG As String
            Get
                Try 
                    Return CType(Me(Me.tableVCOUNTRY.CTYLONGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYLONGColumn) = value
            End Set
        End Property
        
        Public Property CTYPARENTISO3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVCOUNTRY.CTYPARENTISO3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVCOUNTRY.CTYPARENTISO3Column) = value
            End Set
        End Property
        
        Public Function IsCTYISO2Null() As Boolean
            Return Me.IsNull(Me.tableVCOUNTRY.CTYISO2Column)
        End Function
        
        Public Sub SetCTYISO2Null()
            Me(Me.tableVCOUNTRY.CTYISO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCTYISO3Null() As Boolean
            Return Me.IsNull(Me.tableVCOUNTRY.CTYISO3Column)
        End Function
        
        Public Sub SetCTYISO3Null()
            Me(Me.tableVCOUNTRY.CTYISO3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCTYLONGNull() As Boolean
            Return Me.IsNull(Me.tableVCOUNTRY.CTYLONGColumn)
        End Function
        
        Public Sub SetCTYLONGNull()
            Me(Me.tableVCOUNTRY.CTYLONGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCTYPARENTISO3Null() As Boolean
            Return Me.IsNull(Me.tableVCOUNTRY.CTYPARENTISO3Column)
        End Function
        
        Public Sub SetCTYPARENTISO3Null()
            Me(Me.tableVCOUNTRY.CTYPARENTISO3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VCOUNTRYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VCOUNTRYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VCOUNTRYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VCOUNTRYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDECISIONSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDECRECID As DataColumn
        
        Private columnDECSPCRECID As DataColumn
        
        Private columnDECCTYRECID As DataColumn
        
        Private columnDECCODE As DataColumn
        
        Private columnDECLEVEL As DataColumn
        
        Private columnDECOPINION As DataColumn
        
        Private columnDECDATE As DataColumn
        
        Private columnDECSUBPARA46 As DataColumn
        
        Private columnDECNOTES As DataColumn
        
        Private columnDECMISC As DataColumn
        
        Friend Sub New()
            MyBase.New("VDECISIONS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DECRECIDColumn As DataColumn
            Get
                Return Me.columnDECRECID
            End Get
        End Property
        
        Friend ReadOnly Property DECSPCRECIDColumn As DataColumn
            Get
                Return Me.columnDECSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property DECCTYRECIDColumn As DataColumn
            Get
                Return Me.columnDECCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property DECCODEColumn As DataColumn
            Get
                Return Me.columnDECCODE
            End Get
        End Property
        
        Friend ReadOnly Property DECLEVELColumn As DataColumn
            Get
                Return Me.columnDECLEVEL
            End Get
        End Property
        
        Friend ReadOnly Property DECOPINIONColumn As DataColumn
            Get
                Return Me.columnDECOPINION
            End Get
        End Property
        
        Friend ReadOnly Property DECDATEColumn As DataColumn
            Get
                Return Me.columnDECDATE
            End Get
        End Property
        
        Friend ReadOnly Property DECSUBPARA46Column As DataColumn
            Get
                Return Me.columnDECSUBPARA46
            End Get
        End Property
        
        Friend ReadOnly Property DECNOTESColumn As DataColumn
            Get
                Return Me.columnDECNOTES
            End Get
        End Property
        
        Friend ReadOnly Property DECMISCColumn As DataColumn
            Get
                Return Me.columnDECMISC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDECISIONSRow
            Get
                Return CType(Me.Rows(index),VDECISIONSRow)
            End Get
        End Property
        
        Public Event VDECISIONSRowChanged As VDECISIONSRowChangeEventHandler
        
        Public Event VDECISIONSRowChanging As VDECISIONSRowChangeEventHandler
        
        Public Event VDECISIONSRowDeleted As VDECISIONSRowChangeEventHandler
        
        Public Event VDECISIONSRowDeleting As VDECISIONSRowChangeEventHandler
        
        Public Overloads Sub AddVDECISIONSRow(ByVal row As VDECISIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVDECISIONSRow(ByVal DECRECID As Long, ByVal DECSPCRECID As Long, ByVal DECCTYRECID As Long, ByVal DECCODE As String, ByVal DECLEVEL As String, ByVal DECOPINION As String, ByVal DECDATE As Date, ByVal DECSUBPARA46 As String, ByVal DECNOTES As String, ByVal DECMISC As String) As VDECISIONSRow
            Dim rowVDECISIONSRow As VDECISIONSRow = CType(Me.NewRow,VDECISIONSRow)
            rowVDECISIONSRow.ItemArray = New Object() {DECRECID, DECSPCRECID, DECCTYRECID, DECCODE, DECLEVEL, DECOPINION, DECDATE, DECSUBPARA46, DECNOTES, DECMISC}
            Me.Rows.Add(rowVDECISIONSRow)
            Return rowVDECISIONSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VDECISIONSDataTable = CType(MyBase.Clone,VDECISIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VDECISIONSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDECRECID = Me.Columns("DECRECID")
            Me.columnDECSPCRECID = Me.Columns("DECSPCRECID")
            Me.columnDECCTYRECID = Me.Columns("DECCTYRECID")
            Me.columnDECCODE = Me.Columns("DECCODE")
            Me.columnDECLEVEL = Me.Columns("DECLEVEL")
            Me.columnDECOPINION = Me.Columns("DECOPINION")
            Me.columnDECDATE = Me.Columns("DECDATE")
            Me.columnDECSUBPARA46 = Me.Columns("DECSUBPARA46")
            Me.columnDECNOTES = Me.Columns("DECNOTES")
            Me.columnDECMISC = Me.Columns("DECMISC")
        End Sub
        
        Private Sub InitClass()
            Me.columnDECRECID = New DataColumn("DECRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECRECID)
            Me.columnDECSPCRECID = New DataColumn("DECSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECSPCRECID)
            Me.columnDECCTYRECID = New DataColumn("DECCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECCTYRECID)
            Me.columnDECCODE = New DataColumn("DECCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECCODE)
            Me.columnDECLEVEL = New DataColumn("DECLEVEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECLEVEL)
            Me.columnDECOPINION = New DataColumn("DECOPINION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECOPINION)
            Me.columnDECDATE = New DataColumn("DECDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECDATE)
            Me.columnDECSUBPARA46 = New DataColumn("DECSUBPARA46", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECSUBPARA46)
            Me.columnDECNOTES = New DataColumn("DECNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECNOTES)
            Me.columnDECMISC = New DataColumn("DECMISC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDECMISC)
            Me.columnDECRECID.AllowDBNull = false
            Me.columnDECSPCRECID.AllowDBNull = false
            Me.columnDECCTYRECID.AllowDBNull = false
            Me.columnDECCODE.AllowDBNull = false
            Me.columnDECCODE.MaxLength = 3
            Me.columnDECLEVEL.MaxLength = 50
            Me.columnDECOPINION.MaxLength = 10
            Me.columnDECDATE.AllowDBNull = false
            Me.columnDECSUBPARA46.MaxLength = 10
            Me.columnDECNOTES.MaxLength = 2147483647
            Me.columnDECMISC.MaxLength = 50
        End Sub
        
        Public Function NewVDECISIONSRow() As VDECISIONSRow
            Return CType(Me.NewRow,VDECISIONSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VDECISIONSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VDECISIONSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDECISIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent VDECISIONSRowChanged(Me, New VDECISIONSRowChangeEvent(CType(e.Row,VDECISIONSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDECISIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent VDECISIONSRowChanging(Me, New VDECISIONSRowChangeEvent(CType(e.Row,VDECISIONSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDECISIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDECISIONSRowDeleted(Me, New VDECISIONSRowChangeEvent(CType(e.Row,VDECISIONSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDECISIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDECISIONSRowDeleting(Me, New VDECISIONSRowChangeEvent(CType(e.Row,VDECISIONSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVDECISIONSRow(ByVal row As VDECISIONSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDECISIONSRow
        Inherits DataRow
        
        Private tableVDECISIONS As VDECISIONSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDECISIONS = CType(Me.Table,VDECISIONSDataTable)
        End Sub
        
        Public Property DECRECID As Long
            Get
                Return CType(Me(Me.tableVDECISIONS.DECRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDECISIONS.DECRECIDColumn) = value
            End Set
        End Property
        
        Public Property DECSPCRECID As Long
            Get
                Return CType(Me(Me.tableVDECISIONS.DECSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDECISIONS.DECSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property DECCTYRECID As Long
            Get
                Return CType(Me(Me.tableVDECISIONS.DECCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDECISIONS.DECCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property DECCODE As String
            Get
                Return CType(Me(Me.tableVDECISIONS.DECCODEColumn),String)
            End Get
            Set
                Me(Me.tableVDECISIONS.DECCODEColumn) = value
            End Set
        End Property
        
        Public Property DECLEVEL As String
            Get
                Try 
                    Return CType(Me(Me.tableVDECISIONS.DECLEVELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDECISIONS.DECLEVELColumn) = value
            End Set
        End Property
        
        Public Property DECOPINION As String
            Get
                Try 
                    Return CType(Me(Me.tableVDECISIONS.DECOPINIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDECISIONS.DECOPINIONColumn) = value
            End Set
        End Property
        
        Public Property DECDATE As Date
            Get
                Return CType(Me(Me.tableVDECISIONS.DECDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVDECISIONS.DECDATEColumn) = value
            End Set
        End Property
        
        Public Property DECSUBPARA46 As String
            Get
                Try 
                    Return CType(Me(Me.tableVDECISIONS.DECSUBPARA46Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDECISIONS.DECSUBPARA46Column) = value
            End Set
        End Property
        
        Public Property DECNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVDECISIONS.DECNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDECISIONS.DECNOTESColumn) = value
            End Set
        End Property
        
        Public Property DECMISC As String
            Get
                Try 
                    Return CType(Me(Me.tableVDECISIONS.DECMISCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDECISIONS.DECMISCColumn) = value
            End Set
        End Property
        
        Public Function IsDECLEVELNull() As Boolean
            Return Me.IsNull(Me.tableVDECISIONS.DECLEVELColumn)
        End Function
        
        Public Sub SetDECLEVELNull()
            Me(Me.tableVDECISIONS.DECLEVELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDECOPINIONNull() As Boolean
            Return Me.IsNull(Me.tableVDECISIONS.DECOPINIONColumn)
        End Function
        
        Public Sub SetDECOPINIONNull()
            Me(Me.tableVDECISIONS.DECOPINIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDECSUBPARA46Null() As Boolean
            Return Me.IsNull(Me.tableVDECISIONS.DECSUBPARA46Column)
        End Function
        
        Public Sub SetDECSUBPARA46Null()
            Me(Me.tableVDECISIONS.DECSUBPARA46Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDECNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVDECISIONS.DECNOTESColumn)
        End Function
        
        Public Sub SetDECNOTESNull()
            Me(Me.tableVDECISIONS.DECNOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDECMISCNull() As Boolean
            Return Me.IsNull(Me.tableVDECISIONS.DECMISCColumn)
        End Function
        
        Public Sub SetDECMISCNull()
            Me(Me.tableVDECISIONS.DECMISCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDECISIONSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VDECISIONSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VDECISIONSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VDECISIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBAQUADataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDAQRECID As DataColumn
        
        Private columnDAQSPCRECID As DataColumn
        
        Private columnDAQAQURECID As DataColumn
        
        Private columnDAQDISTRIBCERTAIN As DataColumn
        
        Private columnDAQEXTINCT As DataColumn
        
        Private columnDAQINTRODUCED As DataColumn
        
        Private columnDAQREINTRODUCED As DataColumn
        
        Private columnDAQNOTES As DataColumn
        
        Friend Sub New()
            MyBase.New("VDISTRIBAQUA")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DAQRECIDColumn As DataColumn
            Get
                Return Me.columnDAQRECID
            End Get
        End Property
        
        Friend ReadOnly Property DAQSPCRECIDColumn As DataColumn
            Get
                Return Me.columnDAQSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property DAQAQURECIDColumn As DataColumn
            Get
                Return Me.columnDAQAQURECID
            End Get
        End Property
        
        Friend ReadOnly Property DAQDISTRIBCERTAINColumn As DataColumn
            Get
                Return Me.columnDAQDISTRIBCERTAIN
            End Get
        End Property
        
        Friend ReadOnly Property DAQEXTINCTColumn As DataColumn
            Get
                Return Me.columnDAQEXTINCT
            End Get
        End Property
        
        Friend ReadOnly Property DAQINTRODUCEDColumn As DataColumn
            Get
                Return Me.columnDAQINTRODUCED
            End Get
        End Property
        
        Friend ReadOnly Property DAQREINTRODUCEDColumn As DataColumn
            Get
                Return Me.columnDAQREINTRODUCED
            End Get
        End Property
        
        Friend ReadOnly Property DAQNOTESColumn As DataColumn
            Get
                Return Me.columnDAQNOTES
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDISTRIBAQUARow
            Get
                Return CType(Me.Rows(index),VDISTRIBAQUARow)
            End Get
        End Property
        
        Public Event VDISTRIBAQUARowChanged As VDISTRIBAQUARowChangeEventHandler
        
        Public Event VDISTRIBAQUARowChanging As VDISTRIBAQUARowChangeEventHandler
        
        Public Event VDISTRIBAQUARowDeleted As VDISTRIBAQUARowChangeEventHandler
        
        Public Event VDISTRIBAQUARowDeleting As VDISTRIBAQUARowChangeEventHandler
        
        Public Overloads Sub AddVDISTRIBAQUARow(ByVal row As VDISTRIBAQUARow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVDISTRIBAQUARow(ByVal DAQRECID As Long, ByVal DAQSPCRECID As Long, ByVal DAQAQURECID As Long, ByVal DAQDISTRIBCERTAIN As String, ByVal DAQEXTINCT As String, ByVal DAQINTRODUCED As String, ByVal DAQREINTRODUCED As String, ByVal DAQNOTES As String) As VDISTRIBAQUARow
            Dim rowVDISTRIBAQUARow As VDISTRIBAQUARow = CType(Me.NewRow,VDISTRIBAQUARow)
            rowVDISTRIBAQUARow.ItemArray = New Object() {DAQRECID, DAQSPCRECID, DAQAQURECID, DAQDISTRIBCERTAIN, DAQEXTINCT, DAQINTRODUCED, DAQREINTRODUCED, DAQNOTES}
            Me.Rows.Add(rowVDISTRIBAQUARow)
            Return rowVDISTRIBAQUARow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VDISTRIBAQUADataTable = CType(MyBase.Clone,VDISTRIBAQUADataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VDISTRIBAQUADataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDAQRECID = Me.Columns("DAQRECID")
            Me.columnDAQSPCRECID = Me.Columns("DAQSPCRECID")
            Me.columnDAQAQURECID = Me.Columns("DAQAQURECID")
            Me.columnDAQDISTRIBCERTAIN = Me.Columns("DAQDISTRIBCERTAIN")
            Me.columnDAQEXTINCT = Me.Columns("DAQEXTINCT")
            Me.columnDAQINTRODUCED = Me.Columns("DAQINTRODUCED")
            Me.columnDAQREINTRODUCED = Me.Columns("DAQREINTRODUCED")
            Me.columnDAQNOTES = Me.Columns("DAQNOTES")
        End Sub
        
        Private Sub InitClass()
            Me.columnDAQRECID = New DataColumn("DAQRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQRECID)
            Me.columnDAQSPCRECID = New DataColumn("DAQSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQSPCRECID)
            Me.columnDAQAQURECID = New DataColumn("DAQAQURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQAQURECID)
            Me.columnDAQDISTRIBCERTAIN = New DataColumn("DAQDISTRIBCERTAIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQDISTRIBCERTAIN)
            Me.columnDAQEXTINCT = New DataColumn("DAQEXTINCT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQEXTINCT)
            Me.columnDAQINTRODUCED = New DataColumn("DAQINTRODUCED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQINTRODUCED)
            Me.columnDAQREINTRODUCED = New DataColumn("DAQREINTRODUCED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQREINTRODUCED)
            Me.columnDAQNOTES = New DataColumn("DAQNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDAQNOTES)
            Me.columnDAQRECID.AllowDBNull = false
            Me.columnDAQSPCRECID.AllowDBNull = false
            Me.columnDAQAQURECID.AllowDBNull = false
            Me.columnDAQDISTRIBCERTAIN.AllowDBNull = false
            Me.columnDAQDISTRIBCERTAIN.MaxLength = 1
            Me.columnDAQEXTINCT.AllowDBNull = false
            Me.columnDAQEXTINCT.MaxLength = 1
            Me.columnDAQINTRODUCED.AllowDBNull = false
            Me.columnDAQINTRODUCED.MaxLength = 1
            Me.columnDAQREINTRODUCED.AllowDBNull = false
            Me.columnDAQREINTRODUCED.MaxLength = 1
            Me.columnDAQNOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVDISTRIBAQUARow() As VDISTRIBAQUARow
            Return CType(Me.NewRow,VDISTRIBAQUARow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VDISTRIBAQUARow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VDISTRIBAQUARow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDISTRIBAQUARowChangedEvent) Is Nothing) Then
                RaiseEvent VDISTRIBAQUARowChanged(Me, New VDISTRIBAQUARowChangeEvent(CType(e.Row,VDISTRIBAQUARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDISTRIBAQUARowChangingEvent) Is Nothing) Then
                RaiseEvent VDISTRIBAQUARowChanging(Me, New VDISTRIBAQUARowChangeEvent(CType(e.Row,VDISTRIBAQUARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDISTRIBAQUARowDeletedEvent) Is Nothing) Then
                RaiseEvent VDISTRIBAQUARowDeleted(Me, New VDISTRIBAQUARowChangeEvent(CType(e.Row,VDISTRIBAQUARow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDISTRIBAQUARowDeletingEvent) Is Nothing) Then
                RaiseEvent VDISTRIBAQUARowDeleting(Me, New VDISTRIBAQUARowChangeEvent(CType(e.Row,VDISTRIBAQUARow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVDISTRIBAQUARow(ByVal row As VDISTRIBAQUARow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBAQUARow
        Inherits DataRow
        
        Private tableVDISTRIBAQUA As VDISTRIBAQUADataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDISTRIBAQUA = CType(Me.Table,VDISTRIBAQUADataTable)
        End Sub
        
        Public Property DAQRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQRECIDColumn) = value
            End Set
        End Property
        
        Public Property DAQSPCRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property DAQAQURECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQAQURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQAQURECIDColumn) = value
            End Set
        End Property
        
        Public Property DAQDISTRIBCERTAIN As String
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQDISTRIBCERTAINColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQDISTRIBCERTAINColumn) = value
            End Set
        End Property
        
        Public Property DAQEXTINCT As String
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQEXTINCTColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQEXTINCTColumn) = value
            End Set
        End Property
        
        Public Property DAQINTRODUCED As String
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQINTRODUCEDColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQINTRODUCEDColumn) = value
            End Set
        End Property
        
        Public Property DAQREINTRODUCED As String
            Get
                Return CType(Me(Me.tableVDISTRIBAQUA.DAQREINTRODUCEDColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQREINTRODUCEDColumn) = value
            End Set
        End Property
        
        Public Property DAQNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVDISTRIBAQUA.DAQNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDISTRIBAQUA.DAQNOTESColumn) = value
            End Set
        End Property
        
        Public Function IsDAQNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVDISTRIBAQUA.DAQNOTESColumn)
        End Function
        
        Public Sub SetDAQNOTESNull()
            Me(Me.tableVDISTRIBAQUA.DAQNOTESColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBAQUARowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VDISTRIBAQUARow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VDISTRIBAQUARow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VDISTRIBAQUARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBBRUDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDBURECID As DataColumn
        
        Private columnDBUCTYRECID As DataColumn
        
        Private columnDBUSPCRECID As DataColumn
        
        Private columnDBUDCTRECID As DataColumn
        
        Private columnDBUBRURECID As DataColumn
        
        Private columnDBUDISTRIBCERTAIN As DataColumn
        
        Private columnDBUEXTINCT As DataColumn
        
        Private columnDBUINTRODUCED As DataColumn
        
        Private columnDBUREINTRODUCED As DataColumn
        
        Private columnDBUBREEDING As DataColumn
        
        Private columnDBUVAGRANT As DataColumn
        
        Private columnDBUNOTES As DataColumn
        
        Friend Sub New()
            MyBase.New("VDISTRIBBRU")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DBURECIDColumn As DataColumn
            Get
                Return Me.columnDBURECID
            End Get
        End Property
        
        Friend ReadOnly Property DBUCTYRECIDColumn As DataColumn
            Get
                Return Me.columnDBUCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property DBUSPCRECIDColumn As DataColumn
            Get
                Return Me.columnDBUSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property DBUDCTRECIDColumn As DataColumn
            Get
                Return Me.columnDBUDCTRECID
            End Get
        End Property
        
        Friend ReadOnly Property DBUBRURECIDColumn As DataColumn
            Get
                Return Me.columnDBUBRURECID
            End Get
        End Property
        
        Friend ReadOnly Property DBUDISTRIBCERTAINColumn As DataColumn
            Get
                Return Me.columnDBUDISTRIBCERTAIN
            End Get
        End Property
        
        Friend ReadOnly Property DBUEXTINCTColumn As DataColumn
            Get
                Return Me.columnDBUEXTINCT
            End Get
        End Property
        
        Friend ReadOnly Property DBUINTRODUCEDColumn As DataColumn
            Get
                Return Me.columnDBUINTRODUCED
            End Get
        End Property
        
        Friend ReadOnly Property DBUREINTRODUCEDColumn As DataColumn
            Get
                Return Me.columnDBUREINTRODUCED
            End Get
        End Property
        
        Friend ReadOnly Property DBUBREEDINGColumn As DataColumn
            Get
                Return Me.columnDBUBREEDING
            End Get
        End Property
        
        Friend ReadOnly Property DBUVAGRANTColumn As DataColumn
            Get
                Return Me.columnDBUVAGRANT
            End Get
        End Property
        
        Friend ReadOnly Property DBUNOTESColumn As DataColumn
            Get
                Return Me.columnDBUNOTES
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDISTRIBBRURow
            Get
                Return CType(Me.Rows(index),VDISTRIBBRURow)
            End Get
        End Property
        
        Public Event VDISTRIBBRURowChanged As VDISTRIBBRURowChangeEventHandler
        
        Public Event VDISTRIBBRURowChanging As VDISTRIBBRURowChangeEventHandler
        
        Public Event VDISTRIBBRURowDeleted As VDISTRIBBRURowChangeEventHandler
        
        Public Event VDISTRIBBRURowDeleting As VDISTRIBBRURowChangeEventHandler
        
        Public Overloads Sub AddVDISTRIBBRURow(ByVal row As VDISTRIBBRURow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVDISTRIBBRURow(ByVal DBURECID As Long, ByVal DBUCTYRECID As Long, ByVal DBUSPCRECID As Long, ByVal DBUDCTRECID As Long, ByVal DBUBRURECID As Long, ByVal DBUDISTRIBCERTAIN As String, ByVal DBUEXTINCT As String, ByVal DBUINTRODUCED As String, ByVal DBUREINTRODUCED As String, ByVal DBUBREEDING As String, ByVal DBUVAGRANT As String, ByVal DBUNOTES As String) As VDISTRIBBRURow
            Dim rowVDISTRIBBRURow As VDISTRIBBRURow = CType(Me.NewRow,VDISTRIBBRURow)
            rowVDISTRIBBRURow.ItemArray = New Object() {DBURECID, DBUCTYRECID, DBUSPCRECID, DBUDCTRECID, DBUBRURECID, DBUDISTRIBCERTAIN, DBUEXTINCT, DBUINTRODUCED, DBUREINTRODUCED, DBUBREEDING, DBUVAGRANT, DBUNOTES}
            Me.Rows.Add(rowVDISTRIBBRURow)
            Return rowVDISTRIBBRURow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VDISTRIBBRUDataTable = CType(MyBase.Clone,VDISTRIBBRUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VDISTRIBBRUDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDBURECID = Me.Columns("DBURECID")
            Me.columnDBUCTYRECID = Me.Columns("DBUCTYRECID")
            Me.columnDBUSPCRECID = Me.Columns("DBUSPCRECID")
            Me.columnDBUDCTRECID = Me.Columns("DBUDCTRECID")
            Me.columnDBUBRURECID = Me.Columns("DBUBRURECID")
            Me.columnDBUDISTRIBCERTAIN = Me.Columns("DBUDISTRIBCERTAIN")
            Me.columnDBUEXTINCT = Me.Columns("DBUEXTINCT")
            Me.columnDBUINTRODUCED = Me.Columns("DBUINTRODUCED")
            Me.columnDBUREINTRODUCED = Me.Columns("DBUREINTRODUCED")
            Me.columnDBUBREEDING = Me.Columns("DBUBREEDING")
            Me.columnDBUVAGRANT = Me.Columns("DBUVAGRANT")
            Me.columnDBUNOTES = Me.Columns("DBUNOTES")
        End Sub
        
        Private Sub InitClass()
            Me.columnDBURECID = New DataColumn("DBURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBURECID)
            Me.columnDBUCTYRECID = New DataColumn("DBUCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUCTYRECID)
            Me.columnDBUSPCRECID = New DataColumn("DBUSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUSPCRECID)
            Me.columnDBUDCTRECID = New DataColumn("DBUDCTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUDCTRECID)
            Me.columnDBUBRURECID = New DataColumn("DBUBRURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUBRURECID)
            Me.columnDBUDISTRIBCERTAIN = New DataColumn("DBUDISTRIBCERTAIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUDISTRIBCERTAIN)
            Me.columnDBUEXTINCT = New DataColumn("DBUEXTINCT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUEXTINCT)
            Me.columnDBUINTRODUCED = New DataColumn("DBUINTRODUCED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUINTRODUCED)
            Me.columnDBUREINTRODUCED = New DataColumn("DBUREINTRODUCED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUREINTRODUCED)
            Me.columnDBUBREEDING = New DataColumn("DBUBREEDING", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUBREEDING)
            Me.columnDBUVAGRANT = New DataColumn("DBUVAGRANT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUVAGRANT)
            Me.columnDBUNOTES = New DataColumn("DBUNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBUNOTES)
            Me.columnDBURECID.AllowDBNull = false
            Me.columnDBUCTYRECID.AllowDBNull = false
            Me.columnDBUSPCRECID.AllowDBNull = false
            Me.columnDBUDCTRECID.AllowDBNull = false
            Me.columnDBUBRURECID.AllowDBNull = false
            Me.columnDBUDISTRIBCERTAIN.AllowDBNull = false
            Me.columnDBUDISTRIBCERTAIN.MaxLength = 1
            Me.columnDBUEXTINCT.AllowDBNull = false
            Me.columnDBUEXTINCT.MaxLength = 1
            Me.columnDBUINTRODUCED.AllowDBNull = false
            Me.columnDBUINTRODUCED.MaxLength = 1
            Me.columnDBUREINTRODUCED.AllowDBNull = false
            Me.columnDBUREINTRODUCED.MaxLength = 1
            Me.columnDBUBREEDING.AllowDBNull = false
            Me.columnDBUBREEDING.MaxLength = 1
            Me.columnDBUVAGRANT.AllowDBNull = false
            Me.columnDBUVAGRANT.MaxLength = 1
            Me.columnDBUNOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVDISTRIBBRURow() As VDISTRIBBRURow
            Return CType(Me.NewRow,VDISTRIBBRURow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VDISTRIBBRURow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VDISTRIBBRURow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDISTRIBBRURowChangedEvent) Is Nothing) Then
                RaiseEvent VDISTRIBBRURowChanged(Me, New VDISTRIBBRURowChangeEvent(CType(e.Row,VDISTRIBBRURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDISTRIBBRURowChangingEvent) Is Nothing) Then
                RaiseEvent VDISTRIBBRURowChanging(Me, New VDISTRIBBRURowChangeEvent(CType(e.Row,VDISTRIBBRURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDISTRIBBRURowDeletedEvent) Is Nothing) Then
                RaiseEvent VDISTRIBBRURowDeleted(Me, New VDISTRIBBRURowChangeEvent(CType(e.Row,VDISTRIBBRURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDISTRIBBRURowDeletingEvent) Is Nothing) Then
                RaiseEvent VDISTRIBBRURowDeleting(Me, New VDISTRIBBRURowChangeEvent(CType(e.Row,VDISTRIBBRURow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVDISTRIBBRURow(ByVal row As VDISTRIBBRURow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBBRURow
        Inherits DataRow
        
        Private tableVDISTRIBBRU As VDISTRIBBRUDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDISTRIBBRU = CType(Me.Table,VDISTRIBBRUDataTable)
        End Sub
        
        Public Property DBURECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBURECIDColumn) = value
            End Set
        End Property
        
        Public Property DBUCTYRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property DBUSPCRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property DBUDCTRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUDCTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUDCTRECIDColumn) = value
            End Set
        End Property
        
        Public Property DBUBRURECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUBRURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUBRURECIDColumn) = value
            End Set
        End Property
        
        Public Property DBUDISTRIBCERTAIN As String
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUDISTRIBCERTAINColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUDISTRIBCERTAINColumn) = value
            End Set
        End Property
        
        Public Property DBUEXTINCT As String
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUEXTINCTColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUEXTINCTColumn) = value
            End Set
        End Property
        
        Public Property DBUINTRODUCED As String
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUINTRODUCEDColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUINTRODUCEDColumn) = value
            End Set
        End Property
        
        Public Property DBUREINTRODUCED As String
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUREINTRODUCEDColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUREINTRODUCEDColumn) = value
            End Set
        End Property
        
        Public Property DBUBREEDING As String
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUBREEDINGColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUBREEDINGColumn) = value
            End Set
        End Property
        
        Public Property DBUVAGRANT As String
            Get
                Return CType(Me(Me.tableVDISTRIBBRU.DBUVAGRANTColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUVAGRANTColumn) = value
            End Set
        End Property
        
        Public Property DBUNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVDISTRIBBRU.DBUNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDISTRIBBRU.DBUNOTESColumn) = value
            End Set
        End Property
        
        Public Function IsDBUNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVDISTRIBBRU.DBUNOTESColumn)
        End Function
        
        Public Sub SetDBUNOTESNull()
            Me(Me.tableVDISTRIBBRU.DBUNOTESColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBBRURowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VDISTRIBBRURow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VDISTRIBBRURow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VDISTRIBBRURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBCTYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDCTRECID As DataColumn
        
        Private columnDCTSPCRECID As DataColumn
        
        Private columnDCTCTYRECID As DataColumn
        
        Private columnDCTDISTRIBCERTAIN As DataColumn
        
        Private columnDCTEXTINCT As DataColumn
        
        Private columnDCTINTRODUCED As DataColumn
        
        Private columnDCTREINTRODUCED As DataColumn
        
        Private columnDCTBREEDING As DataColumn
        
        Private columnDCTVAGRANT As DataColumn
        
        Private columnDCTNOTES As DataColumn
        
        Friend Sub New()
            MyBase.New("VDISTRIBCTY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DCTRECIDColumn As DataColumn
            Get
                Return Me.columnDCTRECID
            End Get
        End Property
        
        Friend ReadOnly Property DCTSPCRECIDColumn As DataColumn
            Get
                Return Me.columnDCTSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property DCTCTYRECIDColumn As DataColumn
            Get
                Return Me.columnDCTCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property DCTDISTRIBCERTAINColumn As DataColumn
            Get
                Return Me.columnDCTDISTRIBCERTAIN
            End Get
        End Property
        
        Friend ReadOnly Property DCTEXTINCTColumn As DataColumn
            Get
                Return Me.columnDCTEXTINCT
            End Get
        End Property
        
        Friend ReadOnly Property DCTINTRODUCEDColumn As DataColumn
            Get
                Return Me.columnDCTINTRODUCED
            End Get
        End Property
        
        Friend ReadOnly Property DCTREINTRODUCEDColumn As DataColumn
            Get
                Return Me.columnDCTREINTRODUCED
            End Get
        End Property
        
        Friend ReadOnly Property DCTBREEDINGColumn As DataColumn
            Get
                Return Me.columnDCTBREEDING
            End Get
        End Property
        
        Friend ReadOnly Property DCTVAGRANTColumn As DataColumn
            Get
                Return Me.columnDCTVAGRANT
            End Get
        End Property
        
        Friend ReadOnly Property DCTNOTESColumn As DataColumn
            Get
                Return Me.columnDCTNOTES
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VDISTRIBCTYRow
            Get
                Return CType(Me.Rows(index),VDISTRIBCTYRow)
            End Get
        End Property
        
        Public Event VDISTRIBCTYRowChanged As VDISTRIBCTYRowChangeEventHandler
        
        Public Event VDISTRIBCTYRowChanging As VDISTRIBCTYRowChangeEventHandler
        
        Public Event VDISTRIBCTYRowDeleted As VDISTRIBCTYRowChangeEventHandler
        
        Public Event VDISTRIBCTYRowDeleting As VDISTRIBCTYRowChangeEventHandler
        
        Public Overloads Sub AddVDISTRIBCTYRow(ByVal row As VDISTRIBCTYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVDISTRIBCTYRow(ByVal DCTRECID As Long, ByVal DCTSPCRECID As Long, ByVal DCTCTYRECID As Long, ByVal DCTDISTRIBCERTAIN As String, ByVal DCTEXTINCT As String, ByVal DCTINTRODUCED As String, ByVal DCTREINTRODUCED As String, ByVal DCTBREEDING As String, ByVal DCTVAGRANT As String, ByVal DCTNOTES As String) As VDISTRIBCTYRow
            Dim rowVDISTRIBCTYRow As VDISTRIBCTYRow = CType(Me.NewRow,VDISTRIBCTYRow)
            rowVDISTRIBCTYRow.ItemArray = New Object() {DCTRECID, DCTSPCRECID, DCTCTYRECID, DCTDISTRIBCERTAIN, DCTEXTINCT, DCTINTRODUCED, DCTREINTRODUCED, DCTBREEDING, DCTVAGRANT, DCTNOTES}
            Me.Rows.Add(rowVDISTRIBCTYRow)
            Return rowVDISTRIBCTYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VDISTRIBCTYDataTable = CType(MyBase.Clone,VDISTRIBCTYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VDISTRIBCTYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDCTRECID = Me.Columns("DCTRECID")
            Me.columnDCTSPCRECID = Me.Columns("DCTSPCRECID")
            Me.columnDCTCTYRECID = Me.Columns("DCTCTYRECID")
            Me.columnDCTDISTRIBCERTAIN = Me.Columns("DCTDISTRIBCERTAIN")
            Me.columnDCTEXTINCT = Me.Columns("DCTEXTINCT")
            Me.columnDCTINTRODUCED = Me.Columns("DCTINTRODUCED")
            Me.columnDCTREINTRODUCED = Me.Columns("DCTREINTRODUCED")
            Me.columnDCTBREEDING = Me.Columns("DCTBREEDING")
            Me.columnDCTVAGRANT = Me.Columns("DCTVAGRANT")
            Me.columnDCTNOTES = Me.Columns("DCTNOTES")
        End Sub
        
        Private Sub InitClass()
            Me.columnDCTRECID = New DataColumn("DCTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTRECID)
            Me.columnDCTSPCRECID = New DataColumn("DCTSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTSPCRECID)
            Me.columnDCTCTYRECID = New DataColumn("DCTCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTCTYRECID)
            Me.columnDCTDISTRIBCERTAIN = New DataColumn("DCTDISTRIBCERTAIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTDISTRIBCERTAIN)
            Me.columnDCTEXTINCT = New DataColumn("DCTEXTINCT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTEXTINCT)
            Me.columnDCTINTRODUCED = New DataColumn("DCTINTRODUCED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTINTRODUCED)
            Me.columnDCTREINTRODUCED = New DataColumn("DCTREINTRODUCED", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTREINTRODUCED)
            Me.columnDCTBREEDING = New DataColumn("DCTBREEDING", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTBREEDING)
            Me.columnDCTVAGRANT = New DataColumn("DCTVAGRANT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTVAGRANT)
            Me.columnDCTNOTES = New DataColumn("DCTNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDCTNOTES)
            Me.columnDCTRECID.AllowDBNull = false
            Me.columnDCTSPCRECID.AllowDBNull = false
            Me.columnDCTCTYRECID.AllowDBNull = false
            Me.columnDCTDISTRIBCERTAIN.AllowDBNull = false
            Me.columnDCTDISTRIBCERTAIN.MaxLength = 1
            Me.columnDCTEXTINCT.AllowDBNull = false
            Me.columnDCTEXTINCT.MaxLength = 1
            Me.columnDCTINTRODUCED.AllowDBNull = false
            Me.columnDCTINTRODUCED.MaxLength = 1
            Me.columnDCTREINTRODUCED.AllowDBNull = false
            Me.columnDCTREINTRODUCED.MaxLength = 1
            Me.columnDCTBREEDING.AllowDBNull = false
            Me.columnDCTBREEDING.MaxLength = 1
            Me.columnDCTVAGRANT.AllowDBNull = false
            Me.columnDCTVAGRANT.MaxLength = 1
            Me.columnDCTNOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVDISTRIBCTYRow() As VDISTRIBCTYRow
            Return CType(Me.NewRow,VDISTRIBCTYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VDISTRIBCTYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VDISTRIBCTYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VDISTRIBCTYRowChangedEvent) Is Nothing) Then
                RaiseEvent VDISTRIBCTYRowChanged(Me, New VDISTRIBCTYRowChangeEvent(CType(e.Row,VDISTRIBCTYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VDISTRIBCTYRowChangingEvent) Is Nothing) Then
                RaiseEvent VDISTRIBCTYRowChanging(Me, New VDISTRIBCTYRowChangeEvent(CType(e.Row,VDISTRIBCTYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VDISTRIBCTYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VDISTRIBCTYRowDeleted(Me, New VDISTRIBCTYRowChangeEvent(CType(e.Row,VDISTRIBCTYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VDISTRIBCTYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VDISTRIBCTYRowDeleting(Me, New VDISTRIBCTYRowChangeEvent(CType(e.Row,VDISTRIBCTYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVDISTRIBCTYRow(ByVal row As VDISTRIBCTYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBCTYRow
        Inherits DataRow
        
        Private tableVDISTRIBCTY As VDISTRIBCTYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVDISTRIBCTY = CType(Me.Table,VDISTRIBCTYDataTable)
        End Sub
        
        Public Property DCTRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTRECIDColumn) = value
            End Set
        End Property
        
        Public Property DCTSPCRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property DCTCTYRECID As Long
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property DCTDISTRIBCERTAIN As String
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTDISTRIBCERTAINColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTDISTRIBCERTAINColumn) = value
            End Set
        End Property
        
        Public Property DCTEXTINCT As String
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTEXTINCTColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTEXTINCTColumn) = value
            End Set
        End Property
        
        Public Property DCTINTRODUCED As String
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTINTRODUCEDColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTINTRODUCEDColumn) = value
            End Set
        End Property
        
        Public Property DCTREINTRODUCED As String
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTREINTRODUCEDColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTREINTRODUCEDColumn) = value
            End Set
        End Property
        
        Public Property DCTBREEDING As String
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTBREEDINGColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTBREEDINGColumn) = value
            End Set
        End Property
        
        Public Property DCTVAGRANT As String
            Get
                Return CType(Me(Me.tableVDISTRIBCTY.DCTVAGRANTColumn),String)
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTVAGRANTColumn) = value
            End Set
        End Property
        
        Public Property DCTNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVDISTRIBCTY.DCTNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVDISTRIBCTY.DCTNOTESColumn) = value
            End Set
        End Property
        
        Public Function IsDCTNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVDISTRIBCTY.DCTNOTESColumn)
        End Function
        
        Public Sub SetDCTNOTESNull()
            Me(Me.tableVDISTRIBCTY.DCTNOTESColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VDISTRIBCTYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VDISTRIBCTYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VDISTRIBCTYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VDISTRIBCTYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VFAMILYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFAMRECID As DataColumn
        
        Private columnFAMORDRECID As DataColumn
        
        Private columnFAMNAME As DataColumn
        
        Private columnFAMAUTHOR As DataColumn
        
        Private columnFAMSTATUS As DataColumn
        
        Friend Sub New()
            MyBase.New("VFAMILY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FAMRECIDColumn As DataColumn
            Get
                Return Me.columnFAMRECID
            End Get
        End Property
        
        Friend ReadOnly Property FAMORDRECIDColumn As DataColumn
            Get
                Return Me.columnFAMORDRECID
            End Get
        End Property
        
        Friend ReadOnly Property FAMNAMEColumn As DataColumn
            Get
                Return Me.columnFAMNAME
            End Get
        End Property
        
        Friend ReadOnly Property FAMAUTHORColumn As DataColumn
            Get
                Return Me.columnFAMAUTHOR
            End Get
        End Property
        
        Friend ReadOnly Property FAMSTATUSColumn As DataColumn
            Get
                Return Me.columnFAMSTATUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VFAMILYRow
            Get
                Return CType(Me.Rows(index),VFAMILYRow)
            End Get
        End Property
        
        Public Event VFAMILYRowChanged As VFAMILYRowChangeEventHandler
        
        Public Event VFAMILYRowChanging As VFAMILYRowChangeEventHandler
        
        Public Event VFAMILYRowDeleted As VFAMILYRowChangeEventHandler
        
        Public Event VFAMILYRowDeleting As VFAMILYRowChangeEventHandler
        
        Public Overloads Sub AddVFAMILYRow(ByVal row As VFAMILYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVFAMILYRow(ByVal FAMRECID As Long, ByVal FAMORDRECID As Long, ByVal FAMNAME As String, ByVal FAMAUTHOR As String, ByVal FAMSTATUS As String) As VFAMILYRow
            Dim rowVFAMILYRow As VFAMILYRow = CType(Me.NewRow,VFAMILYRow)
            rowVFAMILYRow.ItemArray = New Object() {FAMRECID, FAMORDRECID, FAMNAME, FAMAUTHOR, FAMSTATUS}
            Me.Rows.Add(rowVFAMILYRow)
            Return rowVFAMILYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VFAMILYDataTable = CType(MyBase.Clone,VFAMILYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VFAMILYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFAMRECID = Me.Columns("FAMRECID")
            Me.columnFAMORDRECID = Me.Columns("FAMORDRECID")
            Me.columnFAMNAME = Me.Columns("FAMNAME")
            Me.columnFAMAUTHOR = Me.Columns("FAMAUTHOR")
            Me.columnFAMSTATUS = Me.Columns("FAMSTATUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnFAMRECID = New DataColumn("FAMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFAMRECID)
            Me.columnFAMORDRECID = New DataColumn("FAMORDRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFAMORDRECID)
            Me.columnFAMNAME = New DataColumn("FAMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFAMNAME)
            Me.columnFAMAUTHOR = New DataColumn("FAMAUTHOR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFAMAUTHOR)
            Me.columnFAMSTATUS = New DataColumn("FAMSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFAMSTATUS)
            Me.columnFAMRECID.AllowDBNull = false
            Me.columnFAMORDRECID.AllowDBNull = false
            Me.columnFAMNAME.AllowDBNull = false
            Me.columnFAMNAME.MaxLength = 50
            Me.columnFAMAUTHOR.MaxLength = 50
            Me.columnFAMSTATUS.AllowDBNull = false
            Me.columnFAMSTATUS.MaxLength = 1
        End Sub
        
        Public Function NewVFAMILYRow() As VFAMILYRow
            Return CType(Me.NewRow,VFAMILYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VFAMILYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VFAMILYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VFAMILYRowChangedEvent) Is Nothing) Then
                RaiseEvent VFAMILYRowChanged(Me, New VFAMILYRowChangeEvent(CType(e.Row,VFAMILYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VFAMILYRowChangingEvent) Is Nothing) Then
                RaiseEvent VFAMILYRowChanging(Me, New VFAMILYRowChangeEvent(CType(e.Row,VFAMILYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VFAMILYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VFAMILYRowDeleted(Me, New VFAMILYRowChangeEvent(CType(e.Row,VFAMILYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VFAMILYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VFAMILYRowDeleting(Me, New VFAMILYRowChangeEvent(CType(e.Row,VFAMILYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVFAMILYRow(ByVal row As VFAMILYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VFAMILYRow
        Inherits DataRow
        
        Private tableVFAMILY As VFAMILYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVFAMILY = CType(Me.Table,VFAMILYDataTable)
        End Sub
        
        Public Property FAMRECID As Long
            Get
                Return CType(Me(Me.tableVFAMILY.FAMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVFAMILY.FAMRECIDColumn) = value
            End Set
        End Property
        
        Public Property FAMORDRECID As Long
            Get
                Return CType(Me(Me.tableVFAMILY.FAMORDRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVFAMILY.FAMORDRECIDColumn) = value
            End Set
        End Property
        
        Public Property FAMNAME As String
            Get
                Return CType(Me(Me.tableVFAMILY.FAMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVFAMILY.FAMNAMEColumn) = value
            End Set
        End Property
        
        Public Property FAMAUTHOR As String
            Get
                Try 
                    Return CType(Me(Me.tableVFAMILY.FAMAUTHORColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVFAMILY.FAMAUTHORColumn) = value
            End Set
        End Property
        
        Public Property FAMSTATUS As String
            Get
                Return CType(Me(Me.tableVFAMILY.FAMSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVFAMILY.FAMSTATUSColumn) = value
            End Set
        End Property
        
        Public Function IsFAMAUTHORNull() As Boolean
            Return Me.IsNull(Me.tableVFAMILY.FAMAUTHORColumn)
        End Function
        
        Public Sub SetFAMAUTHORNull()
            Me(Me.tableVFAMILY.FAMAUTHORColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VFAMILYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VFAMILYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VFAMILYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VFAMILYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VGENUSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGENRECID As DataColumn
        
        Private columnGENFAMRECID As DataColumn
        
        Private columnGENNAME As DataColumn
        
        Private columnGENAUTHOR As DataColumn
        
        Private columnGENSTATUS As DataColumn
        
        Friend Sub New()
            MyBase.New("VGENUS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GENRECIDColumn As DataColumn
            Get
                Return Me.columnGENRECID
            End Get
        End Property
        
        Friend ReadOnly Property GENFAMRECIDColumn As DataColumn
            Get
                Return Me.columnGENFAMRECID
            End Get
        End Property
        
        Friend ReadOnly Property GENNAMEColumn As DataColumn
            Get
                Return Me.columnGENNAME
            End Get
        End Property
        
        Friend ReadOnly Property GENAUTHORColumn As DataColumn
            Get
                Return Me.columnGENAUTHOR
            End Get
        End Property
        
        Friend ReadOnly Property GENSTATUSColumn As DataColumn
            Get
                Return Me.columnGENSTATUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VGENUSRow
            Get
                Return CType(Me.Rows(index),VGENUSRow)
            End Get
        End Property
        
        Public Event VGENUSRowChanged As VGENUSRowChangeEventHandler
        
        Public Event VGENUSRowChanging As VGENUSRowChangeEventHandler
        
        Public Event VGENUSRowDeleted As VGENUSRowChangeEventHandler
        
        Public Event VGENUSRowDeleting As VGENUSRowChangeEventHandler
        
        Public Overloads Sub AddVGENUSRow(ByVal row As VGENUSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVGENUSRow(ByVal GENRECID As Long, ByVal GENFAMRECID As Long, ByVal GENNAME As String, ByVal GENAUTHOR As String, ByVal GENSTATUS As String) As VGENUSRow
            Dim rowVGENUSRow As VGENUSRow = CType(Me.NewRow,VGENUSRow)
            rowVGENUSRow.ItemArray = New Object() {GENRECID, GENFAMRECID, GENNAME, GENAUTHOR, GENSTATUS}
            Me.Rows.Add(rowVGENUSRow)
            Return rowVGENUSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VGENUSDataTable = CType(MyBase.Clone,VGENUSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VGENUSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGENRECID = Me.Columns("GENRECID")
            Me.columnGENFAMRECID = Me.Columns("GENFAMRECID")
            Me.columnGENNAME = Me.Columns("GENNAME")
            Me.columnGENAUTHOR = Me.Columns("GENAUTHOR")
            Me.columnGENSTATUS = Me.Columns("GENSTATUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnGENRECID = New DataColumn("GENRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGENRECID)
            Me.columnGENFAMRECID = New DataColumn("GENFAMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGENFAMRECID)
            Me.columnGENNAME = New DataColumn("GENNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGENNAME)
            Me.columnGENAUTHOR = New DataColumn("GENAUTHOR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGENAUTHOR)
            Me.columnGENSTATUS = New DataColumn("GENSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGENSTATUS)
            Me.columnGENRECID.AllowDBNull = false
            Me.columnGENFAMRECID.AllowDBNull = false
            Me.columnGENNAME.AllowDBNull = false
            Me.columnGENNAME.MaxLength = 50
            Me.columnGENAUTHOR.MaxLength = 50
            Me.columnGENSTATUS.AllowDBNull = false
            Me.columnGENSTATUS.MaxLength = 1
        End Sub
        
        Public Function NewVGENUSRow() As VGENUSRow
            Return CType(Me.NewRow,VGENUSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VGENUSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VGENUSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VGENUSRowChangedEvent) Is Nothing) Then
                RaiseEvent VGENUSRowChanged(Me, New VGENUSRowChangeEvent(CType(e.Row,VGENUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VGENUSRowChangingEvent) Is Nothing) Then
                RaiseEvent VGENUSRowChanging(Me, New VGENUSRowChangeEvent(CType(e.Row,VGENUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VGENUSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VGENUSRowDeleted(Me, New VGENUSRowChangeEvent(CType(e.Row,VGENUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VGENUSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VGENUSRowDeleting(Me, New VGENUSRowChangeEvent(CType(e.Row,VGENUSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVGENUSRow(ByVal row As VGENUSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VGENUSRow
        Inherits DataRow
        
        Private tableVGENUS As VGENUSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVGENUS = CType(Me.Table,VGENUSDataTable)
        End Sub
        
        Public Property GENRECID As Long
            Get
                Return CType(Me(Me.tableVGENUS.GENRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVGENUS.GENRECIDColumn) = value
            End Set
        End Property
        
        Public Property GENFAMRECID As Long
            Get
                Return CType(Me(Me.tableVGENUS.GENFAMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVGENUS.GENFAMRECIDColumn) = value
            End Set
        End Property
        
        Public Property GENNAME As String
            Get
                Return CType(Me(Me.tableVGENUS.GENNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVGENUS.GENNAMEColumn) = value
            End Set
        End Property
        
        Public Property GENAUTHOR As String
            Get
                Try 
                    Return CType(Me(Me.tableVGENUS.GENAUTHORColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGENUS.GENAUTHORColumn) = value
            End Set
        End Property
        
        Public Property GENSTATUS As String
            Get
                Return CType(Me(Me.tableVGENUS.GENSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVGENUS.GENSTATUSColumn) = value
            End Set
        End Property
        
        Public Function IsGENAUTHORNull() As Boolean
            Return Me.IsNull(Me.tableVGENUS.GENAUTHORColumn)
        End Function
        
        Public Sub SetGENAUTHORNull()
            Me(Me.tableVGENUS.GENAUTHORColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VGENUSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VGENUSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VGENUSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VGENUSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHCOMMONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHCOMRECID As DataColumn
        
        Private columnHCOMAOURECID As DataColumn
        
        Private columnHCOMCODE As DataColumn
        
        Private columnHCOMCODERECID As DataColumn
        
        Private columnHCOMNAME As DataColumn
        
        Private columnHCOMPRODUCTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VHIGHCOMMON")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HCOMRECIDColumn As DataColumn
            Get
                Return Me.columnHCOMRECID
            End Get
        End Property
        
        Friend ReadOnly Property HCOMAOURECIDColumn As DataColumn
            Get
                Return Me.columnHCOMAOURECID
            End Get
        End Property
        
        Friend ReadOnly Property HCOMCODEColumn As DataColumn
            Get
                Return Me.columnHCOMCODE
            End Get
        End Property
        
        Friend ReadOnly Property HCOMCODERECIDColumn As DataColumn
            Get
                Return Me.columnHCOMCODERECID
            End Get
        End Property
        
        Friend ReadOnly Property HCOMNAMEColumn As DataColumn
            Get
                Return Me.columnHCOMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HCOMPRODUCTNAMEColumn As DataColumn
            Get
                Return Me.columnHCOMPRODUCTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VHIGHCOMMONRow
            Get
                Return CType(Me.Rows(index),VHIGHCOMMONRow)
            End Get
        End Property
        
        Public Event VHIGHCOMMONRowChanged As VHIGHCOMMONRowChangeEventHandler
        
        Public Event VHIGHCOMMONRowChanging As VHIGHCOMMONRowChangeEventHandler
        
        Public Event VHIGHCOMMONRowDeleted As VHIGHCOMMONRowChangeEventHandler
        
        Public Event VHIGHCOMMONRowDeleting As VHIGHCOMMONRowChangeEventHandler
        
        Public Overloads Sub AddVHIGHCOMMONRow(ByVal row As VHIGHCOMMONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVHIGHCOMMONRow(ByVal HCOMRECID As Long, ByVal HCOMAOURECID As Long, ByVal HCOMCODE As String, ByVal HCOMCODERECID As Long, ByVal HCOMNAME As String, ByVal HCOMPRODUCTNAME As Boolean) As VHIGHCOMMONRow
            Dim rowVHIGHCOMMONRow As VHIGHCOMMONRow = CType(Me.NewRow,VHIGHCOMMONRow)
            rowVHIGHCOMMONRow.ItemArray = New Object() {HCOMRECID, HCOMAOURECID, HCOMCODE, HCOMCODERECID, HCOMNAME, HCOMPRODUCTNAME}
            Me.Rows.Add(rowVHIGHCOMMONRow)
            Return rowVHIGHCOMMONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VHIGHCOMMONDataTable = CType(MyBase.Clone,VHIGHCOMMONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VHIGHCOMMONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHCOMRECID = Me.Columns("HCOMRECID")
            Me.columnHCOMAOURECID = Me.Columns("HCOMAOURECID")
            Me.columnHCOMCODE = Me.Columns("HCOMCODE")
            Me.columnHCOMCODERECID = Me.Columns("HCOMCODERECID")
            Me.columnHCOMNAME = Me.Columns("HCOMNAME")
            Me.columnHCOMPRODUCTNAME = Me.Columns("HCOMPRODUCTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnHCOMRECID = New DataColumn("HCOMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHCOMRECID)
            Me.columnHCOMAOURECID = New DataColumn("HCOMAOURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHCOMAOURECID)
            Me.columnHCOMCODE = New DataColumn("HCOMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHCOMCODE)
            Me.columnHCOMCODERECID = New DataColumn("HCOMCODERECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHCOMCODERECID)
            Me.columnHCOMNAME = New DataColumn("HCOMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHCOMNAME)
            Me.columnHCOMPRODUCTNAME = New DataColumn("HCOMPRODUCTNAME", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHCOMPRODUCTNAME)
            Me.columnHCOMRECID.AllowDBNull = false
            Me.columnHCOMAOURECID.AllowDBNull = false
            Me.columnHCOMCODE.AllowDBNull = false
            Me.columnHCOMCODE.MaxLength = 3
            Me.columnHCOMCODERECID.AllowDBNull = false
            Me.columnHCOMNAME.AllowDBNull = false
            Me.columnHCOMNAME.MaxLength = 250
            Me.columnHCOMPRODUCTNAME.AllowDBNull = false
        End Sub
        
        Public Function NewVHIGHCOMMONRow() As VHIGHCOMMONRow
            Return CType(Me.NewRow,VHIGHCOMMONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VHIGHCOMMONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VHIGHCOMMONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VHIGHCOMMONRowChangedEvent) Is Nothing) Then
                RaiseEvent VHIGHCOMMONRowChanged(Me, New VHIGHCOMMONRowChangeEvent(CType(e.Row,VHIGHCOMMONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VHIGHCOMMONRowChangingEvent) Is Nothing) Then
                RaiseEvent VHIGHCOMMONRowChanging(Me, New VHIGHCOMMONRowChangeEvent(CType(e.Row,VHIGHCOMMONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VHIGHCOMMONRowDeletedEvent) Is Nothing) Then
                RaiseEvent VHIGHCOMMONRowDeleted(Me, New VHIGHCOMMONRowChangeEvent(CType(e.Row,VHIGHCOMMONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VHIGHCOMMONRowDeletingEvent) Is Nothing) Then
                RaiseEvent VHIGHCOMMONRowDeleting(Me, New VHIGHCOMMONRowChangeEvent(CType(e.Row,VHIGHCOMMONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVHIGHCOMMONRow(ByVal row As VHIGHCOMMONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHCOMMONRow
        Inherits DataRow
        
        Private tableVHIGHCOMMON As VHIGHCOMMONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVHIGHCOMMON = CType(Me.Table,VHIGHCOMMONDataTable)
        End Sub
        
        Public Property HCOMRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHCOMMON.HCOMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHCOMMON.HCOMRECIDColumn) = value
            End Set
        End Property
        
        Public Property HCOMAOURECID As Long
            Get
                Return CType(Me(Me.tableVHIGHCOMMON.HCOMAOURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHCOMMON.HCOMAOURECIDColumn) = value
            End Set
        End Property
        
        Public Property HCOMCODE As String
            Get
                Return CType(Me(Me.tableVHIGHCOMMON.HCOMCODEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHCOMMON.HCOMCODEColumn) = value
            End Set
        End Property
        
        Public Property HCOMCODERECID As Long
            Get
                Return CType(Me(Me.tableVHIGHCOMMON.HCOMCODERECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHCOMMON.HCOMCODERECIDColumn) = value
            End Set
        End Property
        
        Public Property HCOMNAME As String
            Get
                Return CType(Me(Me.tableVHIGHCOMMON.HCOMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHCOMMON.HCOMNAMEColumn) = value
            End Set
        End Property
        
        Public Property HCOMPRODUCTNAME As Boolean
            Get
                Return CType(Me(Me.tableVHIGHCOMMON.HCOMPRODUCTNAMEColumn),Boolean)
            End Get
            Set
                Me(Me.tableVHIGHCOMMON.HCOMPRODUCTNAMEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHCOMMONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VHIGHCOMMONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VHIGHCOMMONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VHIGHCOMMONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHDECISIONSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHDECRECID As DataColumn
        
        Private columnHDECCODE As DataColumn
        
        Private columnHDECCODERECID As DataColumn
        
        Private columnHDECCTYRECID As DataColumn
        
        Private columnHDECLEVEL As DataColumn
        
        Private columnHDECOPINION As DataColumn
        
        Private columnHDECDATE As DataColumn
        
        Private columnHDECSUBPARA46 As DataColumn
        
        Private columnHDECNOTES As DataColumn
        
        Private columnHDECMISC As DataColumn
        
        Friend Sub New()
            MyBase.New("VHIGHDECISIONS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HDECRECIDColumn As DataColumn
            Get
                Return Me.columnHDECRECID
            End Get
        End Property
        
        Friend ReadOnly Property HDECCODEColumn As DataColumn
            Get
                Return Me.columnHDECCODE
            End Get
        End Property
        
        Friend ReadOnly Property HDECCODERECIDColumn As DataColumn
            Get
                Return Me.columnHDECCODERECID
            End Get
        End Property
        
        Friend ReadOnly Property HDECCTYRECIDColumn As DataColumn
            Get
                Return Me.columnHDECCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property HDECLEVELColumn As DataColumn
            Get
                Return Me.columnHDECLEVEL
            End Get
        End Property
        
        Friend ReadOnly Property HDECOPINIONColumn As DataColumn
            Get
                Return Me.columnHDECOPINION
            End Get
        End Property
        
        Friend ReadOnly Property HDECDATEColumn As DataColumn
            Get
                Return Me.columnHDECDATE
            End Get
        End Property
        
        Friend ReadOnly Property HDECSUBPARA46Column As DataColumn
            Get
                Return Me.columnHDECSUBPARA46
            End Get
        End Property
        
        Friend ReadOnly Property HDECNOTESColumn As DataColumn
            Get
                Return Me.columnHDECNOTES
            End Get
        End Property
        
        Friend ReadOnly Property HDECMISCColumn As DataColumn
            Get
                Return Me.columnHDECMISC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VHIGHDECISIONSRow
            Get
                Return CType(Me.Rows(index),VHIGHDECISIONSRow)
            End Get
        End Property
        
        Public Event VHIGHDECISIONSRowChanged As VHIGHDECISIONSRowChangeEventHandler
        
        Public Event VHIGHDECISIONSRowChanging As VHIGHDECISIONSRowChangeEventHandler
        
        Public Event VHIGHDECISIONSRowDeleted As VHIGHDECISIONSRowChangeEventHandler
        
        Public Event VHIGHDECISIONSRowDeleting As VHIGHDECISIONSRowChangeEventHandler
        
        Public Overloads Sub AddVHIGHDECISIONSRow(ByVal row As VHIGHDECISIONSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVHIGHDECISIONSRow(ByVal HDECRECID As Long, ByVal HDECCODE As String, ByVal HDECCODERECID As Long, ByVal HDECCTYRECID As Long, ByVal HDECLEVEL As String, ByVal HDECOPINION As String, ByVal HDECDATE As Date, ByVal HDECSUBPARA46 As String, ByVal HDECNOTES As String, ByVal HDECMISC As String) As VHIGHDECISIONSRow
            Dim rowVHIGHDECISIONSRow As VHIGHDECISIONSRow = CType(Me.NewRow,VHIGHDECISIONSRow)
            rowVHIGHDECISIONSRow.ItemArray = New Object() {HDECRECID, HDECCODE, HDECCODERECID, HDECCTYRECID, HDECLEVEL, HDECOPINION, HDECDATE, HDECSUBPARA46, HDECNOTES, HDECMISC}
            Me.Rows.Add(rowVHIGHDECISIONSRow)
            Return rowVHIGHDECISIONSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VHIGHDECISIONSDataTable = CType(MyBase.Clone,VHIGHDECISIONSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VHIGHDECISIONSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHDECRECID = Me.Columns("HDECRECID")
            Me.columnHDECCODE = Me.Columns("HDECCODE")
            Me.columnHDECCODERECID = Me.Columns("HDECCODERECID")
            Me.columnHDECCTYRECID = Me.Columns("HDECCTYRECID")
            Me.columnHDECLEVEL = Me.Columns("HDECLEVEL")
            Me.columnHDECOPINION = Me.Columns("HDECOPINION")
            Me.columnHDECDATE = Me.Columns("HDECDATE")
            Me.columnHDECSUBPARA46 = Me.Columns("HDECSUBPARA46")
            Me.columnHDECNOTES = Me.Columns("HDECNOTES")
            Me.columnHDECMISC = Me.Columns("HDECMISC")
        End Sub
        
        Private Sub InitClass()
            Me.columnHDECRECID = New DataColumn("HDECRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECRECID)
            Me.columnHDECCODE = New DataColumn("HDECCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECCODE)
            Me.columnHDECCODERECID = New DataColumn("HDECCODERECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECCODERECID)
            Me.columnHDECCTYRECID = New DataColumn("HDECCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECCTYRECID)
            Me.columnHDECLEVEL = New DataColumn("HDECLEVEL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECLEVEL)
            Me.columnHDECOPINION = New DataColumn("HDECOPINION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECOPINION)
            Me.columnHDECDATE = New DataColumn("HDECDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECDATE)
            Me.columnHDECSUBPARA46 = New DataColumn("HDECSUBPARA46", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECSUBPARA46)
            Me.columnHDECNOTES = New DataColumn("HDECNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECNOTES)
            Me.columnHDECMISC = New DataColumn("HDECMISC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHDECMISC)
            Me.columnHDECRECID.AllowDBNull = false
            Me.columnHDECCODE.AllowDBNull = false
            Me.columnHDECCODERECID.AllowDBNull = false
            Me.columnHDECCTYRECID.AllowDBNull = false
            Me.columnHDECLEVEL.MaxLength = 50
            Me.columnHDECOPINION.MaxLength = 10
            Me.columnHDECDATE.AllowDBNull = false
            Me.columnHDECSUBPARA46.MaxLength = 10
            Me.columnHDECNOTES.MaxLength = 2147483647
            Me.columnHDECMISC.MaxLength = 50
        End Sub
        
        Public Function NewVHIGHDECISIONSRow() As VHIGHDECISIONSRow
            Return CType(Me.NewRow,VHIGHDECISIONSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VHIGHDECISIONSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VHIGHDECISIONSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VHIGHDECISIONSRowChangedEvent) Is Nothing) Then
                RaiseEvent VHIGHDECISIONSRowChanged(Me, New VHIGHDECISIONSRowChangeEvent(CType(e.Row,VHIGHDECISIONSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VHIGHDECISIONSRowChangingEvent) Is Nothing) Then
                RaiseEvent VHIGHDECISIONSRowChanging(Me, New VHIGHDECISIONSRowChangeEvent(CType(e.Row,VHIGHDECISIONSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VHIGHDECISIONSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VHIGHDECISIONSRowDeleted(Me, New VHIGHDECISIONSRowChangeEvent(CType(e.Row,VHIGHDECISIONSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VHIGHDECISIONSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VHIGHDECISIONSRowDeleting(Me, New VHIGHDECISIONSRowChangeEvent(CType(e.Row,VHIGHDECISIONSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVHIGHDECISIONSRow(ByVal row As VHIGHDECISIONSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHDECISIONSRow
        Inherits DataRow
        
        Private tableVHIGHDECISIONS As VHIGHDECISIONSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVHIGHDECISIONS = CType(Me.Table,VHIGHDECISIONSDataTable)
        End Sub
        
        Public Property HDECRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHDECISIONS.HDECRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECRECIDColumn) = value
            End Set
        End Property
        
        Public Property HDECCODE As String
            Get
                Return CType(Me(Me.tableVHIGHDECISIONS.HDECCODEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECCODEColumn) = value
            End Set
        End Property
        
        Public Property HDECCODERECID As Long
            Get
                Return CType(Me(Me.tableVHIGHDECISIONS.HDECCODERECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECCODERECIDColumn) = value
            End Set
        End Property
        
        Public Property HDECCTYRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHDECISIONS.HDECCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property HDECLEVEL As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHDECISIONS.HDECLEVELColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECLEVELColumn) = value
            End Set
        End Property
        
        Public Property HDECOPINION As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHDECISIONS.HDECOPINIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECOPINIONColumn) = value
            End Set
        End Property
        
        Public Property HDECDATE As Date
            Get
                Return CType(Me(Me.tableVHIGHDECISIONS.HDECDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECDATEColumn) = value
            End Set
        End Property
        
        Public Property HDECSUBPARA46 As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHDECISIONS.HDECSUBPARA46Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECSUBPARA46Column) = value
            End Set
        End Property
        
        Public Property HDECNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHDECISIONS.HDECNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECNOTESColumn) = value
            End Set
        End Property
        
        Public Property HDECMISC As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHDECISIONS.HDECMISCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHDECISIONS.HDECMISCColumn) = value
            End Set
        End Property
        
        Public Function IsHDECLEVELNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHDECISIONS.HDECLEVELColumn)
        End Function
        
        Public Sub SetHDECLEVELNull()
            Me(Me.tableVHIGHDECISIONS.HDECLEVELColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHDECOPINIONNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHDECISIONS.HDECOPINIONColumn)
        End Function
        
        Public Sub SetHDECOPINIONNull()
            Me(Me.tableVHIGHDECISIONS.HDECOPINIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHDECSUBPARA46Null() As Boolean
            Return Me.IsNull(Me.tableVHIGHDECISIONS.HDECSUBPARA46Column)
        End Function
        
        Public Sub SetHDECSUBPARA46Null()
            Me(Me.tableVHIGHDECISIONS.HDECSUBPARA46Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHDECNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHDECISIONS.HDECNOTESColumn)
        End Function
        
        Public Sub SetHDECNOTESNull()
            Me(Me.tableVHIGHDECISIONS.HDECNOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHDECMISCNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHDECISIONS.HDECMISCColumn)
        End Function
        
        Public Sub SetHDECMISCNull()
            Me(Me.tableVHIGHDECISIONS.HDECMISCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHDECISIONSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VHIGHDECISIONSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VHIGHDECISIONSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VHIGHDECISIONSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHLEGALDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHLEGRECID As DataColumn
        
        Private columnHLEGLNMRECID As DataColumn
        
        Private columnHLEGCODE As DataColumn
        
        Private columnHLEGCODERECID As DataColumn
        
        Private columnHLEGLISTING As DataColumn
        
        Private columnHLEGDATELISTED As DataColumn
        
        Private columnHLEGISO2 As DataColumn
        
        Private columnHLEGSPLITLISTED As DataColumn
        
        Private columnHLEGPROTHIGHERTAX As DataColumn
        
        Private columnHLEGNOTES As DataColumn
        
        Friend Sub New()
            MyBase.New("VHIGHLEGAL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HLEGRECIDColumn As DataColumn
            Get
                Return Me.columnHLEGRECID
            End Get
        End Property
        
        Friend ReadOnly Property HLEGLNMRECIDColumn As DataColumn
            Get
                Return Me.columnHLEGLNMRECID
            End Get
        End Property
        
        Friend ReadOnly Property HLEGCODEColumn As DataColumn
            Get
                Return Me.columnHLEGCODE
            End Get
        End Property
        
        Friend ReadOnly Property HLEGCODERECIDColumn As DataColumn
            Get
                Return Me.columnHLEGCODERECID
            End Get
        End Property
        
        Friend ReadOnly Property HLEGLISTINGColumn As DataColumn
            Get
                Return Me.columnHLEGLISTING
            End Get
        End Property
        
        Friend ReadOnly Property HLEGDATELISTEDColumn As DataColumn
            Get
                Return Me.columnHLEGDATELISTED
            End Get
        End Property
        
        Friend ReadOnly Property HLEGISO2Column As DataColumn
            Get
                Return Me.columnHLEGISO2
            End Get
        End Property
        
        Friend ReadOnly Property HLEGSPLITLISTEDColumn As DataColumn
            Get
                Return Me.columnHLEGSPLITLISTED
            End Get
        End Property
        
        Friend ReadOnly Property HLEGPROTHIGHERTAXColumn As DataColumn
            Get
                Return Me.columnHLEGPROTHIGHERTAX
            End Get
        End Property
        
        Friend ReadOnly Property HLEGNOTESColumn As DataColumn
            Get
                Return Me.columnHLEGNOTES
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VHIGHLEGALRow
            Get
                Return CType(Me.Rows(index),VHIGHLEGALRow)
            End Get
        End Property
        
        Public Event VHIGHLEGALRowChanged As VHIGHLEGALRowChangeEventHandler
        
        Public Event VHIGHLEGALRowChanging As VHIGHLEGALRowChangeEventHandler
        
        Public Event VHIGHLEGALRowDeleted As VHIGHLEGALRowChangeEventHandler
        
        Public Event VHIGHLEGALRowDeleting As VHIGHLEGALRowChangeEventHandler
        
        Public Overloads Sub AddVHIGHLEGALRow(ByVal row As VHIGHLEGALRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVHIGHLEGALRow(ByVal HLEGRECID As Long, ByVal HLEGLNMRECID As Long, ByVal HLEGCODE As String, ByVal HLEGCODERECID As Long, ByVal HLEGLISTING As String, ByVal HLEGDATELISTED As Date, ByVal HLEGISO2 As String, ByVal HLEGSPLITLISTED As Boolean, ByVal HLEGPROTHIGHERTAX As Boolean, ByVal HLEGNOTES As String) As VHIGHLEGALRow
            Dim rowVHIGHLEGALRow As VHIGHLEGALRow = CType(Me.NewRow,VHIGHLEGALRow)
            rowVHIGHLEGALRow.ItemArray = New Object() {HLEGRECID, HLEGLNMRECID, HLEGCODE, HLEGCODERECID, HLEGLISTING, HLEGDATELISTED, HLEGISO2, HLEGSPLITLISTED, HLEGPROTHIGHERTAX, HLEGNOTES}
            Me.Rows.Add(rowVHIGHLEGALRow)
            Return rowVHIGHLEGALRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VHIGHLEGALDataTable = CType(MyBase.Clone,VHIGHLEGALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VHIGHLEGALDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHLEGRECID = Me.Columns("HLEGRECID")
            Me.columnHLEGLNMRECID = Me.Columns("HLEGLNMRECID")
            Me.columnHLEGCODE = Me.Columns("HLEGCODE")
            Me.columnHLEGCODERECID = Me.Columns("HLEGCODERECID")
            Me.columnHLEGLISTING = Me.Columns("HLEGLISTING")
            Me.columnHLEGDATELISTED = Me.Columns("HLEGDATELISTED")
            Me.columnHLEGISO2 = Me.Columns("HLEGISO2")
            Me.columnHLEGSPLITLISTED = Me.Columns("HLEGSPLITLISTED")
            Me.columnHLEGPROTHIGHERTAX = Me.Columns("HLEGPROTHIGHERTAX")
            Me.columnHLEGNOTES = Me.Columns("HLEGNOTES")
        End Sub
        
        Private Sub InitClass()
            Me.columnHLEGRECID = New DataColumn("HLEGRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGRECID)
            Me.columnHLEGLNMRECID = New DataColumn("HLEGLNMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGLNMRECID)
            Me.columnHLEGCODE = New DataColumn("HLEGCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGCODE)
            Me.columnHLEGCODERECID = New DataColumn("HLEGCODERECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGCODERECID)
            Me.columnHLEGLISTING = New DataColumn("HLEGLISTING", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGLISTING)
            Me.columnHLEGDATELISTED = New DataColumn("HLEGDATELISTED", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGDATELISTED)
            Me.columnHLEGISO2 = New DataColumn("HLEGISO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGISO2)
            Me.columnHLEGSPLITLISTED = New DataColumn("HLEGSPLITLISTED", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGSPLITLISTED)
            Me.columnHLEGPROTHIGHERTAX = New DataColumn("HLEGPROTHIGHERTAX", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGPROTHIGHERTAX)
            Me.columnHLEGNOTES = New DataColumn("HLEGNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHLEGNOTES)
            Me.columnHLEGRECID.AllowDBNull = false
            Me.columnHLEGLNMRECID.AllowDBNull = false
            Me.columnHLEGCODE.AllowDBNull = false
            Me.columnHLEGCODERECID.AllowDBNull = false
            Me.columnHLEGLISTING.AllowDBNull = false
            Me.columnHLEGLISTING.MaxLength = 10
            Me.columnHLEGSPLITLISTED.AllowDBNull = false
            Me.columnHLEGPROTHIGHERTAX.AllowDBNull = false
            Me.columnHLEGNOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVHIGHLEGALRow() As VHIGHLEGALRow
            Return CType(Me.NewRow,VHIGHLEGALRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VHIGHLEGALRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VHIGHLEGALRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VHIGHLEGALRowChangedEvent) Is Nothing) Then
                RaiseEvent VHIGHLEGALRowChanged(Me, New VHIGHLEGALRowChangeEvent(CType(e.Row,VHIGHLEGALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VHIGHLEGALRowChangingEvent) Is Nothing) Then
                RaiseEvent VHIGHLEGALRowChanging(Me, New VHIGHLEGALRowChangeEvent(CType(e.Row,VHIGHLEGALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VHIGHLEGALRowDeletedEvent) Is Nothing) Then
                RaiseEvent VHIGHLEGALRowDeleted(Me, New VHIGHLEGALRowChangeEvent(CType(e.Row,VHIGHLEGALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VHIGHLEGALRowDeletingEvent) Is Nothing) Then
                RaiseEvent VHIGHLEGALRowDeleting(Me, New VHIGHLEGALRowChangeEvent(CType(e.Row,VHIGHLEGALRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVHIGHLEGALRow(ByVal row As VHIGHLEGALRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHLEGALRow
        Inherits DataRow
        
        Private tableVHIGHLEGAL As VHIGHLEGALDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVHIGHLEGAL = CType(Me.Table,VHIGHLEGALDataTable)
        End Sub
        
        Public Property HLEGRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGRECIDColumn) = value
            End Set
        End Property
        
        Public Property HLEGLNMRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGLNMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGLNMRECIDColumn) = value
            End Set
        End Property
        
        Public Property HLEGCODE As String
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGCODEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGCODEColumn) = value
            End Set
        End Property
        
        Public Property HLEGCODERECID As Long
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGCODERECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGCODERECIDColumn) = value
            End Set
        End Property
        
        Public Property HLEGLISTING As String
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGLISTINGColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGLISTINGColumn) = value
            End Set
        End Property
        
        Public Property HLEGDATELISTED As Date
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHLEGAL.HLEGDATELISTEDColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGDATELISTEDColumn) = value
            End Set
        End Property
        
        Public Property HLEGISO2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHLEGAL.HLEGISO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGISO2Column) = value
            End Set
        End Property
        
        Public Property HLEGSPLITLISTED As Boolean
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGSPLITLISTEDColumn),Boolean)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGSPLITLISTEDColumn) = value
            End Set
        End Property
        
        Public Property HLEGPROTHIGHERTAX As Boolean
            Get
                Return CType(Me(Me.tableVHIGHLEGAL.HLEGPROTHIGHERTAXColumn),Boolean)
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGPROTHIGHERTAXColumn) = value
            End Set
        End Property
        
        Public Property HLEGNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHLEGAL.HLEGNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHLEGAL.HLEGNOTESColumn) = value
            End Set
        End Property
        
        Public Function IsHLEGDATELISTEDNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHLEGAL.HLEGDATELISTEDColumn)
        End Function
        
        Public Sub SetHLEGDATELISTEDNull()
            Me(Me.tableVHIGHLEGAL.HLEGDATELISTEDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHLEGISO2Null() As Boolean
            Return Me.IsNull(Me.tableVHIGHLEGAL.HLEGISO2Column)
        End Function
        
        Public Sub SetHLEGISO2Null()
            Me(Me.tableVHIGHLEGAL.HLEGISO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsHLEGNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHLEGAL.HLEGNOTESColumn)
        End Function
        
        Public Sub SetHLEGNOTESNull()
            Me(Me.tableVHIGHLEGAL.HLEGNOTESColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHLEGALRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VHIGHLEGALRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VHIGHLEGALRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VHIGHLEGALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHQUOTASDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHQUORECID As DataColumn
        
        Private columnHQUOCODE As DataColumn
        
        Private columnHQUOCODERECID As DataColumn
        
        Private columnHQUOCTYRECID As DataColumn
        
        Private columnHQUONOTRECID As DataColumn
        
        Private columnHQUOEXPORTQUOTA As DataColumn
        
        Private columnHQUOQUOUNIT As DataColumn
        
        Private columnHQUOYEAR As DataColumn
        
        Private columnHQUONOTES As DataColumn
        
        Private columnHQUOQUOTRMRECID As DataColumn
        
        Private columnHQUOQUOSRCRECID As DataColumn
        
        Friend Sub New()
            MyBase.New("VHIGHQUOTAS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HQUORECIDColumn As DataColumn
            Get
                Return Me.columnHQUORECID
            End Get
        End Property
        
        Friend ReadOnly Property HQUOCODEColumn As DataColumn
            Get
                Return Me.columnHQUOCODE
            End Get
        End Property
        
        Friend ReadOnly Property HQUOCODERECIDColumn As DataColumn
            Get
                Return Me.columnHQUOCODERECID
            End Get
        End Property
        
        Friend ReadOnly Property HQUOCTYRECIDColumn As DataColumn
            Get
                Return Me.columnHQUOCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property HQUONOTRECIDColumn As DataColumn
            Get
                Return Me.columnHQUONOTRECID
            End Get
        End Property
        
        Friend ReadOnly Property HQUOEXPORTQUOTAColumn As DataColumn
            Get
                Return Me.columnHQUOEXPORTQUOTA
            End Get
        End Property
        
        Friend ReadOnly Property HQUOQUOUNITColumn As DataColumn
            Get
                Return Me.columnHQUOQUOUNIT
            End Get
        End Property
        
        Friend ReadOnly Property HQUOYEARColumn As DataColumn
            Get
                Return Me.columnHQUOYEAR
            End Get
        End Property
        
        Friend ReadOnly Property HQUONOTESColumn As DataColumn
            Get
                Return Me.columnHQUONOTES
            End Get
        End Property
        
        Friend ReadOnly Property HQUOQUOTRMRECIDColumn As DataColumn
            Get
                Return Me.columnHQUOQUOTRMRECID
            End Get
        End Property
        
        Friend ReadOnly Property HQUOQUOSRCRECIDColumn As DataColumn
            Get
                Return Me.columnHQUOQUOSRCRECID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VHIGHQUOTASRow
            Get
                Return CType(Me.Rows(index),VHIGHQUOTASRow)
            End Get
        End Property
        
        Public Event VHIGHQUOTASRowChanged As VHIGHQUOTASRowChangeEventHandler
        
        Public Event VHIGHQUOTASRowChanging As VHIGHQUOTASRowChangeEventHandler
        
        Public Event VHIGHQUOTASRowDeleted As VHIGHQUOTASRowChangeEventHandler
        
        Public Event VHIGHQUOTASRowDeleting As VHIGHQUOTASRowChangeEventHandler
        
        Public Overloads Sub AddVHIGHQUOTASRow(ByVal row As VHIGHQUOTASRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVHIGHQUOTASRow(ByVal HQUORECID As Long, ByVal HQUOCODE As String, ByVal HQUOCODERECID As Long, ByVal HQUOCTYRECID As Long, ByVal HQUONOTRECID As Long, ByVal HQUOEXPORTQUOTA As String, ByVal HQUOQUOUNIT As String, ByVal HQUOYEAR As Long, ByVal HQUONOTES As String, ByVal HQUOQUOTRMRECID As Long, ByVal HQUOQUOSRCRECID As Long) As VHIGHQUOTASRow
            Dim rowVHIGHQUOTASRow As VHIGHQUOTASRow = CType(Me.NewRow,VHIGHQUOTASRow)
            rowVHIGHQUOTASRow.ItemArray = New Object() {HQUORECID, HQUOCODE, HQUOCODERECID, HQUOCTYRECID, HQUONOTRECID, HQUOEXPORTQUOTA, HQUOQUOUNIT, HQUOYEAR, HQUONOTES, HQUOQUOTRMRECID, HQUOQUOSRCRECID}
            Me.Rows.Add(rowVHIGHQUOTASRow)
            Return rowVHIGHQUOTASRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VHIGHQUOTASDataTable = CType(MyBase.Clone,VHIGHQUOTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VHIGHQUOTASDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHQUORECID = Me.Columns("HQUORECID")
            Me.columnHQUOCODE = Me.Columns("HQUOCODE")
            Me.columnHQUOCODERECID = Me.Columns("HQUOCODERECID")
            Me.columnHQUOCTYRECID = Me.Columns("HQUOCTYRECID")
            Me.columnHQUONOTRECID = Me.Columns("HQUONOTRECID")
            Me.columnHQUOEXPORTQUOTA = Me.Columns("HQUOEXPORTQUOTA")
            Me.columnHQUOQUOUNIT = Me.Columns("HQUOQUOUNIT")
            Me.columnHQUOYEAR = Me.Columns("HQUOYEAR")
            Me.columnHQUONOTES = Me.Columns("HQUONOTES")
            Me.columnHQUOQUOTRMRECID = Me.Columns("HQUOQUOTRMRECID")
            Me.columnHQUOQUOSRCRECID = Me.Columns("HQUOQUOSRCRECID")
        End Sub
        
        Private Sub InitClass()
            Me.columnHQUORECID = New DataColumn("HQUORECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUORECID)
            Me.columnHQUOCODE = New DataColumn("HQUOCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOCODE)
            Me.columnHQUOCODERECID = New DataColumn("HQUOCODERECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOCODERECID)
            Me.columnHQUOCTYRECID = New DataColumn("HQUOCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOCTYRECID)
            Me.columnHQUONOTRECID = New DataColumn("HQUONOTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUONOTRECID)
            Me.columnHQUOEXPORTQUOTA = New DataColumn("HQUOEXPORTQUOTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOEXPORTQUOTA)
            Me.columnHQUOQUOUNIT = New DataColumn("HQUOQUOUNIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOQUOUNIT)
            Me.columnHQUOYEAR = New DataColumn("HQUOYEAR", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOYEAR)
            Me.columnHQUONOTES = New DataColumn("HQUONOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUONOTES)
            Me.columnHQUOQUOTRMRECID = New DataColumn("HQUOQUOTRMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOQUOTRMRECID)
            Me.columnHQUOQUOSRCRECID = New DataColumn("HQUOQUOSRCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHQUOQUOSRCRECID)
            Me.columnHQUORECID.AllowDBNull = false
            Me.columnHQUOCODE.AllowDBNull = false
            Me.columnHQUOCODERECID.AllowDBNull = false
            Me.columnHQUOCTYRECID.AllowDBNull = false
            Me.columnHQUONOTRECID.AllowDBNull = false
            Me.columnHQUOEXPORTQUOTA.AllowDBNull = false
            Me.columnHQUOEXPORTQUOTA.MaxLength = 30
            Me.columnHQUOQUOUNIT.MaxLength = 10
            Me.columnHQUOYEAR.AllowDBNull = false
            Me.columnHQUONOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVHIGHQUOTASRow() As VHIGHQUOTASRow
            Return CType(Me.NewRow,VHIGHQUOTASRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VHIGHQUOTASRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VHIGHQUOTASRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VHIGHQUOTASRowChangedEvent) Is Nothing) Then
                RaiseEvent VHIGHQUOTASRowChanged(Me, New VHIGHQUOTASRowChangeEvent(CType(e.Row,VHIGHQUOTASRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VHIGHQUOTASRowChangingEvent) Is Nothing) Then
                RaiseEvent VHIGHQUOTASRowChanging(Me, New VHIGHQUOTASRowChangeEvent(CType(e.Row,VHIGHQUOTASRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VHIGHQUOTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent VHIGHQUOTASRowDeleted(Me, New VHIGHQUOTASRowChangeEvent(CType(e.Row,VHIGHQUOTASRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VHIGHQUOTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent VHIGHQUOTASRowDeleting(Me, New VHIGHQUOTASRowChangeEvent(CType(e.Row,VHIGHQUOTASRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVHIGHQUOTASRow(ByVal row As VHIGHQUOTASRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHQUOTASRow
        Inherits DataRow
        
        Private tableVHIGHQUOTAS As VHIGHQUOTASDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVHIGHQUOTAS = CType(Me.Table,VHIGHQUOTASDataTable)
        End Sub
        
        Public Property HQUORECID As Long
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUORECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUORECIDColumn) = value
            End Set
        End Property
        
        Public Property HQUOCODE As String
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUOCODEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOCODEColumn) = value
            End Set
        End Property
        
        Public Property HQUOCODERECID As Long
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUOCODERECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOCODERECIDColumn) = value
            End Set
        End Property
        
        Public Property HQUOCTYRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUOCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property HQUONOTRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUONOTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUONOTRECIDColumn) = value
            End Set
        End Property
        
        Public Property HQUOEXPORTQUOTA As String
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUOEXPORTQUOTAColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOEXPORTQUOTAColumn) = value
            End Set
        End Property
        
        Public Property HQUOQUOUNIT As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHQUOTAS.HQUOQUOUNITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOQUOUNITColumn) = value
            End Set
        End Property
        
        Public Property HQUOYEAR As Long
            Get
                Return CType(Me(Me.tableVHIGHQUOTAS.HQUOYEARColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOYEARColumn) = value
            End Set
        End Property
        
        Public Property HQUONOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHQUOTAS.HQUONOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUONOTESColumn) = value
            End Set
        End Property
        
        Public Property HQUOQUOTRMRECID As Long
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHQUOTAS.HQUOQUOTRMRECIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOQUOTRMRECIDColumn) = value
            End Set
        End Property
        
        Public Property HQUOQUOSRCRECID As Long
            Get
                Try 
                    Return CType(Me(Me.tableVHIGHQUOTAS.HQUOQUOSRCRECIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVHIGHQUOTAS.HQUOQUOSRCRECIDColumn) = value
            End Set
        End Property
        
        Public Function IsHQUOQUOUNITNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHQUOTAS.HQUOQUOUNITColumn)
        End Function
        
        Public Sub SetHQUOQUOUNITNull()
            Me(Me.tableVHIGHQUOTAS.HQUOQUOUNITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHQUONOTESNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHQUOTAS.HQUONOTESColumn)
        End Function
        
        Public Sub SetHQUONOTESNull()
            Me(Me.tableVHIGHQUOTAS.HQUONOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHQUOQUOTRMRECIDNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHQUOTAS.HQUOQUOTRMRECIDColumn)
        End Function
        
        Public Sub SetHQUOQUOTRMRECIDNull()
            Me(Me.tableVHIGHQUOTAS.HQUOQUOTRMRECIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHQUOQUOSRCRECIDNull() As Boolean
            Return Me.IsNull(Me.tableVHIGHQUOTAS.HQUOQUOSRCRECIDColumn)
        End Function
        
        Public Sub SetHQUOQUOSRCRECIDNull()
            Me(Me.tableVHIGHQUOTAS.HQUOQUOSRCRECIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHQUOTASRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VHIGHQUOTASRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VHIGHQUOTASRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VHIGHQUOTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHSYNONYMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHSYNRECID As DataColumn
        
        Private columnHSYNCODE As DataColumn
        
        Private columnHSYNCODERECID As DataColumn
        
        Private columnHSYNPARENTCODE As DataColumn
        
        Private columnHSYNPARENTRECID As DataColumn
        
        Friend Sub New()
            MyBase.New("VHIGHSYNONYMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HSYNRECIDColumn As DataColumn
            Get
                Return Me.columnHSYNRECID
            End Get
        End Property
        
        Friend ReadOnly Property HSYNCODEColumn As DataColumn
            Get
                Return Me.columnHSYNCODE
            End Get
        End Property
        
        Friend ReadOnly Property HSYNCODERECIDColumn As DataColumn
            Get
                Return Me.columnHSYNCODERECID
            End Get
        End Property
        
        Friend ReadOnly Property HSYNPARENTCODEColumn As DataColumn
            Get
                Return Me.columnHSYNPARENTCODE
            End Get
        End Property
        
        Friend ReadOnly Property HSYNPARENTRECIDColumn As DataColumn
            Get
                Return Me.columnHSYNPARENTRECID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VHIGHSYNONYMSRow
            Get
                Return CType(Me.Rows(index),VHIGHSYNONYMSRow)
            End Get
        End Property
        
        Public Event VHIGHSYNONYMSRowChanged As VHIGHSYNONYMSRowChangeEventHandler
        
        Public Event VHIGHSYNONYMSRowChanging As VHIGHSYNONYMSRowChangeEventHandler
        
        Public Event VHIGHSYNONYMSRowDeleted As VHIGHSYNONYMSRowChangeEventHandler
        
        Public Event VHIGHSYNONYMSRowDeleting As VHIGHSYNONYMSRowChangeEventHandler
        
        Public Overloads Sub AddVHIGHSYNONYMSRow(ByVal row As VHIGHSYNONYMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVHIGHSYNONYMSRow(ByVal HSYNRECID As Long, ByVal HSYNCODE As String, ByVal HSYNCODERECID As Long, ByVal HSYNPARENTCODE As String, ByVal HSYNPARENTRECID As Long) As VHIGHSYNONYMSRow
            Dim rowVHIGHSYNONYMSRow As VHIGHSYNONYMSRow = CType(Me.NewRow,VHIGHSYNONYMSRow)
            rowVHIGHSYNONYMSRow.ItemArray = New Object() {HSYNRECID, HSYNCODE, HSYNCODERECID, HSYNPARENTCODE, HSYNPARENTRECID}
            Me.Rows.Add(rowVHIGHSYNONYMSRow)
            Return rowVHIGHSYNONYMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VHIGHSYNONYMSDataTable = CType(MyBase.Clone,VHIGHSYNONYMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VHIGHSYNONYMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHSYNRECID = Me.Columns("HSYNRECID")
            Me.columnHSYNCODE = Me.Columns("HSYNCODE")
            Me.columnHSYNCODERECID = Me.Columns("HSYNCODERECID")
            Me.columnHSYNPARENTCODE = Me.Columns("HSYNPARENTCODE")
            Me.columnHSYNPARENTRECID = Me.Columns("HSYNPARENTRECID")
        End Sub
        
        Private Sub InitClass()
            Me.columnHSYNRECID = New DataColumn("HSYNRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHSYNRECID)
            Me.columnHSYNCODE = New DataColumn("HSYNCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHSYNCODE)
            Me.columnHSYNCODERECID = New DataColumn("HSYNCODERECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHSYNCODERECID)
            Me.columnHSYNPARENTCODE = New DataColumn("HSYNPARENTCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHSYNPARENTCODE)
            Me.columnHSYNPARENTRECID = New DataColumn("HSYNPARENTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHSYNPARENTRECID)
            Me.columnHSYNRECID.AllowDBNull = false
            Me.columnHSYNCODE.AllowDBNull = false
            Me.columnHSYNCODERECID.AllowDBNull = false
            Me.columnHSYNPARENTCODE.AllowDBNull = false
            Me.columnHSYNPARENTCODE.MaxLength = 50
            Me.columnHSYNPARENTRECID.AllowDBNull = false
        End Sub
        
        Public Function NewVHIGHSYNONYMSRow() As VHIGHSYNONYMSRow
            Return CType(Me.NewRow,VHIGHSYNONYMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VHIGHSYNONYMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VHIGHSYNONYMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VHIGHSYNONYMSRowChangedEvent) Is Nothing) Then
                RaiseEvent VHIGHSYNONYMSRowChanged(Me, New VHIGHSYNONYMSRowChangeEvent(CType(e.Row,VHIGHSYNONYMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VHIGHSYNONYMSRowChangingEvent) Is Nothing) Then
                RaiseEvent VHIGHSYNONYMSRowChanging(Me, New VHIGHSYNONYMSRowChangeEvent(CType(e.Row,VHIGHSYNONYMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VHIGHSYNONYMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VHIGHSYNONYMSRowDeleted(Me, New VHIGHSYNONYMSRowChangeEvent(CType(e.Row,VHIGHSYNONYMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VHIGHSYNONYMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VHIGHSYNONYMSRowDeleting(Me, New VHIGHSYNONYMSRowChangeEvent(CType(e.Row,VHIGHSYNONYMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVHIGHSYNONYMSRow(ByVal row As VHIGHSYNONYMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHSYNONYMSRow
        Inherits DataRow
        
        Private tableVHIGHSYNONYMS As VHIGHSYNONYMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVHIGHSYNONYMS = CType(Me.Table,VHIGHSYNONYMSDataTable)
        End Sub
        
        Public Property HSYNRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHSYNONYMS.HSYNRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHSYNONYMS.HSYNRECIDColumn) = value
            End Set
        End Property
        
        Public Property HSYNCODE As String
            Get
                Return CType(Me(Me.tableVHIGHSYNONYMS.HSYNCODEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHSYNONYMS.HSYNCODEColumn) = value
            End Set
        End Property
        
        Public Property HSYNCODERECID As Long
            Get
                Return CType(Me(Me.tableVHIGHSYNONYMS.HSYNCODERECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHSYNONYMS.HSYNCODERECIDColumn) = value
            End Set
        End Property
        
        Public Property HSYNPARENTCODE As String
            Get
                Return CType(Me(Me.tableVHIGHSYNONYMS.HSYNPARENTCODEColumn),String)
            End Get
            Set
                Me(Me.tableVHIGHSYNONYMS.HSYNPARENTCODEColumn) = value
            End Set
        End Property
        
        Public Property HSYNPARENTRECID As Long
            Get
                Return CType(Me(Me.tableVHIGHSYNONYMS.HSYNPARENTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVHIGHSYNONYMS.HSYNPARENTRECIDColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VHIGHSYNONYMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VHIGHSYNONYMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VHIGHSYNONYMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VHIGHSYNONYMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VKINGDOMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKGMRECID As DataColumn
        
        Private columnKGMNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VKINGDOM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KGMRECIDColumn As DataColumn
            Get
                Return Me.columnKGMRECID
            End Get
        End Property
        
        Friend ReadOnly Property KGMNAMEColumn As DataColumn
            Get
                Return Me.columnKGMNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VKINGDOMRow
            Get
                Return CType(Me.Rows(index),VKINGDOMRow)
            End Get
        End Property
        
        Public Event VKINGDOMRowChanged As VKINGDOMRowChangeEventHandler
        
        Public Event VKINGDOMRowChanging As VKINGDOMRowChangeEventHandler
        
        Public Event VKINGDOMRowDeleted As VKINGDOMRowChangeEventHandler
        
        Public Event VKINGDOMRowDeleting As VKINGDOMRowChangeEventHandler
        
        Public Overloads Sub AddVKINGDOMRow(ByVal row As VKINGDOMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVKINGDOMRow(ByVal KGMRECID As Long, ByVal KGMNAME As String) As VKINGDOMRow
            Dim rowVKINGDOMRow As VKINGDOMRow = CType(Me.NewRow,VKINGDOMRow)
            rowVKINGDOMRow.ItemArray = New Object() {KGMRECID, KGMNAME}
            Me.Rows.Add(rowVKINGDOMRow)
            Return rowVKINGDOMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VKINGDOMDataTable = CType(MyBase.Clone,VKINGDOMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VKINGDOMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKGMRECID = Me.Columns("KGMRECID")
            Me.columnKGMNAME = Me.Columns("KGMNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnKGMRECID = New DataColumn("KGMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKGMRECID)
            Me.columnKGMNAME = New DataColumn("KGMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKGMNAME)
            Me.columnKGMRECID.AllowDBNull = false
            Me.columnKGMNAME.AllowDBNull = false
            Me.columnKGMNAME.MaxLength = 50
        End Sub
        
        Public Function NewVKINGDOMRow() As VKINGDOMRow
            Return CType(Me.NewRow,VKINGDOMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VKINGDOMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VKINGDOMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VKINGDOMRowChangedEvent) Is Nothing) Then
                RaiseEvent VKINGDOMRowChanged(Me, New VKINGDOMRowChangeEvent(CType(e.Row,VKINGDOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VKINGDOMRowChangingEvent) Is Nothing) Then
                RaiseEvent VKINGDOMRowChanging(Me, New VKINGDOMRowChangeEvent(CType(e.Row,VKINGDOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VKINGDOMRowDeletedEvent) Is Nothing) Then
                RaiseEvent VKINGDOMRowDeleted(Me, New VKINGDOMRowChangeEvent(CType(e.Row,VKINGDOMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VKINGDOMRowDeletingEvent) Is Nothing) Then
                RaiseEvent VKINGDOMRowDeleting(Me, New VKINGDOMRowChangeEvent(CType(e.Row,VKINGDOMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVKINGDOMRow(ByVal row As VKINGDOMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VKINGDOMRow
        Inherits DataRow
        
        Private tableVKINGDOM As VKINGDOMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVKINGDOM = CType(Me.Table,VKINGDOMDataTable)
        End Sub
        
        Public Property KGMRECID As Long
            Get
                Return CType(Me(Me.tableVKINGDOM.KGMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVKINGDOM.KGMRECIDColumn) = value
            End Set
        End Property
        
        Public Property KGMNAME As String
            Get
                Return CType(Me(Me.tableVKINGDOM.KGMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVKINGDOM.KGMNAMEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VKINGDOMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VKINGDOMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VKINGDOMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VKINGDOMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEGALDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLEGRECID As DataColumn
        
        Private columnLEGLNMRECID As DataColumn
        
        Private columnLEGSPCRECID As DataColumn
        
        Private columnLEGLISTING As DataColumn
        
        Private columnLEGDATELISTED As DataColumn
        
        Private columnLEGISO2 As DataColumn
        
        Private columnLEGSPLITLISTED As DataColumn
        
        Private columnLEGPROTHIGHERTAX As DataColumn
        
        Private columnLEGNOTES As DataColumn
        
        Private columnLEGMISC As DataColumn
        
        Friend Sub New()
            MyBase.New("VLEGAL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LEGRECIDColumn As DataColumn
            Get
                Return Me.columnLEGRECID
            End Get
        End Property
        
        Friend ReadOnly Property LEGLNMRECIDColumn As DataColumn
            Get
                Return Me.columnLEGLNMRECID
            End Get
        End Property
        
        Friend ReadOnly Property LEGSPCRECIDColumn As DataColumn
            Get
                Return Me.columnLEGSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property LEGLISTINGColumn As DataColumn
            Get
                Return Me.columnLEGLISTING
            End Get
        End Property
        
        Friend ReadOnly Property LEGDATELISTEDColumn As DataColumn
            Get
                Return Me.columnLEGDATELISTED
            End Get
        End Property
        
        Friend ReadOnly Property LEGISO2Column As DataColumn
            Get
                Return Me.columnLEGISO2
            End Get
        End Property
        
        Friend ReadOnly Property LEGSPLITLISTEDColumn As DataColumn
            Get
                Return Me.columnLEGSPLITLISTED
            End Get
        End Property
        
        Friend ReadOnly Property LEGPROTHIGHERTAXColumn As DataColumn
            Get
                Return Me.columnLEGPROTHIGHERTAX
            End Get
        End Property
        
        Friend ReadOnly Property LEGNOTESColumn As DataColumn
            Get
                Return Me.columnLEGNOTES
            End Get
        End Property
        
        Friend ReadOnly Property LEGMISCColumn As DataColumn
            Get
                Return Me.columnLEGMISC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VLEGALRow
            Get
                Return CType(Me.Rows(index),VLEGALRow)
            End Get
        End Property
        
        Public Event VLEGALRowChanged As VLEGALRowChangeEventHandler
        
        Public Event VLEGALRowChanging As VLEGALRowChangeEventHandler
        
        Public Event VLEGALRowDeleted As VLEGALRowChangeEventHandler
        
        Public Event VLEGALRowDeleting As VLEGALRowChangeEventHandler
        
        Public Overloads Sub AddVLEGALRow(ByVal row As VLEGALRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVLEGALRow(ByVal LEGRECID As Long, ByVal LEGLNMRECID As Long, ByVal LEGSPCRECID As Long, ByVal LEGLISTING As String, ByVal LEGDATELISTED As Date, ByVal LEGISO2 As String, ByVal LEGSPLITLISTED As Boolean, ByVal LEGPROTHIGHERTAX As Boolean, ByVal LEGNOTES As String, ByVal LEGMISC As String) As VLEGALRow
            Dim rowVLEGALRow As VLEGALRow = CType(Me.NewRow,VLEGALRow)
            rowVLEGALRow.ItemArray = New Object() {LEGRECID, LEGLNMRECID, LEGSPCRECID, LEGLISTING, LEGDATELISTED, LEGISO2, LEGSPLITLISTED, LEGPROTHIGHERTAX, LEGNOTES, LEGMISC}
            Me.Rows.Add(rowVLEGALRow)
            Return rowVLEGALRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VLEGALDataTable = CType(MyBase.Clone,VLEGALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VLEGALDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLEGRECID = Me.Columns("LEGRECID")
            Me.columnLEGLNMRECID = Me.Columns("LEGLNMRECID")
            Me.columnLEGSPCRECID = Me.Columns("LEGSPCRECID")
            Me.columnLEGLISTING = Me.Columns("LEGLISTING")
            Me.columnLEGDATELISTED = Me.Columns("LEGDATELISTED")
            Me.columnLEGISO2 = Me.Columns("LEGISO2")
            Me.columnLEGSPLITLISTED = Me.Columns("LEGSPLITLISTED")
            Me.columnLEGPROTHIGHERTAX = Me.Columns("LEGPROTHIGHERTAX")
            Me.columnLEGNOTES = Me.Columns("LEGNOTES")
            Me.columnLEGMISC = Me.Columns("LEGMISC")
        End Sub
        
        Private Sub InitClass()
            Me.columnLEGRECID = New DataColumn("LEGRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGRECID)
            Me.columnLEGLNMRECID = New DataColumn("LEGLNMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGLNMRECID)
            Me.columnLEGSPCRECID = New DataColumn("LEGSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGSPCRECID)
            Me.columnLEGLISTING = New DataColumn("LEGLISTING", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGLISTING)
            Me.columnLEGDATELISTED = New DataColumn("LEGDATELISTED", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGDATELISTED)
            Me.columnLEGISO2 = New DataColumn("LEGISO2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGISO2)
            Me.columnLEGSPLITLISTED = New DataColumn("LEGSPLITLISTED", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGSPLITLISTED)
            Me.columnLEGPROTHIGHERTAX = New DataColumn("LEGPROTHIGHERTAX", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGPROTHIGHERTAX)
            Me.columnLEGNOTES = New DataColumn("LEGNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGNOTES)
            Me.columnLEGMISC = New DataColumn("LEGMISC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLEGMISC)
            Me.columnLEGRECID.AllowDBNull = false
            Me.columnLEGLNMRECID.AllowDBNull = false
            Me.columnLEGSPCRECID.AllowDBNull = false
            Me.columnLEGLISTING.AllowDBNull = false
            Me.columnLEGLISTING.MaxLength = 10
            Me.columnLEGSPLITLISTED.AllowDBNull = false
            Me.columnLEGPROTHIGHERTAX.AllowDBNull = false
            Me.columnLEGNOTES.MaxLength = 2147483647
            Me.columnLEGMISC.MaxLength = 20
        End Sub
        
        Public Function NewVLEGALRow() As VLEGALRow
            Return CType(Me.NewRow,VLEGALRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VLEGALRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VLEGALRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VLEGALRowChangedEvent) Is Nothing) Then
                RaiseEvent VLEGALRowChanged(Me, New VLEGALRowChangeEvent(CType(e.Row,VLEGALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VLEGALRowChangingEvent) Is Nothing) Then
                RaiseEvent VLEGALRowChanging(Me, New VLEGALRowChangeEvent(CType(e.Row,VLEGALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VLEGALRowDeletedEvent) Is Nothing) Then
                RaiseEvent VLEGALRowDeleted(Me, New VLEGALRowChangeEvent(CType(e.Row,VLEGALRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VLEGALRowDeletingEvent) Is Nothing) Then
                RaiseEvent VLEGALRowDeleting(Me, New VLEGALRowChangeEvent(CType(e.Row,VLEGALRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVLEGALRow(ByVal row As VLEGALRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEGALRow
        Inherits DataRow
        
        Private tableVLEGAL As VLEGALDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVLEGAL = CType(Me.Table,VLEGALDataTable)
        End Sub
        
        Public Property LEGRECID As Long
            Get
                Return CType(Me(Me.tableVLEGAL.LEGRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVLEGAL.LEGRECIDColumn) = value
            End Set
        End Property
        
        Public Property LEGLNMRECID As Long
            Get
                Return CType(Me(Me.tableVLEGAL.LEGLNMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVLEGAL.LEGLNMRECIDColumn) = value
            End Set
        End Property
        
        Public Property LEGSPCRECID As Long
            Get
                Return CType(Me(Me.tableVLEGAL.LEGSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVLEGAL.LEGSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property LEGLISTING As String
            Get
                Return CType(Me(Me.tableVLEGAL.LEGLISTINGColumn),String)
            End Get
            Set
                Me(Me.tableVLEGAL.LEGLISTINGColumn) = value
            End Set
        End Property
        
        Public Property LEGDATELISTED As Date
            Get
                Try 
                    Return CType(Me(Me.tableVLEGAL.LEGDATELISTEDColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGAL.LEGDATELISTEDColumn) = value
            End Set
        End Property
        
        Public Property LEGISO2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVLEGAL.LEGISO2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGAL.LEGISO2Column) = value
            End Set
        End Property
        
        Public Property LEGSPLITLISTED As Boolean
            Get
                Return CType(Me(Me.tableVLEGAL.LEGSPLITLISTEDColumn),Boolean)
            End Get
            Set
                Me(Me.tableVLEGAL.LEGSPLITLISTEDColumn) = value
            End Set
        End Property
        
        Public Property LEGPROTHIGHERTAX As Boolean
            Get
                Return CType(Me(Me.tableVLEGAL.LEGPROTHIGHERTAXColumn),Boolean)
            End Get
            Set
                Me(Me.tableVLEGAL.LEGPROTHIGHERTAXColumn) = value
            End Set
        End Property
        
        Public Property LEGNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVLEGAL.LEGNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGAL.LEGNOTESColumn) = value
            End Set
        End Property
        
        Public Property LEGMISC As String
            Get
                Try 
                    Return CType(Me(Me.tableVLEGAL.LEGMISCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGAL.LEGMISCColumn) = value
            End Set
        End Property
        
        Public Function IsLEGDATELISTEDNull() As Boolean
            Return Me.IsNull(Me.tableVLEGAL.LEGDATELISTEDColumn)
        End Function
        
        Public Sub SetLEGDATELISTEDNull()
            Me(Me.tableVLEGAL.LEGDATELISTEDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLEGISO2Null() As Boolean
            Return Me.IsNull(Me.tableVLEGAL.LEGISO2Column)
        End Function
        
        Public Sub SetLEGISO2Null()
            Me(Me.tableVLEGAL.LEGISO2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsLEGNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVLEGAL.LEGNOTESColumn)
        End Function
        
        Public Sub SetLEGNOTESNull()
            Me(Me.tableVLEGAL.LEGNOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLEGMISCNull() As Boolean
            Return Me.IsNull(Me.tableVLEGAL.LEGMISCColumn)
        End Function
        
        Public Sub SetLEGMISCNull()
            Me(Me.tableVLEGAL.LEGMISCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEGALRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VLEGALRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VLEGALRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VLEGALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEGALNAMEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLNMRECID As DataColumn
        
        Private columnLNMSHORTDESC As DataColumn
        
        Private columnLNMLONGDESC As DataColumn
        
        Private columnLNMLEVEL As DataColumn
        
        Private columnLNMNOTES As DataColumn
        
        Private columnLNMRECSTATUS As DataColumn
        
        Private columnLNMURL As DataColumn
        
        Private columnLNMDATEADOPT As DataColumn
        
        Private columnLNMDATEENFORCE As DataColumn
        
        Friend Sub New()
            MyBase.New("VLEGALNAME")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LNMRECIDColumn As DataColumn
            Get
                Return Me.columnLNMRECID
            End Get
        End Property
        
        Friend ReadOnly Property LNMSHORTDESCColumn As DataColumn
            Get
                Return Me.columnLNMSHORTDESC
            End Get
        End Property
        
        Friend ReadOnly Property LNMLONGDESCColumn As DataColumn
            Get
                Return Me.columnLNMLONGDESC
            End Get
        End Property
        
        Friend ReadOnly Property LNMLEVELColumn As DataColumn
            Get
                Return Me.columnLNMLEVEL
            End Get
        End Property
        
        Friend ReadOnly Property LNMNOTESColumn As DataColumn
            Get
                Return Me.columnLNMNOTES
            End Get
        End Property
        
        Friend ReadOnly Property LNMRECSTATUSColumn As DataColumn
            Get
                Return Me.columnLNMRECSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property LNMURLColumn As DataColumn
            Get
                Return Me.columnLNMURL
            End Get
        End Property
        
        Friend ReadOnly Property LNMDATEADOPTColumn As DataColumn
            Get
                Return Me.columnLNMDATEADOPT
            End Get
        End Property
        
        Friend ReadOnly Property LNMDATEENFORCEColumn As DataColumn
            Get
                Return Me.columnLNMDATEENFORCE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VLEGALNAMERow
            Get
                Return CType(Me.Rows(index),VLEGALNAMERow)
            End Get
        End Property
        
        Public Event VLEGALNAMERowChanged As VLEGALNAMERowChangeEventHandler
        
        Public Event VLEGALNAMERowChanging As VLEGALNAMERowChangeEventHandler
        
        Public Event VLEGALNAMERowDeleted As VLEGALNAMERowChangeEventHandler
        
        Public Event VLEGALNAMERowDeleting As VLEGALNAMERowChangeEventHandler
        
        Public Overloads Sub AddVLEGALNAMERow(ByVal row As VLEGALNAMERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVLEGALNAMERow(ByVal LNMRECID As Long, ByVal LNMSHORTDESC As String, ByVal LNMLONGDESC As String, ByVal LNMLEVEL As Char, ByVal LNMNOTES As String, ByVal LNMRECSTATUS As Char, ByVal LNMURL As String, ByVal LNMDATEADOPT As Date, ByVal LNMDATEENFORCE As Date) As VLEGALNAMERow
            Dim rowVLEGALNAMERow As VLEGALNAMERow = CType(Me.NewRow,VLEGALNAMERow)
            rowVLEGALNAMERow.ItemArray = New Object() {LNMRECID, LNMSHORTDESC, LNMLONGDESC, LNMLEVEL, LNMNOTES, LNMRECSTATUS, LNMURL, LNMDATEADOPT, LNMDATEENFORCE}
            Me.Rows.Add(rowVLEGALNAMERow)
            Return rowVLEGALNAMERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VLEGALNAMEDataTable = CType(MyBase.Clone,VLEGALNAMEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VLEGALNAMEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLNMRECID = Me.Columns("LNMRECID")
            Me.columnLNMSHORTDESC = Me.Columns("LNMSHORTDESC")
            Me.columnLNMLONGDESC = Me.Columns("LNMLONGDESC")
            Me.columnLNMLEVEL = Me.Columns("LNMLEVEL")
            Me.columnLNMNOTES = Me.Columns("LNMNOTES")
            Me.columnLNMRECSTATUS = Me.Columns("LNMRECSTATUS")
            Me.columnLNMURL = Me.Columns("LNMURL")
            Me.columnLNMDATEADOPT = Me.Columns("LNMDATEADOPT")
            Me.columnLNMDATEENFORCE = Me.Columns("LNMDATEENFORCE")
        End Sub
        
        Private Sub InitClass()
            Me.columnLNMRECID = New DataColumn("LNMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMRECID)
            Me.columnLNMSHORTDESC = New DataColumn("LNMSHORTDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMSHORTDESC)
            Me.columnLNMLONGDESC = New DataColumn("LNMLONGDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMLONGDESC)
            Me.columnLNMLEVEL = New DataColumn("LNMLEVEL", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMLEVEL)
            Me.columnLNMNOTES = New DataColumn("LNMNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMNOTES)
            Me.columnLNMRECSTATUS = New DataColumn("LNMRECSTATUS", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMRECSTATUS)
            Me.columnLNMURL = New DataColumn("LNMURL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMURL)
            Me.columnLNMDATEADOPT = New DataColumn("LNMDATEADOPT", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMDATEADOPT)
            Me.columnLNMDATEENFORCE = New DataColumn("LNMDATEENFORCE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLNMDATEENFORCE)
            Me.columnLNMRECID.AllowDBNull = false
            Me.columnLNMSHORTDESC.AllowDBNull = false
            Me.columnLNMSHORTDESC.MaxLength = 50
            Me.columnLNMLONGDESC.MaxLength = 250
            Me.columnLNMLEVEL.AllowDBNull = false
            Me.columnLNMNOTES.MaxLength = 2147483647
            Me.columnLNMURL.MaxLength = 100
        End Sub
        
        Public Function NewVLEGALNAMERow() As VLEGALNAMERow
            Return CType(Me.NewRow,VLEGALNAMERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VLEGALNAMERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VLEGALNAMERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VLEGALNAMERowChangedEvent) Is Nothing) Then
                RaiseEvent VLEGALNAMERowChanged(Me, New VLEGALNAMERowChangeEvent(CType(e.Row,VLEGALNAMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VLEGALNAMERowChangingEvent) Is Nothing) Then
                RaiseEvent VLEGALNAMERowChanging(Me, New VLEGALNAMERowChangeEvent(CType(e.Row,VLEGALNAMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VLEGALNAMERowDeletedEvent) Is Nothing) Then
                RaiseEvent VLEGALNAMERowDeleted(Me, New VLEGALNAMERowChangeEvent(CType(e.Row,VLEGALNAMERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VLEGALNAMERowDeletingEvent) Is Nothing) Then
                RaiseEvent VLEGALNAMERowDeleting(Me, New VLEGALNAMERowChangeEvent(CType(e.Row,VLEGALNAMERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVLEGALNAMERow(ByVal row As VLEGALNAMERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEGALNAMERow
        Inherits DataRow
        
        Private tableVLEGALNAME As VLEGALNAMEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVLEGALNAME = CType(Me.Table,VLEGALNAMEDataTable)
        End Sub
        
        Public Property LNMRECID As Long
            Get
                Return CType(Me(Me.tableVLEGALNAME.LNMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMRECIDColumn) = value
            End Set
        End Property
        
        Public Property LNMSHORTDESC As String
            Get
                Return CType(Me(Me.tableVLEGALNAME.LNMSHORTDESCColumn),String)
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMSHORTDESCColumn) = value
            End Set
        End Property
        
        Public Property LNMLONGDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVLEGALNAME.LNMLONGDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMLONGDESCColumn) = value
            End Set
        End Property
        
        Public Property LNMLEVEL As Char
            Get
                Return CType(Me(Me.tableVLEGALNAME.LNMLEVELColumn),Char)
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMLEVELColumn) = value
            End Set
        End Property
        
        Public Property LNMNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVLEGALNAME.LNMNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMNOTESColumn) = value
            End Set
        End Property
        
        Public Property LNMRECSTATUS As Char
            Get
                Try 
                    Return CType(Me(Me.tableVLEGALNAME.LNMRECSTATUSColumn),Char)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMRECSTATUSColumn) = value
            End Set
        End Property
        
        Public Property LNMURL As String
            Get
                Try 
                    Return CType(Me(Me.tableVLEGALNAME.LNMURLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMURLColumn) = value
            End Set
        End Property
        
        Public Property LNMDATEADOPT As Date
            Get
                Try 
                    Return CType(Me(Me.tableVLEGALNAME.LNMDATEADOPTColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMDATEADOPTColumn) = value
            End Set
        End Property
        
        Public Property LNMDATEENFORCE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVLEGALNAME.LNMDATEENFORCEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVLEGALNAME.LNMDATEENFORCEColumn) = value
            End Set
        End Property
        
        Public Function IsLNMLONGDESCNull() As Boolean
            Return Me.IsNull(Me.tableVLEGALNAME.LNMLONGDESCColumn)
        End Function
        
        Public Sub SetLNMLONGDESCNull()
            Me(Me.tableVLEGALNAME.LNMLONGDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNMNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVLEGALNAME.LNMNOTESColumn)
        End Function
        
        Public Sub SetLNMNOTESNull()
            Me(Me.tableVLEGALNAME.LNMNOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNMRECSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVLEGALNAME.LNMRECSTATUSColumn)
        End Function
        
        Public Sub SetLNMRECSTATUSNull()
            Me(Me.tableVLEGALNAME.LNMRECSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNMURLNull() As Boolean
            Return Me.IsNull(Me.tableVLEGALNAME.LNMURLColumn)
        End Function
        
        Public Sub SetLNMURLNull()
            Me(Me.tableVLEGALNAME.LNMURLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNMDATEADOPTNull() As Boolean
            Return Me.IsNull(Me.tableVLEGALNAME.LNMDATEADOPTColumn)
        End Function
        
        Public Sub SetLNMDATEADOPTNull()
            Me(Me.tableVLEGALNAME.LNMDATEADOPTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLNMDATEENFORCENull() As Boolean
            Return Me.IsNull(Me.tableVLEGALNAME.LNMDATEENFORCEColumn)
        End Function
        
        Public Sub SetLNMDATEENFORCENull()
            Me(Me.tableVLEGALNAME.LNMDATEENFORCEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEGALNAMERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VLEGALNAMERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VLEGALNAMERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VLEGALNAMERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEVELOFUSEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOURECID As DataColumn
        
        Private columnLOUDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("VLEVELOFUSE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOURECIDColumn As DataColumn
            Get
                Return Me.columnLOURECID
            End Get
        End Property
        
        Friend ReadOnly Property LOUDESCColumn As DataColumn
            Get
                Return Me.columnLOUDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VLEVELOFUSERow
            Get
                Return CType(Me.Rows(index),VLEVELOFUSERow)
            End Get
        End Property
        
        Public Event VLEVELOFUSERowChanged As VLEVELOFUSERowChangeEventHandler
        
        Public Event VLEVELOFUSERowChanging As VLEVELOFUSERowChangeEventHandler
        
        Public Event VLEVELOFUSERowDeleted As VLEVELOFUSERowChangeEventHandler
        
        Public Event VLEVELOFUSERowDeleting As VLEVELOFUSERowChangeEventHandler
        
        Public Overloads Sub AddVLEVELOFUSERow(ByVal row As VLEVELOFUSERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVLEVELOFUSERow(ByVal LOURECID As Long, ByVal LOUDESC As String) As VLEVELOFUSERow
            Dim rowVLEVELOFUSERow As VLEVELOFUSERow = CType(Me.NewRow,VLEVELOFUSERow)
            rowVLEVELOFUSERow.ItemArray = New Object() {LOURECID, LOUDESC}
            Me.Rows.Add(rowVLEVELOFUSERow)
            Return rowVLEVELOFUSERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VLEVELOFUSEDataTable = CType(MyBase.Clone,VLEVELOFUSEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VLEVELOFUSEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOURECID = Me.Columns("LOURECID")
            Me.columnLOUDESC = Me.Columns("LOUDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOURECID = New DataColumn("LOURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOURECID)
            Me.columnLOUDESC = New DataColumn("LOUDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOUDESC)
            Me.columnLOURECID.AllowDBNull = false
            Me.columnLOUDESC.AllowDBNull = false
            Me.columnLOUDESC.MaxLength = 30
        End Sub
        
        Public Function NewVLEVELOFUSERow() As VLEVELOFUSERow
            Return CType(Me.NewRow,VLEVELOFUSERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VLEVELOFUSERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VLEVELOFUSERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VLEVELOFUSERowChangedEvent) Is Nothing) Then
                RaiseEvent VLEVELOFUSERowChanged(Me, New VLEVELOFUSERowChangeEvent(CType(e.Row,VLEVELOFUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VLEVELOFUSERowChangingEvent) Is Nothing) Then
                RaiseEvent VLEVELOFUSERowChanging(Me, New VLEVELOFUSERowChangeEvent(CType(e.Row,VLEVELOFUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VLEVELOFUSERowDeletedEvent) Is Nothing) Then
                RaiseEvent VLEVELOFUSERowDeleted(Me, New VLEVELOFUSERowChangeEvent(CType(e.Row,VLEVELOFUSERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VLEVELOFUSERowDeletingEvent) Is Nothing) Then
                RaiseEvent VLEVELOFUSERowDeleting(Me, New VLEVELOFUSERowChangeEvent(CType(e.Row,VLEVELOFUSERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVLEVELOFUSERow(ByVal row As VLEVELOFUSERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEVELOFUSERow
        Inherits DataRow
        
        Private tableVLEVELOFUSE As VLEVELOFUSEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVLEVELOFUSE = CType(Me.Table,VLEVELOFUSEDataTable)
        End Sub
        
        Public Property LOURECID As Long
            Get
                Return CType(Me(Me.tableVLEVELOFUSE.LOURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVLEVELOFUSE.LOURECIDColumn) = value
            End Set
        End Property
        
        Public Property LOUDESC As String
            Get
                Return CType(Me(Me.tableVLEVELOFUSE.LOUDESCColumn),String)
            End Get
            Set
                Me(Me.tableVLEVELOFUSE.LOUDESCColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VLEVELOFUSERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VLEVELOFUSERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VLEVELOFUSERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VLEVELOFUSERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VNOTIFICATIONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNOTRECID As DataColumn
        
        Private columnNOTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VNOTIFICATION")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NOTRECIDColumn As DataColumn
            Get
                Return Me.columnNOTRECID
            End Get
        End Property
        
        Friend ReadOnly Property NOTNAMEColumn As DataColumn
            Get
                Return Me.columnNOTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VNOTIFICATIONRow
            Get
                Return CType(Me.Rows(index),VNOTIFICATIONRow)
            End Get
        End Property
        
        Public Event VNOTIFICATIONRowChanged As VNOTIFICATIONRowChangeEventHandler
        
        Public Event VNOTIFICATIONRowChanging As VNOTIFICATIONRowChangeEventHandler
        
        Public Event VNOTIFICATIONRowDeleted As VNOTIFICATIONRowChangeEventHandler
        
        Public Event VNOTIFICATIONRowDeleting As VNOTIFICATIONRowChangeEventHandler
        
        Public Overloads Sub AddVNOTIFICATIONRow(ByVal row As VNOTIFICATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVNOTIFICATIONRow(ByVal NOTRECID As Long, ByVal NOTNAME As String) As VNOTIFICATIONRow
            Dim rowVNOTIFICATIONRow As VNOTIFICATIONRow = CType(Me.NewRow,VNOTIFICATIONRow)
            rowVNOTIFICATIONRow.ItemArray = New Object() {NOTRECID, NOTNAME}
            Me.Rows.Add(rowVNOTIFICATIONRow)
            Return rowVNOTIFICATIONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VNOTIFICATIONDataTable = CType(MyBase.Clone,VNOTIFICATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VNOTIFICATIONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNOTRECID = Me.Columns("NOTRECID")
            Me.columnNOTNAME = Me.Columns("NOTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnNOTRECID = New DataColumn("NOTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOTRECID)
            Me.columnNOTNAME = New DataColumn("NOTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNOTNAME)
            Me.columnNOTRECID.AllowDBNull = false
            Me.columnNOTNAME.AllowDBNull = false
            Me.columnNOTNAME.MaxLength = 50
        End Sub
        
        Public Function NewVNOTIFICATIONRow() As VNOTIFICATIONRow
            Return CType(Me.NewRow,VNOTIFICATIONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VNOTIFICATIONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VNOTIFICATIONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VNOTIFICATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent VNOTIFICATIONRowChanged(Me, New VNOTIFICATIONRowChangeEvent(CType(e.Row,VNOTIFICATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VNOTIFICATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent VNOTIFICATIONRowChanging(Me, New VNOTIFICATIONRowChangeEvent(CType(e.Row,VNOTIFICATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VNOTIFICATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent VNOTIFICATIONRowDeleted(Me, New VNOTIFICATIONRowChangeEvent(CType(e.Row,VNOTIFICATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VNOTIFICATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent VNOTIFICATIONRowDeleting(Me, New VNOTIFICATIONRowChangeEvent(CType(e.Row,VNOTIFICATIONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVNOTIFICATIONRow(ByVal row As VNOTIFICATIONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VNOTIFICATIONRow
        Inherits DataRow
        
        Private tableVNOTIFICATION As VNOTIFICATIONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVNOTIFICATION = CType(Me.Table,VNOTIFICATIONDataTable)
        End Sub
        
        Public Property NOTRECID As Long
            Get
                Return CType(Me(Me.tableVNOTIFICATION.NOTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVNOTIFICATION.NOTRECIDColumn) = value
            End Set
        End Property
        
        Public Property NOTNAME As String
            Get
                Return CType(Me(Me.tableVNOTIFICATION.NOTNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVNOTIFICATION.NOTNAMEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VNOTIFICATIONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VNOTIFICATIONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VNOTIFICATIONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VNOTIFICATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VPARTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPARRECID As DataColumn
        
        Private columnPARDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("VPART")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PARRECIDColumn As DataColumn
            Get
                Return Me.columnPARRECID
            End Get
        End Property
        
        Friend ReadOnly Property PARDESCColumn As DataColumn
            Get
                Return Me.columnPARDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VPARTRow
            Get
                Return CType(Me.Rows(index),VPARTRow)
            End Get
        End Property
        
        Public Event VPARTRowChanged As VPARTRowChangeEventHandler
        
        Public Event VPARTRowChanging As VPARTRowChangeEventHandler
        
        Public Event VPARTRowDeleted As VPARTRowChangeEventHandler
        
        Public Event VPARTRowDeleting As VPARTRowChangeEventHandler
        
        Public Overloads Sub AddVPARTRow(ByVal row As VPARTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVPARTRow(ByVal PARRECID As Long, ByVal PARDESC As String) As VPARTRow
            Dim rowVPARTRow As VPARTRow = CType(Me.NewRow,VPARTRow)
            rowVPARTRow.ItemArray = New Object() {PARRECID, PARDESC}
            Me.Rows.Add(rowVPARTRow)
            Return rowVPARTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VPARTDataTable = CType(MyBase.Clone,VPARTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VPARTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPARRECID = Me.Columns("PARRECID")
            Me.columnPARDESC = Me.Columns("PARDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnPARRECID = New DataColumn("PARRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARRECID)
            Me.columnPARDESC = New DataColumn("PARDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARDESC)
            Me.columnPARRECID.AllowDBNull = false
            Me.columnPARDESC.AllowDBNull = false
            Me.columnPARDESC.MaxLength = 20
        End Sub
        
        Public Function NewVPARTRow() As VPARTRow
            Return CType(Me.NewRow,VPARTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VPARTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VPARTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VPARTRowChangedEvent) Is Nothing) Then
                RaiseEvent VPARTRowChanged(Me, New VPARTRowChangeEvent(CType(e.Row,VPARTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VPARTRowChangingEvent) Is Nothing) Then
                RaiseEvent VPARTRowChanging(Me, New VPARTRowChangeEvent(CType(e.Row,VPARTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VPARTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VPARTRowDeleted(Me, New VPARTRowChangeEvent(CType(e.Row,VPARTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VPARTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VPARTRowDeleting(Me, New VPARTRowChangeEvent(CType(e.Row,VPARTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVPARTRow(ByVal row As VPARTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VPARTRow
        Inherits DataRow
        
        Private tableVPART As VPARTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVPART = CType(Me.Table,VPARTDataTable)
        End Sub
        
        Public Property PARRECID As Long
            Get
                Return CType(Me(Me.tableVPART.PARRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVPART.PARRECIDColumn) = value
            End Set
        End Property
        
        Public Property PARDESC As String
            Get
                Return CType(Me(Me.tableVPART.PARDESCColumn),String)
            End Get
            Set
                Me(Me.tableVPART.PARDESCColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VPARTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VPARTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VPARTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VPARTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTASDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQUORECID As DataColumn
        
        Private columnQUOSPCRECID As DataColumn
        
        Private columnQUOCTYRECID As DataColumn
        
        Private columnQUONOTRECID As DataColumn
        
        Private columnQUOEXPORTQUOTA As DataColumn
        
        Private columnQUOUNIT As DataColumn
        
        Private columnQUOYEAR As DataColumn
        
        Private columnQUONOTES As DataColumn
        
        Private columnQUOQUOTRMRECID As DataColumn
        
        Private columnQUOQUOSRCRECID As DataColumn
        
        Friend Sub New()
            MyBase.New("VQUOTAS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QUORECIDColumn As DataColumn
            Get
                Return Me.columnQUORECID
            End Get
        End Property
        
        Friend ReadOnly Property QUOSPCRECIDColumn As DataColumn
            Get
                Return Me.columnQUOSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property QUOCTYRECIDColumn As DataColumn
            Get
                Return Me.columnQUOCTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property QUONOTRECIDColumn As DataColumn
            Get
                Return Me.columnQUONOTRECID
            End Get
        End Property
        
        Friend ReadOnly Property QUOEXPORTQUOTAColumn As DataColumn
            Get
                Return Me.columnQUOEXPORTQUOTA
            End Get
        End Property
        
        Friend ReadOnly Property QUOUNITColumn As DataColumn
            Get
                Return Me.columnQUOUNIT
            End Get
        End Property
        
        Friend ReadOnly Property QUOYEARColumn As DataColumn
            Get
                Return Me.columnQUOYEAR
            End Get
        End Property
        
        Friend ReadOnly Property QUONOTESColumn As DataColumn
            Get
                Return Me.columnQUONOTES
            End Get
        End Property
        
        Friend ReadOnly Property QUOQUOTRMRECIDColumn As DataColumn
            Get
                Return Me.columnQUOQUOTRMRECID
            End Get
        End Property
        
        Friend ReadOnly Property QUOQUOSRCRECIDColumn As DataColumn
            Get
                Return Me.columnQUOQUOSRCRECID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VQUOTASRow
            Get
                Return CType(Me.Rows(index),VQUOTASRow)
            End Get
        End Property
        
        Public Event VQUOTASRowChanged As VQUOTASRowChangeEventHandler
        
        Public Event VQUOTASRowChanging As VQUOTASRowChangeEventHandler
        
        Public Event VQUOTASRowDeleted As VQUOTASRowChangeEventHandler
        
        Public Event VQUOTASRowDeleting As VQUOTASRowChangeEventHandler
        
        Public Overloads Sub AddVQUOTASRow(ByVal row As VQUOTASRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVQUOTASRow(ByVal QUORECID As Long, ByVal QUOSPCRECID As Long, ByVal QUOCTYRECID As Long, ByVal QUONOTRECID As Long, ByVal QUOEXPORTQUOTA As String, ByVal QUOUNIT As String, ByVal QUOYEAR As Long, ByVal QUONOTES As String, ByVal QUOQUOTRMRECID As Long, ByVal QUOQUOSRCRECID As Long) As VQUOTASRow
            Dim rowVQUOTASRow As VQUOTASRow = CType(Me.NewRow,VQUOTASRow)
            rowVQUOTASRow.ItemArray = New Object() {QUORECID, QUOSPCRECID, QUOCTYRECID, QUONOTRECID, QUOEXPORTQUOTA, QUOUNIT, QUOYEAR, QUONOTES, QUOQUOTRMRECID, QUOQUOSRCRECID}
            Me.Rows.Add(rowVQUOTASRow)
            Return rowVQUOTASRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VQUOTASDataTable = CType(MyBase.Clone,VQUOTASDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VQUOTASDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQUORECID = Me.Columns("QUORECID")
            Me.columnQUOSPCRECID = Me.Columns("QUOSPCRECID")
            Me.columnQUOCTYRECID = Me.Columns("QUOCTYRECID")
            Me.columnQUONOTRECID = Me.Columns("QUONOTRECID")
            Me.columnQUOEXPORTQUOTA = Me.Columns("QUOEXPORTQUOTA")
            Me.columnQUOUNIT = Me.Columns("QUOUNIT")
            Me.columnQUOYEAR = Me.Columns("QUOYEAR")
            Me.columnQUONOTES = Me.Columns("QUONOTES")
            Me.columnQUOQUOTRMRECID = Me.Columns("QUOQUOTRMRECID")
            Me.columnQUOQUOSRCRECID = Me.Columns("QUOQUOSRCRECID")
        End Sub
        
        Private Sub InitClass()
            Me.columnQUORECID = New DataColumn("QUORECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUORECID)
            Me.columnQUOSPCRECID = New DataColumn("QUOSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOSPCRECID)
            Me.columnQUOCTYRECID = New DataColumn("QUOCTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOCTYRECID)
            Me.columnQUONOTRECID = New DataColumn("QUONOTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUONOTRECID)
            Me.columnQUOEXPORTQUOTA = New DataColumn("QUOEXPORTQUOTA", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOEXPORTQUOTA)
            Me.columnQUOUNIT = New DataColumn("QUOUNIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOUNIT)
            Me.columnQUOYEAR = New DataColumn("QUOYEAR", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOYEAR)
            Me.columnQUONOTES = New DataColumn("QUONOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUONOTES)
            Me.columnQUOQUOTRMRECID = New DataColumn("QUOQUOTRMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOQUOTRMRECID)
            Me.columnQUOQUOSRCRECID = New DataColumn("QUOQUOSRCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOQUOSRCRECID)
            Me.columnQUORECID.AllowDBNull = false
            Me.columnQUOSPCRECID.AllowDBNull = false
            Me.columnQUOCTYRECID.AllowDBNull = false
            Me.columnQUONOTRECID.AllowDBNull = false
            Me.columnQUOEXPORTQUOTA.AllowDBNull = false
            Me.columnQUOEXPORTQUOTA.MaxLength = 30
            Me.columnQUOUNIT.MaxLength = 10
            Me.columnQUOYEAR.AllowDBNull = false
            Me.columnQUONOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVQUOTASRow() As VQUOTASRow
            Return CType(Me.NewRow,VQUOTASRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VQUOTASRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VQUOTASRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VQUOTASRowChangedEvent) Is Nothing) Then
                RaiseEvent VQUOTASRowChanged(Me, New VQUOTASRowChangeEvent(CType(e.Row,VQUOTASRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VQUOTASRowChangingEvent) Is Nothing) Then
                RaiseEvent VQUOTASRowChanging(Me, New VQUOTASRowChangeEvent(CType(e.Row,VQUOTASRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VQUOTASRowDeletedEvent) Is Nothing) Then
                RaiseEvent VQUOTASRowDeleted(Me, New VQUOTASRowChangeEvent(CType(e.Row,VQUOTASRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VQUOTASRowDeletingEvent) Is Nothing) Then
                RaiseEvent VQUOTASRowDeleting(Me, New VQUOTASRowChangeEvent(CType(e.Row,VQUOTASRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVQUOTASRow(ByVal row As VQUOTASRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTASRow
        Inherits DataRow
        
        Private tableVQUOTAS As VQUOTASDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVQUOTAS = CType(Me.Table,VQUOTASDataTable)
        End Sub
        
        Public Property QUORECID As Long
            Get
                Return CType(Me(Me.tableVQUOTAS.QUORECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTAS.QUORECIDColumn) = value
            End Set
        End Property
        
        Public Property QUOSPCRECID As Long
            Get
                Return CType(Me(Me.tableVQUOTAS.QUOSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property QUOCTYRECID As Long
            Get
                Return CType(Me(Me.tableVQUOTAS.QUOCTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOCTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property QUONOTRECID As Long
            Get
                Return CType(Me(Me.tableVQUOTAS.QUONOTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTAS.QUONOTRECIDColumn) = value
            End Set
        End Property
        
        Public Property QUOEXPORTQUOTA As String
            Get
                Return CType(Me(Me.tableVQUOTAS.QUOEXPORTQUOTAColumn),String)
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOEXPORTQUOTAColumn) = value
            End Set
        End Property
        
        Public Property QUOUNIT As String
            Get
                Try 
                    Return CType(Me(Me.tableVQUOTAS.QUOUNITColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOUNITColumn) = value
            End Set
        End Property
        
        Public Property QUOYEAR As Long
            Get
                Return CType(Me(Me.tableVQUOTAS.QUOYEARColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOYEARColumn) = value
            End Set
        End Property
        
        Public Property QUONOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVQUOTAS.QUONOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVQUOTAS.QUONOTESColumn) = value
            End Set
        End Property
        
        Public Property QUOQUOTRMRECID As Long
            Get
                Try 
                    Return CType(Me(Me.tableVQUOTAS.QUOQUOTRMRECIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOQUOTRMRECIDColumn) = value
            End Set
        End Property
        
        Public Property QUOQUOSRCRECID As Long
            Get
                Try 
                    Return CType(Me(Me.tableVQUOTAS.QUOQUOSRCRECIDColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVQUOTAS.QUOQUOSRCRECIDColumn) = value
            End Set
        End Property
        
        Public Function IsQUOUNITNull() As Boolean
            Return Me.IsNull(Me.tableVQUOTAS.QUOUNITColumn)
        End Function
        
        Public Sub SetQUOUNITNull()
            Me(Me.tableVQUOTAS.QUOUNITColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQUONOTESNull() As Boolean
            Return Me.IsNull(Me.tableVQUOTAS.QUONOTESColumn)
        End Function
        
        Public Sub SetQUONOTESNull()
            Me(Me.tableVQUOTAS.QUONOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQUOQUOTRMRECIDNull() As Boolean
            Return Me.IsNull(Me.tableVQUOTAS.QUOQUOTRMRECIDColumn)
        End Function
        
        Public Sub SetQUOQUOTRMRECIDNull()
            Me(Me.tableVQUOTAS.QUOQUOTRMRECIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQUOQUOSRCRECIDNull() As Boolean
            Return Me.IsNull(Me.tableVQUOTAS.QUOQUOSRCRECIDColumn)
        End Function
        
        Public Sub SetQUOQUOSRCRECIDNull()
            Me(Me.tableVQUOTAS.QUOQUOSRCRECIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTASRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VQUOTASRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VQUOTASRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VQUOTASRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTASOURCEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQUOSRCRECID As DataColumn
        
        Private columnQUOSRCSOURCE As DataColumn
        
        Friend Sub New()
            MyBase.New("VQUOTASOURCE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QUOSRCRECIDColumn As DataColumn
            Get
                Return Me.columnQUOSRCRECID
            End Get
        End Property
        
        Friend ReadOnly Property QUOSRCSOURCEColumn As DataColumn
            Get
                Return Me.columnQUOSRCSOURCE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VQUOTASOURCERow
            Get
                Return CType(Me.Rows(index),VQUOTASOURCERow)
            End Get
        End Property
        
        Public Event VQUOTASOURCERowChanged As VQUOTASOURCERowChangeEventHandler
        
        Public Event VQUOTASOURCERowChanging As VQUOTASOURCERowChangeEventHandler
        
        Public Event VQUOTASOURCERowDeleted As VQUOTASOURCERowChangeEventHandler
        
        Public Event VQUOTASOURCERowDeleting As VQUOTASOURCERowChangeEventHandler
        
        Public Overloads Sub AddVQUOTASOURCERow(ByVal row As VQUOTASOURCERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVQUOTASOURCERow(ByVal QUOSRCRECID As Long, ByVal QUOSRCSOURCE As String) As VQUOTASOURCERow
            Dim rowVQUOTASOURCERow As VQUOTASOURCERow = CType(Me.NewRow,VQUOTASOURCERow)
            rowVQUOTASOURCERow.ItemArray = New Object() {QUOSRCRECID, QUOSRCSOURCE}
            Me.Rows.Add(rowVQUOTASOURCERow)
            Return rowVQUOTASOURCERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VQUOTASOURCEDataTable = CType(MyBase.Clone,VQUOTASOURCEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VQUOTASOURCEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQUOSRCRECID = Me.Columns("QUOSRCRECID")
            Me.columnQUOSRCSOURCE = Me.Columns("QUOSRCSOURCE")
        End Sub
        
        Private Sub InitClass()
            Me.columnQUOSRCRECID = New DataColumn("QUOSRCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOSRCRECID)
            Me.columnQUOSRCSOURCE = New DataColumn("QUOSRCSOURCE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOSRCSOURCE)
            Me.columnQUOSRCRECID.AllowDBNull = false
            Me.columnQUOSRCSOURCE.AllowDBNull = false
            Me.columnQUOSRCSOURCE.MaxLength = 5
        End Sub
        
        Public Function NewVQUOTASOURCERow() As VQUOTASOURCERow
            Return CType(Me.NewRow,VQUOTASOURCERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VQUOTASOURCERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VQUOTASOURCERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VQUOTASOURCERowChangedEvent) Is Nothing) Then
                RaiseEvent VQUOTASOURCERowChanged(Me, New VQUOTASOURCERowChangeEvent(CType(e.Row,VQUOTASOURCERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VQUOTASOURCERowChangingEvent) Is Nothing) Then
                RaiseEvent VQUOTASOURCERowChanging(Me, New VQUOTASOURCERowChangeEvent(CType(e.Row,VQUOTASOURCERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VQUOTASOURCERowDeletedEvent) Is Nothing) Then
                RaiseEvent VQUOTASOURCERowDeleted(Me, New VQUOTASOURCERowChangeEvent(CType(e.Row,VQUOTASOURCERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VQUOTASOURCERowDeletingEvent) Is Nothing) Then
                RaiseEvent VQUOTASOURCERowDeleting(Me, New VQUOTASOURCERowChangeEvent(CType(e.Row,VQUOTASOURCERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVQUOTASOURCERow(ByVal row As VQUOTASOURCERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTASOURCERow
        Inherits DataRow
        
        Private tableVQUOTASOURCE As VQUOTASOURCEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVQUOTASOURCE = CType(Me.Table,VQUOTASOURCEDataTable)
        End Sub
        
        Public Property QUOSRCRECID As Long
            Get
                Return CType(Me(Me.tableVQUOTASOURCE.QUOSRCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTASOURCE.QUOSRCRECIDColumn) = value
            End Set
        End Property
        
        Public Property QUOSRCSOURCE As String
            Get
                Return CType(Me(Me.tableVQUOTASOURCE.QUOSRCSOURCEColumn),String)
            End Get
            Set
                Me(Me.tableVQUOTASOURCE.QUOSRCSOURCEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTASOURCERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VQUOTASOURCERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VQUOTASOURCERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VQUOTASOURCERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTATERMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnQUOTRMRECID As DataColumn
        
        Private columnQUOTRMTERM As DataColumn
        
        Friend Sub New()
            MyBase.New("VQUOTATERMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property QUOTRMRECIDColumn As DataColumn
            Get
                Return Me.columnQUOTRMRECID
            End Get
        End Property
        
        Friend ReadOnly Property QUOTRMTERMColumn As DataColumn
            Get
                Return Me.columnQUOTRMTERM
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VQUOTATERMSRow
            Get
                Return CType(Me.Rows(index),VQUOTATERMSRow)
            End Get
        End Property
        
        Public Event VQUOTATERMSRowChanged As VQUOTATERMSRowChangeEventHandler
        
        Public Event VQUOTATERMSRowChanging As VQUOTATERMSRowChangeEventHandler
        
        Public Event VQUOTATERMSRowDeleted As VQUOTATERMSRowChangeEventHandler
        
        Public Event VQUOTATERMSRowDeleting As VQUOTATERMSRowChangeEventHandler
        
        Public Overloads Sub AddVQUOTATERMSRow(ByVal row As VQUOTATERMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVQUOTATERMSRow(ByVal QUOTRMRECID As Long, ByVal QUOTRMTERM As String) As VQUOTATERMSRow
            Dim rowVQUOTATERMSRow As VQUOTATERMSRow = CType(Me.NewRow,VQUOTATERMSRow)
            rowVQUOTATERMSRow.ItemArray = New Object() {QUOTRMRECID, QUOTRMTERM}
            Me.Rows.Add(rowVQUOTATERMSRow)
            Return rowVQUOTATERMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VQUOTATERMSDataTable = CType(MyBase.Clone,VQUOTATERMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VQUOTATERMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnQUOTRMRECID = Me.Columns("QUOTRMRECID")
            Me.columnQUOTRMTERM = Me.Columns("QUOTRMTERM")
        End Sub
        
        Private Sub InitClass()
            Me.columnQUOTRMRECID = New DataColumn("QUOTRMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOTRMRECID)
            Me.columnQUOTRMTERM = New DataColumn("QUOTRMTERM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQUOTRMTERM)
            Me.columnQUOTRMRECID.AllowDBNull = false
            Me.columnQUOTRMTERM.AllowDBNull = false
            Me.columnQUOTRMTERM.MaxLength = 50
        End Sub
        
        Public Function NewVQUOTATERMSRow() As VQUOTATERMSRow
            Return CType(Me.NewRow,VQUOTATERMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VQUOTATERMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VQUOTATERMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VQUOTATERMSRowChangedEvent) Is Nothing) Then
                RaiseEvent VQUOTATERMSRowChanged(Me, New VQUOTATERMSRowChangeEvent(CType(e.Row,VQUOTATERMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VQUOTATERMSRowChangingEvent) Is Nothing) Then
                RaiseEvent VQUOTATERMSRowChanging(Me, New VQUOTATERMSRowChangeEvent(CType(e.Row,VQUOTATERMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VQUOTATERMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VQUOTATERMSRowDeleted(Me, New VQUOTATERMSRowChangeEvent(CType(e.Row,VQUOTATERMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VQUOTATERMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VQUOTATERMSRowDeleting(Me, New VQUOTATERMSRowChangeEvent(CType(e.Row,VQUOTATERMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVQUOTATERMSRow(ByVal row As VQUOTATERMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTATERMSRow
        Inherits DataRow
        
        Private tableVQUOTATERMS As VQUOTATERMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVQUOTATERMS = CType(Me.Table,VQUOTATERMSDataTable)
        End Sub
        
        Public Property QUOTRMRECID As Long
            Get
                Return CType(Me(Me.tableVQUOTATERMS.QUOTRMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVQUOTATERMS.QUOTRMRECIDColumn) = value
            End Set
        End Property
        
        Public Property QUOTRMTERM As String
            Get
                Return CType(Me(Me.tableVQUOTATERMS.QUOTRMTERMColumn),String)
            End Get
            Set
                Me(Me.tableVQUOTATERMS.QUOTRMTERMColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VQUOTATERMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VQUOTATERMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VQUOTATERMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VQUOTATERMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VSPECIESDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSPCRECID As DataColumn
        
        Private columnSPCGENRECID As DataColumn
        
        Private columnSPCNAME As DataColumn
        
        Private columnSPCAUTHOR As DataColumn
        
        Private columnSPCINFRARANK As DataColumn
        
        Private columnSPCINFRAEPITHET As DataColumn
        
        Private columnSPCINFRARANKAUTHOR As DataColumn
        
        Private columnSPCSTOCKNAME As DataColumn
        
        Private columnSPCSTATUS As DataColumn
        
        Private columnSPCDISTRIBCOMPLETE As DataColumn
        
        Private columnSPCNOTES As DataColumn
        
        Private columnSPCMIGRATORY As DataColumn
        
        Private columnSPCFRESHWATER As DataColumn
        
        Private columnSPCMARINE As DataColumn
        
        Private columnSPCIDMANUAL As DataColumn
        
        Friend Sub New()
            MyBase.New("VSPECIES")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SPCRECIDColumn As DataColumn
            Get
                Return Me.columnSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property SPCGENRECIDColumn As DataColumn
            Get
                Return Me.columnSPCGENRECID
            End Get
        End Property
        
        Friend ReadOnly Property SPCNAMEColumn As DataColumn
            Get
                Return Me.columnSPCNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPCAUTHORColumn As DataColumn
            Get
                Return Me.columnSPCAUTHOR
            End Get
        End Property
        
        Friend ReadOnly Property SPCINFRARANKColumn As DataColumn
            Get
                Return Me.columnSPCINFRARANK
            End Get
        End Property
        
        Friend ReadOnly Property SPCINFRAEPITHETColumn As DataColumn
            Get
                Return Me.columnSPCINFRAEPITHET
            End Get
        End Property
        
        Friend ReadOnly Property SPCINFRARANKAUTHORColumn As DataColumn
            Get
                Return Me.columnSPCINFRARANKAUTHOR
            End Get
        End Property
        
        Friend ReadOnly Property SPCSTOCKNAMEColumn As DataColumn
            Get
                Return Me.columnSPCSTOCKNAME
            End Get
        End Property
        
        Friend ReadOnly Property SPCSTATUSColumn As DataColumn
            Get
                Return Me.columnSPCSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property SPCDISTRIBCOMPLETEColumn As DataColumn
            Get
                Return Me.columnSPCDISTRIBCOMPLETE
            End Get
        End Property
        
        Friend ReadOnly Property SPCNOTESColumn As DataColumn
            Get
                Return Me.columnSPCNOTES
            End Get
        End Property
        
        Friend ReadOnly Property SPCMIGRATORYColumn As DataColumn
            Get
                Return Me.columnSPCMIGRATORY
            End Get
        End Property
        
        Friend ReadOnly Property SPCFRESHWATERColumn As DataColumn
            Get
                Return Me.columnSPCFRESHWATER
            End Get
        End Property
        
        Friend ReadOnly Property SPCMARINEColumn As DataColumn
            Get
                Return Me.columnSPCMARINE
            End Get
        End Property
        
        Friend ReadOnly Property SPCIDMANUALColumn As DataColumn
            Get
                Return Me.columnSPCIDMANUAL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VSPECIESRow
            Get
                Return CType(Me.Rows(index),VSPECIESRow)
            End Get
        End Property
        
        Public Event VSPECIESRowChanged As VSPECIESRowChangeEventHandler
        
        Public Event VSPECIESRowChanging As VSPECIESRowChangeEventHandler
        
        Public Event VSPECIESRowDeleted As VSPECIESRowChangeEventHandler
        
        Public Event VSPECIESRowDeleting As VSPECIESRowChangeEventHandler
        
        Public Overloads Sub AddVSPECIESRow(ByVal row As VSPECIESRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVSPECIESRow(ByVal SPCRECID As Long, ByVal SPCGENRECID As Long, ByVal SPCNAME As String, ByVal SPCAUTHOR As String, ByVal SPCINFRARANK As String, ByVal SPCINFRAEPITHET As String, ByVal SPCINFRARANKAUTHOR As String, ByVal SPCSTOCKNAME As String, ByVal SPCSTATUS As String, ByVal SPCDISTRIBCOMPLETE As String, ByVal SPCNOTES As String, ByVal SPCMIGRATORY As Boolean, ByVal SPCFRESHWATER As Boolean, ByVal SPCMARINE As Boolean, ByVal SPCIDMANUAL As String) As VSPECIESRow
            Dim rowVSPECIESRow As VSPECIESRow = CType(Me.NewRow,VSPECIESRow)
            rowVSPECIESRow.ItemArray = New Object() {SPCRECID, SPCGENRECID, SPCNAME, SPCAUTHOR, SPCINFRARANK, SPCINFRAEPITHET, SPCINFRARANKAUTHOR, SPCSTOCKNAME, SPCSTATUS, SPCDISTRIBCOMPLETE, SPCNOTES, SPCMIGRATORY, SPCFRESHWATER, SPCMARINE, SPCIDMANUAL}
            Me.Rows.Add(rowVSPECIESRow)
            Return rowVSPECIESRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VSPECIESDataTable = CType(MyBase.Clone,VSPECIESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VSPECIESDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSPCRECID = Me.Columns("SPCRECID")
            Me.columnSPCGENRECID = Me.Columns("SPCGENRECID")
            Me.columnSPCNAME = Me.Columns("SPCNAME")
            Me.columnSPCAUTHOR = Me.Columns("SPCAUTHOR")
            Me.columnSPCINFRARANK = Me.Columns("SPCINFRARANK")
            Me.columnSPCINFRAEPITHET = Me.Columns("SPCINFRAEPITHET")
            Me.columnSPCINFRARANKAUTHOR = Me.Columns("SPCINFRARANKAUTHOR")
            Me.columnSPCSTOCKNAME = Me.Columns("SPCSTOCKNAME")
            Me.columnSPCSTATUS = Me.Columns("SPCSTATUS")
            Me.columnSPCDISTRIBCOMPLETE = Me.Columns("SPCDISTRIBCOMPLETE")
            Me.columnSPCNOTES = Me.Columns("SPCNOTES")
            Me.columnSPCMIGRATORY = Me.Columns("SPCMIGRATORY")
            Me.columnSPCFRESHWATER = Me.Columns("SPCFRESHWATER")
            Me.columnSPCMARINE = Me.Columns("SPCMARINE")
            Me.columnSPCIDMANUAL = Me.Columns("SPCIDMANUAL")
        End Sub
        
        Private Sub InitClass()
            Me.columnSPCRECID = New DataColumn("SPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCRECID)
            Me.columnSPCGENRECID = New DataColumn("SPCGENRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCGENRECID)
            Me.columnSPCNAME = New DataColumn("SPCNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCNAME)
            Me.columnSPCAUTHOR = New DataColumn("SPCAUTHOR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCAUTHOR)
            Me.columnSPCINFRARANK = New DataColumn("SPCINFRARANK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCINFRARANK)
            Me.columnSPCINFRAEPITHET = New DataColumn("SPCINFRAEPITHET", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCINFRAEPITHET)
            Me.columnSPCINFRARANKAUTHOR = New DataColumn("SPCINFRARANKAUTHOR", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCINFRARANKAUTHOR)
            Me.columnSPCSTOCKNAME = New DataColumn("SPCSTOCKNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCSTOCKNAME)
            Me.columnSPCSTATUS = New DataColumn("SPCSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCSTATUS)
            Me.columnSPCDISTRIBCOMPLETE = New DataColumn("SPCDISTRIBCOMPLETE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCDISTRIBCOMPLETE)
            Me.columnSPCNOTES = New DataColumn("SPCNOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCNOTES)
            Me.columnSPCMIGRATORY = New DataColumn("SPCMIGRATORY", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCMIGRATORY)
            Me.columnSPCFRESHWATER = New DataColumn("SPCFRESHWATER", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCFRESHWATER)
            Me.columnSPCMARINE = New DataColumn("SPCMARINE", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCMARINE)
            Me.columnSPCIDMANUAL = New DataColumn("SPCIDMANUAL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSPCIDMANUAL)
            Me.columnSPCRECID.AllowDBNull = false
            Me.columnSPCGENRECID.AllowDBNull = false
            Me.columnSPCNAME.AllowDBNull = false
            Me.columnSPCNAME.MaxLength = 30
            Me.columnSPCAUTHOR.MaxLength = 70
            Me.columnSPCINFRARANK.MaxLength = 4
            Me.columnSPCINFRAEPITHET.MaxLength = 30
            Me.columnSPCINFRARANKAUTHOR.MaxLength = 70
            Me.columnSPCSTOCKNAME.MaxLength = 150
            Me.columnSPCSTATUS.AllowDBNull = false
            Me.columnSPCSTATUS.MaxLength = 1
            Me.columnSPCDISTRIBCOMPLETE.MaxLength = 1
            Me.columnSPCNOTES.MaxLength = 2147483647
            Me.columnSPCMIGRATORY.AllowDBNull = false
            Me.columnSPCFRESHWATER.AllowDBNull = false
            Me.columnSPCMARINE.AllowDBNull = false
            Me.columnSPCIDMANUAL.MaxLength = 30
        End Sub
        
        Public Function NewVSPECIESRow() As VSPECIESRow
            Return CType(Me.NewRow,VSPECIESRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VSPECIESRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VSPECIESRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VSPECIESRowChangedEvent) Is Nothing) Then
                RaiseEvent VSPECIESRowChanged(Me, New VSPECIESRowChangeEvent(CType(e.Row,VSPECIESRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VSPECIESRowChangingEvent) Is Nothing) Then
                RaiseEvent VSPECIESRowChanging(Me, New VSPECIESRowChangeEvent(CType(e.Row,VSPECIESRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VSPECIESRowDeletedEvent) Is Nothing) Then
                RaiseEvent VSPECIESRowDeleted(Me, New VSPECIESRowChangeEvent(CType(e.Row,VSPECIESRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VSPECIESRowDeletingEvent) Is Nothing) Then
                RaiseEvent VSPECIESRowDeleting(Me, New VSPECIESRowChangeEvent(CType(e.Row,VSPECIESRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVSPECIESRow(ByVal row As VSPECIESRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VSPECIESRow
        Inherits DataRow
        
        Private tableVSPECIES As VSPECIESDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVSPECIES = CType(Me.Table,VSPECIESDataTable)
        End Sub
        
        Public Property SPCRECID As Long
            Get
                Return CType(Me(Me.tableVSPECIES.SPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property SPCGENRECID As Long
            Get
                Return CType(Me(Me.tableVSPECIES.SPCGENRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCGENRECIDColumn) = value
            End Set
        End Property
        
        Public Property SPCNAME As String
            Get
                Return CType(Me(Me.tableVSPECIES.SPCNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPCAUTHOR As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCAUTHORColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCAUTHORColumn) = value
            End Set
        End Property
        
        Public Property SPCINFRARANK As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCINFRARANKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCINFRARANKColumn) = value
            End Set
        End Property
        
        Public Property SPCINFRAEPITHET As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCINFRAEPITHETColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCINFRAEPITHETColumn) = value
            End Set
        End Property
        
        Public Property SPCINFRARANKAUTHOR As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCINFRARANKAUTHORColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCINFRARANKAUTHORColumn) = value
            End Set
        End Property
        
        Public Property SPCSTOCKNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCSTOCKNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCSTOCKNAMEColumn) = value
            End Set
        End Property
        
        Public Property SPCSTATUS As String
            Get
                Return CType(Me(Me.tableVSPECIES.SPCSTATUSColumn),String)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCSTATUSColumn) = value
            End Set
        End Property
        
        Public Property SPCDISTRIBCOMPLETE As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCDISTRIBCOMPLETEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCDISTRIBCOMPLETEColumn) = value
            End Set
        End Property
        
        Public Property SPCNOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCNOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCNOTESColumn) = value
            End Set
        End Property
        
        Public Property SPCMIGRATORY As Boolean
            Get
                Return CType(Me(Me.tableVSPECIES.SPCMIGRATORYColumn),Boolean)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCMIGRATORYColumn) = value
            End Set
        End Property
        
        Public Property SPCFRESHWATER As Boolean
            Get
                Return CType(Me(Me.tableVSPECIES.SPCFRESHWATERColumn),Boolean)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCFRESHWATERColumn) = value
            End Set
        End Property
        
        Public Property SPCMARINE As Boolean
            Get
                Return CType(Me(Me.tableVSPECIES.SPCMARINEColumn),Boolean)
            End Get
            Set
                Me(Me.tableVSPECIES.SPCMARINEColumn) = value
            End Set
        End Property
        
        Public Property SPCIDMANUAL As String
            Get
                Try 
                    Return CType(Me(Me.tableVSPECIES.SPCIDMANUALColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVSPECIES.SPCIDMANUALColumn) = value
            End Set
        End Property
        
        Public Function IsSPCAUTHORNull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCAUTHORColumn)
        End Function
        
        Public Sub SetSPCAUTHORNull()
            Me(Me.tableVSPECIES.SPCAUTHORColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCINFRARANKNull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCINFRARANKColumn)
        End Function
        
        Public Sub SetSPCINFRARANKNull()
            Me(Me.tableVSPECIES.SPCINFRARANKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCINFRAEPITHETNull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCINFRAEPITHETColumn)
        End Function
        
        Public Sub SetSPCINFRAEPITHETNull()
            Me(Me.tableVSPECIES.SPCINFRAEPITHETColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCINFRARANKAUTHORNull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCINFRARANKAUTHORColumn)
        End Function
        
        Public Sub SetSPCINFRARANKAUTHORNull()
            Me(Me.tableVSPECIES.SPCINFRARANKAUTHORColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCSTOCKNAMENull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCSTOCKNAMEColumn)
        End Function
        
        Public Sub SetSPCSTOCKNAMENull()
            Me(Me.tableVSPECIES.SPCSTOCKNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCDISTRIBCOMPLETENull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCDISTRIBCOMPLETEColumn)
        End Function
        
        Public Sub SetSPCDISTRIBCOMPLETENull()
            Me(Me.tableVSPECIES.SPCDISTRIBCOMPLETEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCNOTESNull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCNOTESColumn)
        End Function
        
        Public Sub SetSPCNOTESNull()
            Me(Me.tableVSPECIES.SPCNOTESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSPCIDMANUALNull() As Boolean
            Return Me.IsNull(Me.tableVSPECIES.SPCIDMANUALColumn)
        End Function
        
        Public Sub SetSPCIDMANUALNull()
            Me(Me.tableVSPECIES.SPCIDMANUALColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VSPECIESRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VSPECIESRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VSPECIESRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VSPECIESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VSYNLINKDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYNRECID As DataColumn
        
        Private columnSYNSPCRECID As DataColumn
        
        Private columnSYNPARENTRECID As DataColumn
        
        Friend Sub New()
            MyBase.New("VSYNLINK")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property SYNRECIDColumn As DataColumn
            Get
                Return Me.columnSYNRECID
            End Get
        End Property
        
        Friend ReadOnly Property SYNSPCRECIDColumn As DataColumn
            Get
                Return Me.columnSYNSPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property SYNPARENTRECIDColumn As DataColumn
            Get
                Return Me.columnSYNPARENTRECID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VSYNLINKRow
            Get
                Return CType(Me.Rows(index),VSYNLINKRow)
            End Get
        End Property
        
        Public Event VSYNLINKRowChanged As VSYNLINKRowChangeEventHandler
        
        Public Event VSYNLINKRowChanging As VSYNLINKRowChangeEventHandler
        
        Public Event VSYNLINKRowDeleted As VSYNLINKRowChangeEventHandler
        
        Public Event VSYNLINKRowDeleting As VSYNLINKRowChangeEventHandler
        
        Public Overloads Sub AddVSYNLINKRow(ByVal row As VSYNLINKRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVSYNLINKRow(ByVal SYNRECID As Long, ByVal SYNSPCRECID As Long, ByVal SYNPARENTRECID As Long) As VSYNLINKRow
            Dim rowVSYNLINKRow As VSYNLINKRow = CType(Me.NewRow,VSYNLINKRow)
            rowVSYNLINKRow.ItemArray = New Object() {SYNRECID, SYNSPCRECID, SYNPARENTRECID}
            Me.Rows.Add(rowVSYNLINKRow)
            Return rowVSYNLINKRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VSYNLINKDataTable = CType(MyBase.Clone,VSYNLINKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VSYNLINKDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSYNRECID = Me.Columns("SYNRECID")
            Me.columnSYNSPCRECID = Me.Columns("SYNSPCRECID")
            Me.columnSYNPARENTRECID = Me.Columns("SYNPARENTRECID")
        End Sub
        
        Private Sub InitClass()
            Me.columnSYNRECID = New DataColumn("SYNRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSYNRECID)
            Me.columnSYNSPCRECID = New DataColumn("SYNSPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSYNSPCRECID)
            Me.columnSYNPARENTRECID = New DataColumn("SYNPARENTRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSYNPARENTRECID)
            Me.columnSYNRECID.AllowDBNull = false
            Me.columnSYNSPCRECID.AllowDBNull = false
            Me.columnSYNPARENTRECID.AllowDBNull = false
        End Sub
        
        Public Function NewVSYNLINKRow() As VSYNLINKRow
            Return CType(Me.NewRow,VSYNLINKRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VSYNLINKRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VSYNLINKRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VSYNLINKRowChangedEvent) Is Nothing) Then
                RaiseEvent VSYNLINKRowChanged(Me, New VSYNLINKRowChangeEvent(CType(e.Row,VSYNLINKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VSYNLINKRowChangingEvent) Is Nothing) Then
                RaiseEvent VSYNLINKRowChanging(Me, New VSYNLINKRowChangeEvent(CType(e.Row,VSYNLINKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VSYNLINKRowDeletedEvent) Is Nothing) Then
                RaiseEvent VSYNLINKRowDeleted(Me, New VSYNLINKRowChangeEvent(CType(e.Row,VSYNLINKRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VSYNLINKRowDeletingEvent) Is Nothing) Then
                RaiseEvent VSYNLINKRowDeleting(Me, New VSYNLINKRowChangeEvent(CType(e.Row,VSYNLINKRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVSYNLINKRow(ByVal row As VSYNLINKRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VSYNLINKRow
        Inherits DataRow
        
        Private tableVSYNLINK As VSYNLINKDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVSYNLINK = CType(Me.Table,VSYNLINKDataTable)
        End Sub
        
        Public Property SYNRECID As Long
            Get
                Return CType(Me(Me.tableVSYNLINK.SYNRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVSYNLINK.SYNRECIDColumn) = value
            End Set
        End Property
        
        Public Property SYNSPCRECID As Long
            Get
                Return CType(Me(Me.tableVSYNLINK.SYNSPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVSYNLINK.SYNSPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property SYNPARENTRECID As Long
            Get
                Return CType(Me(Me.tableVSYNLINK.SYNPARENTRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVSYNLINK.SYNPARENTRECIDColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VSYNLINKRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VSYNLINKRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VSYNLINKRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VSYNLINKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXCLASSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCLARECID As DataColumn
        
        Private columnCLAPHYRECID As DataColumn
        
        Private columnCLANAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VTAXCLASS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CLARECIDColumn As DataColumn
            Get
                Return Me.columnCLARECID
            End Get
        End Property
        
        Friend ReadOnly Property CLAPHYRECIDColumn As DataColumn
            Get
                Return Me.columnCLAPHYRECID
            End Get
        End Property
        
        Friend ReadOnly Property CLANAMEColumn As DataColumn
            Get
                Return Me.columnCLANAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VTAXCLASSRow
            Get
                Return CType(Me.Rows(index),VTAXCLASSRow)
            End Get
        End Property
        
        Public Event VTAXCLASSRowChanged As VTAXCLASSRowChangeEventHandler
        
        Public Event VTAXCLASSRowChanging As VTAXCLASSRowChangeEventHandler
        
        Public Event VTAXCLASSRowDeleted As VTAXCLASSRowChangeEventHandler
        
        Public Event VTAXCLASSRowDeleting As VTAXCLASSRowChangeEventHandler
        
        Public Overloads Sub AddVTAXCLASSRow(ByVal row As VTAXCLASSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVTAXCLASSRow(ByVal CLARECID As Long, ByVal CLAPHYRECID As Long, ByVal CLANAME As String) As VTAXCLASSRow
            Dim rowVTAXCLASSRow As VTAXCLASSRow = CType(Me.NewRow,VTAXCLASSRow)
            rowVTAXCLASSRow.ItemArray = New Object() {CLARECID, CLAPHYRECID, CLANAME}
            Me.Rows.Add(rowVTAXCLASSRow)
            Return rowVTAXCLASSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VTAXCLASSDataTable = CType(MyBase.Clone,VTAXCLASSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VTAXCLASSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCLARECID = Me.Columns("CLARECID")
            Me.columnCLAPHYRECID = Me.Columns("CLAPHYRECID")
            Me.columnCLANAME = Me.Columns("CLANAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnCLARECID = New DataColumn("CLARECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCLARECID)
            Me.columnCLAPHYRECID = New DataColumn("CLAPHYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCLAPHYRECID)
            Me.columnCLANAME = New DataColumn("CLANAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCLANAME)
            Me.columnCLARECID.AllowDBNull = false
            Me.columnCLAPHYRECID.AllowDBNull = false
            Me.columnCLANAME.AllowDBNull = false
            Me.columnCLANAME.MaxLength = 30
        End Sub
        
        Public Function NewVTAXCLASSRow() As VTAXCLASSRow
            Return CType(Me.NewRow,VTAXCLASSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VTAXCLASSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VTAXCLASSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VTAXCLASSRowChangedEvent) Is Nothing) Then
                RaiseEvent VTAXCLASSRowChanged(Me, New VTAXCLASSRowChangeEvent(CType(e.Row,VTAXCLASSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VTAXCLASSRowChangingEvent) Is Nothing) Then
                RaiseEvent VTAXCLASSRowChanging(Me, New VTAXCLASSRowChangeEvent(CType(e.Row,VTAXCLASSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VTAXCLASSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VTAXCLASSRowDeleted(Me, New VTAXCLASSRowChangeEvent(CType(e.Row,VTAXCLASSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VTAXCLASSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VTAXCLASSRowDeleting(Me, New VTAXCLASSRowChangeEvent(CType(e.Row,VTAXCLASSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVTAXCLASSRow(ByVal row As VTAXCLASSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXCLASSRow
        Inherits DataRow
        
        Private tableVTAXCLASS As VTAXCLASSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVTAXCLASS = CType(Me.Table,VTAXCLASSDataTable)
        End Sub
        
        Public Property CLARECID As Long
            Get
                Return CType(Me(Me.tableVTAXCLASS.CLARECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVTAXCLASS.CLARECIDColumn) = value
            End Set
        End Property
        
        Public Property CLAPHYRECID As Long
            Get
                Return CType(Me(Me.tableVTAXCLASS.CLAPHYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVTAXCLASS.CLAPHYRECIDColumn) = value
            End Set
        End Property
        
        Public Property CLANAME As String
            Get
                Return CType(Me(Me.tableVTAXCLASS.CLANAMEColumn),String)
            End Get
            Set
                Me(Me.tableVTAXCLASS.CLANAMEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXCLASSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VTAXCLASSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VTAXCLASSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VTAXCLASSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXORDERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnORDRECID As DataColumn
        
        Private columnORDCLARECID As DataColumn
        
        Private columnORDNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("VTAXORDER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ORDRECIDColumn As DataColumn
            Get
                Return Me.columnORDRECID
            End Get
        End Property
        
        Friend ReadOnly Property ORDCLARECIDColumn As DataColumn
            Get
                Return Me.columnORDCLARECID
            End Get
        End Property
        
        Friend ReadOnly Property ORDNAMEColumn As DataColumn
            Get
                Return Me.columnORDNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VTAXORDERRow
            Get
                Return CType(Me.Rows(index),VTAXORDERRow)
            End Get
        End Property
        
        Public Event VTAXORDERRowChanged As VTAXORDERRowChangeEventHandler
        
        Public Event VTAXORDERRowChanging As VTAXORDERRowChangeEventHandler
        
        Public Event VTAXORDERRowDeleted As VTAXORDERRowChangeEventHandler
        
        Public Event VTAXORDERRowDeleting As VTAXORDERRowChangeEventHandler
        
        Public Overloads Sub AddVTAXORDERRow(ByVal row As VTAXORDERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVTAXORDERRow(ByVal ORDRECID As Long, ByVal ORDCLARECID As Long, ByVal ORDNAME As String) As VTAXORDERRow
            Dim rowVTAXORDERRow As VTAXORDERRow = CType(Me.NewRow,VTAXORDERRow)
            rowVTAXORDERRow.ItemArray = New Object() {ORDRECID, ORDCLARECID, ORDNAME}
            Me.Rows.Add(rowVTAXORDERRow)
            Return rowVTAXORDERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VTAXORDERDataTable = CType(MyBase.Clone,VTAXORDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VTAXORDERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnORDRECID = Me.Columns("ORDRECID")
            Me.columnORDCLARECID = Me.Columns("ORDCLARECID")
            Me.columnORDNAME = Me.Columns("ORDNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnORDRECID = New DataColumn("ORDRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDRECID)
            Me.columnORDCLARECID = New DataColumn("ORDCLARECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDCLARECID)
            Me.columnORDNAME = New DataColumn("ORDNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnORDNAME)
            Me.columnORDRECID.AllowDBNull = false
            Me.columnORDCLARECID.AllowDBNull = false
            Me.columnORDNAME.AllowDBNull = false
            Me.columnORDNAME.MaxLength = 30
        End Sub
        
        Public Function NewVTAXORDERRow() As VTAXORDERRow
            Return CType(Me.NewRow,VTAXORDERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VTAXORDERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VTAXORDERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VTAXORDERRowChangedEvent) Is Nothing) Then
                RaiseEvent VTAXORDERRowChanged(Me, New VTAXORDERRowChangeEvent(CType(e.Row,VTAXORDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VTAXORDERRowChangingEvent) Is Nothing) Then
                RaiseEvent VTAXORDERRowChanging(Me, New VTAXORDERRowChangeEvent(CType(e.Row,VTAXORDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VTAXORDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VTAXORDERRowDeleted(Me, New VTAXORDERRowChangeEvent(CType(e.Row,VTAXORDERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VTAXORDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VTAXORDERRowDeleting(Me, New VTAXORDERRowChangeEvent(CType(e.Row,VTAXORDERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVTAXORDERRow(ByVal row As VTAXORDERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXORDERRow
        Inherits DataRow
        
        Private tableVTAXORDER As VTAXORDERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVTAXORDER = CType(Me.Table,VTAXORDERDataTable)
        End Sub
        
        Public Property ORDRECID As Long
            Get
                Return CType(Me(Me.tableVTAXORDER.ORDRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVTAXORDER.ORDRECIDColumn) = value
            End Set
        End Property
        
        Public Property ORDCLARECID As Long
            Get
                Return CType(Me(Me.tableVTAXORDER.ORDCLARECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVTAXORDER.ORDCLARECIDColumn) = value
            End Set
        End Property
        
        Public Property ORDNAME As String
            Get
                Return CType(Me(Me.tableVTAXORDER.ORDNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVTAXORDER.ORDNAMEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXORDERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VTAXORDERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VTAXORDERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VTAXORDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXPHYLUMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPHYRECID As DataColumn
        
        Private columnPHYNAME As DataColumn
        
        Private columnPHYKGMRECID As DataColumn
        
        Friend Sub New()
            MyBase.New("VTAXPHYLUM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PHYRECIDColumn As DataColumn
            Get
                Return Me.columnPHYRECID
            End Get
        End Property
        
        Friend ReadOnly Property PHYNAMEColumn As DataColumn
            Get
                Return Me.columnPHYNAME
            End Get
        End Property
        
        Friend ReadOnly Property PHYKGMRECIDColumn As DataColumn
            Get
                Return Me.columnPHYKGMRECID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VTAXPHYLUMRow
            Get
                Return CType(Me.Rows(index),VTAXPHYLUMRow)
            End Get
        End Property
        
        Public Event VTAXPHYLUMRowChanged As VTAXPHYLUMRowChangeEventHandler
        
        Public Event VTAXPHYLUMRowChanging As VTAXPHYLUMRowChangeEventHandler
        
        Public Event VTAXPHYLUMRowDeleted As VTAXPHYLUMRowChangeEventHandler
        
        Public Event VTAXPHYLUMRowDeleting As VTAXPHYLUMRowChangeEventHandler
        
        Public Overloads Sub AddVTAXPHYLUMRow(ByVal row As VTAXPHYLUMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVTAXPHYLUMRow(ByVal PHYRECID As Long, ByVal PHYNAME As String, ByVal PHYKGMRECID As Long) As VTAXPHYLUMRow
            Dim rowVTAXPHYLUMRow As VTAXPHYLUMRow = CType(Me.NewRow,VTAXPHYLUMRow)
            rowVTAXPHYLUMRow.ItemArray = New Object() {PHYRECID, PHYNAME, PHYKGMRECID}
            Me.Rows.Add(rowVTAXPHYLUMRow)
            Return rowVTAXPHYLUMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VTAXPHYLUMDataTable = CType(MyBase.Clone,VTAXPHYLUMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VTAXPHYLUMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPHYRECID = Me.Columns("PHYRECID")
            Me.columnPHYNAME = Me.Columns("PHYNAME")
            Me.columnPHYKGMRECID = Me.Columns("PHYKGMRECID")
        End Sub
        
        Private Sub InitClass()
            Me.columnPHYRECID = New DataColumn("PHYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHYRECID)
            Me.columnPHYNAME = New DataColumn("PHYNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHYNAME)
            Me.columnPHYKGMRECID = New DataColumn("PHYKGMRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHYKGMRECID)
            Me.columnPHYRECID.AllowDBNull = false
            Me.columnPHYNAME.AllowDBNull = false
            Me.columnPHYNAME.MaxLength = 30
            Me.columnPHYKGMRECID.AllowDBNull = false
        End Sub
        
        Public Function NewVTAXPHYLUMRow() As VTAXPHYLUMRow
            Return CType(Me.NewRow,VTAXPHYLUMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VTAXPHYLUMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VTAXPHYLUMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VTAXPHYLUMRowChangedEvent) Is Nothing) Then
                RaiseEvent VTAXPHYLUMRowChanged(Me, New VTAXPHYLUMRowChangeEvent(CType(e.Row,VTAXPHYLUMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VTAXPHYLUMRowChangingEvent) Is Nothing) Then
                RaiseEvent VTAXPHYLUMRowChanging(Me, New VTAXPHYLUMRowChangeEvent(CType(e.Row,VTAXPHYLUMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VTAXPHYLUMRowDeletedEvent) Is Nothing) Then
                RaiseEvent VTAXPHYLUMRowDeleted(Me, New VTAXPHYLUMRowChangeEvent(CType(e.Row,VTAXPHYLUMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VTAXPHYLUMRowDeletingEvent) Is Nothing) Then
                RaiseEvent VTAXPHYLUMRowDeleting(Me, New VTAXPHYLUMRowChangeEvent(CType(e.Row,VTAXPHYLUMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVTAXPHYLUMRow(ByVal row As VTAXPHYLUMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXPHYLUMRow
        Inherits DataRow
        
        Private tableVTAXPHYLUM As VTAXPHYLUMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVTAXPHYLUM = CType(Me.Table,VTAXPHYLUMDataTable)
        End Sub
        
        Public Property PHYRECID As Long
            Get
                Return CType(Me(Me.tableVTAXPHYLUM.PHYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVTAXPHYLUM.PHYRECIDColumn) = value
            End Set
        End Property
        
        Public Property PHYNAME As String
            Get
                Return CType(Me(Me.tableVTAXPHYLUM.PHYNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVTAXPHYLUM.PHYNAMEColumn) = value
            End Set
        End Property
        
        Public Property PHYKGMRECID As Long
            Get
                Return CType(Me(Me.tableVTAXPHYLUM.PHYKGMRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVTAXPHYLUM.PHYKGMRECIDColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VTAXPHYLUMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VTAXPHYLUMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VTAXPHYLUMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VTAXPHYLUMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VUSEDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUSERECID As DataColumn
        
        Private columnUSEUTYRECID As DataColumn
        
        Private columnUSESPCRECID As DataColumn
        
        Private columnUSEPARRECID As DataColumn
        
        Private columnUSELOURECID As DataColumn
        
        Private columnUSENOTES As DataColumn
        
        Friend Sub New()
            MyBase.New("VUSED")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property USERECIDColumn As DataColumn
            Get
                Return Me.columnUSERECID
            End Get
        End Property
        
        Friend ReadOnly Property USEUTYRECIDColumn As DataColumn
            Get
                Return Me.columnUSEUTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property USESPCRECIDColumn As DataColumn
            Get
                Return Me.columnUSESPCRECID
            End Get
        End Property
        
        Friend ReadOnly Property USEPARRECIDColumn As DataColumn
            Get
                Return Me.columnUSEPARRECID
            End Get
        End Property
        
        Friend ReadOnly Property USELOURECIDColumn As DataColumn
            Get
                Return Me.columnUSELOURECID
            End Get
        End Property
        
        Friend ReadOnly Property USENOTESColumn As DataColumn
            Get
                Return Me.columnUSENOTES
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VUSEDRow
            Get
                Return CType(Me.Rows(index),VUSEDRow)
            End Get
        End Property
        
        Public Event VUSEDRowChanged As VUSEDRowChangeEventHandler
        
        Public Event VUSEDRowChanging As VUSEDRowChangeEventHandler
        
        Public Event VUSEDRowDeleted As VUSEDRowChangeEventHandler
        
        Public Event VUSEDRowDeleting As VUSEDRowChangeEventHandler
        
        Public Overloads Sub AddVUSEDRow(ByVal row As VUSEDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVUSEDRow(ByVal USERECID As Long, ByVal USEUTYRECID As Long, ByVal USESPCRECID As Long, ByVal USEPARRECID As Long, ByVal USELOURECID As Long, ByVal USENOTES As String) As VUSEDRow
            Dim rowVUSEDRow As VUSEDRow = CType(Me.NewRow,VUSEDRow)
            rowVUSEDRow.ItemArray = New Object() {USERECID, USEUTYRECID, USESPCRECID, USEPARRECID, USELOURECID, USENOTES}
            Me.Rows.Add(rowVUSEDRow)
            Return rowVUSEDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VUSEDDataTable = CType(MyBase.Clone,VUSEDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VUSEDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUSERECID = Me.Columns("USERECID")
            Me.columnUSEUTYRECID = Me.Columns("USEUTYRECID")
            Me.columnUSESPCRECID = Me.Columns("USESPCRECID")
            Me.columnUSEPARRECID = Me.Columns("USEPARRECID")
            Me.columnUSELOURECID = Me.Columns("USELOURECID")
            Me.columnUSENOTES = Me.Columns("USENOTES")
        End Sub
        
        Private Sub InitClass()
            Me.columnUSERECID = New DataColumn("USERECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSERECID)
            Me.columnUSEUTYRECID = New DataColumn("USEUTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSEUTYRECID)
            Me.columnUSESPCRECID = New DataColumn("USESPCRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSESPCRECID)
            Me.columnUSEPARRECID = New DataColumn("USEPARRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSEPARRECID)
            Me.columnUSELOURECID = New DataColumn("USELOURECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSELOURECID)
            Me.columnUSENOTES = New DataColumn("USENOTES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUSENOTES)
            Me.columnUSERECID.AllowDBNull = false
            Me.columnUSEUTYRECID.AllowDBNull = false
            Me.columnUSESPCRECID.AllowDBNull = false
            Me.columnUSEPARRECID.AllowDBNull = false
            Me.columnUSELOURECID.AllowDBNull = false
            Me.columnUSENOTES.MaxLength = 2147483647
        End Sub
        
        Public Function NewVUSEDRow() As VUSEDRow
            Return CType(Me.NewRow,VUSEDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VUSEDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VUSEDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VUSEDRowChangedEvent) Is Nothing) Then
                RaiseEvent VUSEDRowChanged(Me, New VUSEDRowChangeEvent(CType(e.Row,VUSEDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VUSEDRowChangingEvent) Is Nothing) Then
                RaiseEvent VUSEDRowChanging(Me, New VUSEDRowChangeEvent(CType(e.Row,VUSEDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VUSEDRowDeletedEvent) Is Nothing) Then
                RaiseEvent VUSEDRowDeleted(Me, New VUSEDRowChangeEvent(CType(e.Row,VUSEDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VUSEDRowDeletingEvent) Is Nothing) Then
                RaiseEvent VUSEDRowDeleting(Me, New VUSEDRowChangeEvent(CType(e.Row,VUSEDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVUSEDRow(ByVal row As VUSEDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VUSEDRow
        Inherits DataRow
        
        Private tableVUSED As VUSEDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVUSED = CType(Me.Table,VUSEDDataTable)
        End Sub
        
        Public Property USERECID As Long
            Get
                Return CType(Me(Me.tableVUSED.USERECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVUSED.USERECIDColumn) = value
            End Set
        End Property
        
        Public Property USEUTYRECID As Long
            Get
                Return CType(Me(Me.tableVUSED.USEUTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVUSED.USEUTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property USESPCRECID As Long
            Get
                Return CType(Me(Me.tableVUSED.USESPCRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVUSED.USESPCRECIDColumn) = value
            End Set
        End Property
        
        Public Property USEPARRECID As Long
            Get
                Return CType(Me(Me.tableVUSED.USEPARRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVUSED.USEPARRECIDColumn) = value
            End Set
        End Property
        
        Public Property USELOURECID As Long
            Get
                Return CType(Me(Me.tableVUSED.USELOURECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVUSED.USELOURECIDColumn) = value
            End Set
        End Property
        
        Public Property USENOTES As String
            Get
                Try 
                    Return CType(Me(Me.tableVUSED.USENOTESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUSED.USENOTESColumn) = value
            End Set
        End Property
        
        Public Function IsUSENOTESNull() As Boolean
            Return Me.IsNull(Me.tableVUSED.USENOTESColumn)
        End Function
        
        Public Sub SetUSENOTESNull()
            Me(Me.tableVUSED.USENOTESColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VUSEDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VUSEDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VUSEDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VUSEDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VUSETYPEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUTYRECID As DataColumn
        
        Private columnUTYDESC As DataColumn
        
        Private columnUTYRECSTATUS As DataColumn
        
        Friend Sub New()
            MyBase.New("VUSETYPE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UTYRECIDColumn As DataColumn
            Get
                Return Me.columnUTYRECID
            End Get
        End Property
        
        Friend ReadOnly Property UTYDESCColumn As DataColumn
            Get
                Return Me.columnUTYDESC
            End Get
        End Property
        
        Friend ReadOnly Property UTYRECSTATUSColumn As DataColumn
            Get
                Return Me.columnUTYRECSTATUS
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VUSETYPERow
            Get
                Return CType(Me.Rows(index),VUSETYPERow)
            End Get
        End Property
        
        Public Event VUSETYPERowChanged As VUSETYPERowChangeEventHandler
        
        Public Event VUSETYPERowChanging As VUSETYPERowChangeEventHandler
        
        Public Event VUSETYPERowDeleted As VUSETYPERowChangeEventHandler
        
        Public Event VUSETYPERowDeleting As VUSETYPERowChangeEventHandler
        
        Public Overloads Sub AddVUSETYPERow(ByVal row As VUSETYPERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVUSETYPERow(ByVal UTYRECID As Long, ByVal UTYDESC As String, ByVal UTYRECSTATUS As Char) As VUSETYPERow
            Dim rowVUSETYPERow As VUSETYPERow = CType(Me.NewRow,VUSETYPERow)
            rowVUSETYPERow.ItemArray = New Object() {UTYRECID, UTYDESC, UTYRECSTATUS}
            Me.Rows.Add(rowVUSETYPERow)
            Return rowVUSETYPERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VUSETYPEDataTable = CType(MyBase.Clone,VUSETYPEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VUSETYPEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUTYRECID = Me.Columns("UTYRECID")
            Me.columnUTYDESC = Me.Columns("UTYDESC")
            Me.columnUTYRECSTATUS = Me.Columns("UTYRECSTATUS")
        End Sub
        
        Private Sub InitClass()
            Me.columnUTYRECID = New DataColumn("UTYRECID", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUTYRECID)
            Me.columnUTYDESC = New DataColumn("UTYDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUTYDESC)
            Me.columnUTYRECSTATUS = New DataColumn("UTYRECSTATUS", GetType(System.Char), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUTYRECSTATUS)
            Me.columnUTYRECID.AllowDBNull = false
            Me.columnUTYDESC.AllowDBNull = false
            Me.columnUTYDESC.MaxLength = 30
        End Sub
        
        Public Function NewVUSETYPERow() As VUSETYPERow
            Return CType(Me.NewRow,VUSETYPERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VUSETYPERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VUSETYPERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VUSETYPERowChangedEvent) Is Nothing) Then
                RaiseEvent VUSETYPERowChanged(Me, New VUSETYPERowChangeEvent(CType(e.Row,VUSETYPERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VUSETYPERowChangingEvent) Is Nothing) Then
                RaiseEvent VUSETYPERowChanging(Me, New VUSETYPERowChangeEvent(CType(e.Row,VUSETYPERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VUSETYPERowDeletedEvent) Is Nothing) Then
                RaiseEvent VUSETYPERowDeleted(Me, New VUSETYPERowChangeEvent(CType(e.Row,VUSETYPERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VUSETYPERowDeletingEvent) Is Nothing) Then
                RaiseEvent VUSETYPERowDeleting(Me, New VUSETYPERowChangeEvent(CType(e.Row,VUSETYPERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVUSETYPERow(ByVal row As VUSETYPERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VUSETYPERow
        Inherits DataRow
        
        Private tableVUSETYPE As VUSETYPEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVUSETYPE = CType(Me.Table,VUSETYPEDataTable)
        End Sub
        
        Public Property UTYRECID As Long
            Get
                Return CType(Me(Me.tableVUSETYPE.UTYRECIDColumn),Long)
            End Get
            Set
                Me(Me.tableVUSETYPE.UTYRECIDColumn) = value
            End Set
        End Property
        
        Public Property UTYDESC As String
            Get
                Return CType(Me(Me.tableVUSETYPE.UTYDESCColumn),String)
            End Get
            Set
                Me(Me.tableVUSETYPE.UTYDESCColumn) = value
            End Set
        End Property
        
        Public Property UTYRECSTATUS As Char
            Get
                Try 
                    Return CType(Me(Me.tableVUSETYPE.UTYRECSTATUSColumn),Char)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVUSETYPE.UTYRECSTATUSColumn) = value
            End Set
        End Property
        
        Public Function IsUTYRECSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableVUSETYPE.UTYRECSTATUSColumn)
        End Function
        
        Public Sub SetUTYRECSTATUSNull()
            Me(Me.tableVUSETYPE.UTYRECSTATUSColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VUSETYPERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VUSETYPERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VUSETYPERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VUSETYPERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
End Namespace