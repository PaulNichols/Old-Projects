'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


Namespace TaxonomyData
    <Serializable(), _
     System.ComponentModel.DesignerCategoryAttribute("code"), _
     System.Diagnostics.DebuggerStepThrough(), _
     System.ComponentModel.ToolboxItem(True)> _
    Public Class manifest
        Inherits DataSet

        Private tableRow As RowDataTable

        Public Sub New()
            MyBase.New()
            Me.InitClass()
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            MyBase.New()
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)), String)
            If (Not (strSchema) Is Nothing) Then
                Dim ds As DataSet = New DataSet
                ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Row")) Is Nothing) Then
                    Me.Tables.Add(New RowDataTable(ds.Tables("Row")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
                Me.InitVars()
            Else
                Me.InitClass()
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub

        <System.ComponentModel.Browsable(False), _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)> _
        Public ReadOnly Property Row() As RowDataTable
            Get
                Return Me.tableRow
            End Get
        End Property

        Public Overrides Function Clone() As DataSet
            Dim cln As manifest = CType(MyBase.Clone, manifest)
            cln.InitVars()
            Return cln
        End Function

        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return False
        End Function

        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return False
        End Function

        Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
            Me.Reset()
            Dim ds As DataSet = New DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Row")) Is Nothing) Then
                Me.Tables.Add(New RowDataTable(ds.Tables("Row")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        End Sub

        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
        End Function

        Friend Sub InitVars()
            Me.tableRow = CType(Me.Tables("Row"), RowDataTable)
            If (Not (Me.tableRow) Is Nothing) Then
                Me.tableRow.InitVars()
            End If
        End Sub

        Private Sub InitClass()
            Me.DataSetName = "manifest"
            Me.Prefix = ""
            Me.Namespace = ""
            Me.Locale = New System.Globalization.CultureInfo("en-GB")
            Me.CaseSensitive = False
            Me.EnforceConstraints = False
            Me.tableRow = New RowDataTable
            Me.Tables.Add(Me.tableRow)
        End Sub

        Private Function ShouldSerializeRow() As Boolean
            Return False
        End Function

        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars()
            End If
        End Sub

        Public Delegate Sub RowRowChangeEventHandler(ByVal sender As Object, ByVal e As RowRowChangeEvent)

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class RowDataTable
            Inherits DataTable
            Implements System.Collections.IEnumerable

            Private columnTableName As DataColumn

            Private columnRowCount As DataColumn

            Private columnLastChangeDate As DataColumn

            Friend Sub New()
                MyBase.New("Row")
                Me.InitClass()
            End Sub

            Friend Sub New(ByVal table As DataTable)
                MyBase.New(table.TableName)
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
                Me.DisplayExpression = table.DisplayExpression
            End Sub

            <System.ComponentModel.Browsable(False)> _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property

            Friend ReadOnly Property TableNameColumn() As DataColumn
                Get
                    Return Me.columnTableName
                End Get
            End Property

            Friend ReadOnly Property RowCountColumn() As DataColumn
                Get
                    Return Me.columnRowCount
                End Get
            End Property

            Friend ReadOnly Property LastChangeDateColumn() As DataColumn
                Get
                    Return Me.columnLastChangeDate
                End Get
            End Property

            Default Public ReadOnly Property Item(ByVal index As Integer) As RowRow
                Get
                    Return CType(Me.Rows(index), RowRow)
                End Get
            End Property

            Public Event RowRowChanged As RowRowChangeEventHandler

            Public Event RowRowChanging As RowRowChangeEventHandler

            Public Event RowRowDeleted As RowRowChangeEventHandler

            Public Event RowRowDeleting As RowRowChangeEventHandler

            Public Overloads Sub AddRowRow(ByVal row As RowRow)
                Me.Rows.Add(row)
            End Sub

            Public Overloads Function AddRowRow(ByVal TableName As String, ByVal RowCount As System.UInt64, ByVal LastChangeDate As Date) As RowRow
                Dim rowRowRow As RowRow = CType(Me.NewRow, RowRow)
                rowRowRow.ItemArray = New Object() {TableName, RowCount, LastChangeDate}
                Me.Rows.Add(rowRowRow)
                Return rowRowRow
            End Function

            Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function

            Public Overrides Function Clone() As DataTable
                Dim cln As RowDataTable = CType(MyBase.Clone, RowDataTable)
                cln.InitVars()
                Return cln
            End Function

            Protected Overrides Function CreateInstance() As DataTable
                Return New RowDataTable
            End Function

            Friend Sub InitVars()
                Me.columnTableName = Me.Columns("TableName")
                Me.columnRowCount = Me.Columns("RowCount")
                Me.columnLastChangeDate = Me.Columns("LastChangeDate")
            End Sub

            Private Sub InitClass()
                Me.columnTableName = New DataColumn("TableName", GetType(System.String), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnTableName)
                Me.columnRowCount = New DataColumn("RowCount", GetType(System.UInt64), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnRowCount)
                Me.columnLastChangeDate = New DataColumn("LastChangeDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
                Me.Columns.Add(Me.columnLastChangeDate)
                Me.columnTableName.AllowDBNull = False
                Me.columnTableName.MaxLength = 31
                Me.columnRowCount.AllowDBNull = False
                Me.columnLastChangeDate.AllowDBNull = False
            End Sub

            Public Function NewRowRow() As RowRow
                Return CType(Me.NewRow, RowRow)
            End Function

            Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
                Return New RowRow(builder)
            End Function

            Protected Overrides Function GetRowType() As System.Type
                Return GetType(RowRow)
            End Function

            Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.RowRowChangedEvent) Is Nothing) Then
                    RaiseEvent RowRowChanged(Me, New RowRowChangeEvent(CType(e.Row, RowRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.RowRowChangingEvent) Is Nothing) Then
                    RaiseEvent RowRowChanging(Me, New RowRowChangeEvent(CType(e.Row, RowRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.RowRowDeletedEvent) Is Nothing) Then
                    RaiseEvent RowRowDeleted(Me, New RowRowChangeEvent(CType(e.Row, RowRow), e.Action))
                End If
            End Sub

            Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.RowRowDeletingEvent) Is Nothing) Then
                    RaiseEvent RowRowDeleting(Me, New RowRowChangeEvent(CType(e.Row, RowRow), e.Action))
                End If
            End Sub

            Public Sub RemoveRowRow(ByVal row As RowRow)
                Me.Rows.Remove(row)
            End Sub
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class RowRow
            Inherits DataRow

            Private tableRow As RowDataTable

            Friend Sub New(ByVal rb As DataRowBuilder)
                MyBase.New(rb)
                Me.tableRow = CType(Me.Table, RowDataTable)
            End Sub

            Public Property TableName() As String
                Get
                    Return CType(Me(Me.tableRow.TableNameColumn), String)
                End Get
                Set(ByVal Value As String)
                    Me(Me.tableRow.TableNameColumn) = Value
                End Set
            End Property

            Public Property RowCount() As System.UInt64
                Get
                    Return CType(Me(Me.tableRow.RowCountColumn), System.UInt64)
                End Get
                Set(ByVal Value As System.UInt64)
                    Me(Me.tableRow.RowCountColumn) = Value
                End Set
            End Property

            Public Property LastChangeDate() As Date
                Get
                    Return CType(Me(Me.tableRow.LastChangeDateColumn), Date)
                End Get
                Set(ByVal Value As Date)
                    Me(Me.tableRow.LastChangeDateColumn) = Value
                End Set
            End Property
        End Class

        <System.Diagnostics.DebuggerStepThrough()> _
        Public Class RowRowChangeEvent
            Inherits EventArgs

            Private eventRow As RowRow

            Private eventAction As DataRowAction

            Public Sub New(ByVal row As RowRow, ByVal action As DataRowAction)
                MyBase.New()
                Me.eventRow = row
                Me.eventAction = action
            End Sub

            Public ReadOnly Property Row() As RowRow
                Get
                    Return Me.eventRow
                End Get
            End Property

            Public ReadOnly Property Action() As DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace