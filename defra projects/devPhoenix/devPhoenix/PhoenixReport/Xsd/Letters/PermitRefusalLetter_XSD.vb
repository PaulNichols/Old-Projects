'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class PermitRefusalLetterData
    Inherits DataSet
    
    Private tableBOPermitRefusalLetter As BOPermitRefusalLetterDataTable
    
    Private tableBOPermitRefusalLetterDetails As BOPermitRefusalLetterDetailsDataTable
    
    Private relationBOPermitRefusalLetterBOPermitRefusalLetterDetails As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOPermitRefusalLetter")) Is Nothing) Then
                Me.Tables.Add(New BOPermitRefusalLetterDataTable(ds.Tables("BOPermitRefusalLetter")))
            End If
            If (Not (ds.Tables("BOPermitRefusalLetterDetails")) Is Nothing) Then
                Me.Tables.Add(New BOPermitRefusalLetterDetailsDataTable(ds.Tables("BOPermitRefusalLetterDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPermitRefusalLetter As BOPermitRefusalLetterDataTable
        Get
            Return Me.tableBOPermitRefusalLetter
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPermitRefusalLetterDetails As BOPermitRefusalLetterDetailsDataTable
        Get
            Return Me.tableBOPermitRefusalLetterDetails
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As PermitRefusalLetterData = CType(MyBase.Clone,PermitRefusalLetterData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOPermitRefusalLetter")) Is Nothing) Then
            Me.Tables.Add(New BOPermitRefusalLetterDataTable(ds.Tables("BOPermitRefusalLetter")))
        End If
        If (Not (ds.Tables("BOPermitRefusalLetterDetails")) Is Nothing) Then
            Me.Tables.Add(New BOPermitRefusalLetterDetailsDataTable(ds.Tables("BOPermitRefusalLetterDetails")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOPermitRefusalLetter = CType(Me.Tables("BOPermitRefusalLetter"),BOPermitRefusalLetterDataTable)
        If (Not (Me.tableBOPermitRefusalLetter) Is Nothing) Then
            Me.tableBOPermitRefusalLetter.InitVars
        End If
        Me.tableBOPermitRefusalLetterDetails = CType(Me.Tables("BOPermitRefusalLetterDetails"),BOPermitRefusalLetterDetailsDataTable)
        If (Not (Me.tableBOPermitRefusalLetterDetails) Is Nothing) Then
            Me.tableBOPermitRefusalLetterDetails.InitVars
        End If
        Me.relationBOPermitRefusalLetterBOPermitRefusalLetterDetails = Me.Relations("BOPermitRefusalLetterBOPermitRefusalLetterDetails")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "PermitRefusalLetterData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PermitRefusalLetterData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOPermitRefusalLetter = New BOPermitRefusalLetterDataTable
        Me.Tables.Add(Me.tableBOPermitRefusalLetter)
        Me.tableBOPermitRefusalLetterDetails = New BOPermitRefusalLetterDetailsDataTable
        Me.Tables.Add(Me.tableBOPermitRefusalLetterDetails)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOPermitRefusalLetterBOPermitRefusalLetterDetails", New DataColumn() {Me.tableBOPermitRefusalLetter.IdColumn}, New DataColumn() {Me.tableBOPermitRefusalLetterDetails.IdColumn})
        Me.tableBOPermitRefusalLetterDetails.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOPermitRefusalLetterBOPermitRefusalLetterDetails = New DataRelation("BOPermitRefusalLetterBOPermitRefusalLetterDetails", New DataColumn() {Me.tableBOPermitRefusalLetter.IdColumn}, New DataColumn() {Me.tableBOPermitRefusalLetterDetails.IdColumn}, false)
        Me.Relations.Add(Me.relationBOPermitRefusalLetterBOPermitRefusalLetterDetails)
    End Sub
    
    Private Function ShouldSerializeBOPermitRefusalLetter() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOPermitRefusalLetterDetails() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOPermitRefusalLetterRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPermitRefusalLetterRowChangeEvent)
    
    Public Delegate Sub BOPermitRefusalLetterDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPermitRefusalLetterDetailsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRefusalLetterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnFromAddress As DataColumn
        
        Private columnToAddress As DataColumn
        
        Private columnIssuedDate As DataColumn
        
        Private columnSalutation As DataColumn
        
        Private columnOurReference As DataColumn
        
        Private columnBeginText As DataColumn
        
        Private columnIntroText As DataColumn
        
        Private columnEndText As DataColumn
        
        Private columnDirectLineText As DataColumn
        
        Private columnSignatureText As DataColumn
        
        Private columnFaxText As DataColumn
        
        Private columnEMailText As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPermitRefusalLetter")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property FromAddressColumn As DataColumn
            Get
                Return Me.columnFromAddress
            End Get
        End Property
        
        Friend ReadOnly Property ToAddressColumn As DataColumn
            Get
                Return Me.columnToAddress
            End Get
        End Property
        
        Friend ReadOnly Property IssuedDateColumn As DataColumn
            Get
                Return Me.columnIssuedDate
            End Get
        End Property
        
        Friend ReadOnly Property SalutationColumn As DataColumn
            Get
                Return Me.columnSalutation
            End Get
        End Property
        
        Friend ReadOnly Property OurReferenceColumn As DataColumn
            Get
                Return Me.columnOurReference
            End Get
        End Property
        
        Friend ReadOnly Property BeginTextColumn As DataColumn
            Get
                Return Me.columnBeginText
            End Get
        End Property
        
        Friend ReadOnly Property IntroTextColumn As DataColumn
            Get
                Return Me.columnIntroText
            End Get
        End Property
        
        Friend ReadOnly Property EndTextColumn As DataColumn
            Get
                Return Me.columnEndText
            End Get
        End Property
        
        Friend ReadOnly Property DirectLineTextColumn As DataColumn
            Get
                Return Me.columnDirectLineText
            End Get
        End Property
        
        Friend ReadOnly Property SignatureTextColumn As DataColumn
            Get
                Return Me.columnSignatureText
            End Get
        End Property
        
        Friend ReadOnly Property FaxTextColumn As DataColumn
            Get
                Return Me.columnFaxText
            End Get
        End Property
        
        Friend ReadOnly Property EMailTextColumn As DataColumn
            Get
                Return Me.columnEMailText
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPermitRefusalLetterRow
            Get
                Return CType(Me.Rows(index),BOPermitRefusalLetterRow)
            End Get
        End Property
        
        Public Event BOPermitRefusalLetterRowChanged As BOPermitRefusalLetterRowChangeEventHandler
        
        Public Event BOPermitRefusalLetterRowChanging As BOPermitRefusalLetterRowChangeEventHandler
        
        Public Event BOPermitRefusalLetterRowDeleted As BOPermitRefusalLetterRowChangeEventHandler
        
        Public Event BOPermitRefusalLetterRowDeleting As BOPermitRefusalLetterRowChangeEventHandler
        
        Public Overloads Sub AddBOPermitRefusalLetterRow(ByVal row As BOPermitRefusalLetterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPermitRefusalLetterRow(ByVal Id As Long, ByVal FromAddress As String, ByVal ToAddress As String, ByVal IssuedDate As String, ByVal Salutation As String, ByVal OurReference As String, ByVal BeginText As String, ByVal IntroText As String, ByVal EndText As String, ByVal DirectLineText As String, ByVal SignatureText As String, ByVal FaxText As String, ByVal EMailText As String) As BOPermitRefusalLetterRow
            Dim rowBOPermitRefusalLetterRow As BOPermitRefusalLetterRow = CType(Me.NewRow,BOPermitRefusalLetterRow)
            rowBOPermitRefusalLetterRow.ItemArray = New Object() {Id, FromAddress, ToAddress, IssuedDate, Salutation, OurReference, BeginText, IntroText, EndText, DirectLineText, SignatureText, FaxText, EMailText}
            Me.Rows.Add(rowBOPermitRefusalLetterRow)
            Return rowBOPermitRefusalLetterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPermitRefusalLetterDataTable = CType(MyBase.Clone,BOPermitRefusalLetterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPermitRefusalLetterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnFromAddress = Me.Columns("FromAddress")
            Me.columnToAddress = Me.Columns("ToAddress")
            Me.columnIssuedDate = Me.Columns("IssuedDate")
            Me.columnSalutation = Me.Columns("Salutation")
            Me.columnOurReference = Me.Columns("OurReference")
            Me.columnBeginText = Me.Columns("BeginText")
            Me.columnIntroText = Me.Columns("IntroText")
            Me.columnEndText = Me.Columns("EndText")
            Me.columnDirectLineText = Me.Columns("DirectLineText")
            Me.columnSignatureText = Me.Columns("SignatureText")
            Me.columnFaxText = Me.Columns("FaxText")
            Me.columnEMailText = Me.Columns("EMailText")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnFromAddress = New DataColumn("FromAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFromAddress)
            Me.columnToAddress = New DataColumn("ToAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAddress)
            Me.columnIssuedDate = New DataColumn("IssuedDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssuedDate)
            Me.columnSalutation = New DataColumn("Salutation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSalutation)
            Me.columnOurReference = New DataColumn("OurReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOurReference)
            Me.columnBeginText = New DataColumn("BeginText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBeginText)
            Me.columnIntroText = New DataColumn("IntroText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIntroText)
            Me.columnEndText = New DataColumn("EndText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndText)
            Me.columnDirectLineText = New DataColumn("DirectLineText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDirectLineText)
            Me.columnSignatureText = New DataColumn("SignatureText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSignatureText)
            Me.columnFaxText = New DataColumn("FaxText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFaxText)
            Me.columnEMailText = New DataColumn("EMailText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMailText)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnId}, false))
            Me.columnId.AllowDBNull = false
            Me.columnId.Unique = true
        End Sub
        
        Public Function NewBOPermitRefusalLetterRow() As BOPermitRefusalLetterRow
            Return CType(Me.NewRow,BOPermitRefusalLetterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPermitRefusalLetterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPermitRefusalLetterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPermitRefusalLetterRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterRowChanged(Me, New BOPermitRefusalLetterRowChangeEvent(CType(e.Row,BOPermitRefusalLetterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPermitRefusalLetterRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterRowChanging(Me, New BOPermitRefusalLetterRowChangeEvent(CType(e.Row,BOPermitRefusalLetterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPermitRefusalLetterRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterRowDeleted(Me, New BOPermitRefusalLetterRowChangeEvent(CType(e.Row,BOPermitRefusalLetterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPermitRefusalLetterRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterRowDeleting(Me, New BOPermitRefusalLetterRowChangeEvent(CType(e.Row,BOPermitRefusalLetterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPermitRefusalLetterRow(ByVal row As BOPermitRefusalLetterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRefusalLetterRow
        Inherits DataRow
        
        Private tableBOPermitRefusalLetter As BOPermitRefusalLetterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPermitRefusalLetter = CType(Me.Table,BOPermitRefusalLetterDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Return CType(Me(Me.tableBOPermitRefusalLetter.IdColumn),Long)
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.IdColumn) = value
            End Set
        End Property
        
        Public Property FromAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.FromAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.FromAddressColumn) = value
            End Set
        End Property
        
        Public Property ToAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.ToAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.ToAddressColumn) = value
            End Set
        End Property
        
        Public Property IssuedDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.IssuedDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.IssuedDateColumn) = value
            End Set
        End Property
        
        Public Property Salutation As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.SalutationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.SalutationColumn) = value
            End Set
        End Property
        
        Public Property OurReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.OurReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.OurReferenceColumn) = value
            End Set
        End Property
        
        Public Property BeginText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.BeginTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.BeginTextColumn) = value
            End Set
        End Property
        
        Public Property IntroText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.IntroTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.IntroTextColumn) = value
            End Set
        End Property
        
        Public Property EndText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.EndTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.EndTextColumn) = value
            End Set
        End Property
        
        Public Property DirectLineText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.DirectLineTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.DirectLineTextColumn) = value
            End Set
        End Property
        
        Public Property SignatureText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.SignatureTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.SignatureTextColumn) = value
            End Set
        End Property
        
        Public Property FaxText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.FaxTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.FaxTextColumn) = value
            End Set
        End Property
        
        Public Property EMailText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetter.EMailTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetter.EMailTextColumn) = value
            End Set
        End Property
        
        Public Function IsFromAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.FromAddressColumn)
        End Function
        
        Public Sub SetFromAddressNull()
            Me(Me.tableBOPermitRefusalLetter.FromAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.ToAddressColumn)
        End Function
        
        Public Sub SetToAddressNull()
            Me(Me.tableBOPermitRefusalLetter.ToAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssuedDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.IssuedDateColumn)
        End Function
        
        Public Sub SetIssuedDateNull()
            Me(Me.tableBOPermitRefusalLetter.IssuedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalutationNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.SalutationColumn)
        End Function
        
        Public Sub SetSalutationNull()
            Me(Me.tableBOPermitRefusalLetter.SalutationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOurReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.OurReferenceColumn)
        End Function
        
        Public Sub SetOurReferenceNull()
            Me(Me.tableBOPermitRefusalLetter.OurReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBeginTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.BeginTextColumn)
        End Function
        
        Public Sub SetBeginTextNull()
            Me(Me.tableBOPermitRefusalLetter.BeginTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIntroTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.IntroTextColumn)
        End Function
        
        Public Sub SetIntroTextNull()
            Me(Me.tableBOPermitRefusalLetter.IntroTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.EndTextColumn)
        End Function
        
        Public Sub SetEndTextNull()
            Me(Me.tableBOPermitRefusalLetter.EndTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDirectLineTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.DirectLineTextColumn)
        End Function
        
        Public Sub SetDirectLineTextNull()
            Me(Me.tableBOPermitRefusalLetter.DirectLineTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSignatureTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.SignatureTextColumn)
        End Function
        
        Public Sub SetSignatureTextNull()
            Me(Me.tableBOPermitRefusalLetter.SignatureTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFaxTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.FaxTextColumn)
        End Function
        
        Public Sub SetFaxTextNull()
            Me(Me.tableBOPermitRefusalLetter.FaxTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMailTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetter.EMailTextColumn)
        End Function
        
        Public Sub SetEMailTextNull()
            Me(Me.tableBOPermitRefusalLetter.EMailTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBOPermitRefusalLetterDetailsRows() As BOPermitRefusalLetterDetailsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOPermitRefusalLetterBOPermitRefusalLetterDetails")),BOPermitRefusalLetterDetailsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRefusalLetterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPermitRefusalLetterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPermitRefusalLetterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPermitRefusalLetterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRefusalLetterDetailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnDescriptionText As DataColumn
        
        Private columnScientificNameText As DataColumn
        
        Private columnImportExportFromTo As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPermitRefusalLetterDetails")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionTextColumn As DataColumn
            Get
                Return Me.columnDescriptionText
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameTextColumn As DataColumn
            Get
                Return Me.columnScientificNameText
            End Get
        End Property
        
        Friend ReadOnly Property ImportExportFromToColumn As DataColumn
            Get
                Return Me.columnImportExportFromTo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPermitRefusalLetterDetailsRow
            Get
                Return CType(Me.Rows(index),BOPermitRefusalLetterDetailsRow)
            End Get
        End Property
        
        Public Event BOPermitRefusalLetterDetailsRowChanged As BOPermitRefusalLetterDetailsRowChangeEventHandler
        
        Public Event BOPermitRefusalLetterDetailsRowChanging As BOPermitRefusalLetterDetailsRowChangeEventHandler
        
        Public Event BOPermitRefusalLetterDetailsRowDeleted As BOPermitRefusalLetterDetailsRowChangeEventHandler
        
        Public Event BOPermitRefusalLetterDetailsRowDeleting As BOPermitRefusalLetterDetailsRowChangeEventHandler
        
        Public Overloads Sub AddBOPermitRefusalLetterDetailsRow(ByVal row As BOPermitRefusalLetterDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPermitRefusalLetterDetailsRow(ByVal parentBOPermitRefusalLetterRowByBOPermitRefusalLetterBOPermitRefusalLetterDetails As BOPermitRefusalLetterRow, ByVal DescriptionText As String, ByVal ScientificNameText As String, ByVal ImportExportFromTo As String) As BOPermitRefusalLetterDetailsRow
            Dim rowBOPermitRefusalLetterDetailsRow As BOPermitRefusalLetterDetailsRow = CType(Me.NewRow,BOPermitRefusalLetterDetailsRow)
            rowBOPermitRefusalLetterDetailsRow.ItemArray = New Object() {parentBOPermitRefusalLetterRowByBOPermitRefusalLetterBOPermitRefusalLetterDetails(0), DescriptionText, ScientificNameText, ImportExportFromTo}
            Me.Rows.Add(rowBOPermitRefusalLetterDetailsRow)
            Return rowBOPermitRefusalLetterDetailsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPermitRefusalLetterDetailsDataTable = CType(MyBase.Clone,BOPermitRefusalLetterDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPermitRefusalLetterDetailsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnDescriptionText = Me.Columns("DescriptionText")
            Me.columnScientificNameText = Me.Columns("ScientificNameText")
            Me.columnImportExportFromTo = Me.Columns("ImportExportFromTo")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnDescriptionText = New DataColumn("DescriptionText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescriptionText)
            Me.columnScientificNameText = New DataColumn("ScientificNameText", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificNameText)
            Me.columnImportExportFromTo = New DataColumn("ImportExportFromTo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportExportFromTo)
        End Sub
        
        Public Function NewBOPermitRefusalLetterDetailsRow() As BOPermitRefusalLetterDetailsRow
            Return CType(Me.NewRow,BOPermitRefusalLetterDetailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPermitRefusalLetterDetailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPermitRefusalLetterDetailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPermitRefusalLetterDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterDetailsRowChanged(Me, New BOPermitRefusalLetterDetailsRowChangeEvent(CType(e.Row,BOPermitRefusalLetterDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPermitRefusalLetterDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterDetailsRowChanging(Me, New BOPermitRefusalLetterDetailsRowChangeEvent(CType(e.Row,BOPermitRefusalLetterDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPermitRefusalLetterDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterDetailsRowDeleted(Me, New BOPermitRefusalLetterDetailsRowChangeEvent(CType(e.Row,BOPermitRefusalLetterDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPermitRefusalLetterDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPermitRefusalLetterDetailsRowDeleting(Me, New BOPermitRefusalLetterDetailsRowChangeEvent(CType(e.Row,BOPermitRefusalLetterDetailsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPermitRefusalLetterDetailsRow(ByVal row As BOPermitRefusalLetterDetailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRefusalLetterDetailsRow
        Inherits DataRow
        
        Private tableBOPermitRefusalLetterDetails As BOPermitRefusalLetterDetailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPermitRefusalLetterDetails = CType(Me.Table,BOPermitRefusalLetterDetailsDataTable)
        End Sub
        
        Public Property Id As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetterDetails.IdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetterDetails.IdColumn) = value
            End Set
        End Property
        
        Public Property DescriptionText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetterDetails.DescriptionTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetterDetails.DescriptionTextColumn) = value
            End Set
        End Property
        
        Public Property ScientificNameText As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetterDetails.ScientificNameTextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetterDetails.ScientificNameTextColumn) = value
            End Set
        End Property
        
        Public Property ImportExportFromTo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermitRefusalLetterDetails.ImportExportFromToColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermitRefusalLetterDetails.ImportExportFromToColumn) = value
            End Set
        End Property
        
        Public Property BOPermitRefusalLetterRow As BOPermitRefusalLetterRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOPermitRefusalLetterBOPermitRefusalLetterDetails")),BOPermitRefusalLetterRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOPermitRefusalLetterBOPermitRefusalLetterDetails"))
            End Set
        End Property
        
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetterDetails.IdColumn)
        End Function
        
        Public Sub SetIdNull()
            Me(Me.tableBOPermitRefusalLetterDetails.IdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetterDetails.DescriptionTextColumn)
        End Function
        
        Public Sub SetDescriptionTextNull()
            Me(Me.tableBOPermitRefusalLetterDetails.DescriptionTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsScientificNameTextNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetterDetails.ScientificNameTextColumn)
        End Function
        
        Public Sub SetScientificNameTextNull()
            Me(Me.tableBOPermitRefusalLetterDetails.ScientificNameTextColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportExportFromToNull() As Boolean
            Return Me.IsNull(Me.tableBOPermitRefusalLetterDetails.ImportExportFromToColumn)
        End Function
        
        Public Sub SetImportExportFromToNull()
            Me(Me.tableBOPermitRefusalLetterDetails.ImportExportFromToColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRefusalLetterDetailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPermitRefusalLetterDetailsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPermitRefusalLetterDetailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPermitRefusalLetterDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
