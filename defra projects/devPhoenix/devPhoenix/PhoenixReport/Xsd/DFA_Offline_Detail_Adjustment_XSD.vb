'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DFA_OffLine_Detail_AdjustmentData
    Inherits DataSet
    
    Private tableBODFA_OffLine_Detail_Adjustment As BODFA_OffLine_Detail_AdjustmentDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BODFA_OffLine_Detail_Adjustment")) Is Nothing) Then
                Me.Tables.Add(New BODFA_OffLine_Detail_AdjustmentDataTable(ds.Tables("BODFA_OffLine_Detail_Adjustment")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BODFA_OffLine_Detail_Adjustment As BODFA_OffLine_Detail_AdjustmentDataTable
        Get
            Return Me.tableBODFA_OffLine_Detail_Adjustment
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DFA_OffLine_Detail_AdjustmentData = CType(MyBase.Clone,DFA_OffLine_Detail_AdjustmentData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BODFA_OffLine_Detail_Adjustment")) Is Nothing) Then
            Me.Tables.Add(New BODFA_OffLine_Detail_AdjustmentDataTable(ds.Tables("BODFA_OffLine_Detail_Adjustment")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBODFA_OffLine_Detail_Adjustment = CType(Me.Tables("BODFA_OffLine_Detail_Adjustment"),BODFA_OffLine_Detail_AdjustmentDataTable)
        If (Not (Me.tableBODFA_OffLine_Detail_Adjustment) Is Nothing) Then
            Me.tableBODFA_OffLine_Detail_Adjustment.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DFA_OffLine_Detail_AdjustmentData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DFA_OffLine_Detail_AdjustmentData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBODFA_OffLine_Detail_Adjustment = New BODFA_OffLine_Detail_AdjustmentDataTable
        Me.Tables.Add(Me.tableBODFA_OffLine_Detail_Adjustment)
    End Sub
    
    Private Function ShouldSerializeBODFA_OffLine_Detail_Adjustment() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BODFA_OffLine_Detail_AdjustmentRowChangeEventHandler(ByVal sender As Object, ByVal e As BODFA_OffLine_Detail_AdjustmentRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BODFA_OffLine_Detail_AdjustmentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowId As DataColumn
        
        Private columnBoldRow As DataColumn
        
        Private columnColumnData As DataColumn
        
        Private columnPaymentDateTime As DataColumn
        
        Private columnReference As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnPartyID As DataColumn
        
        Private columnPartyName As DataColumn
        
        Private columnNotes As DataColumn
        
        Friend Sub New()
            MyBase.New("BODFA_OffLine_Detail_Adjustment")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowIdColumn As DataColumn
            Get
                Return Me.columnRowId
            End Get
        End Property
        
        Friend ReadOnly Property BoldRowColumn As DataColumn
            Get
                Return Me.columnBoldRow
            End Get
        End Property
        
        Friend ReadOnly Property ColumnDataColumn As DataColumn
            Get
                Return Me.columnColumnData
            End Get
        End Property
        
        Friend ReadOnly Property PaymentDateTimeColumn As DataColumn
            Get
                Return Me.columnPaymentDateTime
            End Get
        End Property
        
        Friend ReadOnly Property ReferenceColumn As DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property PartyIDColumn As DataColumn
            Get
                Return Me.columnPartyID
            End Get
        End Property
        
        Friend ReadOnly Property PartyNameColumn As DataColumn
            Get
                Return Me.columnPartyName
            End Get
        End Property
        
        Friend ReadOnly Property NotesColumn As DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BODFA_OffLine_Detail_AdjustmentRow
            Get
                Return CType(Me.Rows(index),BODFA_OffLine_Detail_AdjustmentRow)
            End Get
        End Property
        
        Public Event BODFA_OffLine_Detail_AdjustmentRowChanged As BODFA_OffLine_Detail_AdjustmentRowChangeEventHandler
        
        Public Event BODFA_OffLine_Detail_AdjustmentRowChanging As BODFA_OffLine_Detail_AdjustmentRowChangeEventHandler
        
        Public Event BODFA_OffLine_Detail_AdjustmentRowDeleted As BODFA_OffLine_Detail_AdjustmentRowChangeEventHandler
        
        Public Event BODFA_OffLine_Detail_AdjustmentRowDeleting As BODFA_OffLine_Detail_AdjustmentRowChangeEventHandler
        
        Public Overloads Sub AddBODFA_OffLine_Detail_AdjustmentRow(ByVal row As BODFA_OffLine_Detail_AdjustmentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBODFA_OffLine_Detail_AdjustmentRow(ByVal RowId As Long, ByVal BoldRow As Boolean, ByVal ColumnData As String, ByVal PaymentDateTime As String, ByVal Reference As String, ByVal Amount As String, ByVal PartyID As String, ByVal PartyName As String, ByVal Notes As String) As BODFA_OffLine_Detail_AdjustmentRow
            Dim rowBODFA_OffLine_Detail_AdjustmentRow As BODFA_OffLine_Detail_AdjustmentRow = CType(Me.NewRow,BODFA_OffLine_Detail_AdjustmentRow)
            rowBODFA_OffLine_Detail_AdjustmentRow.ItemArray = New Object() {RowId, BoldRow, ColumnData, PaymentDateTime, Reference, Amount, PartyID, PartyName, Notes}
            Me.Rows.Add(rowBODFA_OffLine_Detail_AdjustmentRow)
            Return rowBODFA_OffLine_Detail_AdjustmentRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BODFA_OffLine_Detail_AdjustmentDataTable = CType(MyBase.Clone,BODFA_OffLine_Detail_AdjustmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BODFA_OffLine_Detail_AdjustmentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowId = Me.Columns("RowId")
            Me.columnBoldRow = Me.Columns("BoldRow")
            Me.columnColumnData = Me.Columns("ColumnData")
            Me.columnPaymentDateTime = Me.Columns("PaymentDateTime")
            Me.columnReference = Me.Columns("Reference")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnPartyID = Me.Columns("PartyID")
            Me.columnPartyName = Me.Columns("PartyName")
            Me.columnNotes = Me.Columns("Notes")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowId = New DataColumn("RowId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowId)
            Me.columnBoldRow = New DataColumn("BoldRow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBoldRow)
            Me.columnColumnData = New DataColumn("ColumnData", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnColumnData)
            Me.columnPaymentDateTime = New DataColumn("PaymentDateTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentDateTime)
            Me.columnReference = New DataColumn("Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReference)
            Me.columnAmount = New DataColumn("Amount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnPartyID = New DataColumn("PartyID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyID)
            Me.columnPartyName = New DataColumn("PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyName)
            Me.columnNotes = New DataColumn("Notes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNotes)
        End Sub
        
        Public Function NewBODFA_OffLine_Detail_AdjustmentRow() As BODFA_OffLine_Detail_AdjustmentRow
            Return CType(Me.NewRow,BODFA_OffLine_Detail_AdjustmentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BODFA_OffLine_Detail_AdjustmentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BODFA_OffLine_Detail_AdjustmentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BODFA_OffLine_Detail_AdjustmentRowChangedEvent) Is Nothing) Then
                RaiseEvent BODFA_OffLine_Detail_AdjustmentRowChanged(Me, New BODFA_OffLine_Detail_AdjustmentRowChangeEvent(CType(e.Row,BODFA_OffLine_Detail_AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BODFA_OffLine_Detail_AdjustmentRowChangingEvent) Is Nothing) Then
                RaiseEvent BODFA_OffLine_Detail_AdjustmentRowChanging(Me, New BODFA_OffLine_Detail_AdjustmentRowChangeEvent(CType(e.Row,BODFA_OffLine_Detail_AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BODFA_OffLine_Detail_AdjustmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent BODFA_OffLine_Detail_AdjustmentRowDeleted(Me, New BODFA_OffLine_Detail_AdjustmentRowChangeEvent(CType(e.Row,BODFA_OffLine_Detail_AdjustmentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BODFA_OffLine_Detail_AdjustmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent BODFA_OffLine_Detail_AdjustmentRowDeleting(Me, New BODFA_OffLine_Detail_AdjustmentRowChangeEvent(CType(e.Row,BODFA_OffLine_Detail_AdjustmentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBODFA_OffLine_Detail_AdjustmentRow(ByVal row As BODFA_OffLine_Detail_AdjustmentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BODFA_OffLine_Detail_AdjustmentRow
        Inherits DataRow
        
        Private tableBODFA_OffLine_Detail_Adjustment As BODFA_OffLine_Detail_AdjustmentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBODFA_OffLine_Detail_Adjustment = CType(Me.Table,BODFA_OffLine_Detail_AdjustmentDataTable)
        End Sub
        
        Public Property RowId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.RowIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.RowIdColumn) = value
            End Set
        End Property
        
        Public Property BoldRow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.BoldRowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.BoldRowColumn) = value
            End Set
        End Property
        
        Public Property ColumnData As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.ColumnDataColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.ColumnDataColumn) = value
            End Set
        End Property
        
        Public Property PaymentDateTime As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.PaymentDateTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.PaymentDateTimeColumn) = value
            End Set
        End Property
        
        Public Property Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.ReferenceColumn) = value
            End Set
        End Property
        
        Public Property Amount As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.AmountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.AmountColumn) = value
            End Set
        End Property
        
        Public Property PartyID As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.PartyIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.PartyIDColumn) = value
            End Set
        End Property
        
        Public Property PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.PartyNameColumn) = value
            End Set
        End Property
        
        Public Property Notes As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_OffLine_Detail_Adjustment.NotesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_OffLine_Detail_Adjustment.NotesColumn) = value
            End Set
        End Property
        
        Public Function IsRowIdNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.RowIdColumn)
        End Function
        
        Public Sub SetRowIdNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.RowIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBoldRowNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.BoldRowColumn)
        End Function
        
        Public Sub SetBoldRowNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.BoldRowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsColumnDataNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.ColumnDataColumn)
        End Function
        
        Public Sub SetColumnDataNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.ColumnDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.PaymentDateTimeColumn)
        End Function
        
        Public Sub SetPaymentDateTimeNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.PaymentDateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.ReferenceColumn)
        End Function
        
        Public Sub SetReferenceNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartyIDNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.PartyIDColumn)
        End Function
        
        Public Sub SetPartyIDNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.PartyIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.PartyNameColumn)
        End Function
        
        Public Sub SetPartyNameNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_OffLine_Detail_Adjustment.NotesColumn)
        End Function
        
        Public Sub SetNotesNull()
            Me(Me.tableBODFA_OffLine_Detail_Adjustment.NotesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BODFA_OffLine_Detail_AdjustmentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BODFA_OffLine_Detail_AdjustmentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BODFA_OffLine_Detail_AdjustmentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BODFA_OffLine_Detail_AdjustmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
