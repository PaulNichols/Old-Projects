'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BOCITESPermitData
    Inherits DataSet
    
    Private tableBOPermit As BOPermitDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOPermit")) Is Nothing) Then
                Me.Tables.Add(New BOPermitDataTable(ds.Tables("BOPermit")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPermit As BOPermitDataTable
        Get
            Return Me.tableBOPermit
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BOCITESPermitData = CType(MyBase.Clone,BOCITESPermitData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOPermit")) Is Nothing) Then
            Me.Tables.Add(New BOPermitDataTable(ds.Tables("BOPermit")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOPermit = CType(Me.Tables("BOPermit"),BOPermitDataTable)
        If (Not (Me.tableBOPermit) Is Nothing) Then
            Me.tableBOPermit.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BOCITESPermitData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BOCITESPermitData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOPermit = New BOPermitDataTable
        Me.Tables.Add(Me.tableBOPermit)
    End Sub
    
    Private Function ShouldSerializeBOPermit() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOPermitRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPermitRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPermitReference As DataColumn
        
        Private columnBarCode As DataColumn
        
        Private columnExhibitionX As DataColumn
        
        Private columnExpiryDate As DataColumn
        
        Private columnExportX As DataColumn
        
        Private columnImportX As DataColumn
        
        Private columnImportCountry As DataColumn
        
        Private columnPetX As DataColumn
        
        Private columnReExportX As DataColumn
        
        Private columnReExportCountry As DataColumn
        
        Private columnExportationX As DataColumn
        
        Private columnImportationX As DataColumn
        
        Private columnIssueDate As DataColumn
        
        Private columnIssueLetter As DataColumn
        
        Private columnIssuePlace As DataColumn
        
        Private columnReExportationX As DataColumn
        
        Private columnSpecialConditions As DataColumn
        
        Private columnSurrenderBorderX As DataColumn
        
        Private columnSurrenderIssuingX As DataColumn
        
        Private columnUserName As DataColumn
        
        Private columnSheetDescription As DataColumn
        
        Private columnSheetNumber As DataColumn
        
        Private columnPrintStatus As DataColumn
        
        Private columnPageMofN As DataColumn
        
        Private columnIssuingManagementAuthority_NameAddress As DataColumn
        
        Private columnLocation_Address As DataColumn
        
        Private columnAgent_AuthorisedPartyId As DataColumn
        
        Private columnAgent_PartyAddress As DataColumn
        
        Private columnAgent_PartyName As DataColumn
        
        Private columnSpecimen_Appendix As DataColumn
        
        Private columnSpecimen_CommonName As DataColumn
        
        Private columnSpecimen_ECAnnex As DataColumn
        
        Private columnSpecimen_LastReExportCountry As DataColumn
        
        Private columnSpecimen_Mass As DataColumn
        
        Private columnSpecimen_OriginCertificateDate As DataColumn
        
        Private columnSpecimen_OriginCertificateRef As DataColumn
        
        Private columnSpecimen_OriginCountry As DataColumn
        
        Private columnSpecimen_OriginPermitDate As DataColumn
        
        Private columnSpecimen_OriginPermitRef As DataColumn
        
        Private columnSpecimen_Purpose As DataColumn
        
        Private columnSpecimen_Quantity As DataColumn
        
        Private columnSpecimen_ScientificName As DataColumn
        
        Private columnSpecimen_Source As DataColumn
        
        Private columnSpecimen_Descriptions As DataColumn
        
        Private columnExporter_AuthorisedPartyId As DataColumn
        
        Private columnExporter_PartyAddress As DataColumn
        
        Private columnExporter_PartyName As DataColumn
        
        Private columnImporter_AuthorisedPartyId As DataColumn
        
        Private columnImporter_PartyAddress As DataColumn
        
        Private columnImporter_PartyName As DataColumn
        
        Private columnForeignManagementAuthority_NameAddress As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPermit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PermitReferenceColumn As DataColumn
            Get
                Return Me.columnPermitReference
            End Get
        End Property
        
        Friend ReadOnly Property BarCodeColumn As DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        Friend ReadOnly Property ExhibitionXColumn As DataColumn
            Get
                Return Me.columnExhibitionX
            End Get
        End Property
        
        Friend ReadOnly Property ExpiryDateColumn As DataColumn
            Get
                Return Me.columnExpiryDate
            End Get
        End Property
        
        Friend ReadOnly Property ExportXColumn As DataColumn
            Get
                Return Me.columnExportX
            End Get
        End Property
        
        Friend ReadOnly Property ImportXColumn As DataColumn
            Get
                Return Me.columnImportX
            End Get
        End Property
        
        Friend ReadOnly Property ImportCountryColumn As DataColumn
            Get
                Return Me.columnImportCountry
            End Get
        End Property
        
        Friend ReadOnly Property PetXColumn As DataColumn
            Get
                Return Me.columnPetX
            End Get
        End Property
        
        Friend ReadOnly Property ReExportXColumn As DataColumn
            Get
                Return Me.columnReExportX
            End Get
        End Property
        
        Friend ReadOnly Property ReExportCountryColumn As DataColumn
            Get
                Return Me.columnReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property ExportationXColumn As DataColumn
            Get
                Return Me.columnExportationX
            End Get
        End Property
        
        Friend ReadOnly Property ImportationXColumn As DataColumn
            Get
                Return Me.columnImportationX
            End Get
        End Property
        
        Friend ReadOnly Property IssueDateColumn As DataColumn
            Get
                Return Me.columnIssueDate
            End Get
        End Property
        
        Friend ReadOnly Property IssueLetterColumn As DataColumn
            Get
                Return Me.columnIssueLetter
            End Get
        End Property
        
        Friend ReadOnly Property IssuePlaceColumn As DataColumn
            Get
                Return Me.columnIssuePlace
            End Get
        End Property
        
        Friend ReadOnly Property ReExportationXColumn As DataColumn
            Get
                Return Me.columnReExportationX
            End Get
        End Property
        
        Friend ReadOnly Property SpecialConditionsColumn As DataColumn
            Get
                Return Me.columnSpecialConditions
            End Get
        End Property
        
        Friend ReadOnly Property SurrenderBorderXColumn As DataColumn
            Get
                Return Me.columnSurrenderBorderX
            End Get
        End Property
        
        Friend ReadOnly Property SurrenderIssuingXColumn As DataColumn
            Get
                Return Me.columnSurrenderIssuingX
            End Get
        End Property
        
        Friend ReadOnly Property UserNameColumn As DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        Friend ReadOnly Property SheetDescriptionColumn As DataColumn
            Get
                Return Me.columnSheetDescription
            End Get
        End Property
        
        Friend ReadOnly Property SheetNumberColumn As DataColumn
            Get
                Return Me.columnSheetNumber
            End Get
        End Property
        
        Friend ReadOnly Property PrintStatusColumn As DataColumn
            Get
                Return Me.columnPrintStatus
            End Get
        End Property
        
        Friend ReadOnly Property PageMofNColumn As DataColumn
            Get
                Return Me.columnPageMofN
            End Get
        End Property
        
        Friend ReadOnly Property IssuingManagementAuthority_NameAddressColumn As DataColumn
            Get
                Return Me.columnIssuingManagementAuthority_NameAddress
            End Get
        End Property
        
        Friend ReadOnly Property Location_AddressColumn As DataColumn
            Get
                Return Me.columnLocation_Address
            End Get
        End Property
        
        Friend ReadOnly Property Agent_AuthorisedPartyIdColumn As DataColumn
            Get
                Return Me.columnAgent_AuthorisedPartyId
            End Get
        End Property
        
        Friend ReadOnly Property Agent_PartyAddressColumn As DataColumn
            Get
                Return Me.columnAgent_PartyAddress
            End Get
        End Property
        
        Friend ReadOnly Property Agent_PartyNameColumn As DataColumn
            Get
                Return Me.columnAgent_PartyName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_AppendixColumn As DataColumn
            Get
                Return Me.columnSpecimen_Appendix
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_CommonNameColumn As DataColumn
            Get
                Return Me.columnSpecimen_CommonName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_ECAnnexColumn As DataColumn
            Get
                Return Me.columnSpecimen_ECAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_LastReExportCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen_LastReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_MassColumn As DataColumn
            Get
                Return Me.columnSpecimen_Mass
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateDateColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateRefColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitDateColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitRefColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_PurposeColumn As DataColumn
            Get
                Return Me.columnSpecimen_Purpose
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_QuantityColumn As DataColumn
            Get
                Return Me.columnSpecimen_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_ScientificNameColumn As DataColumn
            Get
                Return Me.columnSpecimen_ScientificName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_SourceColumn As DataColumn
            Get
                Return Me.columnSpecimen_Source
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_DescriptionsColumn As DataColumn
            Get
                Return Me.columnSpecimen_Descriptions
            End Get
        End Property
        
        Friend ReadOnly Property Exporter_AuthorisedPartyIdColumn As DataColumn
            Get
                Return Me.columnExporter_AuthorisedPartyId
            End Get
        End Property
        
        Friend ReadOnly Property Exporter_PartyAddressColumn As DataColumn
            Get
                Return Me.columnExporter_PartyAddress
            End Get
        End Property
        
        Friend ReadOnly Property Exporter_PartyNameColumn As DataColumn
            Get
                Return Me.columnExporter_PartyName
            End Get
        End Property
        
        Friend ReadOnly Property Importer_AuthorisedPartyIdColumn As DataColumn
            Get
                Return Me.columnImporter_AuthorisedPartyId
            End Get
        End Property
        
        Friend ReadOnly Property Importer_PartyAddressColumn As DataColumn
            Get
                Return Me.columnImporter_PartyAddress
            End Get
        End Property
        
        Friend ReadOnly Property Importer_PartyNameColumn As DataColumn
            Get
                Return Me.columnImporter_PartyName
            End Get
        End Property
        
        Friend ReadOnly Property ForeignManagementAuthority_NameAddressColumn As DataColumn
            Get
                Return Me.columnForeignManagementAuthority_NameAddress
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPermitRow
            Get
                Return CType(Me.Rows(index),BOPermitRow)
            End Get
        End Property
        
        Public Event BOPermitRowChanged As BOPermitRowChangeEventHandler
        
        Public Event BOPermitRowChanging As BOPermitRowChangeEventHandler
        
        Public Event BOPermitRowDeleted As BOPermitRowChangeEventHandler
        
        Public Event BOPermitRowDeleting As BOPermitRowChangeEventHandler
        
        Public Overloads Sub AddBOPermitRow(ByVal row As BOPermitRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPermitRow( _
                    ByVal PermitReference As String,  _
                    ByVal BarCode As String,  _
                    ByVal ExhibitionX As String,  _
                    ByVal ExpiryDate As String,  _
                    ByVal ExportX As String,  _
                    ByVal ImportX As String,  _
                    ByVal ImportCountry As String,  _
                    ByVal PetX As String,  _
                    ByVal ReExportX As String,  _
                    ByVal ReExportCountry As String,  _
                    ByVal ExportationX As String,  _
                    ByVal ImportationX As String,  _
                    ByVal IssueDate As String,  _
                    ByVal IssueLetter As String,  _
                    ByVal IssuePlace As String,  _
                    ByVal ReExportationX As String,  _
                    ByVal SpecialConditions As String,  _
                    ByVal SurrenderBorderX As String,  _
                    ByVal SurrenderIssuingX As String,  _
                    ByVal UserName As String,  _
                    ByVal SheetDescription As String,  _
                    ByVal SheetNumber As String,  _
                    ByVal PrintStatus As String,  _
                    ByVal PageMofN As String,  _
                    ByVal IssuingManagementAuthority_NameAddress As String,  _
                    ByVal Location_Address As String,  _
                    ByVal Agent_AuthorisedPartyId As String,  _
                    ByVal Agent_PartyAddress As String,  _
                    ByVal Agent_PartyName As String,  _
                    ByVal Specimen_Appendix As String,  _
                    ByVal Specimen_CommonName As String,  _
                    ByVal Specimen_ECAnnex As String,  _
                    ByVal Specimen_LastReExportCountry As String,  _
                    ByVal Specimen_Mass As String,  _
                    ByVal Specimen_OriginCertificateDate As String,  _
                    ByVal Specimen_OriginCertificateRef As String,  _
                    ByVal Specimen_OriginCountry As String,  _
                    ByVal Specimen_OriginPermitDate As String,  _
                    ByVal Specimen_OriginPermitRef As String,  _
                    ByVal Specimen_Purpose As String,  _
                    ByVal Specimen_Quantity As String,  _
                    ByVal Specimen_ScientificName As String,  _
                    ByVal Specimen_Source As String,  _
                    ByVal Specimen_Descriptions As String,  _
                    ByVal Exporter_AuthorisedPartyId As String,  _
                    ByVal Exporter_PartyAddress As String,  _
                    ByVal Exporter_PartyName As String,  _
                    ByVal Importer_AuthorisedPartyId As String,  _
                    ByVal Importer_PartyAddress As String,  _
                    ByVal Importer_PartyName As String,  _
                    ByVal ForeignManagementAuthority_NameAddress As String) As BOPermitRow
            Dim rowBOPermitRow As BOPermitRow = CType(Me.NewRow,BOPermitRow)
            rowBOPermitRow.ItemArray = New Object() {PermitReference, BarCode, ExhibitionX, ExpiryDate, ExportX, ImportX, ImportCountry, PetX, ReExportX, ReExportCountry, ExportationX, ImportationX, IssueDate, IssueLetter, IssuePlace, ReExportationX, SpecialConditions, SurrenderBorderX, SurrenderIssuingX, UserName, SheetDescription, SheetNumber, PrintStatus, PageMofN, IssuingManagementAuthority_NameAddress, Location_Address, Agent_AuthorisedPartyId, Agent_PartyAddress, Agent_PartyName, Specimen_Appendix, Specimen_CommonName, Specimen_ECAnnex, Specimen_LastReExportCountry, Specimen_Mass, Specimen_OriginCertificateDate, Specimen_OriginCertificateRef, Specimen_OriginCountry, Specimen_OriginPermitDate, Specimen_OriginPermitRef, Specimen_Purpose, Specimen_Quantity, Specimen_ScientificName, Specimen_Source, Specimen_Descriptions, Exporter_AuthorisedPartyId, Exporter_PartyAddress, Exporter_PartyName, Importer_AuthorisedPartyId, Importer_PartyAddress, Importer_PartyName, ForeignManagementAuthority_NameAddress}
            Me.Rows.Add(rowBOPermitRow)
            Return rowBOPermitRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPermitDataTable = CType(MyBase.Clone,BOPermitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPermitDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPermitReference = Me.Columns("PermitReference")
            Me.columnBarCode = Me.Columns("BarCode")
            Me.columnExhibitionX = Me.Columns("ExhibitionX")
            Me.columnExpiryDate = Me.Columns("ExpiryDate")
            Me.columnExportX = Me.Columns("ExportX")
            Me.columnImportX = Me.Columns("ImportX")
            Me.columnImportCountry = Me.Columns("ImportCountry")
            Me.columnPetX = Me.Columns("PetX")
            Me.columnReExportX = Me.Columns("ReExportX")
            Me.columnReExportCountry = Me.Columns("ReExportCountry")
            Me.columnExportationX = Me.Columns("ExportationX")
            Me.columnImportationX = Me.Columns("ImportationX")
            Me.columnIssueDate = Me.Columns("IssueDate")
            Me.columnIssueLetter = Me.Columns("IssueLetter")
            Me.columnIssuePlace = Me.Columns("IssuePlace")
            Me.columnReExportationX = Me.Columns("ReExportationX")
            Me.columnSpecialConditions = Me.Columns("SpecialConditions")
            Me.columnSurrenderBorderX = Me.Columns("SurrenderBorderX")
            Me.columnSurrenderIssuingX = Me.Columns("SurrenderIssuingX")
            Me.columnUserName = Me.Columns("UserName")
            Me.columnSheetDescription = Me.Columns("SheetDescription")
            Me.columnSheetNumber = Me.Columns("SheetNumber")
            Me.columnPrintStatus = Me.Columns("PrintStatus")
            Me.columnPageMofN = Me.Columns("PageMofN")
            Me.columnIssuingManagementAuthority_NameAddress = Me.Columns("IssuingManagementAuthority_NameAddress")
            Me.columnLocation_Address = Me.Columns("Location_Address")
            Me.columnAgent_AuthorisedPartyId = Me.Columns("Agent_AuthorisedPartyId")
            Me.columnAgent_PartyAddress = Me.Columns("Agent_PartyAddress")
            Me.columnAgent_PartyName = Me.Columns("Agent_PartyName")
            Me.columnSpecimen_Appendix = Me.Columns("Specimen_Appendix")
            Me.columnSpecimen_CommonName = Me.Columns("Specimen_CommonName")
            Me.columnSpecimen_ECAnnex = Me.Columns("Specimen_ECAnnex")
            Me.columnSpecimen_LastReExportCountry = Me.Columns("Specimen_LastReExportCountry")
            Me.columnSpecimen_Mass = Me.Columns("Specimen_Mass")
            Me.columnSpecimen_OriginCertificateDate = Me.Columns("Specimen_OriginCertificateDate")
            Me.columnSpecimen_OriginCertificateRef = Me.Columns("Specimen_OriginCertificateRef")
            Me.columnSpecimen_OriginCountry = Me.Columns("Specimen_OriginCountry")
            Me.columnSpecimen_OriginPermitDate = Me.Columns("Specimen_OriginPermitDate")
            Me.columnSpecimen_OriginPermitRef = Me.Columns("Specimen_OriginPermitRef")
            Me.columnSpecimen_Purpose = Me.Columns("Specimen_Purpose")
            Me.columnSpecimen_Quantity = Me.Columns("Specimen_Quantity")
            Me.columnSpecimen_ScientificName = Me.Columns("Specimen_ScientificName")
            Me.columnSpecimen_Source = Me.Columns("Specimen_Source")
            Me.columnSpecimen_Descriptions = Me.Columns("Specimen_Descriptions")
            Me.columnExporter_AuthorisedPartyId = Me.Columns("Exporter_AuthorisedPartyId")
            Me.columnExporter_PartyAddress = Me.Columns("Exporter_PartyAddress")
            Me.columnExporter_PartyName = Me.Columns("Exporter_PartyName")
            Me.columnImporter_AuthorisedPartyId = Me.Columns("Importer_AuthorisedPartyId")
            Me.columnImporter_PartyAddress = Me.Columns("Importer_PartyAddress")
            Me.columnImporter_PartyName = Me.Columns("Importer_PartyName")
            Me.columnForeignManagementAuthority_NameAddress = Me.Columns("ForeignManagementAuthority_NameAddress")
        End Sub
        
        Private Sub InitClass()
            Me.columnPermitReference = New DataColumn("PermitReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermitReference)
            Me.columnBarCode = New DataColumn("BarCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarCode)
            Me.columnExhibitionX = New DataColumn("ExhibitionX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExhibitionX)
            Me.columnExpiryDate = New DataColumn("ExpiryDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpiryDate)
            Me.columnExportX = New DataColumn("ExportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportX)
            Me.columnImportX = New DataColumn("ImportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportX)
            Me.columnImportCountry = New DataColumn("ImportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportCountry)
            Me.columnPetX = New DataColumn("PetX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPetX)
            Me.columnReExportX = New DataColumn("ReExportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReExportX)
            Me.columnReExportCountry = New DataColumn("ReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReExportCountry)
            Me.columnExportationX = New DataColumn("ExportationX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportationX)
            Me.columnImportationX = New DataColumn("ImportationX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportationX)
            Me.columnIssueDate = New DataColumn("IssueDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueDate)
            Me.columnIssueLetter = New DataColumn("IssueLetter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueLetter)
            Me.columnIssuePlace = New DataColumn("IssuePlace", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssuePlace)
            Me.columnReExportationX = New DataColumn("ReExportationX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReExportationX)
            Me.columnSpecialConditions = New DataColumn("SpecialConditions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialConditions)
            Me.columnSurrenderBorderX = New DataColumn("SurrenderBorderX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurrenderBorderX)
            Me.columnSurrenderIssuingX = New DataColumn("SurrenderIssuingX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurrenderIssuingX)
            Me.columnUserName = New DataColumn("UserName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserName)
            Me.columnSheetDescription = New DataColumn("SheetDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSheetDescription)
            Me.columnSheetNumber = New DataColumn("SheetNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSheetNumber)
            Me.columnPrintStatus = New DataColumn("PrintStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrintStatus)
            Me.columnPageMofN = New DataColumn("PageMofN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageMofN)
            Me.columnIssuingManagementAuthority_NameAddress = New DataColumn("IssuingManagementAuthority_NameAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssuingManagementAuthority_NameAddress)
            Me.columnLocation_Address = New DataColumn("Location_Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLocation_Address)
            Me.columnAgent_AuthorisedPartyId = New DataColumn("Agent_AuthorisedPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgent_AuthorisedPartyId)
            Me.columnAgent_PartyAddress = New DataColumn("Agent_PartyAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgent_PartyAddress)
            Me.columnAgent_PartyName = New DataColumn("Agent_PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAgent_PartyName)
            Me.columnSpecimen_Appendix = New DataColumn("Specimen_Appendix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Appendix)
            Me.columnSpecimen_CommonName = New DataColumn("Specimen_CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_CommonName)
            Me.columnSpecimen_ECAnnex = New DataColumn("Specimen_ECAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_ECAnnex)
            Me.columnSpecimen_LastReExportCountry = New DataColumn("Specimen_LastReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_LastReExportCountry)
            Me.columnSpecimen_Mass = New DataColumn("Specimen_Mass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Mass)
            Me.columnSpecimen_OriginCertificateDate = New DataColumn("Specimen_OriginCertificateDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateDate)
            Me.columnSpecimen_OriginCertificateRef = New DataColumn("Specimen_OriginCertificateRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateRef)
            Me.columnSpecimen_OriginCountry = New DataColumn("Specimen_OriginCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCountry)
            Me.columnSpecimen_OriginPermitDate = New DataColumn("Specimen_OriginPermitDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitDate)
            Me.columnSpecimen_OriginPermitRef = New DataColumn("Specimen_OriginPermitRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitRef)
            Me.columnSpecimen_Purpose = New DataColumn("Specimen_Purpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Purpose)
            Me.columnSpecimen_Quantity = New DataColumn("Specimen_Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Quantity)
            Me.columnSpecimen_ScientificName = New DataColumn("Specimen_ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_ScientificName)
            Me.columnSpecimen_Source = New DataColumn("Specimen_Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Source)
            Me.columnSpecimen_Descriptions = New DataColumn("Specimen_Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Descriptions)
            Me.columnExporter_AuthorisedPartyId = New DataColumn("Exporter_AuthorisedPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExporter_AuthorisedPartyId)
            Me.columnExporter_PartyAddress = New DataColumn("Exporter_PartyAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExporter_PartyAddress)
            Me.columnExporter_PartyName = New DataColumn("Exporter_PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExporter_PartyName)
            Me.columnImporter_AuthorisedPartyId = New DataColumn("Importer_AuthorisedPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImporter_AuthorisedPartyId)
            Me.columnImporter_PartyAddress = New DataColumn("Importer_PartyAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImporter_PartyAddress)
            Me.columnImporter_PartyName = New DataColumn("Importer_PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImporter_PartyName)
            Me.columnForeignManagementAuthority_NameAddress = New DataColumn("ForeignManagementAuthority_NameAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnForeignManagementAuthority_NameAddress)
        End Sub
        
        Public Function NewBOPermitRow() As BOPermitRow
            Return CType(Me.NewRow,BOPermitRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPermitRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPermitRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPermitRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPermitRowChanged(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPermitRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPermitRowChanging(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPermitRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPermitRowDeleted(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPermitRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPermitRowDeleting(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPermitRow(ByVal row As BOPermitRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRow
        Inherits DataRow
        
        Private tableBOPermit As BOPermitDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPermit = CType(Me.Table,BOPermitDataTable)
        End Sub
        
        Public Property PermitReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PermitReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PermitReferenceColumn) = value
            End Set
        End Property
        
        Public Property BarCode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.BarCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.BarCodeColumn) = value
            End Set
        End Property
        
        Public Property ExhibitionX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ExhibitionXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ExhibitionXColumn) = value
            End Set
        End Property
        
        Public Property ExpiryDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ExpiryDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ExpiryDateColumn) = value
            End Set
        End Property
        
        Public Property ExportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ExportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ExportXColumn) = value
            End Set
        End Property
        
        Public Property ImportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ImportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ImportXColumn) = value
            End Set
        End Property
        
        Public Property ImportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ImportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ImportCountryColumn) = value
            End Set
        End Property
        
        Public Property PetX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PetXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PetXColumn) = value
            End Set
        End Property
        
        Public Property ReExportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ReExportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ReExportXColumn) = value
            End Set
        End Property
        
        Public Property ReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property ExportationX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ExportationXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ExportationXColumn) = value
            End Set
        End Property
        
        Public Property ImportationX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ImportationXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ImportationXColumn) = value
            End Set
        End Property
        
        Public Property IssueDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.IssueDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.IssueDateColumn) = value
            End Set
        End Property
        
        Public Property IssueLetter As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.IssueLetterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.IssueLetterColumn) = value
            End Set
        End Property
        
        Public Property IssuePlace As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.IssuePlaceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.IssuePlaceColumn) = value
            End Set
        End Property
        
        Public Property ReExportationX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ReExportationXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ReExportationXColumn) = value
            End Set
        End Property
        
        Public Property SpecialConditions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SpecialConditionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SpecialConditionsColumn) = value
            End Set
        End Property
        
        Public Property SurrenderBorderX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SurrenderBorderXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SurrenderBorderXColumn) = value
            End Set
        End Property
        
        Public Property SurrenderIssuingX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SurrenderIssuingXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SurrenderIssuingXColumn) = value
            End Set
        End Property
        
        Public Property UserName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.UserNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.UserNameColumn) = value
            End Set
        End Property
        
        Public Property SheetDescription As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SheetDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SheetDescriptionColumn) = value
            End Set
        End Property
        
        Public Property SheetNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SheetNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SheetNumberColumn) = value
            End Set
        End Property
        
        Public Property PrintStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PrintStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PrintStatusColumn) = value
            End Set
        End Property
        
        Public Property PageMofN As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PageMofNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PageMofNColumn) = value
            End Set
        End Property
        
        Public Property IssuingManagementAuthority_NameAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn) = value
            End Set
        End Property
        
        Public Property Location_Address As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Location_AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Location_AddressColumn) = value
            End Set
        End Property
        
        Public Property Agent_AuthorisedPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Agent_AuthorisedPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Agent_AuthorisedPartyIdColumn) = value
            End Set
        End Property
        
        Public Property Agent_PartyAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Agent_PartyAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Agent_PartyAddressColumn) = value
            End Set
        End Property
        
        Public Property Agent_PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Agent_PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Agent_PartyNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Appendix As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_AppendixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_AppendixColumn) = value
            End Set
        End Property
        
        Public Property Specimen_CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_CommonNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen_ECAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_ECAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_ECAnnexColumn) = value
            End Set
        End Property
        
        Public Property Specimen_LastReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_LastReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_LastReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Mass As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_MassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_MassColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginCertificateDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginCertificateDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginCertificateRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginCertificateRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginPermitDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginPermitDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginPermitRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginPermitRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Purpose As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_PurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_PurposeColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Specimen_ScientificName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_ScientificNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Source As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_SourceColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property Exporter_AuthorisedPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn) = value
            End Set
        End Property
        
        Public Property Exporter_PartyAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Exporter_PartyAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Exporter_PartyAddressColumn) = value
            End Set
        End Property
        
        Public Property Exporter_PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Exporter_PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Exporter_PartyNameColumn) = value
            End Set
        End Property
        
        Public Property Importer_AuthorisedPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn) = value
            End Set
        End Property
        
        Public Property Importer_PartyAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Importer_PartyAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Importer_PartyAddressColumn) = value
            End Set
        End Property
        
        Public Property Importer_PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Importer_PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Importer_PartyNameColumn) = value
            End Set
        End Property
        
        Public Property ForeignManagementAuthority_NameAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ForeignManagementAuthority_NameAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ForeignManagementAuthority_NameAddressColumn) = value
            End Set
        End Property
        
        Public Function IsPermitReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PermitReferenceColumn)
        End Function
        
        Public Sub SetPermitReferenceNull()
            Me(Me.tableBOPermit.PermitReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.BarCodeColumn)
        End Function
        
        Public Sub SetBarCodeNull()
            Me(Me.tableBOPermit.BarCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExhibitionXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ExhibitionXColumn)
        End Function
        
        Public Sub SetExhibitionXNull()
            Me(Me.tableBOPermit.ExhibitionXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpiryDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ExpiryDateColumn)
        End Function
        
        Public Sub SetExpiryDateNull()
            Me(Me.tableBOPermit.ExpiryDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ExportXColumn)
        End Function
        
        Public Sub SetExportXNull()
            Me(Me.tableBOPermit.ExportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ImportXColumn)
        End Function
        
        Public Sub SetImportXNull()
            Me(Me.tableBOPermit.ImportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ImportCountryColumn)
        End Function
        
        Public Sub SetImportCountryNull()
            Me(Me.tableBOPermit.ImportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPetXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PetXColumn)
        End Function
        
        Public Sub SetPetXNull()
            Me(Me.tableBOPermit.PetXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReExportXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ReExportXColumn)
        End Function
        
        Public Sub SetReExportXNull()
            Me(Me.tableBOPermit.ReExportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ReExportCountryColumn)
        End Function
        
        Public Sub SetReExportCountryNull()
            Me(Me.tableBOPermit.ReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportationXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ExportationXColumn)
        End Function
        
        Public Sub SetExportationXNull()
            Me(Me.tableBOPermit.ExportationXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportationXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ImportationXColumn)
        End Function
        
        Public Sub SetImportationXNull()
            Me(Me.tableBOPermit.ImportationXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.IssueDateColumn)
        End Function
        
        Public Sub SetIssueDateNull()
            Me(Me.tableBOPermit.IssueDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueLetterNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.IssueLetterColumn)
        End Function
        
        Public Sub SetIssueLetterNull()
            Me(Me.tableBOPermit.IssueLetterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssuePlaceNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.IssuePlaceColumn)
        End Function
        
        Public Sub SetIssuePlaceNull()
            Me(Me.tableBOPermit.IssuePlaceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReExportationXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ReExportationXColumn)
        End Function
        
        Public Sub SetReExportationXNull()
            Me(Me.tableBOPermit.ReExportationXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecialConditionsNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SpecialConditionsColumn)
        End Function
        
        Public Sub SetSpecialConditionsNull()
            Me(Me.tableBOPermit.SpecialConditionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurrenderBorderXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SurrenderBorderXColumn)
        End Function
        
        Public Sub SetSurrenderBorderXNull()
            Me(Me.tableBOPermit.SurrenderBorderXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurrenderIssuingXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SurrenderIssuingXColumn)
        End Function
        
        Public Sub SetSurrenderIssuingXNull()
            Me(Me.tableBOPermit.SurrenderIssuingXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.UserNameColumn)
        End Function
        
        Public Sub SetUserNameNull()
            Me(Me.tableBOPermit.UserNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSheetDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SheetDescriptionColumn)
        End Function
        
        Public Sub SetSheetDescriptionNull()
            Me(Me.tableBOPermit.SheetDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSheetNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SheetNumberColumn)
        End Function
        
        Public Sub SetSheetNumberNull()
            Me(Me.tableBOPermit.SheetNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrintStatusNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PrintStatusColumn)
        End Function
        
        Public Sub SetPrintStatusNull()
            Me(Me.tableBOPermit.PrintStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageMofNNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PageMofNColumn)
        End Function
        
        Public Sub SetPageMofNNull()
            Me(Me.tableBOPermit.PageMofNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssuingManagementAuthority_NameAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn)
        End Function
        
        Public Sub SetIssuingManagementAuthority_NameAddressNull()
            Me(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLocation_AddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Location_AddressColumn)
        End Function
        
        Public Sub SetLocation_AddressNull()
            Me(Me.tableBOPermit.Location_AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgent_AuthorisedPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Agent_AuthorisedPartyIdColumn)
        End Function
        
        Public Sub SetAgent_AuthorisedPartyIdNull()
            Me(Me.tableBOPermit.Agent_AuthorisedPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgent_PartyAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Agent_PartyAddressColumn)
        End Function
        
        Public Sub SetAgent_PartyAddressNull()
            Me(Me.tableBOPermit.Agent_PartyAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAgent_PartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Agent_PartyNameColumn)
        End Function
        
        Public Sub SetAgent_PartyNameNull()
            Me(Me.tableBOPermit.Agent_PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_AppendixNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_AppendixColumn)
        End Function
        
        Public Sub SetSpecimen_AppendixNull()
            Me(Me.tableBOPermit.Specimen_AppendixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_CommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_CommonNameColumn)
        End Function
        
        Public Sub SetSpecimen_CommonNameNull()
            Me(Me.tableBOPermit.Specimen_CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_ECAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_ECAnnexColumn)
        End Function
        
        Public Sub SetSpecimen_ECAnnexNull()
            Me(Me.tableBOPermit.Specimen_ECAnnexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_LastReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_LastReExportCountryColumn)
        End Function
        
        Public Sub SetSpecimen_LastReExportCountryNull()
            Me(Me.tableBOPermit.Specimen_LastReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_MassNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_MassColumn)
        End Function
        
        Public Sub SetSpecimen_MassNull()
            Me(Me.tableBOPermit.Specimen_MassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginCertificateDateColumn)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateDateNull()
            Me(Me.tableBOPermit.Specimen_OriginCertificateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateRefNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginCertificateRefColumn)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateRefNull()
            Me(Me.tableBOPermit.Specimen_OriginCertificateRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginCountryColumn)
        End Function
        
        Public Sub SetSpecimen_OriginCountryNull()
            Me(Me.tableBOPermit.Specimen_OriginCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginPermitDateColumn)
        End Function
        
        Public Sub SetSpecimen_OriginPermitDateNull()
            Me(Me.tableBOPermit.Specimen_OriginPermitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitRefNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginPermitRefColumn)
        End Function
        
        Public Sub SetSpecimen_OriginPermitRefNull()
            Me(Me.tableBOPermit.Specimen_OriginPermitRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_PurposeNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_PurposeColumn)
        End Function
        
        Public Sub SetSpecimen_PurposeNull()
            Me(Me.tableBOPermit.Specimen_PurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_QuantityColumn)
        End Function
        
        Public Sub SetSpecimen_QuantityNull()
            Me(Me.tableBOPermit.Specimen_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_ScientificNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_ScientificNameColumn)
        End Function
        
        Public Sub SetSpecimen_ScientificNameNull()
            Me(Me.tableBOPermit.Specimen_ScientificNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_SourceNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_SourceColumn)
        End Function
        
        Public Sub SetSpecimen_SourceNull()
            Me(Me.tableBOPermit.Specimen_SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_DescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_DescriptionsColumn)
        End Function
        
        Public Sub SetSpecimen_DescriptionsNull()
            Me(Me.tableBOPermit.Specimen_DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExporter_AuthorisedPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn)
        End Function
        
        Public Sub SetExporter_AuthorisedPartyIdNull()
            Me(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExporter_PartyAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Exporter_PartyAddressColumn)
        End Function
        
        Public Sub SetExporter_PartyAddressNull()
            Me(Me.tableBOPermit.Exporter_PartyAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExporter_PartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Exporter_PartyNameColumn)
        End Function
        
        Public Sub SetExporter_PartyNameNull()
            Me(Me.tableBOPermit.Exporter_PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImporter_AuthorisedPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn)
        End Function
        
        Public Sub SetImporter_AuthorisedPartyIdNull()
            Me(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImporter_PartyAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Importer_PartyAddressColumn)
        End Function
        
        Public Sub SetImporter_PartyAddressNull()
            Me(Me.tableBOPermit.Importer_PartyAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImporter_PartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Importer_PartyNameColumn)
        End Function
        
        Public Sub SetImporter_PartyNameNull()
            Me(Me.tableBOPermit.Importer_PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsForeignManagementAuthority_NameAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ForeignManagementAuthority_NameAddressColumn)
        End Function
        
        Public Sub SetForeignManagementAuthority_NameAddressNull()
            Me(Me.tableBOPermit.ForeignManagementAuthority_NameAddressColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPermitRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPermitRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPermitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
