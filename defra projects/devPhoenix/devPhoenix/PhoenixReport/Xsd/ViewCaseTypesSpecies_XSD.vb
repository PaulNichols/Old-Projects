'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ViewCaseTypesSpeciesData
    Inherits DataSet
    
    Private tableBOViewCaseTypesSpecies As BOViewCaseTypesSpeciesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOViewCaseTypesSpecies")) Is Nothing) Then
                Me.Tables.Add(New BOViewCaseTypesSpeciesDataTable(ds.Tables("BOViewCaseTypesSpecies")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOViewCaseTypesSpecies As BOViewCaseTypesSpeciesDataTable
        Get
            Return Me.tableBOViewCaseTypesSpecies
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ViewCaseTypesSpeciesData = CType(MyBase.Clone,ViewCaseTypesSpeciesData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOViewCaseTypesSpecies")) Is Nothing) Then
            Me.Tables.Add(New BOViewCaseTypesSpeciesDataTable(ds.Tables("BOViewCaseTypesSpecies")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOViewCaseTypesSpecies = CType(Me.Tables("BOViewCaseTypesSpecies"),BOViewCaseTypesSpeciesDataTable)
        If (Not (Me.tableBOViewCaseTypesSpecies) Is Nothing) Then
            Me.tableBOViewCaseTypesSpecies.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ViewCaseTypesSpeciesData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ViewCaseTypesSpeciesData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOViewCaseTypesSpecies = New BOViewCaseTypesSpeciesDataTable
        Me.Tables.Add(Me.tableBOViewCaseTypesSpecies)
    End Sub
    
    Private Function ShouldSerializeBOViewCaseTypesSpecies() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOViewCaseTypesSpeciesRowChangeEventHandler(ByVal sender As Object, ByVal e As BOViewCaseTypesSpeciesRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOViewCaseTypesSpeciesDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBoldRow As DataColumn
        
        Private columnApplicantId As DataColumn
        
        Private columnApplicantName As DataColumn
        
        Private columnApplicantPostcode As DataColumn
        
        Private columnApplicationType As DataColumn
        
        Private columnPermitNo As DataColumn
        
        Private columnApplicationNo As DataColumn
        
        Private columnReceivedDate As DataColumn
        
        Private columnStatus As DataColumn
        
        Private columnScientificName As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnPartDerivative As DataColumn
        
        Private columnPurpose As DataColumn
        
        Private columnCountryOfOrigin As DataColumn
        
        Private columnOtherCountry As DataColumn
        
        Private columnOtherCountryPermitNo As DataColumn
        
        Private columnSource As DataColumn
        
        Private columnCertificateDeclaration As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnQuantity As DataColumn
        
        Private columnNetMass As DataColumn
        
        Private columnIssuedDate As DataColumn
        
        Private columnQuantityUsed As DataColumn
        
        Private columnNetMassUsed As DataColumn
        
        Private columnAnnex As DataColumn
        
        Private columnAppendix As DataColumn
        
        Private columnOwner As DataColumn
        
        Private columnOtherPartyId As DataColumn
        
        Private columnOtherPartyName As DataColumn
        
        Private columnOtherPartyPostcode As DataColumn
        
        Friend Sub New()
            MyBase.New("BOViewCaseTypesSpecies")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BoldRowColumn As DataColumn
            Get
                Return Me.columnBoldRow
            End Get
        End Property
        
        Friend ReadOnly Property ApplicantIdColumn As DataColumn
            Get
                Return Me.columnApplicantId
            End Get
        End Property
        
        Friend ReadOnly Property ApplicantNameColumn As DataColumn
            Get
                Return Me.columnApplicantName
            End Get
        End Property
        
        Friend ReadOnly Property ApplicantPostcodeColumn As DataColumn
            Get
                Return Me.columnApplicantPostcode
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationTypeColumn As DataColumn
            Get
                Return Me.columnApplicationType
            End Get
        End Property
        
        Friend ReadOnly Property PermitNoColumn As DataColumn
            Get
                Return Me.columnPermitNo
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationNoColumn As DataColumn
            Get
                Return Me.columnApplicationNo
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedDateColumn As DataColumn
            Get
                Return Me.columnReceivedDate
            End Get
        End Property
        
        Friend ReadOnly Property StatusColumn As DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        Friend ReadOnly Property ScientificNameColumn As DataColumn
            Get
                Return Me.columnScientificName
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property PartDerivativeColumn As DataColumn
            Get
                Return Me.columnPartDerivative
            End Get
        End Property
        
        Friend ReadOnly Property PurposeColumn As DataColumn
            Get
                Return Me.columnPurpose
            End Get
        End Property
        
        Friend ReadOnly Property CountryOfOriginColumn As DataColumn
            Get
                Return Me.columnCountryOfOrigin
            End Get
        End Property
        
        Friend ReadOnly Property OtherCountryColumn As DataColumn
            Get
                Return Me.columnOtherCountry
            End Get
        End Property
        
        Friend ReadOnly Property OtherCountryPermitNoColumn As DataColumn
            Get
                Return Me.columnOtherCountryPermitNo
            End Get
        End Property
        
        Friend ReadOnly Property SourceColumn As DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        Friend ReadOnly Property CertificateDeclarationColumn As DataColumn
            Get
                Return Me.columnCertificateDeclaration
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property QuantityColumn As DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        Friend ReadOnly Property NetMassColumn As DataColumn
            Get
                Return Me.columnNetMass
            End Get
        End Property
        
        Friend ReadOnly Property IssuedDateColumn As DataColumn
            Get
                Return Me.columnIssuedDate
            End Get
        End Property
        
        Friend ReadOnly Property QuantityUsedColumn As DataColumn
            Get
                Return Me.columnQuantityUsed
            End Get
        End Property
        
        Friend ReadOnly Property NetMassUsedColumn As DataColumn
            Get
                Return Me.columnNetMassUsed
            End Get
        End Property
        
        Friend ReadOnly Property AnnexColumn As DataColumn
            Get
                Return Me.columnAnnex
            End Get
        End Property
        
        Friend ReadOnly Property AppendixColumn As DataColumn
            Get
                Return Me.columnAppendix
            End Get
        End Property
        
        Friend ReadOnly Property OwnerColumn As DataColumn
            Get
                Return Me.columnOwner
            End Get
        End Property
        
        Friend ReadOnly Property OtherPartyIdColumn As DataColumn
            Get
                Return Me.columnOtherPartyId
            End Get
        End Property
        
        Friend ReadOnly Property OtherPartyNameColumn As DataColumn
            Get
                Return Me.columnOtherPartyName
            End Get
        End Property
        
        Friend ReadOnly Property OtherPartyPostcodeColumn As DataColumn
            Get
                Return Me.columnOtherPartyPostcode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOViewCaseTypesSpeciesRow
            Get
                Return CType(Me.Rows(index),BOViewCaseTypesSpeciesRow)
            End Get
        End Property
        
        Public Event BOViewCaseTypesSpeciesRowChanged As BOViewCaseTypesSpeciesRowChangeEventHandler
        
        Public Event BOViewCaseTypesSpeciesRowChanging As BOViewCaseTypesSpeciesRowChangeEventHandler
        
        Public Event BOViewCaseTypesSpeciesRowDeleted As BOViewCaseTypesSpeciesRowChangeEventHandler
        
        Public Event BOViewCaseTypesSpeciesRowDeleting As BOViewCaseTypesSpeciesRowChangeEventHandler
        
        Public Overloads Sub AddBOViewCaseTypesSpeciesRow(ByVal row As BOViewCaseTypesSpeciesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOViewCaseTypesSpeciesRow( _
                    ByVal BoldRow As Boolean,  _
                    ByVal ApplicantId As String,  _
                    ByVal ApplicantName As String,  _
                    ByVal ApplicantPostcode As String,  _
                    ByVal ApplicationType As String,  _
                    ByVal PermitNo As String,  _
                    ByVal ApplicationNo As String,  _
                    ByVal ReceivedDate As String,  _
                    ByVal Status As String,  _
                    ByVal ScientificName As String,  _
                    ByVal CommonName As String,  _
                    ByVal PartDerivative As String,  _
                    ByVal Purpose As String,  _
                    ByVal CountryOfOrigin As String,  _
                    ByVal OtherCountry As String,  _
                    ByVal OtherCountryPermitNo As String,  _
                    ByVal Source As String,  _
                    ByVal CertificateDeclaration As String,  _
                    ByVal Gender As String,  _
                    ByVal Quantity As String,  _
                    ByVal NetMass As String,  _
                    ByVal IssuedDate As String,  _
                    ByVal QuantityUsed As String,  _
                    ByVal NetMassUsed As String,  _
                    ByVal Annex As String,  _
                    ByVal Appendix As String,  _
                    ByVal Owner As String,  _
                    ByVal OtherPartyId As String,  _
                    ByVal OtherPartyName As String,  _
                    ByVal OtherPartyPostcode As String) As BOViewCaseTypesSpeciesRow
            Dim rowBOViewCaseTypesSpeciesRow As BOViewCaseTypesSpeciesRow = CType(Me.NewRow,BOViewCaseTypesSpeciesRow)
            rowBOViewCaseTypesSpeciesRow.ItemArray = New Object() {BoldRow, ApplicantId, ApplicantName, ApplicantPostcode, ApplicationType, PermitNo, ApplicationNo, ReceivedDate, Status, ScientificName, CommonName, PartDerivative, Purpose, CountryOfOrigin, OtherCountry, OtherCountryPermitNo, Source, CertificateDeclaration, Gender, Quantity, NetMass, IssuedDate, QuantityUsed, NetMassUsed, Annex, Appendix, Owner, OtherPartyId, OtherPartyName, OtherPartyPostcode}
            Me.Rows.Add(rowBOViewCaseTypesSpeciesRow)
            Return rowBOViewCaseTypesSpeciesRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOViewCaseTypesSpeciesDataTable = CType(MyBase.Clone,BOViewCaseTypesSpeciesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOViewCaseTypesSpeciesDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBoldRow = Me.Columns("BoldRow")
            Me.columnApplicantId = Me.Columns("ApplicantId")
            Me.columnApplicantName = Me.Columns("ApplicantName")
            Me.columnApplicantPostcode = Me.Columns("ApplicantPostcode")
            Me.columnApplicationType = Me.Columns("ApplicationType")
            Me.columnPermitNo = Me.Columns("PermitNo")
            Me.columnApplicationNo = Me.Columns("ApplicationNo")
            Me.columnReceivedDate = Me.Columns("ReceivedDate")
            Me.columnStatus = Me.Columns("Status")
            Me.columnScientificName = Me.Columns("ScientificName")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnPartDerivative = Me.Columns("PartDerivative")
            Me.columnPurpose = Me.Columns("Purpose")
            Me.columnCountryOfOrigin = Me.Columns("CountryOfOrigin")
            Me.columnOtherCountry = Me.Columns("OtherCountry")
            Me.columnOtherCountryPermitNo = Me.Columns("OtherCountryPermitNo")
            Me.columnSource = Me.Columns("Source")
            Me.columnCertificateDeclaration = Me.Columns("CertificateDeclaration")
            Me.columnGender = Me.Columns("Gender")
            Me.columnQuantity = Me.Columns("Quantity")
            Me.columnNetMass = Me.Columns("NetMass")
            Me.columnIssuedDate = Me.Columns("IssuedDate")
            Me.columnQuantityUsed = Me.Columns("QuantityUsed")
            Me.columnNetMassUsed = Me.Columns("NetMassUsed")
            Me.columnAnnex = Me.Columns("Annex")
            Me.columnAppendix = Me.Columns("Appendix")
            Me.columnOwner = Me.Columns("Owner")
            Me.columnOtherPartyId = Me.Columns("OtherPartyId")
            Me.columnOtherPartyName = Me.Columns("OtherPartyName")
            Me.columnOtherPartyPostcode = Me.Columns("OtherPartyPostcode")
        End Sub
        
        Private Sub InitClass()
            Me.columnBoldRow = New DataColumn("BoldRow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBoldRow)
            Me.columnApplicantId = New DataColumn("ApplicantId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicantId)
            Me.columnApplicantName = New DataColumn("ApplicantName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicantName)
            Me.columnApplicantPostcode = New DataColumn("ApplicantPostcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicantPostcode)
            Me.columnApplicationType = New DataColumn("ApplicationType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType)
            Me.columnPermitNo = New DataColumn("PermitNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermitNo)
            Me.columnApplicationNo = New DataColumn("ApplicationNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationNo)
            Me.columnReceivedDate = New DataColumn("ReceivedDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceivedDate)
            Me.columnStatus = New DataColumn("Status", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStatus)
            Me.columnScientificName = New DataColumn("ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnScientificName)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnPartDerivative = New DataColumn("PartDerivative", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartDerivative)
            Me.columnPurpose = New DataColumn("Purpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPurpose)
            Me.columnCountryOfOrigin = New DataColumn("CountryOfOrigin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCountryOfOrigin)
            Me.columnOtherCountry = New DataColumn("OtherCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherCountry)
            Me.columnOtherCountryPermitNo = New DataColumn("OtherCountryPermitNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherCountryPermitNo)
            Me.columnSource = New DataColumn("Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSource)
            Me.columnCertificateDeclaration = New DataColumn("CertificateDeclaration", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCertificateDeclaration)
            Me.columnGender = New DataColumn("Gender", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnQuantity = New DataColumn("Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantity)
            Me.columnNetMass = New DataColumn("NetMass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNetMass)
            Me.columnIssuedDate = New DataColumn("IssuedDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssuedDate)
            Me.columnQuantityUsed = New DataColumn("QuantityUsed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQuantityUsed)
            Me.columnNetMassUsed = New DataColumn("NetMassUsed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNetMassUsed)
            Me.columnAnnex = New DataColumn("Annex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnnex)
            Me.columnAppendix = New DataColumn("Appendix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppendix)
            Me.columnOwner = New DataColumn("Owner", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOwner)
            Me.columnOtherPartyId = New DataColumn("OtherPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherPartyId)
            Me.columnOtherPartyName = New DataColumn("OtherPartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherPartyName)
            Me.columnOtherPartyPostcode = New DataColumn("OtherPartyPostcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherPartyPostcode)
        End Sub
        
        Public Function NewBOViewCaseTypesSpeciesRow() As BOViewCaseTypesSpeciesRow
            Return CType(Me.NewRow,BOViewCaseTypesSpeciesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOViewCaseTypesSpeciesRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOViewCaseTypesSpeciesRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOViewCaseTypesSpeciesRowChangedEvent) Is Nothing) Then
                RaiseEvent BOViewCaseTypesSpeciesRowChanged(Me, New BOViewCaseTypesSpeciesRowChangeEvent(CType(e.Row,BOViewCaseTypesSpeciesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOViewCaseTypesSpeciesRowChangingEvent) Is Nothing) Then
                RaiseEvent BOViewCaseTypesSpeciesRowChanging(Me, New BOViewCaseTypesSpeciesRowChangeEvent(CType(e.Row,BOViewCaseTypesSpeciesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOViewCaseTypesSpeciesRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOViewCaseTypesSpeciesRowDeleted(Me, New BOViewCaseTypesSpeciesRowChangeEvent(CType(e.Row,BOViewCaseTypesSpeciesRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOViewCaseTypesSpeciesRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOViewCaseTypesSpeciesRowDeleting(Me, New BOViewCaseTypesSpeciesRowChangeEvent(CType(e.Row,BOViewCaseTypesSpeciesRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOViewCaseTypesSpeciesRow(ByVal row As BOViewCaseTypesSpeciesRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOViewCaseTypesSpeciesRow
        Inherits DataRow
        
        Private tableBOViewCaseTypesSpecies As BOViewCaseTypesSpeciesDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOViewCaseTypesSpecies = CType(Me.Table,BOViewCaseTypesSpeciesDataTable)
        End Sub
        
        Public Property BoldRow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.BoldRowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.BoldRowColumn) = value
            End Set
        End Property
        
        Public Property ApplicantId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ApplicantIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ApplicantIdColumn) = value
            End Set
        End Property
        
        Public Property ApplicantName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ApplicantNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ApplicantNameColumn) = value
            End Set
        End Property
        
        Public Property ApplicantPostcode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ApplicantPostcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ApplicantPostcodeColumn) = value
            End Set
        End Property
        
        Public Property ApplicationType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ApplicationTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ApplicationTypeColumn) = value
            End Set
        End Property
        
        Public Property PermitNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.PermitNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.PermitNoColumn) = value
            End Set
        End Property
        
        Public Property ApplicationNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ApplicationNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ApplicationNoColumn) = value
            End Set
        End Property
        
        Public Property ReceivedDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ReceivedDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ReceivedDateColumn) = value
            End Set
        End Property
        
        Public Property Status As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.StatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.StatusColumn) = value
            End Set
        End Property
        
        Public Property ScientificName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.ScientificNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property PartDerivative As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.PartDerivativeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.PartDerivativeColumn) = value
            End Set
        End Property
        
        Public Property Purpose As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.PurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.PurposeColumn) = value
            End Set
        End Property
        
        Public Property CountryOfOrigin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.CountryOfOriginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.CountryOfOriginColumn) = value
            End Set
        End Property
        
        Public Property OtherCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.OtherCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.OtherCountryColumn) = value
            End Set
        End Property
        
        Public Property OtherCountryPermitNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.OtherCountryPermitNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.OtherCountryPermitNoColumn) = value
            End Set
        End Property
        
        Public Property Source As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.SourceColumn) = value
            End Set
        End Property
        
        Public Property CertificateDeclaration As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.CertificateDeclarationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.CertificateDeclarationColumn) = value
            End Set
        End Property
        
        Public Property Gender As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.GenderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.GenderColumn) = value
            End Set
        End Property
        
        Public Property Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.QuantityColumn) = value
            End Set
        End Property
        
        Public Property NetMass As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.NetMassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.NetMassColumn) = value
            End Set
        End Property
        
        Public Property IssuedDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.IssuedDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.IssuedDateColumn) = value
            End Set
        End Property
        
        Public Property QuantityUsed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.QuantityUsedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.QuantityUsedColumn) = value
            End Set
        End Property
        
        Public Property NetMassUsed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.NetMassUsedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.NetMassUsedColumn) = value
            End Set
        End Property
        
        Public Property Annex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.AnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.AnnexColumn) = value
            End Set
        End Property
        
        Public Property Appendix As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.AppendixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.AppendixColumn) = value
            End Set
        End Property
        
        Public Property Owner As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.OwnerColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.OwnerColumn) = value
            End Set
        End Property
        
        Public Property OtherPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.OtherPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.OtherPartyIdColumn) = value
            End Set
        End Property
        
        Public Property OtherPartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.OtherPartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.OtherPartyNameColumn) = value
            End Set
        End Property
        
        Public Property OtherPartyPostcode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewCaseTypesSpecies.OtherPartyPostcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewCaseTypesSpecies.OtherPartyPostcodeColumn) = value
            End Set
        End Property
        
        Public Function IsBoldRowNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.BoldRowColumn)
        End Function
        
        Public Sub SetBoldRowNull()
            Me(Me.tableBOViewCaseTypesSpecies.BoldRowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicantIdNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ApplicantIdColumn)
        End Function
        
        Public Sub SetApplicantIdNull()
            Me(Me.tableBOViewCaseTypesSpecies.ApplicantIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicantNameNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ApplicantNameColumn)
        End Function
        
        Public Sub SetApplicantNameNull()
            Me(Me.tableBOViewCaseTypesSpecies.ApplicantNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicantPostcodeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ApplicantPostcodeColumn)
        End Function
        
        Public Sub SetApplicantPostcodeNull()
            Me(Me.tableBOViewCaseTypesSpecies.ApplicantPostcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ApplicationTypeColumn)
        End Function
        
        Public Sub SetApplicationTypeNull()
            Me(Me.tableBOViewCaseTypesSpecies.ApplicationTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPermitNoNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.PermitNoColumn)
        End Function
        
        Public Sub SetPermitNoNull()
            Me(Me.tableBOViewCaseTypesSpecies.PermitNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationNoNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ApplicationNoColumn)
        End Function
        
        Public Sub SetApplicationNoNull()
            Me(Me.tableBOViewCaseTypesSpecies.ApplicationNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedDateNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ReceivedDateColumn)
        End Function
        
        Public Sub SetReceivedDateNull()
            Me(Me.tableBOViewCaseTypesSpecies.ReceivedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.StatusColumn)
        End Function
        
        Public Sub SetStatusNull()
            Me(Me.tableBOViewCaseTypesSpecies.StatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsScientificNameNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.ScientificNameColumn)
        End Function
        
        Public Sub SetScientificNameNull()
            Me(Me.tableBOViewCaseTypesSpecies.ScientificNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.CommonNameColumn)
        End Function
        
        Public Sub SetCommonNameNull()
            Me(Me.tableBOViewCaseTypesSpecies.CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartDerivativeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.PartDerivativeColumn)
        End Function
        
        Public Sub SetPartDerivativeNull()
            Me(Me.tableBOViewCaseTypesSpecies.PartDerivativeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPurposeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.PurposeColumn)
        End Function
        
        Public Sub SetPurposeNull()
            Me(Me.tableBOViewCaseTypesSpecies.PurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCountryOfOriginNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.CountryOfOriginColumn)
        End Function
        
        Public Sub SetCountryOfOriginNull()
            Me(Me.tableBOViewCaseTypesSpecies.CountryOfOriginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.OtherCountryColumn)
        End Function
        
        Public Sub SetOtherCountryNull()
            Me(Me.tableBOViewCaseTypesSpecies.OtherCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherCountryPermitNoNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.OtherCountryPermitNoColumn)
        End Function
        
        Public Sub SetOtherCountryPermitNoNull()
            Me(Me.tableBOViewCaseTypesSpecies.OtherCountryPermitNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.SourceColumn)
        End Function
        
        Public Sub SetSourceNull()
            Me(Me.tableBOViewCaseTypesSpecies.SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCertificateDeclarationNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.CertificateDeclarationColumn)
        End Function
        
        Public Sub SetCertificateDeclarationNull()
            Me(Me.tableBOViewCaseTypesSpecies.CertificateDeclarationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.GenderColumn)
        End Function
        
        Public Sub SetGenderNull()
            Me(Me.tableBOViewCaseTypesSpecies.GenderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.QuantityColumn)
        End Function
        
        Public Sub SetQuantityNull()
            Me(Me.tableBOViewCaseTypesSpecies.QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetMassNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.NetMassColumn)
        End Function
        
        Public Sub SetNetMassNull()
            Me(Me.tableBOViewCaseTypesSpecies.NetMassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssuedDateNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.IssuedDateColumn)
        End Function
        
        Public Sub SetIssuedDateNull()
            Me(Me.tableBOViewCaseTypesSpecies.IssuedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQuantityUsedNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.QuantityUsedColumn)
        End Function
        
        Public Sub SetQuantityUsedNull()
            Me(Me.tableBOViewCaseTypesSpecies.QuantityUsedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNetMassUsedNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.NetMassUsedColumn)
        End Function
        
        Public Sub SetNetMassUsedNull()
            Me(Me.tableBOViewCaseTypesSpecies.NetMassUsedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.AnnexColumn)
        End Function
        
        Public Sub SetAnnexNull()
            Me(Me.tableBOViewCaseTypesSpecies.AnnexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppendixNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.AppendixColumn)
        End Function
        
        Public Sub SetAppendixNull()
            Me(Me.tableBOViewCaseTypesSpecies.AppendixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOwnerNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.OwnerColumn)
        End Function
        
        Public Sub SetOwnerNull()
            Me(Me.tableBOViewCaseTypesSpecies.OwnerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.OtherPartyIdColumn)
        End Function
        
        Public Sub SetOtherPartyIdNull()
            Me(Me.tableBOViewCaseTypesSpecies.OtherPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherPartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.OtherPartyNameColumn)
        End Function
        
        Public Sub SetOtherPartyNameNull()
            Me(Me.tableBOViewCaseTypesSpecies.OtherPartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherPartyPostcodeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewCaseTypesSpecies.OtherPartyPostcodeColumn)
        End Function
        
        Public Sub SetOtherPartyPostcodeNull()
            Me(Me.tableBOViewCaseTypesSpecies.OtherPartyPostcodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOViewCaseTypesSpeciesRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOViewCaseTypesSpeciesRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOViewCaseTypesSpeciesRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOViewCaseTypesSpeciesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
