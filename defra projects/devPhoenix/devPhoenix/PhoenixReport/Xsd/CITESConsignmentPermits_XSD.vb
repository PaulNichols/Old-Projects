'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class CITESConsignmentPermitsData
    Inherits DataSet
    
    Private tableBOSpecimens As BOSpecimensDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOSpecimens")) Is Nothing) Then
                Me.Tables.Add(New BOSpecimensDataTable(ds.Tables("BOSpecimens")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSpecimens As BOSpecimensDataTable
        Get
            Return Me.tableBOSpecimens
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As CITESConsignmentPermitsData = CType(MyBase.Clone,CITESConsignmentPermitsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOSpecimens")) Is Nothing) Then
            Me.Tables.Add(New BOSpecimensDataTable(ds.Tables("BOSpecimens")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOSpecimens = CType(Me.Tables("BOSpecimens"),BOSpecimensDataTable)
        If (Not (Me.tableBOSpecimens) Is Nothing) Then
            Me.tableBOSpecimens.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "CITESConsignmentPermitsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CITESConsignmentPermitsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOSpecimens = New BOSpecimensDataTable
        Me.Tables.Add(Me.tableBOSpecimens)
    End Sub
    
    Private Function ShouldSerializeBOSpecimens() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOSpecimensRowChangeEventHandler(ByVal sender As Object, ByVal e As BOSpecimensRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSpecimensDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPermitReference As DataColumn
        
        Private columnBarCode As DataColumn
        
        Private columnExhibitionX As DataColumn
        
        Private columnExpiryDate As DataColumn
        
        Private columnExportX As DataColumn
        
        Private columnImportX As DataColumn
        
        Private columnPetX As DataColumn
        
        Private columnReExportX As DataColumn
        
        Private columnIssueLetter As DataColumn
        
        Private columnSheetDescription As DataColumn
        
        Private columnSheetNumber As DataColumn
        
        Private columnPrintStatus As DataColumn
        
        Private columnPageMofN As DataColumn
        
        Private columnSpecimen1_Reference As DataColumn
        
        Private columnSpecimen1_Appendix As DataColumn
        
        Private columnSpecimen1_CommonName As DataColumn
        
        Private columnSpecimen1_EUAnnex As DataColumn
        
        Private columnSpecimen1_LastReExportCountry As DataColumn
        
        Private columnSpecimen1_Mass As DataColumn
        
        Private columnSpecimen1_OriginCertificateDate As DataColumn
        
        Private columnSpecimen1_OriginCertificateRef As DataColumn
        
        Private columnSpecimen1_OriginCountry As DataColumn
        
        Private columnSpecimen1_OriginPermitDate As DataColumn
        
        Private columnSpecimen1_OriginPermitRef As DataColumn
        
        Private columnSpecimen1_Purpose As DataColumn
        
        Private columnSpecimen1_Quantity As DataColumn
        
        Private columnSpecimen1_ScientificName As DataColumn
        
        Private columnSpecimen1_Source As DataColumn
        
        Private columnSpecimen1_Descriptions As DataColumn
        
        Private columnSpecimen2_Reference As DataColumn
        
        Private columnSpecimen2_Appendix As DataColumn
        
        Private columnSpecimen2_CommonName As DataColumn
        
        Private columnSpecimen2_EUAnnex As DataColumn
        
        Private columnSpecimen2_LastReExportCountry As DataColumn
        
        Private columnSpecimen2_Mass As DataColumn
        
        Private columnSpecimen2_OriginCertificateDate As DataColumn
        
        Private columnSpecimen2_OriginCertificateRef As DataColumn
        
        Private columnSpecimen2_OriginCountry As DataColumn
        
        Private columnSpecimen2_OriginPermitDate As DataColumn
        
        Private columnSpecimen2_OriginPermitRef As DataColumn
        
        Private columnSpecimen2_Purpose As DataColumn
        
        Private columnSpecimen2_Quantity As DataColumn
        
        Private columnSpecimen2_ScientificName As DataColumn
        
        Private columnSpecimen2_Source As DataColumn
        
        Private columnSpecimen2_Descriptions As DataColumn
        
        Private columnSpecimen3_Reference As DataColumn
        
        Private columnSpecimen3_Appendix As DataColumn
        
        Private columnSpecimen3_CommonName As DataColumn
        
        Private columnSpecimen3_EUAnnex As DataColumn
        
        Private columnSpecimen3_LastReExportCountry As DataColumn
        
        Private columnSpecimen3_Mass As DataColumn
        
        Private columnSpecimen3_OriginCertificateDate As DataColumn
        
        Private columnSpecimen3_OriginCertificateRef As DataColumn
        
        Private columnSpecimen3_OriginCountry As DataColumn
        
        Private columnSpecimen3_OriginPermitDate As DataColumn
        
        Private columnSpecimen3_OriginPermitRef As DataColumn
        
        Private columnSpecimen3_Purpose As DataColumn
        
        Private columnSpecimen3_Quantity As DataColumn
        
        Private columnSpecimen3_ScientificName As DataColumn
        
        Private columnSpecimen3_Source As DataColumn
        
        Private columnSpecimen3_Descriptions As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSpecimens")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PermitReferenceColumn As DataColumn
            Get
                Return Me.columnPermitReference
            End Get
        End Property
        
        Friend ReadOnly Property BarCodeColumn As DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        Friend ReadOnly Property ExhibitionXColumn As DataColumn
            Get
                Return Me.columnExhibitionX
            End Get
        End Property
        
        Friend ReadOnly Property ExpiryDateColumn As DataColumn
            Get
                Return Me.columnExpiryDate
            End Get
        End Property
        
        Friend ReadOnly Property ExportXColumn As DataColumn
            Get
                Return Me.columnExportX
            End Get
        End Property
        
        Friend ReadOnly Property ImportXColumn As DataColumn
            Get
                Return Me.columnImportX
            End Get
        End Property
        
        Friend ReadOnly Property PetXColumn As DataColumn
            Get
                Return Me.columnPetX
            End Get
        End Property
        
        Friend ReadOnly Property ReExportXColumn As DataColumn
            Get
                Return Me.columnReExportX
            End Get
        End Property
        
        Friend ReadOnly Property IssueLetterColumn As DataColumn
            Get
                Return Me.columnIssueLetter
            End Get
        End Property
        
        Friend ReadOnly Property SheetDescriptionColumn As DataColumn
            Get
                Return Me.columnSheetDescription
            End Get
        End Property
        
        Friend ReadOnly Property SheetNumberColumn As DataColumn
            Get
                Return Me.columnSheetNumber
            End Get
        End Property
        
        Friend ReadOnly Property PrintStatusColumn As DataColumn
            Get
                Return Me.columnPrintStatus
            End Get
        End Property
        
        Friend ReadOnly Property PageMofNColumn As DataColumn
            Get
                Return Me.columnPageMofN
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_ReferenceColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Reference
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_AppendixColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Appendix
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_CommonNameColumn As DataColumn
            Get
                Return Me.columnSpecimen1_CommonName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_EUAnnexColumn As DataColumn
            Get
                Return Me.columnSpecimen1_EUAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_LastReExportCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen1_LastReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_MassColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Mass
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_OriginCertificateDateColumn As DataColumn
            Get
                Return Me.columnSpecimen1_OriginCertificateDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_OriginCertificateRefColumn As DataColumn
            Get
                Return Me.columnSpecimen1_OriginCertificateRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_OriginCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen1_OriginCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_OriginPermitDateColumn As DataColumn
            Get
                Return Me.columnSpecimen1_OriginPermitDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_OriginPermitRefColumn As DataColumn
            Get
                Return Me.columnSpecimen1_OriginPermitRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_PurposeColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Purpose
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_QuantityColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_ScientificNameColumn As DataColumn
            Get
                Return Me.columnSpecimen1_ScientificName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_SourceColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Source
            End Get
        End Property
        
        Friend ReadOnly Property Specimen1_DescriptionsColumn As DataColumn
            Get
                Return Me.columnSpecimen1_Descriptions
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_ReferenceColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Reference
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_AppendixColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Appendix
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_CommonNameColumn As DataColumn
            Get
                Return Me.columnSpecimen2_CommonName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_EUAnnexColumn As DataColumn
            Get
                Return Me.columnSpecimen2_EUAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_LastReExportCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen2_LastReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_MassColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Mass
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_OriginCertificateDateColumn As DataColumn
            Get
                Return Me.columnSpecimen2_OriginCertificateDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_OriginCertificateRefColumn As DataColumn
            Get
                Return Me.columnSpecimen2_OriginCertificateRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_OriginCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen2_OriginCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_OriginPermitDateColumn As DataColumn
            Get
                Return Me.columnSpecimen2_OriginPermitDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_OriginPermitRefColumn As DataColumn
            Get
                Return Me.columnSpecimen2_OriginPermitRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_PurposeColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Purpose
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_QuantityColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_ScientificNameColumn As DataColumn
            Get
                Return Me.columnSpecimen2_ScientificName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_SourceColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Source
            End Get
        End Property
        
        Friend ReadOnly Property Specimen2_DescriptionsColumn As DataColumn
            Get
                Return Me.columnSpecimen2_Descriptions
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_ReferenceColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Reference
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_AppendixColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Appendix
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_CommonNameColumn As DataColumn
            Get
                Return Me.columnSpecimen3_CommonName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_EUAnnexColumn As DataColumn
            Get
                Return Me.columnSpecimen3_EUAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_LastReExportCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen3_LastReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_MassColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Mass
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_OriginCertificateDateColumn As DataColumn
            Get
                Return Me.columnSpecimen3_OriginCertificateDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_OriginCertificateRefColumn As DataColumn
            Get
                Return Me.columnSpecimen3_OriginCertificateRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_OriginCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen3_OriginCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_OriginPermitDateColumn As DataColumn
            Get
                Return Me.columnSpecimen3_OriginPermitDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_OriginPermitRefColumn As DataColumn
            Get
                Return Me.columnSpecimen3_OriginPermitRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_PurposeColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Purpose
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_QuantityColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_ScientificNameColumn As DataColumn
            Get
                Return Me.columnSpecimen3_ScientificName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_SourceColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Source
            End Get
        End Property
        
        Friend ReadOnly Property Specimen3_DescriptionsColumn As DataColumn
            Get
                Return Me.columnSpecimen3_Descriptions
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSpecimensRow
            Get
                Return CType(Me.Rows(index),BOSpecimensRow)
            End Get
        End Property
        
        Public Event BOSpecimensRowChanged As BOSpecimensRowChangeEventHandler
        
        Public Event BOSpecimensRowChanging As BOSpecimensRowChangeEventHandler
        
        Public Event BOSpecimensRowDeleted As BOSpecimensRowChangeEventHandler
        
        Public Event BOSpecimensRowDeleting As BOSpecimensRowChangeEventHandler
        
        Public Overloads Sub AddBOSpecimensRow(ByVal row As BOSpecimensRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSpecimensRow( _
                    ByVal PermitReference As String,  _
                    ByVal BarCode As String,  _
                    ByVal ExhibitionX As String,  _
                    ByVal ExpiryDate As String,  _
                    ByVal ExportX As String,  _
                    ByVal ImportX As String,  _
                    ByVal PetX As String,  _
                    ByVal ReExportX As String,  _
                    ByVal IssueLetter As String,  _
                    ByVal SheetDescription As String,  _
                    ByVal SheetNumber As String,  _
                    ByVal PrintStatus As String,  _
                    ByVal PageMofN As String,  _
                    ByVal Specimen1_Reference As String,  _
                    ByVal Specimen1_Appendix As String,  _
                    ByVal Specimen1_CommonName As String,  _
                    ByVal Specimen1_EUAnnex As String,  _
                    ByVal Specimen1_LastReExportCountry As String,  _
                    ByVal Specimen1_Mass As String,  _
                    ByVal Specimen1_OriginCertificateDate As String,  _
                    ByVal Specimen1_OriginCertificateRef As String,  _
                    ByVal Specimen1_OriginCountry As String,  _
                    ByVal Specimen1_OriginPermitDate As String,  _
                    ByVal Specimen1_OriginPermitRef As String,  _
                    ByVal Specimen1_Purpose As String,  _
                    ByVal Specimen1_Quantity As String,  _
                    ByVal Specimen1_ScientificName As String,  _
                    ByVal Specimen1_Source As String,  _
                    ByVal Specimen1_Descriptions As String,  _
                    ByVal Specimen2_Reference As String,  _
                    ByVal Specimen2_Appendix As String,  _
                    ByVal Specimen2_CommonName As String,  _
                    ByVal Specimen2_EUAnnex As String,  _
                    ByVal Specimen2_LastReExportCountry As String,  _
                    ByVal Specimen2_Mass As String,  _
                    ByVal Specimen2_OriginCertificateDate As String,  _
                    ByVal Specimen2_OriginCertificateRef As String,  _
                    ByVal Specimen2_OriginCountry As String,  _
                    ByVal Specimen2_OriginPermitDate As String,  _
                    ByVal Specimen2_OriginPermitRef As String,  _
                    ByVal Specimen2_Purpose As String,  _
                    ByVal Specimen2_Quantity As String,  _
                    ByVal Specimen2_ScientificName As String,  _
                    ByVal Specimen2_Source As String,  _
                    ByVal Specimen2_Descriptions As String,  _
                    ByVal Specimen3_Reference As String,  _
                    ByVal Specimen3_Appendix As String,  _
                    ByVal Specimen3_CommonName As String,  _
                    ByVal Specimen3_EUAnnex As String,  _
                    ByVal Specimen3_LastReExportCountry As String,  _
                    ByVal Specimen3_Mass As String,  _
                    ByVal Specimen3_OriginCertificateDate As String,  _
                    ByVal Specimen3_OriginCertificateRef As String,  _
                    ByVal Specimen3_OriginCountry As String,  _
                    ByVal Specimen3_OriginPermitDate As String,  _
                    ByVal Specimen3_OriginPermitRef As String,  _
                    ByVal Specimen3_Purpose As String,  _
                    ByVal Specimen3_Quantity As String,  _
                    ByVal Specimen3_ScientificName As String,  _
                    ByVal Specimen3_Source As String,  _
                    ByVal Specimen3_Descriptions As String) As BOSpecimensRow
            Dim rowBOSpecimensRow As BOSpecimensRow = CType(Me.NewRow,BOSpecimensRow)
            rowBOSpecimensRow.ItemArray = New Object() {PermitReference, BarCode, ExhibitionX, ExpiryDate, ExportX, ImportX, PetX, ReExportX, IssueLetter, SheetDescription, SheetNumber, PrintStatus, PageMofN, Specimen1_Reference, Specimen1_Appendix, Specimen1_CommonName, Specimen1_EUAnnex, Specimen1_LastReExportCountry, Specimen1_Mass, Specimen1_OriginCertificateDate, Specimen1_OriginCertificateRef, Specimen1_OriginCountry, Specimen1_OriginPermitDate, Specimen1_OriginPermitRef, Specimen1_Purpose, Specimen1_Quantity, Specimen1_ScientificName, Specimen1_Source, Specimen1_Descriptions, Specimen2_Reference, Specimen2_Appendix, Specimen2_CommonName, Specimen2_EUAnnex, Specimen2_LastReExportCountry, Specimen2_Mass, Specimen2_OriginCertificateDate, Specimen2_OriginCertificateRef, Specimen2_OriginCountry, Specimen2_OriginPermitDate, Specimen2_OriginPermitRef, Specimen2_Purpose, Specimen2_Quantity, Specimen2_ScientificName, Specimen2_Source, Specimen2_Descriptions, Specimen3_Reference, Specimen3_Appendix, Specimen3_CommonName, Specimen3_EUAnnex, Specimen3_LastReExportCountry, Specimen3_Mass, Specimen3_OriginCertificateDate, Specimen3_OriginCertificateRef, Specimen3_OriginCountry, Specimen3_OriginPermitDate, Specimen3_OriginPermitRef, Specimen3_Purpose, Specimen3_Quantity, Specimen3_ScientificName, Specimen3_Source, Specimen3_Descriptions}
            Me.Rows.Add(rowBOSpecimensRow)
            Return rowBOSpecimensRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSpecimensDataTable = CType(MyBase.Clone,BOSpecimensDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSpecimensDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPermitReference = Me.Columns("PermitReference")
            Me.columnBarCode = Me.Columns("BarCode")
            Me.columnExhibitionX = Me.Columns("ExhibitionX")
            Me.columnExpiryDate = Me.Columns("ExpiryDate")
            Me.columnExportX = Me.Columns("ExportX")
            Me.columnImportX = Me.Columns("ImportX")
            Me.columnPetX = Me.Columns("PetX")
            Me.columnReExportX = Me.Columns("ReExportX")
            Me.columnIssueLetter = Me.Columns("IssueLetter")
            Me.columnSheetDescription = Me.Columns("SheetDescription")
            Me.columnSheetNumber = Me.Columns("SheetNumber")
            Me.columnPrintStatus = Me.Columns("PrintStatus")
            Me.columnPageMofN = Me.Columns("PageMofN")
            Me.columnSpecimen1_Reference = Me.Columns("Specimen1_Reference")
            Me.columnSpecimen1_Appendix = Me.Columns("Specimen1_Appendix")
            Me.columnSpecimen1_CommonName = Me.Columns("Specimen1_CommonName")
            Me.columnSpecimen1_EUAnnex = Me.Columns("Specimen1_EUAnnex")
            Me.columnSpecimen1_LastReExportCountry = Me.Columns("Specimen1_LastReExportCountry")
            Me.columnSpecimen1_Mass = Me.Columns("Specimen1_Mass")
            Me.columnSpecimen1_OriginCertificateDate = Me.Columns("Specimen1_OriginCertificateDate")
            Me.columnSpecimen1_OriginCertificateRef = Me.Columns("Specimen1_OriginCertificateRef")
            Me.columnSpecimen1_OriginCountry = Me.Columns("Specimen1_OriginCountry")
            Me.columnSpecimen1_OriginPermitDate = Me.Columns("Specimen1_OriginPermitDate")
            Me.columnSpecimen1_OriginPermitRef = Me.Columns("Specimen1_OriginPermitRef")
            Me.columnSpecimen1_Purpose = Me.Columns("Specimen1_Purpose")
            Me.columnSpecimen1_Quantity = Me.Columns("Specimen1_Quantity")
            Me.columnSpecimen1_ScientificName = Me.Columns("Specimen1_ScientificName")
            Me.columnSpecimen1_Source = Me.Columns("Specimen1_Source")
            Me.columnSpecimen1_Descriptions = Me.Columns("Specimen1_Descriptions")
            Me.columnSpecimen2_Reference = Me.Columns("Specimen2_Reference")
            Me.columnSpecimen2_Appendix = Me.Columns("Specimen2_Appendix")
            Me.columnSpecimen2_CommonName = Me.Columns("Specimen2_CommonName")
            Me.columnSpecimen2_EUAnnex = Me.Columns("Specimen2_EUAnnex")
            Me.columnSpecimen2_LastReExportCountry = Me.Columns("Specimen2_LastReExportCountry")
            Me.columnSpecimen2_Mass = Me.Columns("Specimen2_Mass")
            Me.columnSpecimen2_OriginCertificateDate = Me.Columns("Specimen2_OriginCertificateDate")
            Me.columnSpecimen2_OriginCertificateRef = Me.Columns("Specimen2_OriginCertificateRef")
            Me.columnSpecimen2_OriginCountry = Me.Columns("Specimen2_OriginCountry")
            Me.columnSpecimen2_OriginPermitDate = Me.Columns("Specimen2_OriginPermitDate")
            Me.columnSpecimen2_OriginPermitRef = Me.Columns("Specimen2_OriginPermitRef")
            Me.columnSpecimen2_Purpose = Me.Columns("Specimen2_Purpose")
            Me.columnSpecimen2_Quantity = Me.Columns("Specimen2_Quantity")
            Me.columnSpecimen2_ScientificName = Me.Columns("Specimen2_ScientificName")
            Me.columnSpecimen2_Source = Me.Columns("Specimen2_Source")
            Me.columnSpecimen2_Descriptions = Me.Columns("Specimen2_Descriptions")
            Me.columnSpecimen3_Reference = Me.Columns("Specimen3_Reference")
            Me.columnSpecimen3_Appendix = Me.Columns("Specimen3_Appendix")
            Me.columnSpecimen3_CommonName = Me.Columns("Specimen3_CommonName")
            Me.columnSpecimen3_EUAnnex = Me.Columns("Specimen3_EUAnnex")
            Me.columnSpecimen3_LastReExportCountry = Me.Columns("Specimen3_LastReExportCountry")
            Me.columnSpecimen3_Mass = Me.Columns("Specimen3_Mass")
            Me.columnSpecimen3_OriginCertificateDate = Me.Columns("Specimen3_OriginCertificateDate")
            Me.columnSpecimen3_OriginCertificateRef = Me.Columns("Specimen3_OriginCertificateRef")
            Me.columnSpecimen3_OriginCountry = Me.Columns("Specimen3_OriginCountry")
            Me.columnSpecimen3_OriginPermitDate = Me.Columns("Specimen3_OriginPermitDate")
            Me.columnSpecimen3_OriginPermitRef = Me.Columns("Specimen3_OriginPermitRef")
            Me.columnSpecimen3_Purpose = Me.Columns("Specimen3_Purpose")
            Me.columnSpecimen3_Quantity = Me.Columns("Specimen3_Quantity")
            Me.columnSpecimen3_ScientificName = Me.Columns("Specimen3_ScientificName")
            Me.columnSpecimen3_Source = Me.Columns("Specimen3_Source")
            Me.columnSpecimen3_Descriptions = Me.Columns("Specimen3_Descriptions")
        End Sub
        
        Private Sub InitClass()
            Me.columnPermitReference = New DataColumn("PermitReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermitReference)
            Me.columnBarCode = New DataColumn("BarCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarCode)
            Me.columnExhibitionX = New DataColumn("ExhibitionX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExhibitionX)
            Me.columnExpiryDate = New DataColumn("ExpiryDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExpiryDate)
            Me.columnExportX = New DataColumn("ExportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportX)
            Me.columnImportX = New DataColumn("ImportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportX)
            Me.columnPetX = New DataColumn("PetX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPetX)
            Me.columnReExportX = New DataColumn("ReExportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReExportX)
            Me.columnIssueLetter = New DataColumn("IssueLetter", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueLetter)
            Me.columnSheetDescription = New DataColumn("SheetDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSheetDescription)
            Me.columnSheetNumber = New DataColumn("SheetNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSheetNumber)
            Me.columnPrintStatus = New DataColumn("PrintStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrintStatus)
            Me.columnPageMofN = New DataColumn("PageMofN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageMofN)
            Me.columnSpecimen1_Reference = New DataColumn("Specimen1_Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Reference)
            Me.columnSpecimen1_Appendix = New DataColumn("Specimen1_Appendix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Appendix)
            Me.columnSpecimen1_CommonName = New DataColumn("Specimen1_CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_CommonName)
            Me.columnSpecimen1_EUAnnex = New DataColumn("Specimen1_EUAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_EUAnnex)
            Me.columnSpecimen1_LastReExportCountry = New DataColumn("Specimen1_LastReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_LastReExportCountry)
            Me.columnSpecimen1_Mass = New DataColumn("Specimen1_Mass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Mass)
            Me.columnSpecimen1_OriginCertificateDate = New DataColumn("Specimen1_OriginCertificateDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_OriginCertificateDate)
            Me.columnSpecimen1_OriginCertificateRef = New DataColumn("Specimen1_OriginCertificateRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_OriginCertificateRef)
            Me.columnSpecimen1_OriginCountry = New DataColumn("Specimen1_OriginCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_OriginCountry)
            Me.columnSpecimen1_OriginPermitDate = New DataColumn("Specimen1_OriginPermitDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_OriginPermitDate)
            Me.columnSpecimen1_OriginPermitRef = New DataColumn("Specimen1_OriginPermitRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_OriginPermitRef)
            Me.columnSpecimen1_Purpose = New DataColumn("Specimen1_Purpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Purpose)
            Me.columnSpecimen1_Quantity = New DataColumn("Specimen1_Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Quantity)
            Me.columnSpecimen1_ScientificName = New DataColumn("Specimen1_ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_ScientificName)
            Me.columnSpecimen1_Source = New DataColumn("Specimen1_Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Source)
            Me.columnSpecimen1_Descriptions = New DataColumn("Specimen1_Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen1_Descriptions)
            Me.columnSpecimen2_Reference = New DataColumn("Specimen2_Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Reference)
            Me.columnSpecimen2_Appendix = New DataColumn("Specimen2_Appendix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Appendix)
            Me.columnSpecimen2_CommonName = New DataColumn("Specimen2_CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_CommonName)
            Me.columnSpecimen2_EUAnnex = New DataColumn("Specimen2_EUAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_EUAnnex)
            Me.columnSpecimen2_LastReExportCountry = New DataColumn("Specimen2_LastReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_LastReExportCountry)
            Me.columnSpecimen2_Mass = New DataColumn("Specimen2_Mass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Mass)
            Me.columnSpecimen2_OriginCertificateDate = New DataColumn("Specimen2_OriginCertificateDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_OriginCertificateDate)
            Me.columnSpecimen2_OriginCertificateRef = New DataColumn("Specimen2_OriginCertificateRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_OriginCertificateRef)
            Me.columnSpecimen2_OriginCountry = New DataColumn("Specimen2_OriginCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_OriginCountry)
            Me.columnSpecimen2_OriginPermitDate = New DataColumn("Specimen2_OriginPermitDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_OriginPermitDate)
            Me.columnSpecimen2_OriginPermitRef = New DataColumn("Specimen2_OriginPermitRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_OriginPermitRef)
            Me.columnSpecimen2_Purpose = New DataColumn("Specimen2_Purpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Purpose)
            Me.columnSpecimen2_Quantity = New DataColumn("Specimen2_Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Quantity)
            Me.columnSpecimen2_ScientificName = New DataColumn("Specimen2_ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_ScientificName)
            Me.columnSpecimen2_Source = New DataColumn("Specimen2_Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Source)
            Me.columnSpecimen2_Descriptions = New DataColumn("Specimen2_Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen2_Descriptions)
            Me.columnSpecimen3_Reference = New DataColumn("Specimen3_Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Reference)
            Me.columnSpecimen3_Appendix = New DataColumn("Specimen3_Appendix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Appendix)
            Me.columnSpecimen3_CommonName = New DataColumn("Specimen3_CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_CommonName)
            Me.columnSpecimen3_EUAnnex = New DataColumn("Specimen3_EUAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_EUAnnex)
            Me.columnSpecimen3_LastReExportCountry = New DataColumn("Specimen3_LastReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_LastReExportCountry)
            Me.columnSpecimen3_Mass = New DataColumn("Specimen3_Mass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Mass)
            Me.columnSpecimen3_OriginCertificateDate = New DataColumn("Specimen3_OriginCertificateDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_OriginCertificateDate)
            Me.columnSpecimen3_OriginCertificateRef = New DataColumn("Specimen3_OriginCertificateRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_OriginCertificateRef)
            Me.columnSpecimen3_OriginCountry = New DataColumn("Specimen3_OriginCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_OriginCountry)
            Me.columnSpecimen3_OriginPermitDate = New DataColumn("Specimen3_OriginPermitDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_OriginPermitDate)
            Me.columnSpecimen3_OriginPermitRef = New DataColumn("Specimen3_OriginPermitRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_OriginPermitRef)
            Me.columnSpecimen3_Purpose = New DataColumn("Specimen3_Purpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Purpose)
            Me.columnSpecimen3_Quantity = New DataColumn("Specimen3_Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Quantity)
            Me.columnSpecimen3_ScientificName = New DataColumn("Specimen3_ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_ScientificName)
            Me.columnSpecimen3_Source = New DataColumn("Specimen3_Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Source)
            Me.columnSpecimen3_Descriptions = New DataColumn("Specimen3_Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen3_Descriptions)
        End Sub
        
        Public Function NewBOSpecimensRow() As BOSpecimensRow
            Return CType(Me.NewRow,BOSpecimensRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSpecimensRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSpecimensRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSpecimensRowChangedEvent) Is Nothing) Then
                RaiseEvent BOSpecimensRowChanged(Me, New BOSpecimensRowChangeEvent(CType(e.Row,BOSpecimensRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSpecimensRowChangingEvent) Is Nothing) Then
                RaiseEvent BOSpecimensRowChanging(Me, New BOSpecimensRowChangeEvent(CType(e.Row,BOSpecimensRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSpecimensRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSpecimensRowDeleted(Me, New BOSpecimensRowChangeEvent(CType(e.Row,BOSpecimensRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSpecimensRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSpecimensRowDeleting(Me, New BOSpecimensRowChangeEvent(CType(e.Row,BOSpecimensRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSpecimensRow(ByVal row As BOSpecimensRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSpecimensRow
        Inherits DataRow
        
        Private tableBOSpecimens As BOSpecimensDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSpecimens = CType(Me.Table,BOSpecimensDataTable)
        End Sub
        
        Public Property PermitReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.PermitReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.PermitReferenceColumn) = value
            End Set
        End Property
        
        Public Property BarCode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.BarCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.BarCodeColumn) = value
            End Set
        End Property
        
        Public Property ExhibitionX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.ExhibitionXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.ExhibitionXColumn) = value
            End Set
        End Property
        
        Public Property ExpiryDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.ExpiryDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.ExpiryDateColumn) = value
            End Set
        End Property
        
        Public Property ExportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.ExportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.ExportXColumn) = value
            End Set
        End Property
        
        Public Property ImportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.ImportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.ImportXColumn) = value
            End Set
        End Property
        
        Public Property PetX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.PetXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.PetXColumn) = value
            End Set
        End Property
        
        Public Property ReExportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.ReExportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.ReExportXColumn) = value
            End Set
        End Property
        
        Public Property IssueLetter As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.IssueLetterColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.IssueLetterColumn) = value
            End Set
        End Property
        
        Public Property SheetDescription As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.SheetDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.SheetDescriptionColumn) = value
            End Set
        End Property
        
        Public Property SheetNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.SheetNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.SheetNumberColumn) = value
            End Set
        End Property
        
        Public Property PrintStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.PrintStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.PrintStatusColumn) = value
            End Set
        End Property
        
        Public Property PageMofN As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.PageMofNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.PageMofNColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_ReferenceColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Appendix As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_AppendixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_AppendixColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_CommonNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_EUAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_EUAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_EUAnnexColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_LastReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_LastReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_LastReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Mass As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_MassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_MassColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_OriginCertificateDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_OriginCertificateDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_OriginCertificateDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_OriginCertificateRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_OriginCertificateRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_OriginCertificateRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_OriginCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_OriginCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_OriginCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_OriginPermitDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_OriginPermitDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_OriginPermitDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_OriginPermitRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_OriginPermitRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_OriginPermitRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Purpose As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_PurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_PurposeColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_ScientificName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_ScientificNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Source As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_SourceColumn) = value
            End Set
        End Property
        
        Public Property Specimen1_Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen1_DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen1_DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_ReferenceColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Appendix As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_AppendixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_AppendixColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_CommonNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_EUAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_EUAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_EUAnnexColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_LastReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_LastReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_LastReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Mass As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_MassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_MassColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_OriginCertificateDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_OriginCertificateDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_OriginCertificateDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_OriginCertificateRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_OriginCertificateRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_OriginCertificateRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_OriginCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_OriginCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_OriginCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_OriginPermitDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_OriginPermitDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_OriginPermitDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_OriginPermitRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_OriginPermitRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_OriginPermitRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Purpose As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_PurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_PurposeColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_ScientificName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_ScientificNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Source As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_SourceColumn) = value
            End Set
        End Property
        
        Public Property Specimen2_Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen2_DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen2_DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_ReferenceColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Appendix As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_AppendixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_AppendixColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_CommonNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_EUAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_EUAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_EUAnnexColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_LastReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_LastReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_LastReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Mass As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_MassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_MassColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_OriginCertificateDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_OriginCertificateDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_OriginCertificateDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_OriginCertificateRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_OriginCertificateRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_OriginCertificateRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_OriginCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_OriginCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_OriginCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_OriginPermitDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_OriginPermitDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_OriginPermitDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_OriginPermitRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_OriginPermitRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_OriginPermitRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Purpose As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_PurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_PurposeColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_ScientificName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_ScientificNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Source As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_SourceColumn) = value
            End Set
        End Property
        
        Public Property Specimen3_Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSpecimens.Specimen3_DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSpecimens.Specimen3_DescriptionsColumn) = value
            End Set
        End Property
        
        Public Function IsPermitReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.PermitReferenceColumn)
        End Function
        
        Public Sub SetPermitReferenceNull()
            Me(Me.tableBOSpecimens.PermitReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.BarCodeColumn)
        End Function
        
        Public Sub SetBarCodeNull()
            Me(Me.tableBOSpecimens.BarCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExhibitionXNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.ExhibitionXColumn)
        End Function
        
        Public Sub SetExhibitionXNull()
            Me(Me.tableBOSpecimens.ExhibitionXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpiryDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.ExpiryDateColumn)
        End Function
        
        Public Sub SetExpiryDateNull()
            Me(Me.tableBOSpecimens.ExpiryDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportXNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.ExportXColumn)
        End Function
        
        Public Sub SetExportXNull()
            Me(Me.tableBOSpecimens.ExportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportXNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.ImportXColumn)
        End Function
        
        Public Sub SetImportXNull()
            Me(Me.tableBOSpecimens.ImportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPetXNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.PetXColumn)
        End Function
        
        Public Sub SetPetXNull()
            Me(Me.tableBOSpecimens.PetXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReExportXNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.ReExportXColumn)
        End Function
        
        Public Sub SetReExportXNull()
            Me(Me.tableBOSpecimens.ReExportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueLetterNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.IssueLetterColumn)
        End Function
        
        Public Sub SetIssueLetterNull()
            Me(Me.tableBOSpecimens.IssueLetterColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSheetDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.SheetDescriptionColumn)
        End Function
        
        Public Sub SetSheetDescriptionNull()
            Me(Me.tableBOSpecimens.SheetDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSheetNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.SheetNumberColumn)
        End Function
        
        Public Sub SetSheetNumberNull()
            Me(Me.tableBOSpecimens.SheetNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrintStatusNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.PrintStatusColumn)
        End Function
        
        Public Sub SetPrintStatusNull()
            Me(Me.tableBOSpecimens.PrintStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageMofNNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.PageMofNColumn)
        End Function
        
        Public Sub SetPageMofNNull()
            Me(Me.tableBOSpecimens.PageMofNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_ReferenceColumn)
        End Function
        
        Public Sub SetSpecimen1_ReferenceNull()
            Me(Me.tableBOSpecimens.Specimen1_ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_AppendixNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_AppendixColumn)
        End Function
        
        Public Sub SetSpecimen1_AppendixNull()
            Me(Me.tableBOSpecimens.Specimen1_AppendixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_CommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_CommonNameColumn)
        End Function
        
        Public Sub SetSpecimen1_CommonNameNull()
            Me(Me.tableBOSpecimens.Specimen1_CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_EUAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_EUAnnexColumn)
        End Function
        
        Public Sub SetSpecimen1_EUAnnexNull()
            Me(Me.tableBOSpecimens.Specimen1_EUAnnexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_LastReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_LastReExportCountryColumn)
        End Function
        
        Public Sub SetSpecimen1_LastReExportCountryNull()
            Me(Me.tableBOSpecimens.Specimen1_LastReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_MassNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_MassColumn)
        End Function
        
        Public Sub SetSpecimen1_MassNull()
            Me(Me.tableBOSpecimens.Specimen1_MassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_OriginCertificateDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_OriginCertificateDateColumn)
        End Function
        
        Public Sub SetSpecimen1_OriginCertificateDateNull()
            Me(Me.tableBOSpecimens.Specimen1_OriginCertificateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_OriginCertificateRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_OriginCertificateRefColumn)
        End Function
        
        Public Sub SetSpecimen1_OriginCertificateRefNull()
            Me(Me.tableBOSpecimens.Specimen1_OriginCertificateRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_OriginCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_OriginCountryColumn)
        End Function
        
        Public Sub SetSpecimen1_OriginCountryNull()
            Me(Me.tableBOSpecimens.Specimen1_OriginCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_OriginPermitDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_OriginPermitDateColumn)
        End Function
        
        Public Sub SetSpecimen1_OriginPermitDateNull()
            Me(Me.tableBOSpecimens.Specimen1_OriginPermitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_OriginPermitRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_OriginPermitRefColumn)
        End Function
        
        Public Sub SetSpecimen1_OriginPermitRefNull()
            Me(Me.tableBOSpecimens.Specimen1_OriginPermitRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_PurposeNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_PurposeColumn)
        End Function
        
        Public Sub SetSpecimen1_PurposeNull()
            Me(Me.tableBOSpecimens.Specimen1_PurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_QuantityColumn)
        End Function
        
        Public Sub SetSpecimen1_QuantityNull()
            Me(Me.tableBOSpecimens.Specimen1_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_ScientificNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_ScientificNameColumn)
        End Function
        
        Public Sub SetSpecimen1_ScientificNameNull()
            Me(Me.tableBOSpecimens.Specimen1_ScientificNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_SourceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_SourceColumn)
        End Function
        
        Public Sub SetSpecimen1_SourceNull()
            Me(Me.tableBOSpecimens.Specimen1_SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen1_DescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen1_DescriptionsColumn)
        End Function
        
        Public Sub SetSpecimen1_DescriptionsNull()
            Me(Me.tableBOSpecimens.Specimen1_DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_ReferenceColumn)
        End Function
        
        Public Sub SetSpecimen2_ReferenceNull()
            Me(Me.tableBOSpecimens.Specimen2_ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_AppendixNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_AppendixColumn)
        End Function
        
        Public Sub SetSpecimen2_AppendixNull()
            Me(Me.tableBOSpecimens.Specimen2_AppendixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_CommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_CommonNameColumn)
        End Function
        
        Public Sub SetSpecimen2_CommonNameNull()
            Me(Me.tableBOSpecimens.Specimen2_CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_EUAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_EUAnnexColumn)
        End Function
        
        Public Sub SetSpecimen2_EUAnnexNull()
            Me(Me.tableBOSpecimens.Specimen2_EUAnnexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_LastReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_LastReExportCountryColumn)
        End Function
        
        Public Sub SetSpecimen2_LastReExportCountryNull()
            Me(Me.tableBOSpecimens.Specimen2_LastReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_MassNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_MassColumn)
        End Function
        
        Public Sub SetSpecimen2_MassNull()
            Me(Me.tableBOSpecimens.Specimen2_MassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_OriginCertificateDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_OriginCertificateDateColumn)
        End Function
        
        Public Sub SetSpecimen2_OriginCertificateDateNull()
            Me(Me.tableBOSpecimens.Specimen2_OriginCertificateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_OriginCertificateRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_OriginCertificateRefColumn)
        End Function
        
        Public Sub SetSpecimen2_OriginCertificateRefNull()
            Me(Me.tableBOSpecimens.Specimen2_OriginCertificateRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_OriginCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_OriginCountryColumn)
        End Function
        
        Public Sub SetSpecimen2_OriginCountryNull()
            Me(Me.tableBOSpecimens.Specimen2_OriginCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_OriginPermitDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_OriginPermitDateColumn)
        End Function
        
        Public Sub SetSpecimen2_OriginPermitDateNull()
            Me(Me.tableBOSpecimens.Specimen2_OriginPermitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_OriginPermitRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_OriginPermitRefColumn)
        End Function
        
        Public Sub SetSpecimen2_OriginPermitRefNull()
            Me(Me.tableBOSpecimens.Specimen2_OriginPermitRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_PurposeNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_PurposeColumn)
        End Function
        
        Public Sub SetSpecimen2_PurposeNull()
            Me(Me.tableBOSpecimens.Specimen2_PurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_QuantityColumn)
        End Function
        
        Public Sub SetSpecimen2_QuantityNull()
            Me(Me.tableBOSpecimens.Specimen2_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_ScientificNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_ScientificNameColumn)
        End Function
        
        Public Sub SetSpecimen2_ScientificNameNull()
            Me(Me.tableBOSpecimens.Specimen2_ScientificNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_SourceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_SourceColumn)
        End Function
        
        Public Sub SetSpecimen2_SourceNull()
            Me(Me.tableBOSpecimens.Specimen2_SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen2_DescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen2_DescriptionsColumn)
        End Function
        
        Public Sub SetSpecimen2_DescriptionsNull()
            Me(Me.tableBOSpecimens.Specimen2_DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_ReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_ReferenceColumn)
        End Function
        
        Public Sub SetSpecimen3_ReferenceNull()
            Me(Me.tableBOSpecimens.Specimen3_ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_AppendixNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_AppendixColumn)
        End Function
        
        Public Sub SetSpecimen3_AppendixNull()
            Me(Me.tableBOSpecimens.Specimen3_AppendixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_CommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_CommonNameColumn)
        End Function
        
        Public Sub SetSpecimen3_CommonNameNull()
            Me(Me.tableBOSpecimens.Specimen3_CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_EUAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_EUAnnexColumn)
        End Function
        
        Public Sub SetSpecimen3_EUAnnexNull()
            Me(Me.tableBOSpecimens.Specimen3_EUAnnexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_LastReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_LastReExportCountryColumn)
        End Function
        
        Public Sub SetSpecimen3_LastReExportCountryNull()
            Me(Me.tableBOSpecimens.Specimen3_LastReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_MassNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_MassColumn)
        End Function
        
        Public Sub SetSpecimen3_MassNull()
            Me(Me.tableBOSpecimens.Specimen3_MassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_OriginCertificateDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_OriginCertificateDateColumn)
        End Function
        
        Public Sub SetSpecimen3_OriginCertificateDateNull()
            Me(Me.tableBOSpecimens.Specimen3_OriginCertificateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_OriginCertificateRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_OriginCertificateRefColumn)
        End Function
        
        Public Sub SetSpecimen3_OriginCertificateRefNull()
            Me(Me.tableBOSpecimens.Specimen3_OriginCertificateRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_OriginCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_OriginCountryColumn)
        End Function
        
        Public Sub SetSpecimen3_OriginCountryNull()
            Me(Me.tableBOSpecimens.Specimen3_OriginCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_OriginPermitDateNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_OriginPermitDateColumn)
        End Function
        
        Public Sub SetSpecimen3_OriginPermitDateNull()
            Me(Me.tableBOSpecimens.Specimen3_OriginPermitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_OriginPermitRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_OriginPermitRefColumn)
        End Function
        
        Public Sub SetSpecimen3_OriginPermitRefNull()
            Me(Me.tableBOSpecimens.Specimen3_OriginPermitRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_PurposeNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_PurposeColumn)
        End Function
        
        Public Sub SetSpecimen3_PurposeNull()
            Me(Me.tableBOSpecimens.Specimen3_PurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_QuantityColumn)
        End Function
        
        Public Sub SetSpecimen3_QuantityNull()
            Me(Me.tableBOSpecimens.Specimen3_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_ScientificNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_ScientificNameColumn)
        End Function
        
        Public Sub SetSpecimen3_ScientificNameNull()
            Me(Me.tableBOSpecimens.Specimen3_ScientificNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_SourceNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_SourceColumn)
        End Function
        
        Public Sub SetSpecimen3_SourceNull()
            Me(Me.tableBOSpecimens.Specimen3_SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen3_DescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableBOSpecimens.Specimen3_DescriptionsColumn)
        End Function
        
        Public Sub SetSpecimen3_DescriptionsNull()
            Me(Me.tableBOSpecimens.Specimen3_DescriptionsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSpecimensRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSpecimensRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSpecimensRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSpecimensRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
