'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class RemittanceAdviceData
    Inherits DataSet
    
    Private tableBORemittanceHeader As BORemittanceHeaderDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BORemittanceHeader")) Is Nothing) Then
                Me.Tables.Add(New BORemittanceHeaderDataTable(ds.Tables("BORemittanceHeader")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BORemittanceHeader As BORemittanceHeaderDataTable
        Get
            Return Me.tableBORemittanceHeader
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As RemittanceAdviceData = CType(MyBase.Clone,RemittanceAdviceData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BORemittanceHeader")) Is Nothing) Then
            Me.Tables.Add(New BORemittanceHeaderDataTable(ds.Tables("BORemittanceHeader")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBORemittanceHeader = CType(Me.Tables("BORemittanceHeader"),BORemittanceHeaderDataTable)
        If (Not (Me.tableBORemittanceHeader) Is Nothing) Then
            Me.tableBORemittanceHeader.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "RemittanceAdviceData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/RemittanceAdviceData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBORemittanceHeader = New BORemittanceHeaderDataTable
        Me.Tables.Add(Me.tableBORemittanceHeader)
    End Sub
    
    Private Function ShouldSerializeBORemittanceHeader() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BORemittanceHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As BORemittanceHeaderRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORemittanceHeaderDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPaymentReference As DataColumn
        
        Private columnPrintDate As DataColumn
        
        Private columnIssueAuthority As DataColumn
        
        Private columnApplicantId As DataColumn
        
        Private columnApplicantName As DataColumn
        
        Private columnApplicationRef1 As DataColumn
        
        Private columnApplicationType1 As DataColumn
        
        Private columnStandardFee1 As DataColumn
        
        Private columnFeeCharged1 As DataColumn
        
        Private columnApplicationRef2 As DataColumn
        
        Private columnApplicationType2 As DataColumn
        
        Private columnStandardFee2 As DataColumn
        
        Private columnFeeCharged2 As DataColumn
        
        Private columnApplicationRef3 As DataColumn
        
        Private columnApplicationType3 As DataColumn
        
        Private columnStandardFee3 As DataColumn
        
        Private columnFeeCharged3 As DataColumn
        
        Private columnApplicationRef4 As DataColumn
        
        Private columnApplicationType4 As DataColumn
        
        Private columnStandardFee4 As DataColumn
        
        Private columnFeeCharged4 As DataColumn
        
        Private columnApplicationRef5 As DataColumn
        
        Private columnApplicationType5 As DataColumn
        
        Private columnStandardFee5 As DataColumn
        
        Private columnFeeCharged5 As DataColumn
        
        Private columnApplicationRef6 As DataColumn
        
        Private columnApplicationType6 As DataColumn
        
        Private columnStandardFee6 As DataColumn
        
        Private columnFeeCharged6 As DataColumn
        
        Private columnAmountPayable As DataColumn
        
        Friend Sub New()
            MyBase.New("BORemittanceHeader")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PaymentReferenceColumn As DataColumn
            Get
                Return Me.columnPaymentReference
            End Get
        End Property
        
        Friend ReadOnly Property PrintDateColumn As DataColumn
            Get
                Return Me.columnPrintDate
            End Get
        End Property
        
        Friend ReadOnly Property IssueAuthorityColumn As DataColumn
            Get
                Return Me.columnIssueAuthority
            End Get
        End Property
        
        Friend ReadOnly Property ApplicantIdColumn As DataColumn
            Get
                Return Me.columnApplicantId
            End Get
        End Property
        
        Friend ReadOnly Property ApplicantNameColumn As DataColumn
            Get
                Return Me.columnApplicantName
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRef1Column As DataColumn
            Get
                Return Me.columnApplicationRef1
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationType1Column As DataColumn
            Get
                Return Me.columnApplicationType1
            End Get
        End Property
        
        Friend ReadOnly Property StandardFee1Column As DataColumn
            Get
                Return Me.columnStandardFee1
            End Get
        End Property
        
        Friend ReadOnly Property FeeCharged1Column As DataColumn
            Get
                Return Me.columnFeeCharged1
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRef2Column As DataColumn
            Get
                Return Me.columnApplicationRef2
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationType2Column As DataColumn
            Get
                Return Me.columnApplicationType2
            End Get
        End Property
        
        Friend ReadOnly Property StandardFee2Column As DataColumn
            Get
                Return Me.columnStandardFee2
            End Get
        End Property
        
        Friend ReadOnly Property FeeCharged2Column As DataColumn
            Get
                Return Me.columnFeeCharged2
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRef3Column As DataColumn
            Get
                Return Me.columnApplicationRef3
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationType3Column As DataColumn
            Get
                Return Me.columnApplicationType3
            End Get
        End Property
        
        Friend ReadOnly Property StandardFee3Column As DataColumn
            Get
                Return Me.columnStandardFee3
            End Get
        End Property
        
        Friend ReadOnly Property FeeCharged3Column As DataColumn
            Get
                Return Me.columnFeeCharged3
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRef4Column As DataColumn
            Get
                Return Me.columnApplicationRef4
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationType4Column As DataColumn
            Get
                Return Me.columnApplicationType4
            End Get
        End Property
        
        Friend ReadOnly Property StandardFee4Column As DataColumn
            Get
                Return Me.columnStandardFee4
            End Get
        End Property
        
        Friend ReadOnly Property FeeCharged4Column As DataColumn
            Get
                Return Me.columnFeeCharged4
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRef5Column As DataColumn
            Get
                Return Me.columnApplicationRef5
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationType5Column As DataColumn
            Get
                Return Me.columnApplicationType5
            End Get
        End Property
        
        Friend ReadOnly Property StandardFee5Column As DataColumn
            Get
                Return Me.columnStandardFee5
            End Get
        End Property
        
        Friend ReadOnly Property FeeCharged5Column As DataColumn
            Get
                Return Me.columnFeeCharged5
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRef6Column As DataColumn
            Get
                Return Me.columnApplicationRef6
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationType6Column As DataColumn
            Get
                Return Me.columnApplicationType6
            End Get
        End Property
        
        Friend ReadOnly Property StandardFee6Column As DataColumn
            Get
                Return Me.columnStandardFee6
            End Get
        End Property
        
        Friend ReadOnly Property FeeCharged6Column As DataColumn
            Get
                Return Me.columnFeeCharged6
            End Get
        End Property
        
        Friend ReadOnly Property AmountPayableColumn As DataColumn
            Get
                Return Me.columnAmountPayable
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BORemittanceHeaderRow
            Get
                Return CType(Me.Rows(index),BORemittanceHeaderRow)
            End Get
        End Property
        
        Public Event BORemittanceHeaderRowChanged As BORemittanceHeaderRowChangeEventHandler
        
        Public Event BORemittanceHeaderRowChanging As BORemittanceHeaderRowChangeEventHandler
        
        Public Event BORemittanceHeaderRowDeleted As BORemittanceHeaderRowChangeEventHandler
        
        Public Event BORemittanceHeaderRowDeleting As BORemittanceHeaderRowChangeEventHandler
        
        Public Overloads Sub AddBORemittanceHeaderRow(ByVal row As BORemittanceHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBORemittanceHeaderRow( _
                    ByVal PaymentReference As String,  _
                    ByVal PrintDate As String,  _
                    ByVal IssueAuthority As String,  _
                    ByVal ApplicantId As String,  _
                    ByVal ApplicantName As String,  _
                    ByVal ApplicationRef1 As String,  _
                    ByVal ApplicationType1 As String,  _
                    ByVal StandardFee1 As String,  _
                    ByVal FeeCharged1 As String,  _
                    ByVal ApplicationRef2 As String,  _
                    ByVal ApplicationType2 As String,  _
                    ByVal StandardFee2 As String,  _
                    ByVal FeeCharged2 As String,  _
                    ByVal ApplicationRef3 As String,  _
                    ByVal ApplicationType3 As String,  _
                    ByVal StandardFee3 As String,  _
                    ByVal FeeCharged3 As String,  _
                    ByVal ApplicationRef4 As String,  _
                    ByVal ApplicationType4 As String,  _
                    ByVal StandardFee4 As String,  _
                    ByVal FeeCharged4 As String,  _
                    ByVal ApplicationRef5 As String,  _
                    ByVal ApplicationType5 As String,  _
                    ByVal StandardFee5 As String,  _
                    ByVal FeeCharged5 As String,  _
                    ByVal ApplicationRef6 As String,  _
                    ByVal ApplicationType6 As String,  _
                    ByVal StandardFee6 As String,  _
                    ByVal FeeCharged6 As String,  _
                    ByVal AmountPayable As String) As BORemittanceHeaderRow
            Dim rowBORemittanceHeaderRow As BORemittanceHeaderRow = CType(Me.NewRow,BORemittanceHeaderRow)
            rowBORemittanceHeaderRow.ItemArray = New Object() {PaymentReference, PrintDate, IssueAuthority, ApplicantId, ApplicantName, ApplicationRef1, ApplicationType1, StandardFee1, FeeCharged1, ApplicationRef2, ApplicationType2, StandardFee2, FeeCharged2, ApplicationRef3, ApplicationType3, StandardFee3, FeeCharged3, ApplicationRef4, ApplicationType4, StandardFee4, FeeCharged4, ApplicationRef5, ApplicationType5, StandardFee5, FeeCharged5, ApplicationRef6, ApplicationType6, StandardFee6, FeeCharged6, AmountPayable}
            Me.Rows.Add(rowBORemittanceHeaderRow)
            Return rowBORemittanceHeaderRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BORemittanceHeaderDataTable = CType(MyBase.Clone,BORemittanceHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BORemittanceHeaderDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPaymentReference = Me.Columns("PaymentReference")
            Me.columnPrintDate = Me.Columns("PrintDate")
            Me.columnIssueAuthority = Me.Columns("IssueAuthority")
            Me.columnApplicantId = Me.Columns("ApplicantId")
            Me.columnApplicantName = Me.Columns("ApplicantName")
            Me.columnApplicationRef1 = Me.Columns("ApplicationRef1")
            Me.columnApplicationType1 = Me.Columns("ApplicationType1")
            Me.columnStandardFee1 = Me.Columns("StandardFee1")
            Me.columnFeeCharged1 = Me.Columns("FeeCharged1")
            Me.columnApplicationRef2 = Me.Columns("ApplicationRef2")
            Me.columnApplicationType2 = Me.Columns("ApplicationType2")
            Me.columnStandardFee2 = Me.Columns("StandardFee2")
            Me.columnFeeCharged2 = Me.Columns("FeeCharged2")
            Me.columnApplicationRef3 = Me.Columns("ApplicationRef3")
            Me.columnApplicationType3 = Me.Columns("ApplicationType3")
            Me.columnStandardFee3 = Me.Columns("StandardFee3")
            Me.columnFeeCharged3 = Me.Columns("FeeCharged3")
            Me.columnApplicationRef4 = Me.Columns("ApplicationRef4")
            Me.columnApplicationType4 = Me.Columns("ApplicationType4")
            Me.columnStandardFee4 = Me.Columns("StandardFee4")
            Me.columnFeeCharged4 = Me.Columns("FeeCharged4")
            Me.columnApplicationRef5 = Me.Columns("ApplicationRef5")
            Me.columnApplicationType5 = Me.Columns("ApplicationType5")
            Me.columnStandardFee5 = Me.Columns("StandardFee5")
            Me.columnFeeCharged5 = Me.Columns("FeeCharged5")
            Me.columnApplicationRef6 = Me.Columns("ApplicationRef6")
            Me.columnApplicationType6 = Me.Columns("ApplicationType6")
            Me.columnStandardFee6 = Me.Columns("StandardFee6")
            Me.columnFeeCharged6 = Me.Columns("FeeCharged6")
            Me.columnAmountPayable = Me.Columns("AmountPayable")
        End Sub
        
        Private Sub InitClass()
            Me.columnPaymentReference = New DataColumn("PaymentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentReference)
            Me.columnPrintDate = New DataColumn("PrintDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPrintDate)
            Me.columnIssueAuthority = New DataColumn("IssueAuthority", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueAuthority)
            Me.columnApplicantId = New DataColumn("ApplicantId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicantId)
            Me.columnApplicantName = New DataColumn("ApplicantName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicantName)
            Me.columnApplicationRef1 = New DataColumn("ApplicationRef1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef1)
            Me.columnApplicationType1 = New DataColumn("ApplicationType1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType1)
            Me.columnStandardFee1 = New DataColumn("StandardFee1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardFee1)
            Me.columnFeeCharged1 = New DataColumn("FeeCharged1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeeCharged1)
            Me.columnApplicationRef2 = New DataColumn("ApplicationRef2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef2)
            Me.columnApplicationType2 = New DataColumn("ApplicationType2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType2)
            Me.columnStandardFee2 = New DataColumn("StandardFee2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardFee2)
            Me.columnFeeCharged2 = New DataColumn("FeeCharged2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeeCharged2)
            Me.columnApplicationRef3 = New DataColumn("ApplicationRef3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef3)
            Me.columnApplicationType3 = New DataColumn("ApplicationType3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType3)
            Me.columnStandardFee3 = New DataColumn("StandardFee3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardFee3)
            Me.columnFeeCharged3 = New DataColumn("FeeCharged3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeeCharged3)
            Me.columnApplicationRef4 = New DataColumn("ApplicationRef4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef4)
            Me.columnApplicationType4 = New DataColumn("ApplicationType4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType4)
            Me.columnStandardFee4 = New DataColumn("StandardFee4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardFee4)
            Me.columnFeeCharged4 = New DataColumn("FeeCharged4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeeCharged4)
            Me.columnApplicationRef5 = New DataColumn("ApplicationRef5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef5)
            Me.columnApplicationType5 = New DataColumn("ApplicationType5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType5)
            Me.columnStandardFee5 = New DataColumn("StandardFee5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardFee5)
            Me.columnFeeCharged5 = New DataColumn("FeeCharged5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeeCharged5)
            Me.columnApplicationRef6 = New DataColumn("ApplicationRef6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef6)
            Me.columnApplicationType6 = New DataColumn("ApplicationType6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationType6)
            Me.columnStandardFee6 = New DataColumn("StandardFee6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardFee6)
            Me.columnFeeCharged6 = New DataColumn("FeeCharged6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFeeCharged6)
            Me.columnAmountPayable = New DataColumn("AmountPayable", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountPayable)
        End Sub
        
        Public Function NewBORemittanceHeaderRow() As BORemittanceHeaderRow
            Return CType(Me.NewRow,BORemittanceHeaderRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BORemittanceHeaderRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BORemittanceHeaderRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BORemittanceHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent BORemittanceHeaderRowChanged(Me, New BORemittanceHeaderRowChangeEvent(CType(e.Row,BORemittanceHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BORemittanceHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent BORemittanceHeaderRowChanging(Me, New BORemittanceHeaderRowChangeEvent(CType(e.Row,BORemittanceHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BORemittanceHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent BORemittanceHeaderRowDeleted(Me, New BORemittanceHeaderRowChangeEvent(CType(e.Row,BORemittanceHeaderRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BORemittanceHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent BORemittanceHeaderRowDeleting(Me, New BORemittanceHeaderRowChangeEvent(CType(e.Row,BORemittanceHeaderRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBORemittanceHeaderRow(ByVal row As BORemittanceHeaderRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORemittanceHeaderRow
        Inherits DataRow
        
        Private tableBORemittanceHeader As BORemittanceHeaderDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBORemittanceHeader = CType(Me.Table,BORemittanceHeaderDataTable)
        End Sub
        
        Public Property PaymentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.PaymentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.PaymentReferenceColumn) = value
            End Set
        End Property
        
        Public Property PrintDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.PrintDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.PrintDateColumn) = value
            End Set
        End Property
        
        Public Property IssueAuthority As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.IssueAuthorityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.IssueAuthorityColumn) = value
            End Set
        End Property
        
        Public Property ApplicantId As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicantIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicantIdColumn) = value
            End Set
        End Property
        
        Public Property ApplicantName As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicantNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicantNameColumn) = value
            End Set
        End Property
        
        Public Property ApplicationRef1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationRef1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationRef1Column) = value
            End Set
        End Property
        
        Public Property ApplicationType1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationType1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationType1Column) = value
            End Set
        End Property
        
        Public Property StandardFee1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.StandardFee1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.StandardFee1Column) = value
            End Set
        End Property
        
        Public Property FeeCharged1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.FeeCharged1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.FeeCharged1Column) = value
            End Set
        End Property
        
        Public Property ApplicationRef2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationRef2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationRef2Column) = value
            End Set
        End Property
        
        Public Property ApplicationType2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationType2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationType2Column) = value
            End Set
        End Property
        
        Public Property StandardFee2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.StandardFee2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.StandardFee2Column) = value
            End Set
        End Property
        
        Public Property FeeCharged2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.FeeCharged2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.FeeCharged2Column) = value
            End Set
        End Property
        
        Public Property ApplicationRef3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationRef3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationRef3Column) = value
            End Set
        End Property
        
        Public Property ApplicationType3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationType3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationType3Column) = value
            End Set
        End Property
        
        Public Property StandardFee3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.StandardFee3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.StandardFee3Column) = value
            End Set
        End Property
        
        Public Property FeeCharged3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.FeeCharged3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.FeeCharged3Column) = value
            End Set
        End Property
        
        Public Property ApplicationRef4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationRef4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationRef4Column) = value
            End Set
        End Property
        
        Public Property ApplicationType4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationType4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationType4Column) = value
            End Set
        End Property
        
        Public Property StandardFee4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.StandardFee4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.StandardFee4Column) = value
            End Set
        End Property
        
        Public Property FeeCharged4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.FeeCharged4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.FeeCharged4Column) = value
            End Set
        End Property
        
        Public Property ApplicationRef5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationRef5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationRef5Column) = value
            End Set
        End Property
        
        Public Property ApplicationType5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationType5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationType5Column) = value
            End Set
        End Property
        
        Public Property StandardFee5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.StandardFee5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.StandardFee5Column) = value
            End Set
        End Property
        
        Public Property FeeCharged5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.FeeCharged5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.FeeCharged5Column) = value
            End Set
        End Property
        
        Public Property ApplicationRef6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationRef6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationRef6Column) = value
            End Set
        End Property
        
        Public Property ApplicationType6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.ApplicationType6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.ApplicationType6Column) = value
            End Set
        End Property
        
        Public Property StandardFee6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.StandardFee6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.StandardFee6Column) = value
            End Set
        End Property
        
        Public Property FeeCharged6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.FeeCharged6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.FeeCharged6Column) = value
            End Set
        End Property
        
        Public Property AmountPayable As String
            Get
                Try 
                    Return CType(Me(Me.tableBORemittanceHeader.AmountPayableColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORemittanceHeader.AmountPayableColumn) = value
            End Set
        End Property
        
        Public Function IsPaymentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.PaymentReferenceColumn)
        End Function
        
        Public Sub SetPaymentReferenceNull()
            Me(Me.tableBORemittanceHeader.PaymentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPrintDateNull() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.PrintDateColumn)
        End Function
        
        Public Sub SetPrintDateNull()
            Me(Me.tableBORemittanceHeader.PrintDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueAuthorityNull() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.IssueAuthorityColumn)
        End Function
        
        Public Sub SetIssueAuthorityNull()
            Me(Me.tableBORemittanceHeader.IssueAuthorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicantIdNull() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicantIdColumn)
        End Function
        
        Public Sub SetApplicantIdNull()
            Me(Me.tableBORemittanceHeader.ApplicantIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicantNameNull() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicantNameColumn)
        End Function
        
        Public Sub SetApplicantNameNull()
            Me(Me.tableBORemittanceHeader.ApplicantNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRef1Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationRef1Column)
        End Function
        
        Public Sub SetApplicationRef1Null()
            Me(Me.tableBORemittanceHeader.ApplicationRef1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationType1Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationType1Column)
        End Function
        
        Public Sub SetApplicationType1Null()
            Me(Me.tableBORemittanceHeader.ApplicationType1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardFee1Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.StandardFee1Column)
        End Function
        
        Public Sub SetStandardFee1Null()
            Me(Me.tableBORemittanceHeader.StandardFee1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeeCharged1Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.FeeCharged1Column)
        End Function
        
        Public Sub SetFeeCharged1Null()
            Me(Me.tableBORemittanceHeader.FeeCharged1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRef2Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationRef2Column)
        End Function
        
        Public Sub SetApplicationRef2Null()
            Me(Me.tableBORemittanceHeader.ApplicationRef2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationType2Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationType2Column)
        End Function
        
        Public Sub SetApplicationType2Null()
            Me(Me.tableBORemittanceHeader.ApplicationType2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardFee2Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.StandardFee2Column)
        End Function
        
        Public Sub SetStandardFee2Null()
            Me(Me.tableBORemittanceHeader.StandardFee2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeeCharged2Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.FeeCharged2Column)
        End Function
        
        Public Sub SetFeeCharged2Null()
            Me(Me.tableBORemittanceHeader.FeeCharged2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRef3Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationRef3Column)
        End Function
        
        Public Sub SetApplicationRef3Null()
            Me(Me.tableBORemittanceHeader.ApplicationRef3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationType3Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationType3Column)
        End Function
        
        Public Sub SetApplicationType3Null()
            Me(Me.tableBORemittanceHeader.ApplicationType3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardFee3Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.StandardFee3Column)
        End Function
        
        Public Sub SetStandardFee3Null()
            Me(Me.tableBORemittanceHeader.StandardFee3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeeCharged3Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.FeeCharged3Column)
        End Function
        
        Public Sub SetFeeCharged3Null()
            Me(Me.tableBORemittanceHeader.FeeCharged3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRef4Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationRef4Column)
        End Function
        
        Public Sub SetApplicationRef4Null()
            Me(Me.tableBORemittanceHeader.ApplicationRef4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationType4Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationType4Column)
        End Function
        
        Public Sub SetApplicationType4Null()
            Me(Me.tableBORemittanceHeader.ApplicationType4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardFee4Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.StandardFee4Column)
        End Function
        
        Public Sub SetStandardFee4Null()
            Me(Me.tableBORemittanceHeader.StandardFee4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeeCharged4Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.FeeCharged4Column)
        End Function
        
        Public Sub SetFeeCharged4Null()
            Me(Me.tableBORemittanceHeader.FeeCharged4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRef5Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationRef5Column)
        End Function
        
        Public Sub SetApplicationRef5Null()
            Me(Me.tableBORemittanceHeader.ApplicationRef5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationType5Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationType5Column)
        End Function
        
        Public Sub SetApplicationType5Null()
            Me(Me.tableBORemittanceHeader.ApplicationType5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardFee5Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.StandardFee5Column)
        End Function
        
        Public Sub SetStandardFee5Null()
            Me(Me.tableBORemittanceHeader.StandardFee5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeeCharged5Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.FeeCharged5Column)
        End Function
        
        Public Sub SetFeeCharged5Null()
            Me(Me.tableBORemittanceHeader.FeeCharged5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRef6Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationRef6Column)
        End Function
        
        Public Sub SetApplicationRef6Null()
            Me(Me.tableBORemittanceHeader.ApplicationRef6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationType6Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.ApplicationType6Column)
        End Function
        
        Public Sub SetApplicationType6Null()
            Me(Me.tableBORemittanceHeader.ApplicationType6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardFee6Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.StandardFee6Column)
        End Function
        
        Public Sub SetStandardFee6Null()
            Me(Me.tableBORemittanceHeader.StandardFee6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsFeeCharged6Null() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.FeeCharged6Column)
        End Function
        
        Public Sub SetFeeCharged6Null()
            Me(Me.tableBORemittanceHeader.FeeCharged6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountPayableNull() As Boolean
            Return Me.IsNull(Me.tableBORemittanceHeader.AmountPayableColumn)
        End Function
        
        Public Sub SetAmountPayableNull()
            Me(Me.tableBORemittanceHeader.AmountPayableColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORemittanceHeaderRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BORemittanceHeaderRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BORemittanceHeaderRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BORemittanceHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
