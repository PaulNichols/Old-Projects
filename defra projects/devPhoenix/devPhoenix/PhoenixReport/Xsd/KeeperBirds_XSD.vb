'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class KeeperBirdsData
    Inherits DataSet
    
    Private tableBOKeeperBirds As BOKeeperBirdsDataTable
    
    Private tableBOKeeper As BOKeeperDataTable
    
    Private relationBOKeeperBOKeeperBirds As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOKeeperBirds")) Is Nothing) Then
                Me.Tables.Add(New BOKeeperBirdsDataTable(ds.Tables("BOKeeperBirds")))
            End If
            If (Not (ds.Tables("BOKeeper")) Is Nothing) Then
                Me.Tables.Add(New BOKeeperDataTable(ds.Tables("BOKeeper")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOKeeperBirds As BOKeeperBirdsDataTable
        Get
            Return Me.tableBOKeeperBirds
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOKeeper As BOKeeperDataTable
        Get
            Return Me.tableBOKeeper
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As KeeperBirdsData = CType(MyBase.Clone,KeeperBirdsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOKeeperBirds")) Is Nothing) Then
            Me.Tables.Add(New BOKeeperBirdsDataTable(ds.Tables("BOKeeperBirds")))
        End If
        If (Not (ds.Tables("BOKeeper")) Is Nothing) Then
            Me.Tables.Add(New BOKeeperDataTable(ds.Tables("BOKeeper")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOKeeperBirds = CType(Me.Tables("BOKeeperBirds"),BOKeeperBirdsDataTable)
        If (Not (Me.tableBOKeeperBirds) Is Nothing) Then
            Me.tableBOKeeperBirds.InitVars
        End If
        Me.tableBOKeeper = CType(Me.Tables("BOKeeper"),BOKeeperDataTable)
        If (Not (Me.tableBOKeeper) Is Nothing) Then
            Me.tableBOKeeper.InitVars
        End If
        Me.relationBOKeeperBOKeeperBirds = Me.Relations("BOKeeperBOKeeperBirds")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "KeeperBirdsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/KeeperBirdsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOKeeperBirds = New BOKeeperBirdsDataTable
        Me.Tables.Add(Me.tableBOKeeperBirds)
        Me.tableBOKeeper = New BOKeeperDataTable
        Me.Tables.Add(Me.tableBOKeeper)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOKeeperBOKeeperBirds", New DataColumn() {Me.tableBOKeeper.KeeperIdxColumn}, New DataColumn() {Me.tableBOKeeperBirds.KeeperIdxColumn})
        Me.tableBOKeeperBirds.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOKeeperBOKeeperBirds = New DataRelation("BOKeeperBOKeeperBirds", New DataColumn() {Me.tableBOKeeper.KeeperIdxColumn}, New DataColumn() {Me.tableBOKeeperBirds.KeeperIdxColumn}, false)
        Me.Relations.Add(Me.relationBOKeeperBOKeeperBirds)
    End Sub
    
    Private Function ShouldSerializeBOKeeperBirds() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOKeeper() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOKeeperBirdsRowChangeEventHandler(ByVal sender As Object, ByVal e As BOKeeperBirdsRowChangeEvent)
    
    Public Delegate Sub BOKeeperRowChangeEventHandler(ByVal sender As Object, ByVal e As BOKeeperRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperBirdsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKeeperIdx As DataColumn
        
        Private columnIdMarkType As DataColumn
        
        Private columnIdMarkNumber As DataColumn
        
        Private columnOrigin As DataColumn
        
        Private columnSpeciesName As DataColumn
        
        Private columnGender As DataColumn
        
        Private columnHatchDate As DataColumn
        
        Friend Sub New()
            MyBase.New("BOKeeperBirds")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KeeperIdxColumn As DataColumn
            Get
                Return Me.columnKeeperIdx
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeColumn As DataColumn
            Get
                Return Me.columnIdMarkType
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkNumberColumn As DataColumn
            Get
                Return Me.columnIdMarkNumber
            End Get
        End Property
        
        Friend ReadOnly Property OriginColumn As DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        Friend ReadOnly Property SpeciesNameColumn As DataColumn
            Get
                Return Me.columnSpeciesName
            End Get
        End Property
        
        Friend ReadOnly Property GenderColumn As DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property
        
        Friend ReadOnly Property HatchDateColumn As DataColumn
            Get
                Return Me.columnHatchDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOKeeperBirdsRow
            Get
                Return CType(Me.Rows(index),BOKeeperBirdsRow)
            End Get
        End Property
        
        Public Event BOKeeperBirdsRowChanged As BOKeeperBirdsRowChangeEventHandler
        
        Public Event BOKeeperBirdsRowChanging As BOKeeperBirdsRowChangeEventHandler
        
        Public Event BOKeeperBirdsRowDeleted As BOKeeperBirdsRowChangeEventHandler
        
        Public Event BOKeeperBirdsRowDeleting As BOKeeperBirdsRowChangeEventHandler
        
        Public Overloads Sub AddBOKeeperBirdsRow(ByVal row As BOKeeperBirdsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOKeeperBirdsRow(ByVal parentBOKeeperRowByBOKeeperBOKeeperBirds As BOKeeperRow, ByVal IdMarkType As String, ByVal IdMarkNumber As String, ByVal Origin As String, ByVal SpeciesName As String, ByVal Gender As String, ByVal HatchDate As String) As BOKeeperBirdsRow
            Dim rowBOKeeperBirdsRow As BOKeeperBirdsRow = CType(Me.NewRow,BOKeeperBirdsRow)
            rowBOKeeperBirdsRow.ItemArray = New Object() {parentBOKeeperRowByBOKeeperBOKeeperBirds(0), IdMarkType, IdMarkNumber, Origin, SpeciesName, Gender, HatchDate}
            Me.Rows.Add(rowBOKeeperBirdsRow)
            Return rowBOKeeperBirdsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOKeeperBirdsDataTable = CType(MyBase.Clone,BOKeeperBirdsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOKeeperBirdsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKeeperIdx = Me.Columns("KeeperIdx")
            Me.columnIdMarkType = Me.Columns("IdMarkType")
            Me.columnIdMarkNumber = Me.Columns("IdMarkNumber")
            Me.columnOrigin = Me.Columns("Origin")
            Me.columnSpeciesName = Me.Columns("SpeciesName")
            Me.columnGender = Me.Columns("Gender")
            Me.columnHatchDate = Me.Columns("HatchDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnKeeperIdx = New DataColumn("KeeperIdx", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperIdx)
            Me.columnIdMarkType = New DataColumn("IdMarkType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType)
            Me.columnIdMarkNumber = New DataColumn("IdMarkNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkNumber)
            Me.columnOrigin = New DataColumn("Origin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrigin)
            Me.columnSpeciesName = New DataColumn("SpeciesName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpeciesName)
            Me.columnGender = New DataColumn("Gender", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGender)
            Me.columnHatchDate = New DataColumn("HatchDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDate)
        End Sub
        
        Public Function NewBOKeeperBirdsRow() As BOKeeperBirdsRow
            Return CType(Me.NewRow,BOKeeperBirdsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOKeeperBirdsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOKeeperBirdsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOKeeperBirdsRowChangedEvent) Is Nothing) Then
                RaiseEvent BOKeeperBirdsRowChanged(Me, New BOKeeperBirdsRowChangeEvent(CType(e.Row,BOKeeperBirdsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOKeeperBirdsRowChangingEvent) Is Nothing) Then
                RaiseEvent BOKeeperBirdsRowChanging(Me, New BOKeeperBirdsRowChangeEvent(CType(e.Row,BOKeeperBirdsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOKeeperBirdsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOKeeperBirdsRowDeleted(Me, New BOKeeperBirdsRowChangeEvent(CType(e.Row,BOKeeperBirdsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOKeeperBirdsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOKeeperBirdsRowDeleting(Me, New BOKeeperBirdsRowChangeEvent(CType(e.Row,BOKeeperBirdsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOKeeperBirdsRow(ByVal row As BOKeeperBirdsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperBirdsRow
        Inherits DataRow
        
        Private tableBOKeeperBirds As BOKeeperBirdsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOKeeperBirds = CType(Me.Table,BOKeeperBirdsDataTable)
        End Sub
        
        Public Property KeeperIdx As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.KeeperIdxColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.KeeperIdxColumn) = value
            End Set
        End Property
        
        Public Property IdMarkType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.IdMarkTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.IdMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property IdMarkNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.IdMarkNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.IdMarkNumberColumn) = value
            End Set
        End Property
        
        Public Property Origin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.OriginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.OriginColumn) = value
            End Set
        End Property
        
        Public Property SpeciesName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.SpeciesNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.SpeciesNameColumn) = value
            End Set
        End Property
        
        Public Property Gender As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.GenderColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.GenderColumn) = value
            End Set
        End Property
        
        Public Property HatchDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeperBirds.HatchDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeperBirds.HatchDateColumn) = value
            End Set
        End Property
        
        Public Property BOKeeperRow As BOKeeperRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOKeeperBOKeeperBirds")),BOKeeperRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOKeeperBOKeeperBirds"))
            End Set
        End Property
        
        Public Function IsKeeperIdxNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.KeeperIdxColumn)
        End Function
        
        Public Sub SetKeeperIdxNull()
            Me(Me.tableBOKeeperBirds.KeeperIdxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.IdMarkTypeColumn)
        End Function
        
        Public Sub SetIdMarkTypeNull()
            Me(Me.tableBOKeeperBirds.IdMarkTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.IdMarkNumberColumn)
        End Function
        
        Public Sub SetIdMarkNumberNull()
            Me(Me.tableBOKeeperBirds.IdMarkNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.OriginColumn)
        End Function
        
        Public Sub SetOriginNull()
            Me(Me.tableBOKeeperBirds.OriginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpeciesNameNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.SpeciesNameColumn)
        End Function
        
        Public Sub SetSpeciesNameNull()
            Me(Me.tableBOKeeperBirds.SpeciesNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGenderNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.GenderColumn)
        End Function
        
        Public Sub SetGenderNull()
            Me(Me.tableBOKeeperBirds.GenderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDateNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeperBirds.HatchDateColumn)
        End Function
        
        Public Sub SetHatchDateNull()
            Me(Me.tableBOKeeperBirds.HatchDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperBirdsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOKeeperBirdsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOKeeperBirdsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOKeeperBirdsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnKeeperIdx As DataColumn
        
        Private columnKeeperDetails As DataColumn
        
        Private columnIdNumber As DataColumn
        
        Friend Sub New()
            MyBase.New("BOKeeper")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property KeeperIdxColumn As DataColumn
            Get
                Return Me.columnKeeperIdx
            End Get
        End Property
        
        Friend ReadOnly Property KeeperDetailsColumn As DataColumn
            Get
                Return Me.columnKeeperDetails
            End Get
        End Property
        
        Friend ReadOnly Property IdNumberColumn As DataColumn
            Get
                Return Me.columnIdNumber
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOKeeperRow
            Get
                Return CType(Me.Rows(index),BOKeeperRow)
            End Get
        End Property
        
        Public Event BOKeeperRowChanged As BOKeeperRowChangeEventHandler
        
        Public Event BOKeeperRowChanging As BOKeeperRowChangeEventHandler
        
        Public Event BOKeeperRowDeleted As BOKeeperRowChangeEventHandler
        
        Public Event BOKeeperRowDeleting As BOKeeperRowChangeEventHandler
        
        Public Overloads Sub AddBOKeeperRow(ByVal row As BOKeeperRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOKeeperRow(ByVal KeeperIdx As Long, ByVal KeeperDetails As String, ByVal IdNumber As String) As BOKeeperRow
            Dim rowBOKeeperRow As BOKeeperRow = CType(Me.NewRow,BOKeeperRow)
            rowBOKeeperRow.ItemArray = New Object() {KeeperIdx, KeeperDetails, IdNumber}
            Me.Rows.Add(rowBOKeeperRow)
            Return rowBOKeeperRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOKeeperDataTable = CType(MyBase.Clone,BOKeeperDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOKeeperDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnKeeperIdx = Me.Columns("KeeperIdx")
            Me.columnKeeperDetails = Me.Columns("KeeperDetails")
            Me.columnIdNumber = Me.Columns("IdNumber")
        End Sub
        
        Private Sub InitClass()
            Me.columnKeeperIdx = New DataColumn("KeeperIdx", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperIdx)
            Me.columnKeeperDetails = New DataColumn("KeeperDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperDetails)
            Me.columnIdNumber = New DataColumn("IdNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdNumber)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnKeeperIdx}, false))
            Me.columnKeeperIdx.AllowDBNull = false
            Me.columnKeeperIdx.Unique = true
        End Sub
        
        Public Function NewBOKeeperRow() As BOKeeperRow
            Return CType(Me.NewRow,BOKeeperRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOKeeperRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOKeeperRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOKeeperRowChangedEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowChanged(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOKeeperRowChangingEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowChanging(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOKeeperRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowDeleted(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOKeeperRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowDeleting(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOKeeperRow(ByVal row As BOKeeperRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperRow
        Inherits DataRow
        
        Private tableBOKeeper As BOKeeperDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOKeeper = CType(Me.Table,BOKeeperDataTable)
        End Sub
        
        Public Property KeeperIdx As Long
            Get
                Return CType(Me(Me.tableBOKeeper.KeeperIdxColumn),Long)
            End Get
            Set
                Me(Me.tableBOKeeper.KeeperIdxColumn) = value
            End Set
        End Property
        
        Public Property KeeperDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeper.KeeperDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeper.KeeperDetailsColumn) = value
            End Set
        End Property
        
        Public Property IdNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeper.IdNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeper.IdNumberColumn) = value
            End Set
        End Property
        
        Public Function IsKeeperDetailsNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeper.KeeperDetailsColumn)
        End Function
        
        Public Sub SetKeeperDetailsNull()
            Me(Me.tableBOKeeper.KeeperDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeper.IdNumberColumn)
        End Function
        
        Public Sub SetIdNumberNull()
            Me(Me.tableBOKeeper.IdNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBOKeeperBirdsRows() As BOKeeperBirdsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOKeeperBOKeeperBirds")),BOKeeperBirdsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOKeeperRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOKeeperRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOKeeperRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
