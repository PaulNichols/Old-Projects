'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Schedule4BirdsData
    Inherits DataSet
    
    Private tableBOSchedule4Birds_Main As BOSchedule4Birds_MainDataTable
    
    Private tableBOSchedule4Birds_Sub1 As BOSchedule4Birds_Sub1DataTable
    
    Private tableBOSchedule4InspectorSig As BOSchedule4InspectorSigDataTable
    
    Private relationBOSchedule4Birds_MainBOSchedule4Birds_Sub1 As DataRelation
    
    Private relationBOSchedule4Birds_MainBOSchedule4InspectorSig As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOSchedule4Birds_Main")) Is Nothing) Then
                Me.Tables.Add(New BOSchedule4Birds_MainDataTable(ds.Tables("BOSchedule4Birds_Main")))
            End If
            If (Not (ds.Tables("BOSchedule4Birds_Sub1")) Is Nothing) Then
                Me.Tables.Add(New BOSchedule4Birds_Sub1DataTable(ds.Tables("BOSchedule4Birds_Sub1")))
            End If
            If (Not (ds.Tables("BOSchedule4InspectorSig")) Is Nothing) Then
                Me.Tables.Add(New BOSchedule4InspectorSigDataTable(ds.Tables("BOSchedule4InspectorSig")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSchedule4Birds_Main As BOSchedule4Birds_MainDataTable
        Get
            Return Me.tableBOSchedule4Birds_Main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSchedule4Birds_Sub1 As BOSchedule4Birds_Sub1DataTable
        Get
            Return Me.tableBOSchedule4Birds_Sub1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSchedule4InspectorSig As BOSchedule4InspectorSigDataTable
        Get
            Return Me.tableBOSchedule4InspectorSig
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Schedule4BirdsData = CType(MyBase.Clone,Schedule4BirdsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOSchedule4Birds_Main")) Is Nothing) Then
            Me.Tables.Add(New BOSchedule4Birds_MainDataTable(ds.Tables("BOSchedule4Birds_Main")))
        End If
        If (Not (ds.Tables("BOSchedule4Birds_Sub1")) Is Nothing) Then
            Me.Tables.Add(New BOSchedule4Birds_Sub1DataTable(ds.Tables("BOSchedule4Birds_Sub1")))
        End If
        If (Not (ds.Tables("BOSchedule4InspectorSig")) Is Nothing) Then
            Me.Tables.Add(New BOSchedule4InspectorSigDataTable(ds.Tables("BOSchedule4InspectorSig")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOSchedule4Birds_Main = CType(Me.Tables("BOSchedule4Birds_Main"),BOSchedule4Birds_MainDataTable)
        If (Not (Me.tableBOSchedule4Birds_Main) Is Nothing) Then
            Me.tableBOSchedule4Birds_Main.InitVars
        End If
        Me.tableBOSchedule4Birds_Sub1 = CType(Me.Tables("BOSchedule4Birds_Sub1"),BOSchedule4Birds_Sub1DataTable)
        If (Not (Me.tableBOSchedule4Birds_Sub1) Is Nothing) Then
            Me.tableBOSchedule4Birds_Sub1.InitVars
        End If
        Me.tableBOSchedule4InspectorSig = CType(Me.Tables("BOSchedule4InspectorSig"),BOSchedule4InspectorSigDataTable)
        If (Not (Me.tableBOSchedule4InspectorSig) Is Nothing) Then
            Me.tableBOSchedule4InspectorSig.InitVars
        End If
        Me.relationBOSchedule4Birds_MainBOSchedule4Birds_Sub1 = Me.Relations("BOSchedule4Birds_MainBOSchedule4Birds_Sub1")
        Me.relationBOSchedule4Birds_MainBOSchedule4InspectorSig = Me.Relations("BOSchedule4Birds_MainBOSchedule4InspectorSig")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Schedule4BirdsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Schedule4BirdsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOSchedule4Birds_Main = New BOSchedule4Birds_MainDataTable
        Me.Tables.Add(Me.tableBOSchedule4Birds_Main)
        Me.tableBOSchedule4Birds_Sub1 = New BOSchedule4Birds_Sub1DataTable
        Me.Tables.Add(Me.tableBOSchedule4Birds_Sub1)
        Me.tableBOSchedule4InspectorSig = New BOSchedule4InspectorSigDataTable
        Me.Tables.Add(Me.tableBOSchedule4InspectorSig)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOSchedule4Birds_MainBOSchedule4Birds_Sub1", New DataColumn() {Me.tableBOSchedule4Birds_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4Birds_Sub1.ApplicationIdColumn})
        Me.tableBOSchedule4Birds_Sub1.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BOSchedule4Birds_MainBOSchedule4InspectorSig", New DataColumn() {Me.tableBOSchedule4Birds_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4InspectorSig.ApplicationIdColumn})
        Me.tableBOSchedule4InspectorSig.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOSchedule4Birds_MainBOSchedule4Birds_Sub1 = New DataRelation("BOSchedule4Birds_MainBOSchedule4Birds_Sub1", New DataColumn() {Me.tableBOSchedule4Birds_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4Birds_Sub1.ApplicationIdColumn}, false)
        Me.Relations.Add(Me.relationBOSchedule4Birds_MainBOSchedule4Birds_Sub1)
        Me.relationBOSchedule4Birds_MainBOSchedule4InspectorSig = New DataRelation("BOSchedule4Birds_MainBOSchedule4InspectorSig", New DataColumn() {Me.tableBOSchedule4Birds_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4InspectorSig.ApplicationIdColumn}, false)
        Me.Relations.Add(Me.relationBOSchedule4Birds_MainBOSchedule4InspectorSig)
    End Sub
    
    Private Function ShouldSerializeBOSchedule4Birds_Main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOSchedule4Birds_Sub1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOSchedule4InspectorSig() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOSchedule4Birds_MainRowChangeEventHandler(ByVal sender As Object, ByVal e As BOSchedule4Birds_MainRowChangeEvent)
    
    Public Delegate Sub BOSchedule4Birds_Sub1RowChangeEventHandler(ByVal sender As Object, ByVal e As BOSchedule4Birds_Sub1RowChangeEvent)
    
    Public Delegate Sub BOSchedule4InspectorSigRowChangeEventHandler(ByVal sender As Object, ByVal e As BOSchedule4InspectorSigRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4Birds_MainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBarcode As DataColumn
        
        Private columnInspectionSection As DataColumn
        
        Private columnMaxSignatures As DataColumn
        
        Private columnKeeperDetails As DataColumn
        
        Private columnPartyId As DataColumn
        
        Private columnApplicationRef As DataColumn
        
        Private columnAdditionalRingRequestNo As DataColumn
        
        Private columnConvict5YearsYesX As DataColumn
        
        Private columnConvict5YearsNoX As DataColumn
        
        Private columnConvict3YearsYesX As DataColumn
        
        Private columnConvict3YearsNoX As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSchedule4Birds_Main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BarcodeColumn As DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        Friend ReadOnly Property InspectionSectionColumn As DataColumn
            Get
                Return Me.columnInspectionSection
            End Get
        End Property
        
        Friend ReadOnly Property MaxSignaturesColumn As DataColumn
            Get
                Return Me.columnMaxSignatures
            End Get
        End Property
        
        Friend ReadOnly Property KeeperDetailsColumn As DataColumn
            Get
                Return Me.columnKeeperDetails
            End Get
        End Property
        
        Friend ReadOnly Property PartyIdColumn As DataColumn
            Get
                Return Me.columnPartyId
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRefColumn As DataColumn
            Get
                Return Me.columnApplicationRef
            End Get
        End Property
        
        Friend ReadOnly Property AdditionalRingRequestNoColumn As DataColumn
            Get
                Return Me.columnAdditionalRingRequestNo
            End Get
        End Property
        
        Friend ReadOnly Property Convict5YearsYesXColumn As DataColumn
            Get
                Return Me.columnConvict5YearsYesX
            End Get
        End Property
        
        Friend ReadOnly Property Convict5YearsNoXColumn As DataColumn
            Get
                Return Me.columnConvict5YearsNoX
            End Get
        End Property
        
        Friend ReadOnly Property Convict3YearsYesXColumn As DataColumn
            Get
                Return Me.columnConvict3YearsYesX
            End Get
        End Property
        
        Friend ReadOnly Property Convict3YearsNoXColumn As DataColumn
            Get
                Return Me.columnConvict3YearsNoX
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSchedule4Birds_MainRow
            Get
                Return CType(Me.Rows(index),BOSchedule4Birds_MainRow)
            End Get
        End Property
        
        Public Event BOSchedule4Birds_MainRowChanged As BOSchedule4Birds_MainRowChangeEventHandler
        
        Public Event BOSchedule4Birds_MainRowChanging As BOSchedule4Birds_MainRowChangeEventHandler
        
        Public Event BOSchedule4Birds_MainRowDeleted As BOSchedule4Birds_MainRowChangeEventHandler
        
        Public Event BOSchedule4Birds_MainRowDeleting As BOSchedule4Birds_MainRowChangeEventHandler
        
        Public Overloads Sub AddBOSchedule4Birds_MainRow(ByVal row As BOSchedule4Birds_MainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSchedule4Birds_MainRow(ByVal ApplicationId As Long, ByVal Barcode As String, ByVal InspectionSection As Boolean, ByVal MaxSignatures As Long, ByVal KeeperDetails As String, ByVal PartyId As String, ByVal ApplicationRef As String, ByVal AdditionalRingRequestNo As String, ByVal Convict5YearsYesX As String, ByVal Convict5YearsNoX As String, ByVal Convict3YearsYesX As String, ByVal Convict3YearsNoX As String) As BOSchedule4Birds_MainRow
            Dim rowBOSchedule4Birds_MainRow As BOSchedule4Birds_MainRow = CType(Me.NewRow,BOSchedule4Birds_MainRow)
            rowBOSchedule4Birds_MainRow.ItemArray = New Object() {ApplicationId, Barcode, InspectionSection, MaxSignatures, KeeperDetails, PartyId, ApplicationRef, AdditionalRingRequestNo, Convict5YearsYesX, Convict5YearsNoX, Convict3YearsYesX, Convict3YearsNoX}
            Me.Rows.Add(rowBOSchedule4Birds_MainRow)
            Return rowBOSchedule4Birds_MainRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSchedule4Birds_MainDataTable = CType(MyBase.Clone,BOSchedule4Birds_MainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSchedule4Birds_MainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBarcode = Me.Columns("Barcode")
            Me.columnInspectionSection = Me.Columns("InspectionSection")
            Me.columnMaxSignatures = Me.Columns("MaxSignatures")
            Me.columnKeeperDetails = Me.Columns("KeeperDetails")
            Me.columnPartyId = Me.Columns("PartyId")
            Me.columnApplicationRef = Me.Columns("ApplicationRef")
            Me.columnAdditionalRingRequestNo = Me.Columns("AdditionalRingRequestNo")
            Me.columnConvict5YearsYesX = Me.Columns("Convict5YearsYesX")
            Me.columnConvict5YearsNoX = Me.Columns("Convict5YearsNoX")
            Me.columnConvict3YearsYesX = Me.Columns("Convict3YearsYesX")
            Me.columnConvict3YearsNoX = Me.Columns("Convict3YearsNoX")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBarcode = New DataColumn("Barcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarcode)
            Me.columnInspectionSection = New DataColumn("InspectionSection", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInspectionSection)
            Me.columnMaxSignatures = New DataColumn("MaxSignatures", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxSignatures)
            Me.columnKeeperDetails = New DataColumn("KeeperDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperDetails)
            Me.columnPartyId = New DataColumn("PartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyId)
            Me.columnApplicationRef = New DataColumn("ApplicationRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef)
            Me.columnAdditionalRingRequestNo = New DataColumn("AdditionalRingRequestNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdditionalRingRequestNo)
            Me.columnConvict5YearsYesX = New DataColumn("Convict5YearsYesX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConvict5YearsYesX)
            Me.columnConvict5YearsNoX = New DataColumn("Convict5YearsNoX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConvict5YearsNoX)
            Me.columnConvict3YearsYesX = New DataColumn("Convict3YearsYesX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConvict3YearsYesX)
            Me.columnConvict3YearsNoX = New DataColumn("Convict3YearsNoX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnConvict3YearsNoX)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnApplicationId}, false))
            Me.columnApplicationId.AllowDBNull = false
            Me.columnApplicationId.Unique = true
        End Sub
        
        Public Function NewBOSchedule4Birds_MainRow() As BOSchedule4Birds_MainRow
            Return CType(Me.NewRow,BOSchedule4Birds_MainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSchedule4Birds_MainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSchedule4Birds_MainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSchedule4Birds_MainRowChangedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_MainRowChanged(Me, New BOSchedule4Birds_MainRowChangeEvent(CType(e.Row,BOSchedule4Birds_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSchedule4Birds_MainRowChangingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_MainRowChanging(Me, New BOSchedule4Birds_MainRowChangeEvent(CType(e.Row,BOSchedule4Birds_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSchedule4Birds_MainRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_MainRowDeleted(Me, New BOSchedule4Birds_MainRowChangeEvent(CType(e.Row,BOSchedule4Birds_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSchedule4Birds_MainRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_MainRowDeleting(Me, New BOSchedule4Birds_MainRowChangeEvent(CType(e.Row,BOSchedule4Birds_MainRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSchedule4Birds_MainRow(ByVal row As BOSchedule4Birds_MainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4Birds_MainRow
        Inherits DataRow
        
        Private tableBOSchedule4Birds_Main As BOSchedule4Birds_MainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSchedule4Birds_Main = CType(Me.Table,BOSchedule4Birds_MainDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Return CType(Me(Me.tableBOSchedule4Birds_Main.ApplicationIdColumn),Long)
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property Barcode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.BarcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.BarcodeColumn) = value
            End Set
        End Property
        
        Public Property InspectionSection As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.InspectionSectionColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.InspectionSectionColumn) = value
            End Set
        End Property
        
        Public Property MaxSignatures As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.MaxSignaturesColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.MaxSignaturesColumn) = value
            End Set
        End Property
        
        Public Property KeeperDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.KeeperDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.KeeperDetailsColumn) = value
            End Set
        End Property
        
        Public Property PartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.PartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.PartyIdColumn) = value
            End Set
        End Property
        
        Public Property ApplicationRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.ApplicationRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.ApplicationRefColumn) = value
            End Set
        End Property
        
        Public Property AdditionalRingRequestNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.AdditionalRingRequestNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.AdditionalRingRequestNoColumn) = value
            End Set
        End Property
        
        Public Property Convict5YearsYesX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.Convict5YearsYesXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.Convict5YearsYesXColumn) = value
            End Set
        End Property
        
        Public Property Convict5YearsNoX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.Convict5YearsNoXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.Convict5YearsNoXColumn) = value
            End Set
        End Property
        
        Public Property Convict3YearsYesX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.Convict3YearsYesXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.Convict3YearsYesXColumn) = value
            End Set
        End Property
        
        Public Property Convict3YearsNoX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Main.Convict3YearsNoXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Main.Convict3YearsNoXColumn) = value
            End Set
        End Property
        
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.BarcodeColumn)
        End Function
        
        Public Sub SetBarcodeNull()
            Me(Me.tableBOSchedule4Birds_Main.BarcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInspectionSectionNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.InspectionSectionColumn)
        End Function
        
        Public Sub SetInspectionSectionNull()
            Me(Me.tableBOSchedule4Birds_Main.InspectionSectionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxSignaturesNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.MaxSignaturesColumn)
        End Function
        
        Public Sub SetMaxSignaturesNull()
            Me(Me.tableBOSchedule4Birds_Main.MaxSignaturesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperDetailsNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.KeeperDetailsColumn)
        End Function
        
        Public Sub SetKeeperDetailsNull()
            Me(Me.tableBOSchedule4Birds_Main.KeeperDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.PartyIdColumn)
        End Function
        
        Public Sub SetPartyIdNull()
            Me(Me.tableBOSchedule4Birds_Main.PartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.ApplicationRefColumn)
        End Function
        
        Public Sub SetApplicationRefNull()
            Me(Me.tableBOSchedule4Birds_Main.ApplicationRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdditionalRingRequestNoNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.AdditionalRingRequestNoColumn)
        End Function
        
        Public Sub SetAdditionalRingRequestNoNull()
            Me(Me.tableBOSchedule4Birds_Main.AdditionalRingRequestNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConvict5YearsYesXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.Convict5YearsYesXColumn)
        End Function
        
        Public Sub SetConvict5YearsYesXNull()
            Me(Me.tableBOSchedule4Birds_Main.Convict5YearsYesXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConvict5YearsNoXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.Convict5YearsNoXColumn)
        End Function
        
        Public Sub SetConvict5YearsNoXNull()
            Me(Me.tableBOSchedule4Birds_Main.Convict5YearsNoXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConvict3YearsYesXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.Convict3YearsYesXColumn)
        End Function
        
        Public Sub SetConvict3YearsYesXNull()
            Me(Me.tableBOSchedule4Birds_Main.Convict3YearsYesXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsConvict3YearsNoXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Main.Convict3YearsNoXColumn)
        End Function
        
        Public Sub SetConvict3YearsNoXNull()
            Me(Me.tableBOSchedule4Birds_Main.Convict3YearsNoXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBOSchedule4Birds_Sub1Rows() As BOSchedule4Birds_Sub1Row()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOSchedule4Birds_MainBOSchedule4Birds_Sub1")),BOSchedule4Birds_Sub1Row())
        End Function
        
        Public Function GetBOSchedule4InspectorSigRows() As BOSchedule4InspectorSigRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOSchedule4Birds_MainBOSchedule4InspectorSig")),BOSchedule4InspectorSigRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4Birds_MainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSchedule4Birds_MainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSchedule4Birds_MainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSchedule4Birds_MainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4Birds_Sub1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBirdNo As DataColumn
        
        Private columnSpecies As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnHatchDay As DataColumn
        
        Private columnHatchMonth As DataColumn
        
        Private columnHatchYear As DataColumn
        
        Private columnSex As DataColumn
        
        Private columnKeptAddress As DataColumn
        
        Private columnSaleX As DataColumn
        
        Private columnHireX As DataColumn
        
        Private columnExchangeX As DataColumn
        
        Private columnBarterX As DataColumn
        
        Private columnLoanX As DataColumn
        
        Private columnGiftX As DataColumn
        
        Private columnReturnX As DataColumn
        
        Private columnOtherRingNo As DataColumn
        
        Private columnOtherRingType As DataColumn
        
        Private columnClosedRing As DataColumn
        
        Private columnDayAcquired As DataColumn
        
        Private columnMonthAcquired As DataColumn
        
        Private columnYearAcquired As DataColumn
        
        Private columnArticle10CertNo As DataColumn
        
        Private columnMicrochip As DataColumn
        
        Private columnPreviousKeeperAddress As DataColumn
        
        Private columnPossession As DataColumn
        
        Private columnRingNo1 As DataColumn
        
        Private columnRingNo2 As DataColumn
        
        Private columnRingNo3 As DataColumn
        
        Private columnRingNo4 As DataColumn
        
        Private columnRingNo5 As DataColumn
        
        Private columnRingNo6 As DataColumn
        
        Private columnRingNo7 As DataColumn
        
        Private columnRingNo8 As DataColumn
        
        Private columnRingNo9 As DataColumn
        
        Private columnRingNo10 As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSchedule4Birds_Sub1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BirdNoColumn As DataColumn
            Get
                Return Me.columnBirdNo
            End Get
        End Property
        
        Friend ReadOnly Property SpeciesColumn As DataColumn
            Get
                Return Me.columnSpecies
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property HatchDayColumn As DataColumn
            Get
                Return Me.columnHatchDay
            End Get
        End Property
        
        Friend ReadOnly Property HatchMonthColumn As DataColumn
            Get
                Return Me.columnHatchMonth
            End Get
        End Property
        
        Friend ReadOnly Property HatchYearColumn As DataColumn
            Get
                Return Me.columnHatchYear
            End Get
        End Property
        
        Friend ReadOnly Property SexColumn As DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        Friend ReadOnly Property KeptAddressColumn As DataColumn
            Get
                Return Me.columnKeptAddress
            End Get
        End Property
        
        Friend ReadOnly Property SaleXColumn As DataColumn
            Get
                Return Me.columnSaleX
            End Get
        End Property
        
        Friend ReadOnly Property HireXColumn As DataColumn
            Get
                Return Me.columnHireX
            End Get
        End Property
        
        Friend ReadOnly Property ExchangeXColumn As DataColumn
            Get
                Return Me.columnExchangeX
            End Get
        End Property
        
        Friend ReadOnly Property BarterXColumn As DataColumn
            Get
                Return Me.columnBarterX
            End Get
        End Property
        
        Friend ReadOnly Property LoanXColumn As DataColumn
            Get
                Return Me.columnLoanX
            End Get
        End Property
        
        Friend ReadOnly Property GiftXColumn As DataColumn
            Get
                Return Me.columnGiftX
            End Get
        End Property
        
        Friend ReadOnly Property ReturnXColumn As DataColumn
            Get
                Return Me.columnReturnX
            End Get
        End Property
        
        Friend ReadOnly Property OtherRingNoColumn As DataColumn
            Get
                Return Me.columnOtherRingNo
            End Get
        End Property
        
        Friend ReadOnly Property OtherRingTypeColumn As DataColumn
            Get
                Return Me.columnOtherRingType
            End Get
        End Property
        
        Friend ReadOnly Property ClosedRingColumn As DataColumn
            Get
                Return Me.columnClosedRing
            End Get
        End Property
        
        Friend ReadOnly Property DayAcquiredColumn As DataColumn
            Get
                Return Me.columnDayAcquired
            End Get
        End Property
        
        Friend ReadOnly Property MonthAcquiredColumn As DataColumn
            Get
                Return Me.columnMonthAcquired
            End Get
        End Property
        
        Friend ReadOnly Property YearAcquiredColumn As DataColumn
            Get
                Return Me.columnYearAcquired
            End Get
        End Property
        
        Friend ReadOnly Property Article10CertNoColumn As DataColumn
            Get
                Return Me.columnArticle10CertNo
            End Get
        End Property
        
        Friend ReadOnly Property MicrochipColumn As DataColumn
            Get
                Return Me.columnMicrochip
            End Get
        End Property
        
        Friend ReadOnly Property PreviousKeeperAddressColumn As DataColumn
            Get
                Return Me.columnPreviousKeeperAddress
            End Get
        End Property
        
        Friend ReadOnly Property PossessionColumn As DataColumn
            Get
                Return Me.columnPossession
            End Get
        End Property
        
        Friend ReadOnly Property RingNo1Column As DataColumn
            Get
                Return Me.columnRingNo1
            End Get
        End Property
        
        Friend ReadOnly Property RingNo2Column As DataColumn
            Get
                Return Me.columnRingNo2
            End Get
        End Property
        
        Friend ReadOnly Property RingNo3Column As DataColumn
            Get
                Return Me.columnRingNo3
            End Get
        End Property
        
        Friend ReadOnly Property RingNo4Column As DataColumn
            Get
                Return Me.columnRingNo4
            End Get
        End Property
        
        Friend ReadOnly Property RingNo5Column As DataColumn
            Get
                Return Me.columnRingNo5
            End Get
        End Property
        
        Friend ReadOnly Property RingNo6Column As DataColumn
            Get
                Return Me.columnRingNo6
            End Get
        End Property
        
        Friend ReadOnly Property RingNo7Column As DataColumn
            Get
                Return Me.columnRingNo7
            End Get
        End Property
        
        Friend ReadOnly Property RingNo8Column As DataColumn
            Get
                Return Me.columnRingNo8
            End Get
        End Property
        
        Friend ReadOnly Property RingNo9Column As DataColumn
            Get
                Return Me.columnRingNo9
            End Get
        End Property
        
        Friend ReadOnly Property RingNo10Column As DataColumn
            Get
                Return Me.columnRingNo10
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSchedule4Birds_Sub1Row
            Get
                Return CType(Me.Rows(index),BOSchedule4Birds_Sub1Row)
            End Get
        End Property
        
        Public Event BOSchedule4Birds_Sub1RowChanged As BOSchedule4Birds_Sub1RowChangeEventHandler
        
        Public Event BOSchedule4Birds_Sub1RowChanging As BOSchedule4Birds_Sub1RowChangeEventHandler
        
        Public Event BOSchedule4Birds_Sub1RowDeleted As BOSchedule4Birds_Sub1RowChangeEventHandler
        
        Public Event BOSchedule4Birds_Sub1RowDeleting As BOSchedule4Birds_Sub1RowChangeEventHandler
        
        Public Overloads Sub AddBOSchedule4Birds_Sub1Row(ByVal row As BOSchedule4Birds_Sub1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSchedule4Birds_Sub1Row( _
                    ByVal parentBOSchedule4Birds_MainRowByBOSchedule4Birds_MainBOSchedule4Birds_Sub1 As BOSchedule4Birds_MainRow,  _
                    ByVal BirdNo As String,  _
                    ByVal Species As String,  _
                    ByVal CommonName As String,  _
                    ByVal HatchDay As String,  _
                    ByVal HatchMonth As String,  _
                    ByVal HatchYear As String,  _
                    ByVal Sex As String,  _
                    ByVal KeptAddress As String,  _
                    ByVal SaleX As String,  _
                    ByVal HireX As String,  _
                    ByVal ExchangeX As String,  _
                    ByVal BarterX As String,  _
                    ByVal LoanX As String,  _
                    ByVal GiftX As String,  _
                    ByVal ReturnX As String,  _
                    ByVal OtherRingNo As String,  _
                    ByVal OtherRingType As String,  _
                    ByVal ClosedRing As String,  _
                    ByVal DayAcquired As String,  _
                    ByVal MonthAcquired As String,  _
                    ByVal YearAcquired As String,  _
                    ByVal Article10CertNo As String,  _
                    ByVal Microchip As String,  _
                    ByVal PreviousKeeperAddress As String,  _
                    ByVal Possession As String,  _
                    ByVal RingNo1 As String,  _
                    ByVal RingNo2 As String,  _
                    ByVal RingNo3 As String,  _
                    ByVal RingNo4 As String,  _
                    ByVal RingNo5 As String,  _
                    ByVal RingNo6 As String,  _
                    ByVal RingNo7 As String,  _
                    ByVal RingNo8 As String,  _
                    ByVal RingNo9 As String,  _
                    ByVal RingNo10 As String) As BOSchedule4Birds_Sub1Row
            Dim rowBOSchedule4Birds_Sub1Row As BOSchedule4Birds_Sub1Row = CType(Me.NewRow,BOSchedule4Birds_Sub1Row)
            rowBOSchedule4Birds_Sub1Row.ItemArray = New Object() {parentBOSchedule4Birds_MainRowByBOSchedule4Birds_MainBOSchedule4Birds_Sub1(0), BirdNo, Species, CommonName, HatchDay, HatchMonth, HatchYear, Sex, KeptAddress, SaleX, HireX, ExchangeX, BarterX, LoanX, GiftX, ReturnX, OtherRingNo, OtherRingType, ClosedRing, DayAcquired, MonthAcquired, YearAcquired, Article10CertNo, Microchip, PreviousKeeperAddress, Possession, RingNo1, RingNo2, RingNo3, RingNo4, RingNo5, RingNo6, RingNo7, RingNo8, RingNo9, RingNo10}
            Me.Rows.Add(rowBOSchedule4Birds_Sub1Row)
            Return rowBOSchedule4Birds_Sub1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSchedule4Birds_Sub1DataTable = CType(MyBase.Clone,BOSchedule4Birds_Sub1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSchedule4Birds_Sub1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBirdNo = Me.Columns("BirdNo")
            Me.columnSpecies = Me.Columns("Species")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnHatchDay = Me.Columns("HatchDay")
            Me.columnHatchMonth = Me.Columns("HatchMonth")
            Me.columnHatchYear = Me.Columns("HatchYear")
            Me.columnSex = Me.Columns("Sex")
            Me.columnKeptAddress = Me.Columns("KeptAddress")
            Me.columnSaleX = Me.Columns("SaleX")
            Me.columnHireX = Me.Columns("HireX")
            Me.columnExchangeX = Me.Columns("ExchangeX")
            Me.columnBarterX = Me.Columns("BarterX")
            Me.columnLoanX = Me.Columns("LoanX")
            Me.columnGiftX = Me.Columns("GiftX")
            Me.columnReturnX = Me.Columns("ReturnX")
            Me.columnOtherRingNo = Me.Columns("OtherRingNo")
            Me.columnOtherRingType = Me.Columns("OtherRingType")
            Me.columnClosedRing = Me.Columns("ClosedRing")
            Me.columnDayAcquired = Me.Columns("DayAcquired")
            Me.columnMonthAcquired = Me.Columns("MonthAcquired")
            Me.columnYearAcquired = Me.Columns("YearAcquired")
            Me.columnArticle10CertNo = Me.Columns("Article10CertNo")
            Me.columnMicrochip = Me.Columns("Microchip")
            Me.columnPreviousKeeperAddress = Me.Columns("PreviousKeeperAddress")
            Me.columnPossession = Me.Columns("Possession")
            Me.columnRingNo1 = Me.Columns("RingNo1")
            Me.columnRingNo2 = Me.Columns("RingNo2")
            Me.columnRingNo3 = Me.Columns("RingNo3")
            Me.columnRingNo4 = Me.Columns("RingNo4")
            Me.columnRingNo5 = Me.Columns("RingNo5")
            Me.columnRingNo6 = Me.Columns("RingNo6")
            Me.columnRingNo7 = Me.Columns("RingNo7")
            Me.columnRingNo8 = Me.Columns("RingNo8")
            Me.columnRingNo9 = Me.Columns("RingNo9")
            Me.columnRingNo10 = Me.Columns("RingNo10")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBirdNo = New DataColumn("BirdNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo)
            Me.columnSpecies = New DataColumn("Species", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecies)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnHatchDay = New DataColumn("HatchDay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchDay)
            Me.columnHatchMonth = New DataColumn("HatchMonth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchMonth)
            Me.columnHatchYear = New DataColumn("HatchYear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHatchYear)
            Me.columnSex = New DataColumn("Sex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSex)
            Me.columnKeptAddress = New DataColumn("KeptAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeptAddress)
            Me.columnSaleX = New DataColumn("SaleX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSaleX)
            Me.columnHireX = New DataColumn("HireX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHireX)
            Me.columnExchangeX = New DataColumn("ExchangeX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExchangeX)
            Me.columnBarterX = New DataColumn("BarterX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarterX)
            Me.columnLoanX = New DataColumn("LoanX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLoanX)
            Me.columnGiftX = New DataColumn("GiftX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGiftX)
            Me.columnReturnX = New DataColumn("ReturnX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReturnX)
            Me.columnOtherRingNo = New DataColumn("OtherRingNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherRingNo)
            Me.columnOtherRingType = New DataColumn("OtherRingType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOtherRingType)
            Me.columnClosedRing = New DataColumn("ClosedRing", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClosedRing)
            Me.columnDayAcquired = New DataColumn("DayAcquired", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDayAcquired)
            Me.columnMonthAcquired = New DataColumn("MonthAcquired", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonthAcquired)
            Me.columnYearAcquired = New DataColumn("YearAcquired", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnYearAcquired)
            Me.columnArticle10CertNo = New DataColumn("Article10CertNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10CertNo)
            Me.columnMicrochip = New DataColumn("Microchip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMicrochip)
            Me.columnPreviousKeeperAddress = New DataColumn("PreviousKeeperAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviousKeeperAddress)
            Me.columnPossession = New DataColumn("Possession", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPossession)
            Me.columnRingNo1 = New DataColumn("RingNo1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo1)
            Me.columnRingNo2 = New DataColumn("RingNo2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo2)
            Me.columnRingNo3 = New DataColumn("RingNo3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo3)
            Me.columnRingNo4 = New DataColumn("RingNo4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo4)
            Me.columnRingNo5 = New DataColumn("RingNo5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo5)
            Me.columnRingNo6 = New DataColumn("RingNo6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo6)
            Me.columnRingNo7 = New DataColumn("RingNo7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo7)
            Me.columnRingNo8 = New DataColumn("RingNo8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo8)
            Me.columnRingNo9 = New DataColumn("RingNo9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo9)
            Me.columnRingNo10 = New DataColumn("RingNo10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo10)
        End Sub
        
        Public Function NewBOSchedule4Birds_Sub1Row() As BOSchedule4Birds_Sub1Row
            Return CType(Me.NewRow,BOSchedule4Birds_Sub1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSchedule4Birds_Sub1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSchedule4Birds_Sub1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSchedule4Birds_Sub1RowChangedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_Sub1RowChanged(Me, New BOSchedule4Birds_Sub1RowChangeEvent(CType(e.Row,BOSchedule4Birds_Sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSchedule4Birds_Sub1RowChangingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_Sub1RowChanging(Me, New BOSchedule4Birds_Sub1RowChangeEvent(CType(e.Row,BOSchedule4Birds_Sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSchedule4Birds_Sub1RowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_Sub1RowDeleted(Me, New BOSchedule4Birds_Sub1RowChangeEvent(CType(e.Row,BOSchedule4Birds_Sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSchedule4Birds_Sub1RowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4Birds_Sub1RowDeleting(Me, New BOSchedule4Birds_Sub1RowChangeEvent(CType(e.Row,BOSchedule4Birds_Sub1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSchedule4Birds_Sub1Row(ByVal row As BOSchedule4Birds_Sub1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4Birds_Sub1Row
        Inherits DataRow
        
        Private tableBOSchedule4Birds_Sub1 As BOSchedule4Birds_Sub1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSchedule4Birds_Sub1 = CType(Me.Table,BOSchedule4Birds_Sub1DataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.ApplicationIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property BirdNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.BirdNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.BirdNoColumn) = value
            End Set
        End Property
        
        Public Property Species As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.SpeciesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.SpeciesColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property HatchDay As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.HatchDayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.HatchDayColumn) = value
            End Set
        End Property
        
        Public Property HatchMonth As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.HatchMonthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.HatchMonthColumn) = value
            End Set
        End Property
        
        Public Property HatchYear As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.HatchYearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.HatchYearColumn) = value
            End Set
        End Property
        
        Public Property Sex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.SexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.SexColumn) = value
            End Set
        End Property
        
        Public Property KeptAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.KeptAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.KeptAddressColumn) = value
            End Set
        End Property
        
        Public Property SaleX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.SaleXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.SaleXColumn) = value
            End Set
        End Property
        
        Public Property HireX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.HireXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.HireXColumn) = value
            End Set
        End Property
        
        Public Property ExchangeX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.ExchangeXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.ExchangeXColumn) = value
            End Set
        End Property
        
        Public Property BarterX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.BarterXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.BarterXColumn) = value
            End Set
        End Property
        
        Public Property LoanX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.LoanXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.LoanXColumn) = value
            End Set
        End Property
        
        Public Property GiftX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.GiftXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.GiftXColumn) = value
            End Set
        End Property
        
        Public Property ReturnX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.ReturnXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.ReturnXColumn) = value
            End Set
        End Property
        
        Public Property OtherRingNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.OtherRingNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.OtherRingNoColumn) = value
            End Set
        End Property
        
        Public Property OtherRingType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.OtherRingTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.OtherRingTypeColumn) = value
            End Set
        End Property
        
        Public Property ClosedRing As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.ClosedRingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.ClosedRingColumn) = value
            End Set
        End Property
        
        Public Property DayAcquired As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.DayAcquiredColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.DayAcquiredColumn) = value
            End Set
        End Property
        
        Public Property MonthAcquired As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.MonthAcquiredColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.MonthAcquiredColumn) = value
            End Set
        End Property
        
        Public Property YearAcquired As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.YearAcquiredColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.YearAcquiredColumn) = value
            End Set
        End Property
        
        Public Property Article10CertNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.Article10CertNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.Article10CertNoColumn) = value
            End Set
        End Property
        
        Public Property Microchip As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.MicrochipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.MicrochipColumn) = value
            End Set
        End Property
        
        Public Property PreviousKeeperAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.PreviousKeeperAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.PreviousKeeperAddressColumn) = value
            End Set
        End Property
        
        Public Property Possession As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.PossessionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.PossessionColumn) = value
            End Set
        End Property
        
        Public Property RingNo1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo1Column) = value
            End Set
        End Property
        
        Public Property RingNo2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo2Column) = value
            End Set
        End Property
        
        Public Property RingNo3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo3Column) = value
            End Set
        End Property
        
        Public Property RingNo4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo4Column) = value
            End Set
        End Property
        
        Public Property RingNo5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo5Column) = value
            End Set
        End Property
        
        Public Property RingNo6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo6Column) = value
            End Set
        End Property
        
        Public Property RingNo7 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo7Column) = value
            End Set
        End Property
        
        Public Property RingNo8 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo8Column) = value
            End Set
        End Property
        
        Public Property RingNo9 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo9Column) = value
            End Set
        End Property
        
        Public Property RingNo10 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4Birds_Sub1.RingNo10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4Birds_Sub1.RingNo10Column) = value
            End Set
        End Property
        
        Public Property BOSchedule4Birds_MainRow As BOSchedule4Birds_MainRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOSchedule4Birds_MainBOSchedule4Birds_Sub1")),BOSchedule4Birds_MainRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOSchedule4Birds_MainBOSchedule4Birds_Sub1"))
            End Set
        End Property
        
        Public Function IsApplicationIdNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.ApplicationIdColumn)
        End Function
        
        Public Sub SetApplicationIdNull()
            Me(Me.tableBOSchedule4Birds_Sub1.ApplicationIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNoNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.BirdNoColumn)
        End Function
        
        Public Sub SetBirdNoNull()
            Me(Me.tableBOSchedule4Birds_Sub1.BirdNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpeciesNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.SpeciesColumn)
        End Function
        
        Public Sub SetSpeciesNull()
            Me(Me.tableBOSchedule4Birds_Sub1.SpeciesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.CommonNameColumn)
        End Function
        
        Public Sub SetCommonNameNull()
            Me(Me.tableBOSchedule4Birds_Sub1.CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchDayNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.HatchDayColumn)
        End Function
        
        Public Sub SetHatchDayNull()
            Me(Me.tableBOSchedule4Birds_Sub1.HatchDayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchMonthNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.HatchMonthColumn)
        End Function
        
        Public Sub SetHatchMonthNull()
            Me(Me.tableBOSchedule4Birds_Sub1.HatchMonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHatchYearNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.HatchYearColumn)
        End Function
        
        Public Sub SetHatchYearNull()
            Me(Me.tableBOSchedule4Birds_Sub1.HatchYearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.SexColumn)
        End Function
        
        Public Sub SetSexNull()
            Me(Me.tableBOSchedule4Birds_Sub1.SexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeptAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.KeptAddressColumn)
        End Function
        
        Public Sub SetKeptAddressNull()
            Me(Me.tableBOSchedule4Birds_Sub1.KeptAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSaleXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.SaleXColumn)
        End Function
        
        Public Sub SetSaleXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.SaleXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHireXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.HireXColumn)
        End Function
        
        Public Sub SetHireXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.HireXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExchangeXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.ExchangeXColumn)
        End Function
        
        Public Sub SetExchangeXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.ExchangeXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarterXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.BarterXColumn)
        End Function
        
        Public Sub SetBarterXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.BarterXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLoanXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.LoanXColumn)
        End Function
        
        Public Sub SetLoanXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.LoanXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGiftXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.GiftXColumn)
        End Function
        
        Public Sub SetGiftXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.GiftXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReturnXNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.ReturnXColumn)
        End Function
        
        Public Sub SetReturnXNull()
            Me(Me.tableBOSchedule4Birds_Sub1.ReturnXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherRingNoNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.OtherRingNoColumn)
        End Function
        
        Public Sub SetOtherRingNoNull()
            Me(Me.tableBOSchedule4Birds_Sub1.OtherRingNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOtherRingTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.OtherRingTypeColumn)
        End Function
        
        Public Sub SetOtherRingTypeNull()
            Me(Me.tableBOSchedule4Birds_Sub1.OtherRingTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClosedRingNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.ClosedRingColumn)
        End Function
        
        Public Sub SetClosedRingNull()
            Me(Me.tableBOSchedule4Birds_Sub1.ClosedRingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDayAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.DayAcquiredColumn)
        End Function
        
        Public Sub SetDayAcquiredNull()
            Me(Me.tableBOSchedule4Birds_Sub1.DayAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonthAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.MonthAcquiredColumn)
        End Function
        
        Public Sub SetMonthAcquiredNull()
            Me(Me.tableBOSchedule4Birds_Sub1.MonthAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsYearAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.YearAcquiredColumn)
        End Function
        
        Public Sub SetYearAcquiredNull()
            Me(Me.tableBOSchedule4Birds_Sub1.YearAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10CertNoNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.Article10CertNoColumn)
        End Function
        
        Public Sub SetArticle10CertNoNull()
            Me(Me.tableBOSchedule4Birds_Sub1.Article10CertNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMicrochipNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.MicrochipColumn)
        End Function
        
        Public Sub SetMicrochipNull()
            Me(Me.tableBOSchedule4Birds_Sub1.MicrochipColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviousKeeperAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.PreviousKeeperAddressColumn)
        End Function
        
        Public Sub SetPreviousKeeperAddressNull()
            Me(Me.tableBOSchedule4Birds_Sub1.PreviousKeeperAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPossessionNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.PossessionColumn)
        End Function
        
        Public Sub SetPossessionNull()
            Me(Me.tableBOSchedule4Birds_Sub1.PossessionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo1Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo1Column)
        End Function
        
        Public Sub SetRingNo1Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo2Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo2Column)
        End Function
        
        Public Sub SetRingNo2Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo3Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo3Column)
        End Function
        
        Public Sub SetRingNo3Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo4Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo4Column)
        End Function
        
        Public Sub SetRingNo4Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo5Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo5Column)
        End Function
        
        Public Sub SetRingNo5Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo6Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo6Column)
        End Function
        
        Public Sub SetRingNo6Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo7Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo7Column)
        End Function
        
        Public Sub SetRingNo7Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo8Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo8Column)
        End Function
        
        Public Sub SetRingNo8Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo9Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo9Column)
        End Function
        
        Public Sub SetRingNo9Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo10Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4Birds_Sub1.RingNo10Column)
        End Function
        
        Public Sub SetRingNo10Null()
            Me(Me.tableBOSchedule4Birds_Sub1.RingNo10Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4Birds_Sub1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSchedule4Birds_Sub1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSchedule4Birds_Sub1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSchedule4Birds_Sub1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4InspectorSigDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBirdNo1 As DataColumn
        
        Private columnBirdNo2 As DataColumn
        
        Private columnBirdNo3 As DataColumn
        
        Private columnBirdNo4 As DataColumn
        
        Private columnBirdNo5 As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSchedule4InspectorSig")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo1Column As DataColumn
            Get
                Return Me.columnBirdNo1
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo2Column As DataColumn
            Get
                Return Me.columnBirdNo2
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo3Column As DataColumn
            Get
                Return Me.columnBirdNo3
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo4Column As DataColumn
            Get
                Return Me.columnBirdNo4
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo5Column As DataColumn
            Get
                Return Me.columnBirdNo5
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSchedule4InspectorSigRow
            Get
                Return CType(Me.Rows(index),BOSchedule4InspectorSigRow)
            End Get
        End Property
        
        Public Event BOSchedule4InspectorSigRowChanged As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Event BOSchedule4InspectorSigRowChanging As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Event BOSchedule4InspectorSigRowDeleted As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Event BOSchedule4InspectorSigRowDeleting As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Overloads Sub AddBOSchedule4InspectorSigRow(ByVal row As BOSchedule4InspectorSigRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSchedule4InspectorSigRow(ByVal parentBOSchedule4Birds_MainRowByBOSchedule4Birds_MainBOSchedule4InspectorSig As BOSchedule4Birds_MainRow, ByVal BirdNo1 As String, ByVal BirdNo2 As String, ByVal BirdNo3 As String, ByVal BirdNo4 As String, ByVal BirdNo5 As String) As BOSchedule4InspectorSigRow
            Dim rowBOSchedule4InspectorSigRow As BOSchedule4InspectorSigRow = CType(Me.NewRow,BOSchedule4InspectorSigRow)
            rowBOSchedule4InspectorSigRow.ItemArray = New Object() {parentBOSchedule4Birds_MainRowByBOSchedule4Birds_MainBOSchedule4InspectorSig(0), BirdNo1, BirdNo2, BirdNo3, BirdNo4, BirdNo5}
            Me.Rows.Add(rowBOSchedule4InspectorSigRow)
            Return rowBOSchedule4InspectorSigRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSchedule4InspectorSigDataTable = CType(MyBase.Clone,BOSchedule4InspectorSigDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSchedule4InspectorSigDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBirdNo1 = Me.Columns("BirdNo1")
            Me.columnBirdNo2 = Me.Columns("BirdNo2")
            Me.columnBirdNo3 = Me.Columns("BirdNo3")
            Me.columnBirdNo4 = Me.Columns("BirdNo4")
            Me.columnBirdNo5 = Me.Columns("BirdNo5")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBirdNo1 = New DataColumn("BirdNo1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo1)
            Me.columnBirdNo2 = New DataColumn("BirdNo2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo2)
            Me.columnBirdNo3 = New DataColumn("BirdNo3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo3)
            Me.columnBirdNo4 = New DataColumn("BirdNo4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo4)
            Me.columnBirdNo5 = New DataColumn("BirdNo5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo5)
        End Sub
        
        Public Function NewBOSchedule4InspectorSigRow() As BOSchedule4InspectorSigRow
            Return CType(Me.NewRow,BOSchedule4InspectorSigRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSchedule4InspectorSigRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSchedule4InspectorSigRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSchedule4InspectorSigRowChangedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowChanged(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSchedule4InspectorSigRowChangingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowChanging(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSchedule4InspectorSigRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowDeleted(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSchedule4InspectorSigRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowDeleting(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSchedule4InspectorSigRow(ByVal row As BOSchedule4InspectorSigRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4InspectorSigRow
        Inherits DataRow
        
        Private tableBOSchedule4InspectorSig As BOSchedule4InspectorSigDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSchedule4InspectorSig = CType(Me.Table,BOSchedule4InspectorSigDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property BirdNo1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo1Column) = value
            End Set
        End Property
        
        Public Property BirdNo2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo2Column) = value
            End Set
        End Property
        
        Public Property BirdNo3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo3Column) = value
            End Set
        End Property
        
        Public Property BirdNo4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo4Column) = value
            End Set
        End Property
        
        Public Property BirdNo5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo5Column) = value
            End Set
        End Property
        
        Public Property BOSchedule4Birds_MainRow As BOSchedule4Birds_MainRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOSchedule4Birds_MainBOSchedule4InspectorSig")),BOSchedule4Birds_MainRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOSchedule4Birds_MainBOSchedule4InspectorSig"))
            End Set
        End Property
        
        Public Function IsApplicationIdNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn)
        End Function
        
        Public Sub SetApplicationIdNull()
            Me(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo1Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo1Column)
        End Function
        
        Public Sub SetBirdNo1Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo2Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo2Column)
        End Function
        
        Public Sub SetBirdNo2Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo3Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo3Column)
        End Function
        
        Public Sub SetBirdNo3Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo4Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo4Column)
        End Function
        
        Public Sub SetBirdNo4Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo5Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo5Column)
        End Function
        
        Public Sub SetBirdNo5Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo5Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4InspectorSigRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSchedule4InspectorSigRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSchedule4InspectorSigRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSchedule4InspectorSigRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
