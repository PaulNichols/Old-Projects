'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ViewAuditLogData
    Inherits DataSet
    
    Private tableBOViewAuditLog As BOViewAuditLogDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOViewAuditLog")) Is Nothing) Then
                Me.Tables.Add(New BOViewAuditLogDataTable(ds.Tables("BOViewAuditLog")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOViewAuditLog As BOViewAuditLogDataTable
        Get
            Return Me.tableBOViewAuditLog
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ViewAuditLogData = CType(MyBase.Clone,ViewAuditLogData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOViewAuditLog")) Is Nothing) Then
            Me.Tables.Add(New BOViewAuditLogDataTable(ds.Tables("BOViewAuditLog")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOViewAuditLog = CType(Me.Tables("BOViewAuditLog"),BOViewAuditLogDataTable)
        If (Not (Me.tableBOViewAuditLog) Is Nothing) Then
            Me.tableBOViewAuditLog.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ViewAuditLogData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ViewAuditLogData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOViewAuditLog = New BOViewAuditLogDataTable
        Me.Tables.Add(Me.tableBOViewAuditLog)
    End Sub
    
    Private Function ShouldSerializeBOViewAuditLog() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOViewAuditLogRowChangeEventHandler(ByVal sender As Object, ByVal e As BOViewAuditLogRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOViewAuditLogDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRecordIdx As DataColumn
        
        Private columnEventDate As DataColumn
        
        Private columnEventTime As DataColumn
        
        Private columnUniqueUser As DataColumn
        
        Private columnPartyIdAppId As DataColumn
        
        Private columnDeviceAddress As DataColumn
        
        Private columnEventType As DataColumn
        
        Private columnRelevantInformation As DataColumn
        
        Friend Sub New()
            MyBase.New("BOViewAuditLog")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RecordIdxColumn As DataColumn
            Get
                Return Me.columnRecordIdx
            End Get
        End Property
        
        Friend ReadOnly Property EventDateColumn As DataColumn
            Get
                Return Me.columnEventDate
            End Get
        End Property
        
        Friend ReadOnly Property EventTimeColumn As DataColumn
            Get
                Return Me.columnEventTime
            End Get
        End Property
        
        Friend ReadOnly Property UniqueUserColumn As DataColumn
            Get
                Return Me.columnUniqueUser
            End Get
        End Property
        
        Friend ReadOnly Property PartyIdAppIdColumn As DataColumn
            Get
                Return Me.columnPartyIdAppId
            End Get
        End Property
        
        Friend ReadOnly Property DeviceAddressColumn As DataColumn
            Get
                Return Me.columnDeviceAddress
            End Get
        End Property
        
        Friend ReadOnly Property EventTypeColumn As DataColumn
            Get
                Return Me.columnEventType
            End Get
        End Property
        
        Friend ReadOnly Property RelevantInformationColumn As DataColumn
            Get
                Return Me.columnRelevantInformation
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOViewAuditLogRow
            Get
                Return CType(Me.Rows(index),BOViewAuditLogRow)
            End Get
        End Property
        
        Public Event BOViewAuditLogRowChanged As BOViewAuditLogRowChangeEventHandler
        
        Public Event BOViewAuditLogRowChanging As BOViewAuditLogRowChangeEventHandler
        
        Public Event BOViewAuditLogRowDeleted As BOViewAuditLogRowChangeEventHandler
        
        Public Event BOViewAuditLogRowDeleting As BOViewAuditLogRowChangeEventHandler
        
        Public Overloads Sub AddBOViewAuditLogRow(ByVal row As BOViewAuditLogRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOViewAuditLogRow(ByVal RecordIdx As Long, ByVal EventDate As String, ByVal EventTime As String, ByVal UniqueUser As String, ByVal PartyIdAppId As String, ByVal DeviceAddress As String, ByVal EventType As String, ByVal RelevantInformation As String) As BOViewAuditLogRow
            Dim rowBOViewAuditLogRow As BOViewAuditLogRow = CType(Me.NewRow,BOViewAuditLogRow)
            rowBOViewAuditLogRow.ItemArray = New Object() {RecordIdx, EventDate, EventTime, UniqueUser, PartyIdAppId, DeviceAddress, EventType, RelevantInformation}
            Me.Rows.Add(rowBOViewAuditLogRow)
            Return rowBOViewAuditLogRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOViewAuditLogDataTable = CType(MyBase.Clone,BOViewAuditLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOViewAuditLogDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRecordIdx = Me.Columns("RecordIdx")
            Me.columnEventDate = Me.Columns("EventDate")
            Me.columnEventTime = Me.Columns("EventTime")
            Me.columnUniqueUser = Me.Columns("UniqueUser")
            Me.columnPartyIdAppId = Me.Columns("PartyIdAppId")
            Me.columnDeviceAddress = Me.Columns("DeviceAddress")
            Me.columnEventType = Me.Columns("EventType")
            Me.columnRelevantInformation = Me.Columns("RelevantInformation")
        End Sub
        
        Private Sub InitClass()
            Me.columnRecordIdx = New DataColumn("RecordIdx", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRecordIdx)
            Me.columnEventDate = New DataColumn("EventDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEventDate)
            Me.columnEventTime = New DataColumn("EventTime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEventTime)
            Me.columnUniqueUser = New DataColumn("UniqueUser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUniqueUser)
            Me.columnPartyIdAppId = New DataColumn("PartyIdAppId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyIdAppId)
            Me.columnDeviceAddress = New DataColumn("DeviceAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDeviceAddress)
            Me.columnEventType = New DataColumn("EventType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEventType)
            Me.columnRelevantInformation = New DataColumn("RelevantInformation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRelevantInformation)
        End Sub
        
        Public Function NewBOViewAuditLogRow() As BOViewAuditLogRow
            Return CType(Me.NewRow,BOViewAuditLogRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOViewAuditLogRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOViewAuditLogRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOViewAuditLogRowChangedEvent) Is Nothing) Then
                RaiseEvent BOViewAuditLogRowChanged(Me, New BOViewAuditLogRowChangeEvent(CType(e.Row,BOViewAuditLogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOViewAuditLogRowChangingEvent) Is Nothing) Then
                RaiseEvent BOViewAuditLogRowChanging(Me, New BOViewAuditLogRowChangeEvent(CType(e.Row,BOViewAuditLogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOViewAuditLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOViewAuditLogRowDeleted(Me, New BOViewAuditLogRowChangeEvent(CType(e.Row,BOViewAuditLogRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOViewAuditLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOViewAuditLogRowDeleting(Me, New BOViewAuditLogRowChangeEvent(CType(e.Row,BOViewAuditLogRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOViewAuditLogRow(ByVal row As BOViewAuditLogRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOViewAuditLogRow
        Inherits DataRow
        
        Private tableBOViewAuditLog As BOViewAuditLogDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOViewAuditLog = CType(Me.Table,BOViewAuditLogDataTable)
        End Sub
        
        Public Property RecordIdx As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.RecordIdxColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.RecordIdxColumn) = value
            End Set
        End Property
        
        Public Property EventDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.EventDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.EventDateColumn) = value
            End Set
        End Property
        
        Public Property EventTime As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.EventTimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.EventTimeColumn) = value
            End Set
        End Property
        
        Public Property UniqueUser As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.UniqueUserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.UniqueUserColumn) = value
            End Set
        End Property
        
        Public Property PartyIdAppId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.PartyIdAppIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.PartyIdAppIdColumn) = value
            End Set
        End Property
        
        Public Property DeviceAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.DeviceAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.DeviceAddressColumn) = value
            End Set
        End Property
        
        Public Property EventType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.EventTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.EventTypeColumn) = value
            End Set
        End Property
        
        Public Property RelevantInformation As String
            Get
                Try 
                    Return CType(Me(Me.tableBOViewAuditLog.RelevantInformationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOViewAuditLog.RelevantInformationColumn) = value
            End Set
        End Property
        
        Public Function IsRecordIdxNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.RecordIdxColumn)
        End Function
        
        Public Sub SetRecordIdxNull()
            Me(Me.tableBOViewAuditLog.RecordIdxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEventDateNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.EventDateColumn)
        End Function
        
        Public Sub SetEventDateNull()
            Me(Me.tableBOViewAuditLog.EventDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEventTimeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.EventTimeColumn)
        End Function
        
        Public Sub SetEventTimeNull()
            Me(Me.tableBOViewAuditLog.EventTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUniqueUserNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.UniqueUserColumn)
        End Function
        
        Public Sub SetUniqueUserNull()
            Me(Me.tableBOViewAuditLog.UniqueUserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartyIdAppIdNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.PartyIdAppIdColumn)
        End Function
        
        Public Sub SetPartyIdAppIdNull()
            Me(Me.tableBOViewAuditLog.PartyIdAppIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDeviceAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.DeviceAddressColumn)
        End Function
        
        Public Sub SetDeviceAddressNull()
            Me(Me.tableBOViewAuditLog.DeviceAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEventTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.EventTypeColumn)
        End Function
        
        Public Sub SetEventTypeNull()
            Me(Me.tableBOViewAuditLog.EventTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRelevantInformationNull() As Boolean
            Return Me.IsNull(Me.tableBOViewAuditLog.RelevantInformationColumn)
        End Function
        
        Public Sub SetRelevantInformationNull()
            Me(Me.tableBOViewAuditLog.RelevantInformationColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOViewAuditLogRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOViewAuditLogRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOViewAuditLogRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOViewAuditLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
