'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class ServiceLevelsReferralData
    Inherits DataSet
    
    Private tableBOServiceLevelsReferral As BOServiceLevelsReferralDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOServiceLevelsReferral")) Is Nothing) Then
                Me.Tables.Add(New BOServiceLevelsReferralDataTable(ds.Tables("BOServiceLevelsReferral")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOServiceLevelsReferral As BOServiceLevelsReferralDataTable
        Get
            Return Me.tableBOServiceLevelsReferral
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As ServiceLevelsReferralData = CType(MyBase.Clone,ServiceLevelsReferralData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOServiceLevelsReferral")) Is Nothing) Then
            Me.Tables.Add(New BOServiceLevelsReferralDataTable(ds.Tables("BOServiceLevelsReferral")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOServiceLevelsReferral = CType(Me.Tables("BOServiceLevelsReferral"),BOServiceLevelsReferralDataTable)
        If (Not (Me.tableBOServiceLevelsReferral) Is Nothing) Then
            Me.tableBOServiceLevelsReferral.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ServiceLevelsReferralData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ServiceLevelsReferralData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOServiceLevelsReferral = New BOServiceLevelsReferralDataTable
        Me.Tables.Add(Me.tableBOServiceLevelsReferral)
    End Sub
    
    Private Function ShouldSerializeBOServiceLevelsReferral() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOServiceLevelsReferralRowChangeEventHandler(ByVal sender As Object, ByVal e As BOServiceLevelsReferralRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOServiceLevelsReferralDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTotalsWithinHeading As DataColumn
        
        Private columnTotalsBetweenHeading As DataColumn
        
        Private columnTotalsOverHeading As DataColumn
        
        Private columnTotalsHeading As DataColumn
        
        Private columnTotalsAllProcessed As DataColumn
        
        Private columnTotalsAllWithin As DataColumn
        
        Private columnTotalsAllBetween As DataColumn
        
        Private columnTotalsAllOver As DataColumn
        
        Private columnTotalsLastProcessed As DataColumn
        
        Private columnTotalsLastWithin As DataColumn
        
        Private columnTotalsLastBetween As DataColumn
        
        Private columnTotalsLastOver As DataColumn
        
        Private columnExportWithinHeading As DataColumn
        
        Private columnExportBetweenHeading As DataColumn
        
        Private columnExportOverHeading As DataColumn
        
        Private columnExportAllProcessed As DataColumn
        
        Private columnExportAllWithin As DataColumn
        
        Private columnExportAllBetween As DataColumn
        
        Private columnExportAllOver As DataColumn
        
        Private columnExportLastProcessed As DataColumn
        
        Private columnExportLastWithin As DataColumn
        
        Private columnExportLastBetween As DataColumn
        
        Private columnExportLastOver As DataColumn
        
        Private columnImportWithinHeading As DataColumn
        
        Private columnImportBetweenHeading As DataColumn
        
        Private columnImportOverHeading As DataColumn
        
        Private columnImportAllProcessed As DataColumn
        
        Private columnImportAllWithin As DataColumn
        
        Private columnImportAllBetween As DataColumn
        
        Private columnImportAllOver As DataColumn
        
        Private columnImportLastProcessed As DataColumn
        
        Private columnImportLastWithin As DataColumn
        
        Private columnImportLastBetween As DataColumn
        
        Private columnImportLastOver As DataColumn
        
        Private columnArticle10WithinHeading As DataColumn
        
        Private columnArticle10BetweenHeading As DataColumn
        
        Private columnArticle10OverHeading As DataColumn
        
        Private columnArticle10AllProcessed As DataColumn
        
        Private columnArticle10AllWithin As DataColumn
        
        Private columnArticle10AllBetween As DataColumn
        
        Private columnArticle10AllOver As DataColumn
        
        Private columnArticle10LastProcessed As DataColumn
        
        Private columnArticle10LastWithin As DataColumn
        
        Private columnArticle10LastBetween As DataColumn
        
        Private columnArticle10LastOver As DataColumn
        
        Private columnArticle30WithinHeading As DataColumn
        
        Private columnArticle30BetweenHeading As DataColumn
        
        Private columnArticle30OverHeading As DataColumn
        
        Private columnArticle30AllProcessed As DataColumn
        
        Private columnArticle30AllWithin As DataColumn
        
        Private columnArticle30AllBetween As DataColumn
        
        Private columnArticle30AllOver As DataColumn
        
        Private columnArticle30LastProcessed As DataColumn
        
        Private columnArticle30LastWithin As DataColumn
        
        Private columnArticle30LastBetween As DataColumn
        
        Private columnArticle30LastOver As DataColumn
        
        Friend Sub New()
            MyBase.New("BOServiceLevelsReferral")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TotalsWithinHeadingColumn As DataColumn
            Get
                Return Me.columnTotalsWithinHeading
            End Get
        End Property
        
        Friend ReadOnly Property TotalsBetweenHeadingColumn As DataColumn
            Get
                Return Me.columnTotalsBetweenHeading
            End Get
        End Property
        
        Friend ReadOnly Property TotalsOverHeadingColumn As DataColumn
            Get
                Return Me.columnTotalsOverHeading
            End Get
        End Property
        
        Friend ReadOnly Property TotalsHeadingColumn As DataColumn
            Get
                Return Me.columnTotalsHeading
            End Get
        End Property
        
        Friend ReadOnly Property TotalsAllProcessedColumn As DataColumn
            Get
                Return Me.columnTotalsAllProcessed
            End Get
        End Property
        
        Friend ReadOnly Property TotalsAllWithinColumn As DataColumn
            Get
                Return Me.columnTotalsAllWithin
            End Get
        End Property
        
        Friend ReadOnly Property TotalsAllBetweenColumn As DataColumn
            Get
                Return Me.columnTotalsAllBetween
            End Get
        End Property
        
        Friend ReadOnly Property TotalsAllOverColumn As DataColumn
            Get
                Return Me.columnTotalsAllOver
            End Get
        End Property
        
        Friend ReadOnly Property TotalsLastProcessedColumn As DataColumn
            Get
                Return Me.columnTotalsLastProcessed
            End Get
        End Property
        
        Friend ReadOnly Property TotalsLastWithinColumn As DataColumn
            Get
                Return Me.columnTotalsLastWithin
            End Get
        End Property
        
        Friend ReadOnly Property TotalsLastBetweenColumn As DataColumn
            Get
                Return Me.columnTotalsLastBetween
            End Get
        End Property
        
        Friend ReadOnly Property TotalsLastOverColumn As DataColumn
            Get
                Return Me.columnTotalsLastOver
            End Get
        End Property
        
        Friend ReadOnly Property ExportWithinHeadingColumn As DataColumn
            Get
                Return Me.columnExportWithinHeading
            End Get
        End Property
        
        Friend ReadOnly Property ExportBetweenHeadingColumn As DataColumn
            Get
                Return Me.columnExportBetweenHeading
            End Get
        End Property
        
        Friend ReadOnly Property ExportOverHeadingColumn As DataColumn
            Get
                Return Me.columnExportOverHeading
            End Get
        End Property
        
        Friend ReadOnly Property ExportAllProcessedColumn As DataColumn
            Get
                Return Me.columnExportAllProcessed
            End Get
        End Property
        
        Friend ReadOnly Property ExportAllWithinColumn As DataColumn
            Get
                Return Me.columnExportAllWithin
            End Get
        End Property
        
        Friend ReadOnly Property ExportAllBetweenColumn As DataColumn
            Get
                Return Me.columnExportAllBetween
            End Get
        End Property
        
        Friend ReadOnly Property ExportAllOverColumn As DataColumn
            Get
                Return Me.columnExportAllOver
            End Get
        End Property
        
        Friend ReadOnly Property ExportLastProcessedColumn As DataColumn
            Get
                Return Me.columnExportLastProcessed
            End Get
        End Property
        
        Friend ReadOnly Property ExportLastWithinColumn As DataColumn
            Get
                Return Me.columnExportLastWithin
            End Get
        End Property
        
        Friend ReadOnly Property ExportLastBetweenColumn As DataColumn
            Get
                Return Me.columnExportLastBetween
            End Get
        End Property
        
        Friend ReadOnly Property ExportLastOverColumn As DataColumn
            Get
                Return Me.columnExportLastOver
            End Get
        End Property
        
        Friend ReadOnly Property ImportWithinHeadingColumn As DataColumn
            Get
                Return Me.columnImportWithinHeading
            End Get
        End Property
        
        Friend ReadOnly Property ImportBetweenHeadingColumn As DataColumn
            Get
                Return Me.columnImportBetweenHeading
            End Get
        End Property
        
        Friend ReadOnly Property ImportOverHeadingColumn As DataColumn
            Get
                Return Me.columnImportOverHeading
            End Get
        End Property
        
        Friend ReadOnly Property ImportAllProcessedColumn As DataColumn
            Get
                Return Me.columnImportAllProcessed
            End Get
        End Property
        
        Friend ReadOnly Property ImportAllWithinColumn As DataColumn
            Get
                Return Me.columnImportAllWithin
            End Get
        End Property
        
        Friend ReadOnly Property ImportAllBetweenColumn As DataColumn
            Get
                Return Me.columnImportAllBetween
            End Get
        End Property
        
        Friend ReadOnly Property ImportAllOverColumn As DataColumn
            Get
                Return Me.columnImportAllOver
            End Get
        End Property
        
        Friend ReadOnly Property ImportLastProcessedColumn As DataColumn
            Get
                Return Me.columnImportLastProcessed
            End Get
        End Property
        
        Friend ReadOnly Property ImportLastWithinColumn As DataColumn
            Get
                Return Me.columnImportLastWithin
            End Get
        End Property
        
        Friend ReadOnly Property ImportLastBetweenColumn As DataColumn
            Get
                Return Me.columnImportLastBetween
            End Get
        End Property
        
        Friend ReadOnly Property ImportLastOverColumn As DataColumn
            Get
                Return Me.columnImportLastOver
            End Get
        End Property
        
        Friend ReadOnly Property Article10WithinHeadingColumn As DataColumn
            Get
                Return Me.columnArticle10WithinHeading
            End Get
        End Property
        
        Friend ReadOnly Property Article10BetweenHeadingColumn As DataColumn
            Get
                Return Me.columnArticle10BetweenHeading
            End Get
        End Property
        
        Friend ReadOnly Property Article10OverHeadingColumn As DataColumn
            Get
                Return Me.columnArticle10OverHeading
            End Get
        End Property
        
        Friend ReadOnly Property Article10AllProcessedColumn As DataColumn
            Get
                Return Me.columnArticle10AllProcessed
            End Get
        End Property
        
        Friend ReadOnly Property Article10AllWithinColumn As DataColumn
            Get
                Return Me.columnArticle10AllWithin
            End Get
        End Property
        
        Friend ReadOnly Property Article10AllBetweenColumn As DataColumn
            Get
                Return Me.columnArticle10AllBetween
            End Get
        End Property
        
        Friend ReadOnly Property Article10AllOverColumn As DataColumn
            Get
                Return Me.columnArticle10AllOver
            End Get
        End Property
        
        Friend ReadOnly Property Article10LastProcessedColumn As DataColumn
            Get
                Return Me.columnArticle10LastProcessed
            End Get
        End Property
        
        Friend ReadOnly Property Article10LastWithinColumn As DataColumn
            Get
                Return Me.columnArticle10LastWithin
            End Get
        End Property
        
        Friend ReadOnly Property Article10LastBetweenColumn As DataColumn
            Get
                Return Me.columnArticle10LastBetween
            End Get
        End Property
        
        Friend ReadOnly Property Article10LastOverColumn As DataColumn
            Get
                Return Me.columnArticle10LastOver
            End Get
        End Property
        
        Friend ReadOnly Property Article30WithinHeadingColumn As DataColumn
            Get
                Return Me.columnArticle30WithinHeading
            End Get
        End Property
        
        Friend ReadOnly Property Article30BetweenHeadingColumn As DataColumn
            Get
                Return Me.columnArticle30BetweenHeading
            End Get
        End Property
        
        Friend ReadOnly Property Article30OverHeadingColumn As DataColumn
            Get
                Return Me.columnArticle30OverHeading
            End Get
        End Property
        
        Friend ReadOnly Property Article30AllProcessedColumn As DataColumn
            Get
                Return Me.columnArticle30AllProcessed
            End Get
        End Property
        
        Friend ReadOnly Property Article30AllWithinColumn As DataColumn
            Get
                Return Me.columnArticle30AllWithin
            End Get
        End Property
        
        Friend ReadOnly Property Article30AllBetweenColumn As DataColumn
            Get
                Return Me.columnArticle30AllBetween
            End Get
        End Property
        
        Friend ReadOnly Property Article30AllOverColumn As DataColumn
            Get
                Return Me.columnArticle30AllOver
            End Get
        End Property
        
        Friend ReadOnly Property Article30LastProcessedColumn As DataColumn
            Get
                Return Me.columnArticle30LastProcessed
            End Get
        End Property
        
        Friend ReadOnly Property Article30LastWithinColumn As DataColumn
            Get
                Return Me.columnArticle30LastWithin
            End Get
        End Property
        
        Friend ReadOnly Property Article30LastBetweenColumn As DataColumn
            Get
                Return Me.columnArticle30LastBetween
            End Get
        End Property
        
        Friend ReadOnly Property Article30LastOverColumn As DataColumn
            Get
                Return Me.columnArticle30LastOver
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOServiceLevelsReferralRow
            Get
                Return CType(Me.Rows(index),BOServiceLevelsReferralRow)
            End Get
        End Property
        
        Public Event BOServiceLevelsReferralRowChanged As BOServiceLevelsReferralRowChangeEventHandler
        
        Public Event BOServiceLevelsReferralRowChanging As BOServiceLevelsReferralRowChangeEventHandler
        
        Public Event BOServiceLevelsReferralRowDeleted As BOServiceLevelsReferralRowChangeEventHandler
        
        Public Event BOServiceLevelsReferralRowDeleting As BOServiceLevelsReferralRowChangeEventHandler
        
        Public Overloads Sub AddBOServiceLevelsReferralRow(ByVal row As BOServiceLevelsReferralRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOServiceLevelsReferralRow( _
                    ByVal TotalsWithinHeading As String,  _
                    ByVal TotalsBetweenHeading As String,  _
                    ByVal TotalsOverHeading As String,  _
                    ByVal TotalsHeading As String,  _
                    ByVal TotalsAllProcessed As String,  _
                    ByVal TotalsAllWithin As String,  _
                    ByVal TotalsAllBetween As String,  _
                    ByVal TotalsAllOver As String,  _
                    ByVal TotalsLastProcessed As String,  _
                    ByVal TotalsLastWithin As String,  _
                    ByVal TotalsLastBetween As String,  _
                    ByVal TotalsLastOver As String,  _
                    ByVal ExportWithinHeading As String,  _
                    ByVal ExportBetweenHeading As String,  _
                    ByVal ExportOverHeading As String,  _
                    ByVal ExportAllProcessed As String,  _
                    ByVal ExportAllWithin As String,  _
                    ByVal ExportAllBetween As String,  _
                    ByVal ExportAllOver As String,  _
                    ByVal ExportLastProcessed As String,  _
                    ByVal ExportLastWithin As String,  _
                    ByVal ExportLastBetween As String,  _
                    ByVal ExportLastOver As String,  _
                    ByVal ImportWithinHeading As String,  _
                    ByVal ImportBetweenHeading As String,  _
                    ByVal ImportOverHeading As String,  _
                    ByVal ImportAllProcessed As String,  _
                    ByVal ImportAllWithin As String,  _
                    ByVal ImportAllBetween As String,  _
                    ByVal ImportAllOver As String,  _
                    ByVal ImportLastProcessed As String,  _
                    ByVal ImportLastWithin As String,  _
                    ByVal ImportLastBetween As String,  _
                    ByVal ImportLastOver As String,  _
                    ByVal Article10WithinHeading As String,  _
                    ByVal Article10BetweenHeading As String,  _
                    ByVal Article10OverHeading As String,  _
                    ByVal Article10AllProcessed As String,  _
                    ByVal Article10AllWithin As String,  _
                    ByVal Article10AllBetween As String,  _
                    ByVal Article10AllOver As String,  _
                    ByVal Article10LastProcessed As String,  _
                    ByVal Article10LastWithin As String,  _
                    ByVal Article10LastBetween As String,  _
                    ByVal Article10LastOver As String,  _
                    ByVal Article30WithinHeading As String,  _
                    ByVal Article30BetweenHeading As String,  _
                    ByVal Article30OverHeading As String,  _
                    ByVal Article30AllProcessed As String,  _
                    ByVal Article30AllWithin As String,  _
                    ByVal Article30AllBetween As String,  _
                    ByVal Article30AllOver As String,  _
                    ByVal Article30LastProcessed As String,  _
                    ByVal Article30LastWithin As String,  _
                    ByVal Article30LastBetween As String,  _
                    ByVal Article30LastOver As String) As BOServiceLevelsReferralRow
            Dim rowBOServiceLevelsReferralRow As BOServiceLevelsReferralRow = CType(Me.NewRow,BOServiceLevelsReferralRow)
            rowBOServiceLevelsReferralRow.ItemArray = New Object() {TotalsWithinHeading, TotalsBetweenHeading, TotalsOverHeading, TotalsHeading, TotalsAllProcessed, TotalsAllWithin, TotalsAllBetween, TotalsAllOver, TotalsLastProcessed, TotalsLastWithin, TotalsLastBetween, TotalsLastOver, ExportWithinHeading, ExportBetweenHeading, ExportOverHeading, ExportAllProcessed, ExportAllWithin, ExportAllBetween, ExportAllOver, ExportLastProcessed, ExportLastWithin, ExportLastBetween, ExportLastOver, ImportWithinHeading, ImportBetweenHeading, ImportOverHeading, ImportAllProcessed, ImportAllWithin, ImportAllBetween, ImportAllOver, ImportLastProcessed, ImportLastWithin, ImportLastBetween, ImportLastOver, Article10WithinHeading, Article10BetweenHeading, Article10OverHeading, Article10AllProcessed, Article10AllWithin, Article10AllBetween, Article10AllOver, Article10LastProcessed, Article10LastWithin, Article10LastBetween, Article10LastOver, Article30WithinHeading, Article30BetweenHeading, Article30OverHeading, Article30AllProcessed, Article30AllWithin, Article30AllBetween, Article30AllOver, Article30LastProcessed, Article30LastWithin, Article30LastBetween, Article30LastOver}
            Me.Rows.Add(rowBOServiceLevelsReferralRow)
            Return rowBOServiceLevelsReferralRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOServiceLevelsReferralDataTable = CType(MyBase.Clone,BOServiceLevelsReferralDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOServiceLevelsReferralDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTotalsWithinHeading = Me.Columns("TotalsWithinHeading")
            Me.columnTotalsBetweenHeading = Me.Columns("TotalsBetweenHeading")
            Me.columnTotalsOverHeading = Me.Columns("TotalsOverHeading")
            Me.columnTotalsHeading = Me.Columns("TotalsHeading")
            Me.columnTotalsAllProcessed = Me.Columns("TotalsAllProcessed")
            Me.columnTotalsAllWithin = Me.Columns("TotalsAllWithin")
            Me.columnTotalsAllBetween = Me.Columns("TotalsAllBetween")
            Me.columnTotalsAllOver = Me.Columns("TotalsAllOver")
            Me.columnTotalsLastProcessed = Me.Columns("TotalsLastProcessed")
            Me.columnTotalsLastWithin = Me.Columns("TotalsLastWithin")
            Me.columnTotalsLastBetween = Me.Columns("TotalsLastBetween")
            Me.columnTotalsLastOver = Me.Columns("TotalsLastOver")
            Me.columnExportWithinHeading = Me.Columns("ExportWithinHeading")
            Me.columnExportBetweenHeading = Me.Columns("ExportBetweenHeading")
            Me.columnExportOverHeading = Me.Columns("ExportOverHeading")
            Me.columnExportAllProcessed = Me.Columns("ExportAllProcessed")
            Me.columnExportAllWithin = Me.Columns("ExportAllWithin")
            Me.columnExportAllBetween = Me.Columns("ExportAllBetween")
            Me.columnExportAllOver = Me.Columns("ExportAllOver")
            Me.columnExportLastProcessed = Me.Columns("ExportLastProcessed")
            Me.columnExportLastWithin = Me.Columns("ExportLastWithin")
            Me.columnExportLastBetween = Me.Columns("ExportLastBetween")
            Me.columnExportLastOver = Me.Columns("ExportLastOver")
            Me.columnImportWithinHeading = Me.Columns("ImportWithinHeading")
            Me.columnImportBetweenHeading = Me.Columns("ImportBetweenHeading")
            Me.columnImportOverHeading = Me.Columns("ImportOverHeading")
            Me.columnImportAllProcessed = Me.Columns("ImportAllProcessed")
            Me.columnImportAllWithin = Me.Columns("ImportAllWithin")
            Me.columnImportAllBetween = Me.Columns("ImportAllBetween")
            Me.columnImportAllOver = Me.Columns("ImportAllOver")
            Me.columnImportLastProcessed = Me.Columns("ImportLastProcessed")
            Me.columnImportLastWithin = Me.Columns("ImportLastWithin")
            Me.columnImportLastBetween = Me.Columns("ImportLastBetween")
            Me.columnImportLastOver = Me.Columns("ImportLastOver")
            Me.columnArticle10WithinHeading = Me.Columns("Article10WithinHeading")
            Me.columnArticle10BetweenHeading = Me.Columns("Article10BetweenHeading")
            Me.columnArticle10OverHeading = Me.Columns("Article10OverHeading")
            Me.columnArticle10AllProcessed = Me.Columns("Article10AllProcessed")
            Me.columnArticle10AllWithin = Me.Columns("Article10AllWithin")
            Me.columnArticle10AllBetween = Me.Columns("Article10AllBetween")
            Me.columnArticle10AllOver = Me.Columns("Article10AllOver")
            Me.columnArticle10LastProcessed = Me.Columns("Article10LastProcessed")
            Me.columnArticle10LastWithin = Me.Columns("Article10LastWithin")
            Me.columnArticle10LastBetween = Me.Columns("Article10LastBetween")
            Me.columnArticle10LastOver = Me.Columns("Article10LastOver")
            Me.columnArticle30WithinHeading = Me.Columns("Article30WithinHeading")
            Me.columnArticle30BetweenHeading = Me.Columns("Article30BetweenHeading")
            Me.columnArticle30OverHeading = Me.Columns("Article30OverHeading")
            Me.columnArticle30AllProcessed = Me.Columns("Article30AllProcessed")
            Me.columnArticle30AllWithin = Me.Columns("Article30AllWithin")
            Me.columnArticle30AllBetween = Me.Columns("Article30AllBetween")
            Me.columnArticle30AllOver = Me.Columns("Article30AllOver")
            Me.columnArticle30LastProcessed = Me.Columns("Article30LastProcessed")
            Me.columnArticle30LastWithin = Me.Columns("Article30LastWithin")
            Me.columnArticle30LastBetween = Me.Columns("Article30LastBetween")
            Me.columnArticle30LastOver = Me.Columns("Article30LastOver")
        End Sub
        
        Private Sub InitClass()
            Me.columnTotalsWithinHeading = New DataColumn("TotalsWithinHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsWithinHeading)
            Me.columnTotalsBetweenHeading = New DataColumn("TotalsBetweenHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsBetweenHeading)
            Me.columnTotalsOverHeading = New DataColumn("TotalsOverHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsOverHeading)
            Me.columnTotalsHeading = New DataColumn("TotalsHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsHeading)
            Me.columnTotalsAllProcessed = New DataColumn("TotalsAllProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsAllProcessed)
            Me.columnTotalsAllWithin = New DataColumn("TotalsAllWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsAllWithin)
            Me.columnTotalsAllBetween = New DataColumn("TotalsAllBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsAllBetween)
            Me.columnTotalsAllOver = New DataColumn("TotalsAllOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsAllOver)
            Me.columnTotalsLastProcessed = New DataColumn("TotalsLastProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsLastProcessed)
            Me.columnTotalsLastWithin = New DataColumn("TotalsLastWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsLastWithin)
            Me.columnTotalsLastBetween = New DataColumn("TotalsLastBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsLastBetween)
            Me.columnTotalsLastOver = New DataColumn("TotalsLastOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalsLastOver)
            Me.columnExportWithinHeading = New DataColumn("ExportWithinHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportWithinHeading)
            Me.columnExportBetweenHeading = New DataColumn("ExportBetweenHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportBetweenHeading)
            Me.columnExportOverHeading = New DataColumn("ExportOverHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportOverHeading)
            Me.columnExportAllProcessed = New DataColumn("ExportAllProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportAllProcessed)
            Me.columnExportAllWithin = New DataColumn("ExportAllWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportAllWithin)
            Me.columnExportAllBetween = New DataColumn("ExportAllBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportAllBetween)
            Me.columnExportAllOver = New DataColumn("ExportAllOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportAllOver)
            Me.columnExportLastProcessed = New DataColumn("ExportLastProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportLastProcessed)
            Me.columnExportLastWithin = New DataColumn("ExportLastWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportLastWithin)
            Me.columnExportLastBetween = New DataColumn("ExportLastBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportLastBetween)
            Me.columnExportLastOver = New DataColumn("ExportLastOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportLastOver)
            Me.columnImportWithinHeading = New DataColumn("ImportWithinHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportWithinHeading)
            Me.columnImportBetweenHeading = New DataColumn("ImportBetweenHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportBetweenHeading)
            Me.columnImportOverHeading = New DataColumn("ImportOverHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportOverHeading)
            Me.columnImportAllProcessed = New DataColumn("ImportAllProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportAllProcessed)
            Me.columnImportAllWithin = New DataColumn("ImportAllWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportAllWithin)
            Me.columnImportAllBetween = New DataColumn("ImportAllBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportAllBetween)
            Me.columnImportAllOver = New DataColumn("ImportAllOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportAllOver)
            Me.columnImportLastProcessed = New DataColumn("ImportLastProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportLastProcessed)
            Me.columnImportLastWithin = New DataColumn("ImportLastWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportLastWithin)
            Me.columnImportLastBetween = New DataColumn("ImportLastBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportLastBetween)
            Me.columnImportLastOver = New DataColumn("ImportLastOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportLastOver)
            Me.columnArticle10WithinHeading = New DataColumn("Article10WithinHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10WithinHeading)
            Me.columnArticle10BetweenHeading = New DataColumn("Article10BetweenHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10BetweenHeading)
            Me.columnArticle10OverHeading = New DataColumn("Article10OverHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10OverHeading)
            Me.columnArticle10AllProcessed = New DataColumn("Article10AllProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10AllProcessed)
            Me.columnArticle10AllWithin = New DataColumn("Article10AllWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10AllWithin)
            Me.columnArticle10AllBetween = New DataColumn("Article10AllBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10AllBetween)
            Me.columnArticle10AllOver = New DataColumn("Article10AllOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10AllOver)
            Me.columnArticle10LastProcessed = New DataColumn("Article10LastProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10LastProcessed)
            Me.columnArticle10LastWithin = New DataColumn("Article10LastWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10LastWithin)
            Me.columnArticle10LastBetween = New DataColumn("Article10LastBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10LastBetween)
            Me.columnArticle10LastOver = New DataColumn("Article10LastOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10LastOver)
            Me.columnArticle30WithinHeading = New DataColumn("Article30WithinHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30WithinHeading)
            Me.columnArticle30BetweenHeading = New DataColumn("Article30BetweenHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30BetweenHeading)
            Me.columnArticle30OverHeading = New DataColumn("Article30OverHeading", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30OverHeading)
            Me.columnArticle30AllProcessed = New DataColumn("Article30AllProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30AllProcessed)
            Me.columnArticle30AllWithin = New DataColumn("Article30AllWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30AllWithin)
            Me.columnArticle30AllBetween = New DataColumn("Article30AllBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30AllBetween)
            Me.columnArticle30AllOver = New DataColumn("Article30AllOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30AllOver)
            Me.columnArticle30LastProcessed = New DataColumn("Article30LastProcessed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30LastProcessed)
            Me.columnArticle30LastWithin = New DataColumn("Article30LastWithin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30LastWithin)
            Me.columnArticle30LastBetween = New DataColumn("Article30LastBetween", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30LastBetween)
            Me.columnArticle30LastOver = New DataColumn("Article30LastOver", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle30LastOver)
        End Sub
        
        Public Function NewBOServiceLevelsReferralRow() As BOServiceLevelsReferralRow
            Return CType(Me.NewRow,BOServiceLevelsReferralRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOServiceLevelsReferralRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOServiceLevelsReferralRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOServiceLevelsReferralRowChangedEvent) Is Nothing) Then
                RaiseEvent BOServiceLevelsReferralRowChanged(Me, New BOServiceLevelsReferralRowChangeEvent(CType(e.Row,BOServiceLevelsReferralRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOServiceLevelsReferralRowChangingEvent) Is Nothing) Then
                RaiseEvent BOServiceLevelsReferralRowChanging(Me, New BOServiceLevelsReferralRowChangeEvent(CType(e.Row,BOServiceLevelsReferralRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOServiceLevelsReferralRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOServiceLevelsReferralRowDeleted(Me, New BOServiceLevelsReferralRowChangeEvent(CType(e.Row,BOServiceLevelsReferralRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOServiceLevelsReferralRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOServiceLevelsReferralRowDeleting(Me, New BOServiceLevelsReferralRowChangeEvent(CType(e.Row,BOServiceLevelsReferralRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOServiceLevelsReferralRow(ByVal row As BOServiceLevelsReferralRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOServiceLevelsReferralRow
        Inherits DataRow
        
        Private tableBOServiceLevelsReferral As BOServiceLevelsReferralDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOServiceLevelsReferral = CType(Me.Table,BOServiceLevelsReferralDataTable)
        End Sub
        
        Public Property TotalsWithinHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsWithinHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsWithinHeadingColumn) = value
            End Set
        End Property
        
        Public Property TotalsBetweenHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsBetweenHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsBetweenHeadingColumn) = value
            End Set
        End Property
        
        Public Property TotalsOverHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsOverHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsOverHeadingColumn) = value
            End Set
        End Property
        
        Public Property TotalsHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsHeadingColumn) = value
            End Set
        End Property
        
        Public Property TotalsAllProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsAllProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsAllProcessedColumn) = value
            End Set
        End Property
        
        Public Property TotalsAllWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsAllWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsAllWithinColumn) = value
            End Set
        End Property
        
        Public Property TotalsAllBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsAllBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsAllBetweenColumn) = value
            End Set
        End Property
        
        Public Property TotalsAllOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsAllOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsAllOverColumn) = value
            End Set
        End Property
        
        Public Property TotalsLastProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsLastProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsLastProcessedColumn) = value
            End Set
        End Property
        
        Public Property TotalsLastWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsLastWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsLastWithinColumn) = value
            End Set
        End Property
        
        Public Property TotalsLastBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsLastBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsLastBetweenColumn) = value
            End Set
        End Property
        
        Public Property TotalsLastOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.TotalsLastOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.TotalsLastOverColumn) = value
            End Set
        End Property
        
        Public Property ExportWithinHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportWithinHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportWithinHeadingColumn) = value
            End Set
        End Property
        
        Public Property ExportBetweenHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportBetweenHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportBetweenHeadingColumn) = value
            End Set
        End Property
        
        Public Property ExportOverHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportOverHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportOverHeadingColumn) = value
            End Set
        End Property
        
        Public Property ExportAllProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportAllProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportAllProcessedColumn) = value
            End Set
        End Property
        
        Public Property ExportAllWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportAllWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportAllWithinColumn) = value
            End Set
        End Property
        
        Public Property ExportAllBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportAllBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportAllBetweenColumn) = value
            End Set
        End Property
        
        Public Property ExportAllOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportAllOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportAllOverColumn) = value
            End Set
        End Property
        
        Public Property ExportLastProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportLastProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportLastProcessedColumn) = value
            End Set
        End Property
        
        Public Property ExportLastWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportLastWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportLastWithinColumn) = value
            End Set
        End Property
        
        Public Property ExportLastBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportLastBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportLastBetweenColumn) = value
            End Set
        End Property
        
        Public Property ExportLastOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ExportLastOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ExportLastOverColumn) = value
            End Set
        End Property
        
        Public Property ImportWithinHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportWithinHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportWithinHeadingColumn) = value
            End Set
        End Property
        
        Public Property ImportBetweenHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportBetweenHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportBetweenHeadingColumn) = value
            End Set
        End Property
        
        Public Property ImportOverHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportOverHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportOverHeadingColumn) = value
            End Set
        End Property
        
        Public Property ImportAllProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportAllProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportAllProcessedColumn) = value
            End Set
        End Property
        
        Public Property ImportAllWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportAllWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportAllWithinColumn) = value
            End Set
        End Property
        
        Public Property ImportAllBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportAllBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportAllBetweenColumn) = value
            End Set
        End Property
        
        Public Property ImportAllOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportAllOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportAllOverColumn) = value
            End Set
        End Property
        
        Public Property ImportLastProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportLastProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportLastProcessedColumn) = value
            End Set
        End Property
        
        Public Property ImportLastWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportLastWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportLastWithinColumn) = value
            End Set
        End Property
        
        Public Property ImportLastBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportLastBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportLastBetweenColumn) = value
            End Set
        End Property
        
        Public Property ImportLastOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.ImportLastOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.ImportLastOverColumn) = value
            End Set
        End Property
        
        Public Property Article10WithinHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10WithinHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10WithinHeadingColumn) = value
            End Set
        End Property
        
        Public Property Article10BetweenHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10BetweenHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10BetweenHeadingColumn) = value
            End Set
        End Property
        
        Public Property Article10OverHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10OverHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10OverHeadingColumn) = value
            End Set
        End Property
        
        Public Property Article10AllProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10AllProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10AllProcessedColumn) = value
            End Set
        End Property
        
        Public Property Article10AllWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10AllWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10AllWithinColumn) = value
            End Set
        End Property
        
        Public Property Article10AllBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10AllBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10AllBetweenColumn) = value
            End Set
        End Property
        
        Public Property Article10AllOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10AllOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10AllOverColumn) = value
            End Set
        End Property
        
        Public Property Article10LastProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10LastProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10LastProcessedColumn) = value
            End Set
        End Property
        
        Public Property Article10LastWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10LastWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10LastWithinColumn) = value
            End Set
        End Property
        
        Public Property Article10LastBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10LastBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10LastBetweenColumn) = value
            End Set
        End Property
        
        Public Property Article10LastOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article10LastOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article10LastOverColumn) = value
            End Set
        End Property
        
        Public Property Article30WithinHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30WithinHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30WithinHeadingColumn) = value
            End Set
        End Property
        
        Public Property Article30BetweenHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30BetweenHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30BetweenHeadingColumn) = value
            End Set
        End Property
        
        Public Property Article30OverHeading As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30OverHeadingColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30OverHeadingColumn) = value
            End Set
        End Property
        
        Public Property Article30AllProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30AllProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30AllProcessedColumn) = value
            End Set
        End Property
        
        Public Property Article30AllWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30AllWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30AllWithinColumn) = value
            End Set
        End Property
        
        Public Property Article30AllBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30AllBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30AllBetweenColumn) = value
            End Set
        End Property
        
        Public Property Article30AllOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30AllOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30AllOverColumn) = value
            End Set
        End Property
        
        Public Property Article30LastProcessed As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30LastProcessedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30LastProcessedColumn) = value
            End Set
        End Property
        
        Public Property Article30LastWithin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30LastWithinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30LastWithinColumn) = value
            End Set
        End Property
        
        Public Property Article30LastBetween As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30LastBetweenColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30LastBetweenColumn) = value
            End Set
        End Property
        
        Public Property Article30LastOver As String
            Get
                Try 
                    Return CType(Me(Me.tableBOServiceLevelsReferral.Article30LastOverColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOServiceLevelsReferral.Article30LastOverColumn) = value
            End Set
        End Property
        
        Public Function IsTotalsWithinHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsWithinHeadingColumn)
        End Function
        
        Public Sub SetTotalsWithinHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsWithinHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsBetweenHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsBetweenHeadingColumn)
        End Function
        
        Public Sub SetTotalsBetweenHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsBetweenHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsOverHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsOverHeadingColumn)
        End Function
        
        Public Sub SetTotalsOverHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsOverHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsHeadingColumn)
        End Function
        
        Public Sub SetTotalsHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsAllProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsAllProcessedColumn)
        End Function
        
        Public Sub SetTotalsAllProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsAllProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsAllWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsAllWithinColumn)
        End Function
        
        Public Sub SetTotalsAllWithinNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsAllWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsAllBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsAllBetweenColumn)
        End Function
        
        Public Sub SetTotalsAllBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsAllBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsAllOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsAllOverColumn)
        End Function
        
        Public Sub SetTotalsAllOverNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsAllOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsLastProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsLastProcessedColumn)
        End Function
        
        Public Sub SetTotalsLastProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsLastProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsLastWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsLastWithinColumn)
        End Function
        
        Public Sub SetTotalsLastWithinNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsLastWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsLastBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsLastBetweenColumn)
        End Function
        
        Public Sub SetTotalsLastBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsLastBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalsLastOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.TotalsLastOverColumn)
        End Function
        
        Public Sub SetTotalsLastOverNull()
            Me(Me.tableBOServiceLevelsReferral.TotalsLastOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportWithinHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportWithinHeadingColumn)
        End Function
        
        Public Sub SetExportWithinHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.ExportWithinHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportBetweenHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportBetweenHeadingColumn)
        End Function
        
        Public Sub SetExportBetweenHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.ExportBetweenHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportOverHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportOverHeadingColumn)
        End Function
        
        Public Sub SetExportOverHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.ExportOverHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportAllProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportAllProcessedColumn)
        End Function
        
        Public Sub SetExportAllProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.ExportAllProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportAllWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportAllWithinColumn)
        End Function
        
        Public Sub SetExportAllWithinNull()
            Me(Me.tableBOServiceLevelsReferral.ExportAllWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportAllBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportAllBetweenColumn)
        End Function
        
        Public Sub SetExportAllBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.ExportAllBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportAllOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportAllOverColumn)
        End Function
        
        Public Sub SetExportAllOverNull()
            Me(Me.tableBOServiceLevelsReferral.ExportAllOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportLastProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportLastProcessedColumn)
        End Function
        
        Public Sub SetExportLastProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.ExportLastProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportLastWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportLastWithinColumn)
        End Function
        
        Public Sub SetExportLastWithinNull()
            Me(Me.tableBOServiceLevelsReferral.ExportLastWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportLastBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportLastBetweenColumn)
        End Function
        
        Public Sub SetExportLastBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.ExportLastBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportLastOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ExportLastOverColumn)
        End Function
        
        Public Sub SetExportLastOverNull()
            Me(Me.tableBOServiceLevelsReferral.ExportLastOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportWithinHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportWithinHeadingColumn)
        End Function
        
        Public Sub SetImportWithinHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.ImportWithinHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportBetweenHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportBetweenHeadingColumn)
        End Function
        
        Public Sub SetImportBetweenHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.ImportBetweenHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportOverHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportOverHeadingColumn)
        End Function
        
        Public Sub SetImportOverHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.ImportOverHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportAllProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportAllProcessedColumn)
        End Function
        
        Public Sub SetImportAllProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.ImportAllProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportAllWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportAllWithinColumn)
        End Function
        
        Public Sub SetImportAllWithinNull()
            Me(Me.tableBOServiceLevelsReferral.ImportAllWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportAllBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportAllBetweenColumn)
        End Function
        
        Public Sub SetImportAllBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.ImportAllBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportAllOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportAllOverColumn)
        End Function
        
        Public Sub SetImportAllOverNull()
            Me(Me.tableBOServiceLevelsReferral.ImportAllOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportLastProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportLastProcessedColumn)
        End Function
        
        Public Sub SetImportLastProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.ImportLastProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportLastWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportLastWithinColumn)
        End Function
        
        Public Sub SetImportLastWithinNull()
            Me(Me.tableBOServiceLevelsReferral.ImportLastWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportLastBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportLastBetweenColumn)
        End Function
        
        Public Sub SetImportLastBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.ImportLastBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportLastOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.ImportLastOverColumn)
        End Function
        
        Public Sub SetImportLastOverNull()
            Me(Me.tableBOServiceLevelsReferral.ImportLastOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10WithinHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10WithinHeadingColumn)
        End Function
        
        Public Sub SetArticle10WithinHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.Article10WithinHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10BetweenHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10BetweenHeadingColumn)
        End Function
        
        Public Sub SetArticle10BetweenHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.Article10BetweenHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10OverHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10OverHeadingColumn)
        End Function
        
        Public Sub SetArticle10OverHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.Article10OverHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10AllProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10AllProcessedColumn)
        End Function
        
        Public Sub SetArticle10AllProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.Article10AllProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10AllWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10AllWithinColumn)
        End Function
        
        Public Sub SetArticle10AllWithinNull()
            Me(Me.tableBOServiceLevelsReferral.Article10AllWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10AllBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10AllBetweenColumn)
        End Function
        
        Public Sub SetArticle10AllBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.Article10AllBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10AllOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10AllOverColumn)
        End Function
        
        Public Sub SetArticle10AllOverNull()
            Me(Me.tableBOServiceLevelsReferral.Article10AllOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10LastProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10LastProcessedColumn)
        End Function
        
        Public Sub SetArticle10LastProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.Article10LastProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10LastWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10LastWithinColumn)
        End Function
        
        Public Sub SetArticle10LastWithinNull()
            Me(Me.tableBOServiceLevelsReferral.Article10LastWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10LastBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10LastBetweenColumn)
        End Function
        
        Public Sub SetArticle10LastBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.Article10LastBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10LastOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article10LastOverColumn)
        End Function
        
        Public Sub SetArticle10LastOverNull()
            Me(Me.tableBOServiceLevelsReferral.Article10LastOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30WithinHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30WithinHeadingColumn)
        End Function
        
        Public Sub SetArticle30WithinHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.Article30WithinHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30BetweenHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30BetweenHeadingColumn)
        End Function
        
        Public Sub SetArticle30BetweenHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.Article30BetweenHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30OverHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30OverHeadingColumn)
        End Function
        
        Public Sub SetArticle30OverHeadingNull()
            Me(Me.tableBOServiceLevelsReferral.Article30OverHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30AllProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30AllProcessedColumn)
        End Function
        
        Public Sub SetArticle30AllProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.Article30AllProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30AllWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30AllWithinColumn)
        End Function
        
        Public Sub SetArticle30AllWithinNull()
            Me(Me.tableBOServiceLevelsReferral.Article30AllWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30AllBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30AllBetweenColumn)
        End Function
        
        Public Sub SetArticle30AllBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.Article30AllBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30AllOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30AllOverColumn)
        End Function
        
        Public Sub SetArticle30AllOverNull()
            Me(Me.tableBOServiceLevelsReferral.Article30AllOverColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30LastProcessedNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30LastProcessedColumn)
        End Function
        
        Public Sub SetArticle30LastProcessedNull()
            Me(Me.tableBOServiceLevelsReferral.Article30LastProcessedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30LastWithinNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30LastWithinColumn)
        End Function
        
        Public Sub SetArticle30LastWithinNull()
            Me(Me.tableBOServiceLevelsReferral.Article30LastWithinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30LastBetweenNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30LastBetweenColumn)
        End Function
        
        Public Sub SetArticle30LastBetweenNull()
            Me(Me.tableBOServiceLevelsReferral.Article30LastBetweenColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle30LastOverNull() As Boolean
            Return Me.IsNull(Me.tableBOServiceLevelsReferral.Article30LastOverColumn)
        End Function
        
        Public Sub SetArticle30LastOverNull()
            Me(Me.tableBOServiceLevelsReferral.Article30LastOverColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOServiceLevelsReferralRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOServiceLevelsReferralRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOServiceLevelsReferralRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOServiceLevelsReferralRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
