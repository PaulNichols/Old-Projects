'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class PaymentReceiptData
    Inherits DataSet
    
    Private tableBOPaymentReceipt As BOPaymentReceiptDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOPaymentReceipt")) Is Nothing) Then
                Me.Tables.Add(New BOPaymentReceiptDataTable(ds.Tables("BOPaymentReceipt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPaymentReceipt As BOPaymentReceiptDataTable
        Get
            Return Me.tableBOPaymentReceipt
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As PaymentReceiptData = CType(MyBase.Clone,PaymentReceiptData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOPaymentReceipt")) Is Nothing) Then
            Me.Tables.Add(New BOPaymentReceiptDataTable(ds.Tables("BOPaymentReceipt")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOPaymentReceipt = CType(Me.Tables("BOPaymentReceipt"),BOPaymentReceiptDataTable)
        If (Not (Me.tableBOPaymentReceipt) Is Nothing) Then
            Me.tableBOPaymentReceipt.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "PaymentReceiptData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PaymentReceiptData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOPaymentReceipt = New BOPaymentReceiptDataTable
        Me.Tables.Add(Me.tableBOPaymentReceipt)
    End Sub
    
    Private Function ShouldSerializeBOPaymentReceipt() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOPaymentReceiptRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPaymentReceiptRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPaymentReceiptDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicantNameAddress As DataColumn
        
        Private columnReceivedFrom As DataColumn
        
        Private columnIdNumber As DataColumn
        
        Private columnReceivedDay As DataColumn
        
        Private columnReceivedMonth As DataColumn
        
        Private columnReceivedYear As DataColumn
        
        Private columnPaymentReference As DataColumn
        
        Private columnPaymentMethod As DataColumn
        
        Private columnAmountReceived As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPaymentReceipt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicantNameAddressColumn As DataColumn
            Get
                Return Me.columnApplicantNameAddress
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedFromColumn As DataColumn
            Get
                Return Me.columnReceivedFrom
            End Get
        End Property
        
        Friend ReadOnly Property IdNumberColumn As DataColumn
            Get
                Return Me.columnIdNumber
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedDayColumn As DataColumn
            Get
                Return Me.columnReceivedDay
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedMonthColumn As DataColumn
            Get
                Return Me.columnReceivedMonth
            End Get
        End Property
        
        Friend ReadOnly Property ReceivedYearColumn As DataColumn
            Get
                Return Me.columnReceivedYear
            End Get
        End Property
        
        Friend ReadOnly Property PaymentReferenceColumn As DataColumn
            Get
                Return Me.columnPaymentReference
            End Get
        End Property
        
        Friend ReadOnly Property PaymentMethodColumn As DataColumn
            Get
                Return Me.columnPaymentMethod
            End Get
        End Property
        
        Friend ReadOnly Property AmountReceivedColumn As DataColumn
            Get
                Return Me.columnAmountReceived
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPaymentReceiptRow
            Get
                Return CType(Me.Rows(index),BOPaymentReceiptRow)
            End Get
        End Property
        
        Public Event BOPaymentReceiptRowChanged As BOPaymentReceiptRowChangeEventHandler
        
        Public Event BOPaymentReceiptRowChanging As BOPaymentReceiptRowChangeEventHandler
        
        Public Event BOPaymentReceiptRowDeleted As BOPaymentReceiptRowChangeEventHandler
        
        Public Event BOPaymentReceiptRowDeleting As BOPaymentReceiptRowChangeEventHandler
        
        Public Overloads Sub AddBOPaymentReceiptRow(ByVal row As BOPaymentReceiptRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPaymentReceiptRow(ByVal ApplicantNameAddress As String, ByVal ReceivedFrom As String, ByVal IdNumber As String, ByVal ReceivedDay As String, ByVal ReceivedMonth As String, ByVal ReceivedYear As String, ByVal PaymentReference As String, ByVal PaymentMethod As String, ByVal AmountReceived As String) As BOPaymentReceiptRow
            Dim rowBOPaymentReceiptRow As BOPaymentReceiptRow = CType(Me.NewRow,BOPaymentReceiptRow)
            rowBOPaymentReceiptRow.ItemArray = New Object() {ApplicantNameAddress, ReceivedFrom, IdNumber, ReceivedDay, ReceivedMonth, ReceivedYear, PaymentReference, PaymentMethod, AmountReceived}
            Me.Rows.Add(rowBOPaymentReceiptRow)
            Return rowBOPaymentReceiptRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPaymentReceiptDataTable = CType(MyBase.Clone,BOPaymentReceiptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPaymentReceiptDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicantNameAddress = Me.Columns("ApplicantNameAddress")
            Me.columnReceivedFrom = Me.Columns("ReceivedFrom")
            Me.columnIdNumber = Me.Columns("IdNumber")
            Me.columnReceivedDay = Me.Columns("ReceivedDay")
            Me.columnReceivedMonth = Me.Columns("ReceivedMonth")
            Me.columnReceivedYear = Me.Columns("ReceivedYear")
            Me.columnPaymentReference = Me.Columns("PaymentReference")
            Me.columnPaymentMethod = Me.Columns("PaymentMethod")
            Me.columnAmountReceived = Me.Columns("AmountReceived")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicantNameAddress = New DataColumn("ApplicantNameAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicantNameAddress)
            Me.columnReceivedFrom = New DataColumn("ReceivedFrom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceivedFrom)
            Me.columnIdNumber = New DataColumn("IdNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdNumber)
            Me.columnReceivedDay = New DataColumn("ReceivedDay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceivedDay)
            Me.columnReceivedMonth = New DataColumn("ReceivedMonth", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceivedMonth)
            Me.columnReceivedYear = New DataColumn("ReceivedYear", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceivedYear)
            Me.columnPaymentReference = New DataColumn("PaymentReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentReference)
            Me.columnPaymentMethod = New DataColumn("PaymentMethod", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPaymentMethod)
            Me.columnAmountReceived = New DataColumn("AmountReceived", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountReceived)
        End Sub
        
        Public Function NewBOPaymentReceiptRow() As BOPaymentReceiptRow
            Return CType(Me.NewRow,BOPaymentReceiptRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPaymentReceiptRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPaymentReceiptRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPaymentReceiptRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPaymentReceiptRowChanged(Me, New BOPaymentReceiptRowChangeEvent(CType(e.Row,BOPaymentReceiptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPaymentReceiptRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPaymentReceiptRowChanging(Me, New BOPaymentReceiptRowChangeEvent(CType(e.Row,BOPaymentReceiptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPaymentReceiptRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPaymentReceiptRowDeleted(Me, New BOPaymentReceiptRowChangeEvent(CType(e.Row,BOPaymentReceiptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPaymentReceiptRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPaymentReceiptRowDeleting(Me, New BOPaymentReceiptRowChangeEvent(CType(e.Row,BOPaymentReceiptRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPaymentReceiptRow(ByVal row As BOPaymentReceiptRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPaymentReceiptRow
        Inherits DataRow
        
        Private tableBOPaymentReceipt As BOPaymentReceiptDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPaymentReceipt = CType(Me.Table,BOPaymentReceiptDataTable)
        End Sub
        
        Public Property ApplicantNameAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.ApplicantNameAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.ApplicantNameAddressColumn) = value
            End Set
        End Property
        
        Public Property ReceivedFrom As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.ReceivedFromColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.ReceivedFromColumn) = value
            End Set
        End Property
        
        Public Property IdNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.IdNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.IdNumberColumn) = value
            End Set
        End Property
        
        Public Property ReceivedDay As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.ReceivedDayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.ReceivedDayColumn) = value
            End Set
        End Property
        
        Public Property ReceivedMonth As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.ReceivedMonthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.ReceivedMonthColumn) = value
            End Set
        End Property
        
        Public Property ReceivedYear As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.ReceivedYearColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.ReceivedYearColumn) = value
            End Set
        End Property
        
        Public Property PaymentReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.PaymentReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.PaymentReferenceColumn) = value
            End Set
        End Property
        
        Public Property PaymentMethod As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.PaymentMethodColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.PaymentMethodColumn) = value
            End Set
        End Property
        
        Public Property AmountReceived As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPaymentReceipt.AmountReceivedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPaymentReceipt.AmountReceivedColumn) = value
            End Set
        End Property
        
        Public Function IsApplicantNameAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.ApplicantNameAddressColumn)
        End Function
        
        Public Sub SetApplicantNameAddressNull()
            Me(Me.tableBOPaymentReceipt.ApplicantNameAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedFromNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.ReceivedFromColumn)
        End Function
        
        Public Sub SetReceivedFromNull()
            Me(Me.tableBOPaymentReceipt.ReceivedFromColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.IdNumberColumn)
        End Function
        
        Public Sub SetIdNumberNull()
            Me(Me.tableBOPaymentReceipt.IdNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedDayNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.ReceivedDayColumn)
        End Function
        
        Public Sub SetReceivedDayNull()
            Me(Me.tableBOPaymentReceipt.ReceivedDayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedMonthNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.ReceivedMonthColumn)
        End Function
        
        Public Sub SetReceivedMonthNull()
            Me(Me.tableBOPaymentReceipt.ReceivedMonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceivedYearNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.ReceivedYearColumn)
        End Function
        
        Public Sub SetReceivedYearNull()
            Me(Me.tableBOPaymentReceipt.ReceivedYearColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.PaymentReferenceColumn)
        End Function
        
        Public Sub SetPaymentReferenceNull()
            Me(Me.tableBOPaymentReceipt.PaymentReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaymentMethodNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.PaymentMethodColumn)
        End Function
        
        Public Sub SetPaymentMethodNull()
            Me(Me.tableBOPaymentReceipt.PaymentMethodColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountReceivedNull() As Boolean
            Return Me.IsNull(Me.tableBOPaymentReceipt.AmountReceivedColumn)
        End Function
        
        Public Sub SetAmountReceivedNull()
            Me(Me.tableBOPaymentReceipt.AmountReceivedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPaymentReceiptRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPaymentReceiptRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPaymentReceiptRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPaymentReceiptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
