'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class LimisMonthlyData
    Inherits DataSet
    
    Private tableBOAppTypeDetail As BOAppTypeDetailDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOAppTypeDetail")) Is Nothing) Then
                Me.Tables.Add(New BOAppTypeDetailDataTable(ds.Tables("BOAppTypeDetail")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOAppTypeDetail As BOAppTypeDetailDataTable
        Get
            Return Me.tableBOAppTypeDetail
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As LimisMonthlyData = CType(MyBase.Clone,LimisMonthlyData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOAppTypeDetail")) Is Nothing) Then
            Me.Tables.Add(New BOAppTypeDetailDataTable(ds.Tables("BOAppTypeDetail")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOAppTypeDetail = CType(Me.Tables("BOAppTypeDetail"),BOAppTypeDetailDataTable)
        If (Not (Me.tableBOAppTypeDetail) Is Nothing) Then
            Me.tableBOAppTypeDetail.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "LimisMonthlyData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LimisMonthlyData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOAppTypeDetail = New BOAppTypeDetailDataTable
        Me.Tables.Add(Me.tableBOAppTypeDetail)
    End Sub
    
    Private Function ShouldSerializeBOAppTypeDetail() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOAppTypeDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As BOAppTypeDetailRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOAppTypeDetailDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAppTypeId As DataColumn
        
        Private columnDescription As DataColumn
        
        Private columnActualNoOfApps As DataColumn
        
        Private columnDocsInTarget As DataColumn
        
        Private columnDocsOutOfTarget As DataColumn
        
        Private columnTotalNoOfDocs As DataColumn
        
        Private columnPercentDocsInTarget As DataColumn
        
        Private columnPageHeading As DataColumn
        
        Private columnAppTypeHeading As DataColumn
        
        Private columnSubTotalHeading As DataColumn
        
        Friend Sub New()
            MyBase.New("BOAppTypeDetail")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AppTypeIdColumn As DataColumn
            Get
                Return Me.columnAppTypeId
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property ActualNoOfAppsColumn As DataColumn
            Get
                Return Me.columnActualNoOfApps
            End Get
        End Property
        
        Friend ReadOnly Property DocsInTargetColumn As DataColumn
            Get
                Return Me.columnDocsInTarget
            End Get
        End Property
        
        Friend ReadOnly Property DocsOutOfTargetColumn As DataColumn
            Get
                Return Me.columnDocsOutOfTarget
            End Get
        End Property
        
        Friend ReadOnly Property TotalNoOfDocsColumn As DataColumn
            Get
                Return Me.columnTotalNoOfDocs
            End Get
        End Property
        
        Friend ReadOnly Property PercentDocsInTargetColumn As DataColumn
            Get
                Return Me.columnPercentDocsInTarget
            End Get
        End Property
        
        Friend ReadOnly Property PageHeadingColumn As DataColumn
            Get
                Return Me.columnPageHeading
            End Get
        End Property
        
        Friend ReadOnly Property AppTypeHeadingColumn As DataColumn
            Get
                Return Me.columnAppTypeHeading
            End Get
        End Property
        
        Friend ReadOnly Property SubTotalHeadingColumn As DataColumn
            Get
                Return Me.columnSubTotalHeading
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOAppTypeDetailRow
            Get
                Return CType(Me.Rows(index),BOAppTypeDetailRow)
            End Get
        End Property
        
        Public Event BOAppTypeDetailRowChanged As BOAppTypeDetailRowChangeEventHandler
        
        Public Event BOAppTypeDetailRowChanging As BOAppTypeDetailRowChangeEventHandler
        
        Public Event BOAppTypeDetailRowDeleted As BOAppTypeDetailRowChangeEventHandler
        
        Public Event BOAppTypeDetailRowDeleting As BOAppTypeDetailRowChangeEventHandler
        
        Public Overloads Sub AddBOAppTypeDetailRow(ByVal row As BOAppTypeDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOAppTypeDetailRow(ByVal AppTypeId As Long, ByVal Description As String, ByVal ActualNoOfApps As String, ByVal DocsInTarget As String, ByVal DocsOutOfTarget As String, ByVal TotalNoOfDocs As String, ByVal PercentDocsInTarget As String, ByVal PageHeading As Boolean, ByVal AppTypeHeading As Boolean, ByVal SubTotalHeading As Boolean) As BOAppTypeDetailRow
            Dim rowBOAppTypeDetailRow As BOAppTypeDetailRow = CType(Me.NewRow,BOAppTypeDetailRow)
            rowBOAppTypeDetailRow.ItemArray = New Object() {AppTypeId, Description, ActualNoOfApps, DocsInTarget, DocsOutOfTarget, TotalNoOfDocs, PercentDocsInTarget, PageHeading, AppTypeHeading, SubTotalHeading}
            Me.Rows.Add(rowBOAppTypeDetailRow)
            Return rowBOAppTypeDetailRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOAppTypeDetailDataTable = CType(MyBase.Clone,BOAppTypeDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOAppTypeDetailDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAppTypeId = Me.Columns("AppTypeId")
            Me.columnDescription = Me.Columns("Description")
            Me.columnActualNoOfApps = Me.Columns("ActualNoOfApps")
            Me.columnDocsInTarget = Me.Columns("DocsInTarget")
            Me.columnDocsOutOfTarget = Me.Columns("DocsOutOfTarget")
            Me.columnTotalNoOfDocs = Me.Columns("TotalNoOfDocs")
            Me.columnPercentDocsInTarget = Me.Columns("PercentDocsInTarget")
            Me.columnPageHeading = Me.Columns("PageHeading")
            Me.columnAppTypeHeading = Me.Columns("AppTypeHeading")
            Me.columnSubTotalHeading = Me.Columns("SubTotalHeading")
        End Sub
        
        Private Sub InitClass()
            Me.columnAppTypeId = New DataColumn("AppTypeId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppTypeId)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnActualNoOfApps = New DataColumn("ActualNoOfApps", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnActualNoOfApps)
            Me.columnDocsInTarget = New DataColumn("DocsInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocsInTarget)
            Me.columnDocsOutOfTarget = New DataColumn("DocsOutOfTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocsOutOfTarget)
            Me.columnTotalNoOfDocs = New DataColumn("TotalNoOfDocs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalNoOfDocs)
            Me.columnPercentDocsInTarget = New DataColumn("PercentDocsInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPercentDocsInTarget)
            Me.columnPageHeading = New DataColumn("PageHeading", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageHeading)
            Me.columnAppTypeHeading = New DataColumn("AppTypeHeading", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppTypeHeading)
            Me.columnSubTotalHeading = New DataColumn("SubTotalHeading", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubTotalHeading)
        End Sub
        
        Public Function NewBOAppTypeDetailRow() As BOAppTypeDetailRow
            Return CType(Me.NewRow,BOAppTypeDetailRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOAppTypeDetailRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOAppTypeDetailRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOAppTypeDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent BOAppTypeDetailRowChanged(Me, New BOAppTypeDetailRowChangeEvent(CType(e.Row,BOAppTypeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOAppTypeDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent BOAppTypeDetailRowChanging(Me, New BOAppTypeDetailRowChangeEvent(CType(e.Row,BOAppTypeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOAppTypeDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOAppTypeDetailRowDeleted(Me, New BOAppTypeDetailRowChangeEvent(CType(e.Row,BOAppTypeDetailRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOAppTypeDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOAppTypeDetailRowDeleting(Me, New BOAppTypeDetailRowChangeEvent(CType(e.Row,BOAppTypeDetailRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOAppTypeDetailRow(ByVal row As BOAppTypeDetailRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOAppTypeDetailRow
        Inherits DataRow
        
        Private tableBOAppTypeDetail As BOAppTypeDetailDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOAppTypeDetail = CType(Me.Table,BOAppTypeDetailDataTable)
        End Sub
        
        Public Property AppTypeId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.AppTypeIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.AppTypeIdColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property ActualNoOfApps As String
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.ActualNoOfAppsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.ActualNoOfAppsColumn) = value
            End Set
        End Property
        
        Public Property DocsInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.DocsInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.DocsInTargetColumn) = value
            End Set
        End Property
        
        Public Property DocsOutOfTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.DocsOutOfTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.DocsOutOfTargetColumn) = value
            End Set
        End Property
        
        Public Property TotalNoOfDocs As String
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.TotalNoOfDocsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.TotalNoOfDocsColumn) = value
            End Set
        End Property
        
        Public Property PercentDocsInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.PercentDocsInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.PercentDocsInTargetColumn) = value
            End Set
        End Property
        
        Public Property PageHeading As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.PageHeadingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.PageHeadingColumn) = value
            End Set
        End Property
        
        Public Property AppTypeHeading As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.AppTypeHeadingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.AppTypeHeadingColumn) = value
            End Set
        End Property
        
        Public Property SubTotalHeading As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOAppTypeDetail.SubTotalHeadingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOAppTypeDetail.SubTotalHeadingColumn) = value
            End Set
        End Property
        
        Public Function IsAppTypeIdNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.AppTypeIdColumn)
        End Function
        
        Public Sub SetAppTypeIdNull()
            Me(Me.tableBOAppTypeDetail.AppTypeIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableBOAppTypeDetail.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsActualNoOfAppsNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.ActualNoOfAppsColumn)
        End Function
        
        Public Sub SetActualNoOfAppsNull()
            Me(Me.tableBOAppTypeDetail.ActualNoOfAppsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDocsInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.DocsInTargetColumn)
        End Function
        
        Public Sub SetDocsInTargetNull()
            Me(Me.tableBOAppTypeDetail.DocsInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDocsOutOfTargetNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.DocsOutOfTargetColumn)
        End Function
        
        Public Sub SetDocsOutOfTargetNull()
            Me(Me.tableBOAppTypeDetail.DocsOutOfTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNoOfDocsNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.TotalNoOfDocsColumn)
        End Function
        
        Public Sub SetTotalNoOfDocsNull()
            Me(Me.tableBOAppTypeDetail.TotalNoOfDocsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPercentDocsInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.PercentDocsInTargetColumn)
        End Function
        
        Public Sub SetPercentDocsInTargetNull()
            Me(Me.tableBOAppTypeDetail.PercentDocsInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.PageHeadingColumn)
        End Function
        
        Public Sub SetPageHeadingNull()
            Me(Me.tableBOAppTypeDetail.PageHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppTypeHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.AppTypeHeadingColumn)
        End Function
        
        Public Sub SetAppTypeHeadingNull()
            Me(Me.tableBOAppTypeDetail.AppTypeHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubTotalHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBOAppTypeDetail.SubTotalHeadingColumn)
        End Function
        
        Public Sub SetSubTotalHeadingNull()
            Me(Me.tableBOAppTypeDetail.SubTotalHeadingColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOAppTypeDetailRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOAppTypeDetailRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOAppTypeDetailRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOAppTypeDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
