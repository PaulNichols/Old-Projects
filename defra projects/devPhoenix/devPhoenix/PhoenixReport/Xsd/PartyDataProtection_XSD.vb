'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class PartyDataProtectionData
    Inherits DataSet
    
    Private tableBOPartyDataProtection As BOPartyDataProtectionDataTable
    
    Private tableBOOtherAddress As BOOtherAddressDataTable
    
    Private tableBOOtherContact As BOOtherContactDataTable
    
    Private tableBOPartyNote As BOPartyNoteDataTable
    
    Private tableBOBankDetails As BOBankDetailsDataTable
    
    Private relationBOPartyDataProtectionBOOtherAddress As DataRelation
    
    Private relationBOPartyDataProtectionBOPartyNote As DataRelation
    
    Private relationBOPartyDataProtectionBOOtherContact As DataRelation
    
    Private relationBOPartyDataProtectionBOBankDetails As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOPartyDataProtection")) Is Nothing) Then
                Me.Tables.Add(New BOPartyDataProtectionDataTable(ds.Tables("BOPartyDataProtection")))
            End If
            If (Not (ds.Tables("BOOtherAddress")) Is Nothing) Then
                Me.Tables.Add(New BOOtherAddressDataTable(ds.Tables("BOOtherAddress")))
            End If
            If (Not (ds.Tables("BOOtherContact")) Is Nothing) Then
                Me.Tables.Add(New BOOtherContactDataTable(ds.Tables("BOOtherContact")))
            End If
            If (Not (ds.Tables("BOPartyNote")) Is Nothing) Then
                Me.Tables.Add(New BOPartyNoteDataTable(ds.Tables("BOPartyNote")))
            End If
            If (Not (ds.Tables("BOBankDetails")) Is Nothing) Then
                Me.Tables.Add(New BOBankDetailsDataTable(ds.Tables("BOBankDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPartyDataProtection As BOPartyDataProtectionDataTable
        Get
            Return Me.tableBOPartyDataProtection
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOOtherAddress As BOOtherAddressDataTable
        Get
            Return Me.tableBOOtherAddress
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOOtherContact As BOOtherContactDataTable
        Get
            Return Me.tableBOOtherContact
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPartyNote As BOPartyNoteDataTable
        Get
            Return Me.tableBOPartyNote
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOBankDetails As BOBankDetailsDataTable
        Get
            Return Me.tableBOBankDetails
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As PartyDataProtectionData = CType(MyBase.Clone,PartyDataProtectionData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOPartyDataProtection")) Is Nothing) Then
            Me.Tables.Add(New BOPartyDataProtectionDataTable(ds.Tables("BOPartyDataProtection")))
        End If
        If (Not (ds.Tables("BOOtherAddress")) Is Nothing) Then
            Me.Tables.Add(New BOOtherAddressDataTable(ds.Tables("BOOtherAddress")))
        End If
        If (Not (ds.Tables("BOOtherContact")) Is Nothing) Then
            Me.Tables.Add(New BOOtherContactDataTable(ds.Tables("BOOtherContact")))
        End If
        If (Not (ds.Tables("BOPartyNote")) Is Nothing) Then
            Me.Tables.Add(New BOPartyNoteDataTable(ds.Tables("BOPartyNote")))
        End If
        If (Not (ds.Tables("BOBankDetails")) Is Nothing) Then
            Me.Tables.Add(New BOBankDetailsDataTable(ds.Tables("BOBankDetails")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOPartyDataProtection = CType(Me.Tables("BOPartyDataProtection"),BOPartyDataProtectionDataTable)
        If (Not (Me.tableBOPartyDataProtection) Is Nothing) Then
            Me.tableBOPartyDataProtection.InitVars
        End If
        Me.tableBOOtherAddress = CType(Me.Tables("BOOtherAddress"),BOOtherAddressDataTable)
        If (Not (Me.tableBOOtherAddress) Is Nothing) Then
            Me.tableBOOtherAddress.InitVars
        End If
        Me.tableBOOtherContact = CType(Me.Tables("BOOtherContact"),BOOtherContactDataTable)
        If (Not (Me.tableBOOtherContact) Is Nothing) Then
            Me.tableBOOtherContact.InitVars
        End If
        Me.tableBOPartyNote = CType(Me.Tables("BOPartyNote"),BOPartyNoteDataTable)
        If (Not (Me.tableBOPartyNote) Is Nothing) Then
            Me.tableBOPartyNote.InitVars
        End If
        Me.tableBOBankDetails = CType(Me.Tables("BOBankDetails"),BOBankDetailsDataTable)
        If (Not (Me.tableBOBankDetails) Is Nothing) Then
            Me.tableBOBankDetails.InitVars
        End If
        Me.relationBOPartyDataProtectionBOOtherAddress = Me.Relations("BOPartyDataProtectionBOOtherAddress")
        Me.relationBOPartyDataProtectionBOPartyNote = Me.Relations("BOPartyDataProtectionBOPartyNote")
        Me.relationBOPartyDataProtectionBOOtherContact = Me.Relations("BOPartyDataProtectionBOOtherContact")
        Me.relationBOPartyDataProtectionBOBankDetails = Me.Relations("BOPartyDataProtectionBOBankDetails")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "PartyDataProtectionData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PartyDataProtectionData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOPartyDataProtection = New BOPartyDataProtectionDataTable
        Me.Tables.Add(Me.tableBOPartyDataProtection)
        Me.tableBOOtherAddress = New BOOtherAddressDataTable
        Me.Tables.Add(Me.tableBOOtherAddress)
        Me.tableBOOtherContact = New BOOtherContactDataTable
        Me.Tables.Add(Me.tableBOOtherContact)
        Me.tableBOPartyNote = New BOPartyNoteDataTable
        Me.Tables.Add(Me.tableBOPartyNote)
        Me.tableBOBankDetails = New BOBankDetailsDataTable
        Me.Tables.Add(Me.tableBOBankDetails)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOPartyDataProtectionBOOtherAddress", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOOtherAddress.LinkIdColumn})
        Me.tableBOOtherAddress.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BOPartyDataProtectionBOOtherContact", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOOtherContact.LinkIdColumn})
        Me.tableBOOtherContact.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BOPartyDataProtectionBOPartyNote", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOPartyNote.LinkIdColumn})
        Me.tableBOPartyNote.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BOPartyDataProtectionBOBankDetails", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOBankDetails.LinkIdColumn})
        Me.tableBOBankDetails.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOPartyDataProtectionBOOtherAddress = New DataRelation("BOPartyDataProtectionBOOtherAddress", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOOtherAddress.LinkIdColumn}, false)
        Me.Relations.Add(Me.relationBOPartyDataProtectionBOOtherAddress)
        Me.relationBOPartyDataProtectionBOPartyNote = New DataRelation("BOPartyDataProtectionBOPartyNote", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOPartyNote.LinkIdColumn}, false)
        Me.Relations.Add(Me.relationBOPartyDataProtectionBOPartyNote)
        Me.relationBOPartyDataProtectionBOOtherContact = New DataRelation("BOPartyDataProtectionBOOtherContact", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOOtherContact.LinkIdColumn}, false)
        Me.Relations.Add(Me.relationBOPartyDataProtectionBOOtherContact)
        Me.relationBOPartyDataProtectionBOBankDetails = New DataRelation("BOPartyDataProtectionBOBankDetails", New DataColumn() {Me.tableBOPartyDataProtection.LinkIdColumn}, New DataColumn() {Me.tableBOBankDetails.LinkIdColumn}, false)
        Me.Relations.Add(Me.relationBOPartyDataProtectionBOBankDetails)
    End Sub
    
    Private Function ShouldSerializeBOPartyDataProtection() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOOtherAddress() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOOtherContact() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOPartyNote() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOBankDetails() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOPartyDataProtectionRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPartyDataProtectionRowChangeEvent)
    
    Public Delegate Sub BOOtherAddressRowChangeEventHandler(ByVal sender As Object, ByVal e As BOOtherAddressRowChangeEvent)
    
    Public Delegate Sub BOOtherContactRowChangeEventHandler(ByVal sender As Object, ByVal e As BOOtherContactRowChangeEvent)
    
    Public Delegate Sub BOPartyNoteRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPartyNoteRowChangeEvent)
    
    Public Delegate Sub BOBankDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As BOBankDetailsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPartyDataProtectionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLinkId As DataColumn
        
        Private columnDisplayName As DataColumn
        
        Private columnExcludeFromMailingList As DataColumn
        
        Private columnReportPartyId As DataColumn
        
        Private columnPreviousName As DataColumn
        
        Private columnMailingContactAddress As DataColumn
        
        Private columnPreferredContact As DataColumn
        
        Private columnAllowSemCompleteIncomplete As DataColumn
        
        Private columnValidated As DataColumn
        
        Private columnKnownFactIssued As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPartyDataProtection")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LinkIdColumn As DataColumn
            Get
                Return Me.columnLinkId
            End Get
        End Property
        
        Friend ReadOnly Property DisplayNameColumn As DataColumn
            Get
                Return Me.columnDisplayName
            End Get
        End Property
        
        Friend ReadOnly Property ExcludeFromMailingListColumn As DataColumn
            Get
                Return Me.columnExcludeFromMailingList
            End Get
        End Property
        
        Friend ReadOnly Property ReportPartyIdColumn As DataColumn
            Get
                Return Me.columnReportPartyId
            End Get
        End Property
        
        Friend ReadOnly Property PreviousNameColumn As DataColumn
            Get
                Return Me.columnPreviousName
            End Get
        End Property
        
        Friend ReadOnly Property MailingContactAddressColumn As DataColumn
            Get
                Return Me.columnMailingContactAddress
            End Get
        End Property
        
        Friend ReadOnly Property PreferredContactColumn As DataColumn
            Get
                Return Me.columnPreferredContact
            End Get
        End Property
        
        Friend ReadOnly Property AllowSemCompleteIncompleteColumn As DataColumn
            Get
                Return Me.columnAllowSemCompleteIncomplete
            End Get
        End Property
        
        Friend ReadOnly Property ValidatedColumn As DataColumn
            Get
                Return Me.columnValidated
            End Get
        End Property
        
        Friend ReadOnly Property KnownFactIssuedColumn As DataColumn
            Get
                Return Me.columnKnownFactIssued
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPartyDataProtectionRow
            Get
                Return CType(Me.Rows(index),BOPartyDataProtectionRow)
            End Get
        End Property
        
        Public Event BOPartyDataProtectionRowChanged As BOPartyDataProtectionRowChangeEventHandler
        
        Public Event BOPartyDataProtectionRowChanging As BOPartyDataProtectionRowChangeEventHandler
        
        Public Event BOPartyDataProtectionRowDeleted As BOPartyDataProtectionRowChangeEventHandler
        
        Public Event BOPartyDataProtectionRowDeleting As BOPartyDataProtectionRowChangeEventHandler
        
        Public Overloads Sub AddBOPartyDataProtectionRow(ByVal row As BOPartyDataProtectionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPartyDataProtectionRow(ByVal LinkId As Long, ByVal DisplayName As String, ByVal ExcludeFromMailingList As String, ByVal ReportPartyId As String, ByVal PreviousName As String, ByVal MailingContactAddress As String, ByVal PreferredContact As String, ByVal AllowSemCompleteIncomplete As String, ByVal Validated As String, ByVal KnownFactIssued As String) As BOPartyDataProtectionRow
            Dim rowBOPartyDataProtectionRow As BOPartyDataProtectionRow = CType(Me.NewRow,BOPartyDataProtectionRow)
            rowBOPartyDataProtectionRow.ItemArray = New Object() {LinkId, DisplayName, ExcludeFromMailingList, ReportPartyId, PreviousName, MailingContactAddress, PreferredContact, AllowSemCompleteIncomplete, Validated, KnownFactIssued}
            Me.Rows.Add(rowBOPartyDataProtectionRow)
            Return rowBOPartyDataProtectionRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPartyDataProtectionDataTable = CType(MyBase.Clone,BOPartyDataProtectionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPartyDataProtectionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLinkId = Me.Columns("LinkId")
            Me.columnDisplayName = Me.Columns("DisplayName")
            Me.columnExcludeFromMailingList = Me.Columns("ExcludeFromMailingList")
            Me.columnReportPartyId = Me.Columns("ReportPartyId")
            Me.columnPreviousName = Me.Columns("PreviousName")
            Me.columnMailingContactAddress = Me.Columns("MailingContactAddress")
            Me.columnPreferredContact = Me.Columns("PreferredContact")
            Me.columnAllowSemCompleteIncomplete = Me.Columns("AllowSemCompleteIncomplete")
            Me.columnValidated = Me.Columns("Validated")
            Me.columnKnownFactIssued = Me.Columns("KnownFactIssued")
        End Sub
        
        Private Sub InitClass()
            Me.columnLinkId = New DataColumn("LinkId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLinkId)
            Me.columnDisplayName = New DataColumn("DisplayName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDisplayName)
            Me.columnExcludeFromMailingList = New DataColumn("ExcludeFromMailingList", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExcludeFromMailingList)
            Me.columnReportPartyId = New DataColumn("ReportPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReportPartyId)
            Me.columnPreviousName = New DataColumn("PreviousName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviousName)
            Me.columnMailingContactAddress = New DataColumn("MailingContactAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMailingContactAddress)
            Me.columnPreferredContact = New DataColumn("PreferredContact", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreferredContact)
            Me.columnAllowSemCompleteIncomplete = New DataColumn("AllowSemCompleteIncomplete", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAllowSemCompleteIncomplete)
            Me.columnValidated = New DataColumn("Validated", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValidated)
            Me.columnKnownFactIssued = New DataColumn("KnownFactIssued", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKnownFactIssued)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnLinkId}, false))
            Me.columnLinkId.AllowDBNull = false
            Me.columnLinkId.Unique = true
        End Sub
        
        Public Function NewBOPartyDataProtectionRow() As BOPartyDataProtectionRow
            Return CType(Me.NewRow,BOPartyDataProtectionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPartyDataProtectionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPartyDataProtectionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPartyDataProtectionRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPartyDataProtectionRowChanged(Me, New BOPartyDataProtectionRowChangeEvent(CType(e.Row,BOPartyDataProtectionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPartyDataProtectionRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPartyDataProtectionRowChanging(Me, New BOPartyDataProtectionRowChangeEvent(CType(e.Row,BOPartyDataProtectionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPartyDataProtectionRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPartyDataProtectionRowDeleted(Me, New BOPartyDataProtectionRowChangeEvent(CType(e.Row,BOPartyDataProtectionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPartyDataProtectionRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPartyDataProtectionRowDeleting(Me, New BOPartyDataProtectionRowChangeEvent(CType(e.Row,BOPartyDataProtectionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPartyDataProtectionRow(ByVal row As BOPartyDataProtectionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPartyDataProtectionRow
        Inherits DataRow
        
        Private tableBOPartyDataProtection As BOPartyDataProtectionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPartyDataProtection = CType(Me.Table,BOPartyDataProtectionDataTable)
        End Sub
        
        Public Property LinkId As Long
            Get
                Return CType(Me(Me.tableBOPartyDataProtection.LinkIdColumn),Long)
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.LinkIdColumn) = value
            End Set
        End Property
        
        Public Property DisplayName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.DisplayNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.DisplayNameColumn) = value
            End Set
        End Property
        
        Public Property ExcludeFromMailingList As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.ExcludeFromMailingListColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.ExcludeFromMailingListColumn) = value
            End Set
        End Property
        
        Public Property ReportPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.ReportPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.ReportPartyIdColumn) = value
            End Set
        End Property
        
        Public Property PreviousName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.PreviousNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.PreviousNameColumn) = value
            End Set
        End Property
        
        Public Property MailingContactAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.MailingContactAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.MailingContactAddressColumn) = value
            End Set
        End Property
        
        Public Property PreferredContact As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.PreferredContactColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.PreferredContactColumn) = value
            End Set
        End Property
        
        Public Property AllowSemCompleteIncomplete As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.AllowSemCompleteIncompleteColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.AllowSemCompleteIncompleteColumn) = value
            End Set
        End Property
        
        Public Property Validated As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.ValidatedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.ValidatedColumn) = value
            End Set
        End Property
        
        Public Property KnownFactIssued As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyDataProtection.KnownFactIssuedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyDataProtection.KnownFactIssuedColumn) = value
            End Set
        End Property
        
        Public Function IsDisplayNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.DisplayNameColumn)
        End Function
        
        Public Sub SetDisplayNameNull()
            Me(Me.tableBOPartyDataProtection.DisplayNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExcludeFromMailingListNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.ExcludeFromMailingListColumn)
        End Function
        
        Public Sub SetExcludeFromMailingListNull()
            Me(Me.tableBOPartyDataProtection.ExcludeFromMailingListColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReportPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.ReportPartyIdColumn)
        End Function
        
        Public Sub SetReportPartyIdNull()
            Me(Me.tableBOPartyDataProtection.ReportPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviousNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.PreviousNameColumn)
        End Function
        
        Public Sub SetPreviousNameNull()
            Me(Me.tableBOPartyDataProtection.PreviousNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMailingContactAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.MailingContactAddressColumn)
        End Function
        
        Public Sub SetMailingContactAddressNull()
            Me(Me.tableBOPartyDataProtection.MailingContactAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreferredContactNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.PreferredContactColumn)
        End Function
        
        Public Sub SetPreferredContactNull()
            Me(Me.tableBOPartyDataProtection.PreferredContactColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAllowSemCompleteIncompleteNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.AllowSemCompleteIncompleteColumn)
        End Function
        
        Public Sub SetAllowSemCompleteIncompleteNull()
            Me(Me.tableBOPartyDataProtection.AllowSemCompleteIncompleteColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValidatedNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.ValidatedColumn)
        End Function
        
        Public Sub SetValidatedNull()
            Me(Me.tableBOPartyDataProtection.ValidatedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKnownFactIssuedNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyDataProtection.KnownFactIssuedColumn)
        End Function
        
        Public Sub SetKnownFactIssuedNull()
            Me(Me.tableBOPartyDataProtection.KnownFactIssuedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBOOtherAddressRows() As BOOtherAddressRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOPartyDataProtectionBOOtherAddress")),BOOtherAddressRow())
        End Function
        
        Public Function GetBOPartyNoteRows() As BOPartyNoteRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOPartyDataProtectionBOPartyNote")),BOPartyNoteRow())
        End Function
        
        Public Function GetBOOtherContactRows() As BOOtherContactRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOPartyDataProtectionBOOtherContact")),BOOtherContactRow())
        End Function
        
        Public Function GetBOBankDetailsRows() As BOBankDetailsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOPartyDataProtectionBOBankDetails")),BOBankDetailsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPartyDataProtectionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPartyDataProtectionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPartyDataProtectionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPartyDataProtectionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOOtherAddressDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLinkId As DataColumn
        
        Private columnDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("BOOtherAddress")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LinkIdColumn As DataColumn
            Get
                Return Me.columnLinkId
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOOtherAddressRow
            Get
                Return CType(Me.Rows(index),BOOtherAddressRow)
            End Get
        End Property
        
        Public Event BOOtherAddressRowChanged As BOOtherAddressRowChangeEventHandler
        
        Public Event BOOtherAddressRowChanging As BOOtherAddressRowChangeEventHandler
        
        Public Event BOOtherAddressRowDeleted As BOOtherAddressRowChangeEventHandler
        
        Public Event BOOtherAddressRowDeleting As BOOtherAddressRowChangeEventHandler
        
        Public Overloads Sub AddBOOtherAddressRow(ByVal row As BOOtherAddressRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOOtherAddressRow(ByVal parentBOPartyDataProtectionRowByBOPartyDataProtectionBOOtherAddress As BOPartyDataProtectionRow, ByVal Description As String) As BOOtherAddressRow
            Dim rowBOOtherAddressRow As BOOtherAddressRow = CType(Me.NewRow,BOOtherAddressRow)
            rowBOOtherAddressRow.ItemArray = New Object() {parentBOPartyDataProtectionRowByBOPartyDataProtectionBOOtherAddress(0), Description}
            Me.Rows.Add(rowBOOtherAddressRow)
            Return rowBOOtherAddressRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOOtherAddressDataTable = CType(MyBase.Clone,BOOtherAddressDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOOtherAddressDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLinkId = Me.Columns("LinkId")
            Me.columnDescription = Me.Columns("Description")
        End Sub
        
        Private Sub InitClass()
            Me.columnLinkId = New DataColumn("LinkId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLinkId)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
        End Sub
        
        Public Function NewBOOtherAddressRow() As BOOtherAddressRow
            Return CType(Me.NewRow,BOOtherAddressRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOOtherAddressRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOOtherAddressRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOOtherAddressRowChangedEvent) Is Nothing) Then
                RaiseEvent BOOtherAddressRowChanged(Me, New BOOtherAddressRowChangeEvent(CType(e.Row,BOOtherAddressRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOOtherAddressRowChangingEvent) Is Nothing) Then
                RaiseEvent BOOtherAddressRowChanging(Me, New BOOtherAddressRowChangeEvent(CType(e.Row,BOOtherAddressRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOOtherAddressRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOOtherAddressRowDeleted(Me, New BOOtherAddressRowChangeEvent(CType(e.Row,BOOtherAddressRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOOtherAddressRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOOtherAddressRowDeleting(Me, New BOOtherAddressRowChangeEvent(CType(e.Row,BOOtherAddressRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOOtherAddressRow(ByVal row As BOOtherAddressRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOOtherAddressRow
        Inherits DataRow
        
        Private tableBOOtherAddress As BOOtherAddressDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOOtherAddress = CType(Me.Table,BOOtherAddressDataTable)
        End Sub
        
        Public Property LinkId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOOtherAddress.LinkIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOOtherAddress.LinkIdColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableBOOtherAddress.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOOtherAddress.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property BOPartyDataProtectionRow As BOPartyDataProtectionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOPartyDataProtectionBOOtherAddress")),BOPartyDataProtectionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOPartyDataProtectionBOOtherAddress"))
            End Set
        End Property
        
        Public Function IsLinkIdNull() As Boolean
            Return Me.IsNull(Me.tableBOOtherAddress.LinkIdColumn)
        End Function
        
        Public Sub SetLinkIdNull()
            Me(Me.tableBOOtherAddress.LinkIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBOOtherAddress.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableBOOtherAddress.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOOtherAddressRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOOtherAddressRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOOtherAddressRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOOtherAddressRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOOtherContactDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLinkId As DataColumn
        
        Private columnDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("BOOtherContact")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LinkIdColumn As DataColumn
            Get
                Return Me.columnLinkId
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOOtherContactRow
            Get
                Return CType(Me.Rows(index),BOOtherContactRow)
            End Get
        End Property
        
        Public Event BOOtherContactRowChanged As BOOtherContactRowChangeEventHandler
        
        Public Event BOOtherContactRowChanging As BOOtherContactRowChangeEventHandler
        
        Public Event BOOtherContactRowDeleted As BOOtherContactRowChangeEventHandler
        
        Public Event BOOtherContactRowDeleting As BOOtherContactRowChangeEventHandler
        
        Public Overloads Sub AddBOOtherContactRow(ByVal row As BOOtherContactRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOOtherContactRow(ByVal parentBOPartyDataProtectionRowByBOPartyDataProtectionBOOtherContact As BOPartyDataProtectionRow, ByVal Description As String) As BOOtherContactRow
            Dim rowBOOtherContactRow As BOOtherContactRow = CType(Me.NewRow,BOOtherContactRow)
            rowBOOtherContactRow.ItemArray = New Object() {parentBOPartyDataProtectionRowByBOPartyDataProtectionBOOtherContact(0), Description}
            Me.Rows.Add(rowBOOtherContactRow)
            Return rowBOOtherContactRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOOtherContactDataTable = CType(MyBase.Clone,BOOtherContactDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOOtherContactDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLinkId = Me.Columns("LinkId")
            Me.columnDescription = Me.Columns("Description")
        End Sub
        
        Private Sub InitClass()
            Me.columnLinkId = New DataColumn("LinkId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLinkId)
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
        End Sub
        
        Public Function NewBOOtherContactRow() As BOOtherContactRow
            Return CType(Me.NewRow,BOOtherContactRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOOtherContactRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOOtherContactRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOOtherContactRowChangedEvent) Is Nothing) Then
                RaiseEvent BOOtherContactRowChanged(Me, New BOOtherContactRowChangeEvent(CType(e.Row,BOOtherContactRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOOtherContactRowChangingEvent) Is Nothing) Then
                RaiseEvent BOOtherContactRowChanging(Me, New BOOtherContactRowChangeEvent(CType(e.Row,BOOtherContactRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOOtherContactRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOOtherContactRowDeleted(Me, New BOOtherContactRowChangeEvent(CType(e.Row,BOOtherContactRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOOtherContactRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOOtherContactRowDeleting(Me, New BOOtherContactRowChangeEvent(CType(e.Row,BOOtherContactRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOOtherContactRow(ByVal row As BOOtherContactRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOOtherContactRow
        Inherits DataRow
        
        Private tableBOOtherContact As BOOtherContactDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOOtherContact = CType(Me.Table,BOOtherContactDataTable)
        End Sub
        
        Public Property LinkId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOOtherContact.LinkIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOOtherContact.LinkIdColumn) = value
            End Set
        End Property
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableBOOtherContact.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOOtherContact.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property BOPartyDataProtectionRow As BOPartyDataProtectionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOPartyDataProtectionBOOtherContact")),BOPartyDataProtectionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOPartyDataProtectionBOOtherContact"))
            End Set
        End Property
        
        Public Function IsLinkIdNull() As Boolean
            Return Me.IsNull(Me.tableBOOtherContact.LinkIdColumn)
        End Function
        
        Public Sub SetLinkIdNull()
            Me(Me.tableBOOtherContact.LinkIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBOOtherContact.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableBOOtherContact.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOOtherContactRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOOtherContactRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOOtherContactRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOOtherContactRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPartyNoteDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLinkId As DataColumn
        
        Private columnNoteDate As DataColumn
        
        Private columnNoteSubject As DataColumn
        
        Private columnNoteContents As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPartyNote")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LinkIdColumn As DataColumn
            Get
                Return Me.columnLinkId
            End Get
        End Property
        
        Friend ReadOnly Property NoteDateColumn As DataColumn
            Get
                Return Me.columnNoteDate
            End Get
        End Property
        
        Friend ReadOnly Property NoteSubjectColumn As DataColumn
            Get
                Return Me.columnNoteSubject
            End Get
        End Property
        
        Friend ReadOnly Property NoteContentsColumn As DataColumn
            Get
                Return Me.columnNoteContents
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPartyNoteRow
            Get
                Return CType(Me.Rows(index),BOPartyNoteRow)
            End Get
        End Property
        
        Public Event BOPartyNoteRowChanged As BOPartyNoteRowChangeEventHandler
        
        Public Event BOPartyNoteRowChanging As BOPartyNoteRowChangeEventHandler
        
        Public Event BOPartyNoteRowDeleted As BOPartyNoteRowChangeEventHandler
        
        Public Event BOPartyNoteRowDeleting As BOPartyNoteRowChangeEventHandler
        
        Public Overloads Sub AddBOPartyNoteRow(ByVal row As BOPartyNoteRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPartyNoteRow(ByVal parentBOPartyDataProtectionRowByBOPartyDataProtectionBOPartyNote As BOPartyDataProtectionRow, ByVal NoteDate As String, ByVal NoteSubject As String, ByVal NoteContents As String) As BOPartyNoteRow
            Dim rowBOPartyNoteRow As BOPartyNoteRow = CType(Me.NewRow,BOPartyNoteRow)
            rowBOPartyNoteRow.ItemArray = New Object() {parentBOPartyDataProtectionRowByBOPartyDataProtectionBOPartyNote(0), NoteDate, NoteSubject, NoteContents}
            Me.Rows.Add(rowBOPartyNoteRow)
            Return rowBOPartyNoteRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPartyNoteDataTable = CType(MyBase.Clone,BOPartyNoteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPartyNoteDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLinkId = Me.Columns("LinkId")
            Me.columnNoteDate = Me.Columns("NoteDate")
            Me.columnNoteSubject = Me.Columns("NoteSubject")
            Me.columnNoteContents = Me.Columns("NoteContents")
        End Sub
        
        Private Sub InitClass()
            Me.columnLinkId = New DataColumn("LinkId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLinkId)
            Me.columnNoteDate = New DataColumn("NoteDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoteDate)
            Me.columnNoteSubject = New DataColumn("NoteSubject", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoteSubject)
            Me.columnNoteContents = New DataColumn("NoteContents", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoteContents)
        End Sub
        
        Public Function NewBOPartyNoteRow() As BOPartyNoteRow
            Return CType(Me.NewRow,BOPartyNoteRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPartyNoteRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPartyNoteRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPartyNoteRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPartyNoteRowChanged(Me, New BOPartyNoteRowChangeEvent(CType(e.Row,BOPartyNoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPartyNoteRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPartyNoteRowChanging(Me, New BOPartyNoteRowChangeEvent(CType(e.Row,BOPartyNoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPartyNoteRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPartyNoteRowDeleted(Me, New BOPartyNoteRowChangeEvent(CType(e.Row,BOPartyNoteRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPartyNoteRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPartyNoteRowDeleting(Me, New BOPartyNoteRowChangeEvent(CType(e.Row,BOPartyNoteRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPartyNoteRow(ByVal row As BOPartyNoteRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPartyNoteRow
        Inherits DataRow
        
        Private tableBOPartyNote As BOPartyNoteDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPartyNote = CType(Me.Table,BOPartyNoteDataTable)
        End Sub
        
        Public Property LinkId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyNote.LinkIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyNote.LinkIdColumn) = value
            End Set
        End Property
        
        Public Property NoteDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyNote.NoteDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyNote.NoteDateColumn) = value
            End Set
        End Property
        
        Public Property NoteSubject As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyNote.NoteSubjectColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyNote.NoteSubjectColumn) = value
            End Set
        End Property
        
        Public Property NoteContents As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPartyNote.NoteContentsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPartyNote.NoteContentsColumn) = value
            End Set
        End Property
        
        Public Property BOPartyDataProtectionRow As BOPartyDataProtectionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOPartyDataProtectionBOPartyNote")),BOPartyDataProtectionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOPartyDataProtectionBOPartyNote"))
            End Set
        End Property
        
        Public Function IsLinkIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyNote.LinkIdColumn)
        End Function
        
        Public Sub SetLinkIdNull()
            Me(Me.tableBOPartyNote.LinkIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyNote.NoteDateColumn)
        End Function
        
        Public Sub SetNoteDateNull()
            Me(Me.tableBOPartyNote.NoteDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteSubjectNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyNote.NoteSubjectColumn)
        End Function
        
        Public Sub SetNoteSubjectNull()
            Me(Me.tableBOPartyNote.NoteSubjectColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoteContentsNull() As Boolean
            Return Me.IsNull(Me.tableBOPartyNote.NoteContentsColumn)
        End Function
        
        Public Sub SetNoteContentsNull()
            Me(Me.tableBOPartyNote.NoteContentsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPartyNoteRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPartyNoteRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPartyNoteRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPartyNoteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOBankDetailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLinkId As DataColumn
        
        Private columnAccountNumber As DataColumn
        
        Private columnSortCode As DataColumn
        
        Friend Sub New()
            MyBase.New("BOBankDetails")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LinkIdColumn As DataColumn
            Get
                Return Me.columnLinkId
            End Get
        End Property
        
        Friend ReadOnly Property AccountNumberColumn As DataColumn
            Get
                Return Me.columnAccountNumber
            End Get
        End Property
        
        Friend ReadOnly Property SortCodeColumn As DataColumn
            Get
                Return Me.columnSortCode
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOBankDetailsRow
            Get
                Return CType(Me.Rows(index),BOBankDetailsRow)
            End Get
        End Property
        
        Public Event BOBankDetailsRowChanged As BOBankDetailsRowChangeEventHandler
        
        Public Event BOBankDetailsRowChanging As BOBankDetailsRowChangeEventHandler
        
        Public Event BOBankDetailsRowDeleted As BOBankDetailsRowChangeEventHandler
        
        Public Event BOBankDetailsRowDeleting As BOBankDetailsRowChangeEventHandler
        
        Public Overloads Sub AddBOBankDetailsRow(ByVal row As BOBankDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOBankDetailsRow(ByVal parentBOPartyDataProtectionRowByBOPartyDataProtectionBOBankDetails As BOPartyDataProtectionRow, ByVal AccountNumber As String, ByVal SortCode As String) As BOBankDetailsRow
            Dim rowBOBankDetailsRow As BOBankDetailsRow = CType(Me.NewRow,BOBankDetailsRow)
            rowBOBankDetailsRow.ItemArray = New Object() {parentBOPartyDataProtectionRowByBOPartyDataProtectionBOBankDetails(0), AccountNumber, SortCode}
            Me.Rows.Add(rowBOBankDetailsRow)
            Return rowBOBankDetailsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOBankDetailsDataTable = CType(MyBase.Clone,BOBankDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOBankDetailsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLinkId = Me.Columns("LinkId")
            Me.columnAccountNumber = Me.Columns("AccountNumber")
            Me.columnSortCode = Me.Columns("SortCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnLinkId = New DataColumn("LinkId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLinkId)
            Me.columnAccountNumber = New DataColumn("AccountNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccountNumber)
            Me.columnSortCode = New DataColumn("SortCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSortCode)
        End Sub
        
        Public Function NewBOBankDetailsRow() As BOBankDetailsRow
            Return CType(Me.NewRow,BOBankDetailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOBankDetailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOBankDetailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOBankDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent BOBankDetailsRowChanged(Me, New BOBankDetailsRowChangeEvent(CType(e.Row,BOBankDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOBankDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent BOBankDetailsRowChanging(Me, New BOBankDetailsRowChangeEvent(CType(e.Row,BOBankDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOBankDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOBankDetailsRowDeleted(Me, New BOBankDetailsRowChangeEvent(CType(e.Row,BOBankDetailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOBankDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOBankDetailsRowDeleting(Me, New BOBankDetailsRowChangeEvent(CType(e.Row,BOBankDetailsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOBankDetailsRow(ByVal row As BOBankDetailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOBankDetailsRow
        Inherits DataRow
        
        Private tableBOBankDetails As BOBankDetailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOBankDetails = CType(Me.Table,BOBankDetailsDataTable)
        End Sub
        
        Public Property LinkId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOBankDetails.LinkIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBankDetails.LinkIdColumn) = value
            End Set
        End Property
        
        Public Property AccountNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBankDetails.AccountNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBankDetails.AccountNumberColumn) = value
            End Set
        End Property
        
        Public Property SortCode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBankDetails.SortCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBankDetails.SortCodeColumn) = value
            End Set
        End Property
        
        Public Property BOPartyDataProtectionRow As BOPartyDataProtectionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOPartyDataProtectionBOBankDetails")),BOPartyDataProtectionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOPartyDataProtectionBOBankDetails"))
            End Set
        End Property
        
        Public Function IsLinkIdNull() As Boolean
            Return Me.IsNull(Me.tableBOBankDetails.LinkIdColumn)
        End Function
        
        Public Sub SetLinkIdNull()
            Me(Me.tableBOBankDetails.LinkIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccountNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOBankDetails.AccountNumberColumn)
        End Function
        
        Public Sub SetAccountNumberNull()
            Me(Me.tableBOBankDetails.AccountNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSortCodeNull() As Boolean
            Return Me.IsNull(Me.tableBOBankDetails.SortCodeColumn)
        End Function
        
        Public Sub SetSortCodeNull()
            Me(Me.tableBOBankDetails.SortCodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOBankDetailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOBankDetailsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOBankDetailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOBankDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
