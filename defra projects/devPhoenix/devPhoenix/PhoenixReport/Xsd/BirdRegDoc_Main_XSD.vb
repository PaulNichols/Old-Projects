'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BirdRegDocData
    Inherits DataSet
    
    Private tableBOBirdRegDoc_Main As BOBirdRegDoc_MainDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOBirdRegDoc_Main")) Is Nothing) Then
                Me.Tables.Add(New BOBirdRegDoc_MainDataTable(ds.Tables("BOBirdRegDoc_Main")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOBirdRegDoc_Main As BOBirdRegDoc_MainDataTable
        Get
            Return Me.tableBOBirdRegDoc_Main
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BirdRegDocData = CType(MyBase.Clone,BirdRegDocData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOBirdRegDoc_Main")) Is Nothing) Then
            Me.Tables.Add(New BOBirdRegDoc_MainDataTable(ds.Tables("BOBirdRegDoc_Main")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOBirdRegDoc_Main = CType(Me.Tables("BOBirdRegDoc_Main"),BOBirdRegDoc_MainDataTable)
        If (Not (Me.tableBOBirdRegDoc_Main) Is Nothing) Then
            Me.tableBOBirdRegDoc_Main.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BirdRegDocData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BirdRegDocData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOBirdRegDoc_Main = New BOBirdRegDoc_MainDataTable
        Me.Tables.Add(Me.tableBOBirdRegDoc_Main)
    End Sub
    
    Private Function ShouldSerializeBOBirdRegDoc_Main() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOBirdRegDoc_MainRowChangeEventHandler(ByVal sender As Object, ByVal e As BOBirdRegDoc_MainRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOBirdRegDoc_MainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBarcode As DataColumn
        
        Private columnIssueDate As DataColumn
        
        Private columnDocumentNo As DataColumn
        
        Private columnPreviousDocumentNo As DataColumn
        
        Private columnKeeperDetails As DataColumn
        
        Private columnKeptAddress As DataColumn
        
        Private columnIdMarksTypes As DataColumn
        
        Private columnSpecies As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnOrigin As DataColumn
        
        Private columnDateHatched As DataColumn
        
        Private columnDateAcquired As DataColumn
        
        Private columnSex As DataColumn
        
        Private columnLicenceNumber As DataColumn
        
        Private columnMaleParentIdMarkType As DataColumn
        
        Private columnFemaleParentIdMarkType As DataColumn
        
        Private columnShowRegulation8 As DataColumn
        
        Private columnPchIdMarkType As DataColumn
        
        Private columnpchSpecies As DataColumn
        
        Private columnPchCommonName As DataColumn
        
        Private columnPchPresentKeeper As DataColumn
        
        Private columnPchIdNo As DataColumn
        
        Friend Sub New()
            MyBase.New("BOBirdRegDoc_Main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BarcodeColumn As DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        Friend ReadOnly Property IssueDateColumn As DataColumn
            Get
                Return Me.columnIssueDate
            End Get
        End Property
        
        Friend ReadOnly Property DocumentNoColumn As DataColumn
            Get
                Return Me.columnDocumentNo
            End Get
        End Property
        
        Friend ReadOnly Property PreviousDocumentNoColumn As DataColumn
            Get
                Return Me.columnPreviousDocumentNo
            End Get
        End Property
        
        Friend ReadOnly Property KeeperDetailsColumn As DataColumn
            Get
                Return Me.columnKeeperDetails
            End Get
        End Property
        
        Friend ReadOnly Property KeptAddressColumn As DataColumn
            Get
                Return Me.columnKeptAddress
            End Get
        End Property
        
        Friend ReadOnly Property IdMarksTypesColumn As DataColumn
            Get
                Return Me.columnIdMarksTypes
            End Get
        End Property
        
        Friend ReadOnly Property SpeciesColumn As DataColumn
            Get
                Return Me.columnSpecies
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property OriginColumn As DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        Friend ReadOnly Property DateHatchedColumn As DataColumn
            Get
                Return Me.columnDateHatched
            End Get
        End Property
        
        Friend ReadOnly Property DateAcquiredColumn As DataColumn
            Get
                Return Me.columnDateAcquired
            End Get
        End Property
        
        Friend ReadOnly Property SexColumn As DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        Friend ReadOnly Property LicenceNumberColumn As DataColumn
            Get
                Return Me.columnLicenceNumber
            End Get
        End Property
        
        Friend ReadOnly Property MaleParentIdMarkTypeColumn As DataColumn
            Get
                Return Me.columnMaleParentIdMarkType
            End Get
        End Property
        
        Friend ReadOnly Property FemaleParentIdMarkTypeColumn As DataColumn
            Get
                Return Me.columnFemaleParentIdMarkType
            End Get
        End Property
        
        Friend ReadOnly Property ShowRegulation8Column As DataColumn
            Get
                Return Me.columnShowRegulation8
            End Get
        End Property
        
        Friend ReadOnly Property PchIdMarkTypeColumn As DataColumn
            Get
                Return Me.columnPchIdMarkType
            End Get
        End Property
        
        Friend ReadOnly Property pchSpeciesColumn As DataColumn
            Get
                Return Me.columnpchSpecies
            End Get
        End Property
        
        Friend ReadOnly Property PchCommonNameColumn As DataColumn
            Get
                Return Me.columnPchCommonName
            End Get
        End Property
        
        Friend ReadOnly Property PchPresentKeeperColumn As DataColumn
            Get
                Return Me.columnPchPresentKeeper
            End Get
        End Property
        
        Friend ReadOnly Property PchIdNoColumn As DataColumn
            Get
                Return Me.columnPchIdNo
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOBirdRegDoc_MainRow
            Get
                Return CType(Me.Rows(index),BOBirdRegDoc_MainRow)
            End Get
        End Property
        
        Public Event BOBirdRegDoc_MainRowChanged As BOBirdRegDoc_MainRowChangeEventHandler
        
        Public Event BOBirdRegDoc_MainRowChanging As BOBirdRegDoc_MainRowChangeEventHandler
        
        Public Event BOBirdRegDoc_MainRowDeleted As BOBirdRegDoc_MainRowChangeEventHandler
        
        Public Event BOBirdRegDoc_MainRowDeleting As BOBirdRegDoc_MainRowChangeEventHandler
        
        Public Overloads Sub AddBOBirdRegDoc_MainRow(ByVal row As BOBirdRegDoc_MainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOBirdRegDoc_MainRow( _
                    ByVal ApplicationId As Long,  _
                    ByVal Barcode As String,  _
                    ByVal IssueDate As String,  _
                    ByVal DocumentNo As String,  _
                    ByVal PreviousDocumentNo As String,  _
                    ByVal KeeperDetails As String,  _
                    ByVal KeptAddress As String,  _
                    ByVal IdMarksTypes As String,  _
                    ByVal Species As String,  _
                    ByVal CommonName As String,  _
                    ByVal Origin As String,  _
                    ByVal DateHatched As String,  _
                    ByVal DateAcquired As String,  _
                    ByVal Sex As String,  _
                    ByVal LicenceNumber As String,  _
                    ByVal MaleParentIdMarkType As String,  _
                    ByVal FemaleParentIdMarkType As String,  _
                    ByVal ShowRegulation8 As Boolean,  _
                    ByVal PchIdMarkType As String,  _
                    ByVal pchSpecies As String,  _
                    ByVal PchCommonName As String,  _
                    ByVal PchPresentKeeper As String,  _
                    ByVal PchIdNo As String) As BOBirdRegDoc_MainRow
            Dim rowBOBirdRegDoc_MainRow As BOBirdRegDoc_MainRow = CType(Me.NewRow,BOBirdRegDoc_MainRow)
            rowBOBirdRegDoc_MainRow.ItemArray = New Object() {ApplicationId, Barcode, IssueDate, DocumentNo, PreviousDocumentNo, KeeperDetails, KeptAddress, IdMarksTypes, Species, CommonName, Origin, DateHatched, DateAcquired, Sex, LicenceNumber, MaleParentIdMarkType, FemaleParentIdMarkType, ShowRegulation8, PchIdMarkType, pchSpecies, PchCommonName, PchPresentKeeper, PchIdNo}
            Me.Rows.Add(rowBOBirdRegDoc_MainRow)
            Return rowBOBirdRegDoc_MainRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOBirdRegDoc_MainDataTable = CType(MyBase.Clone,BOBirdRegDoc_MainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOBirdRegDoc_MainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBarcode = Me.Columns("Barcode")
            Me.columnIssueDate = Me.Columns("IssueDate")
            Me.columnDocumentNo = Me.Columns("DocumentNo")
            Me.columnPreviousDocumentNo = Me.Columns("PreviousDocumentNo")
            Me.columnKeeperDetails = Me.Columns("KeeperDetails")
            Me.columnKeptAddress = Me.Columns("KeptAddress")
            Me.columnIdMarksTypes = Me.Columns("IdMarksTypes")
            Me.columnSpecies = Me.Columns("Species")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnOrigin = Me.Columns("Origin")
            Me.columnDateHatched = Me.Columns("DateHatched")
            Me.columnDateAcquired = Me.Columns("DateAcquired")
            Me.columnSex = Me.Columns("Sex")
            Me.columnLicenceNumber = Me.Columns("LicenceNumber")
            Me.columnMaleParentIdMarkType = Me.Columns("MaleParentIdMarkType")
            Me.columnFemaleParentIdMarkType = Me.Columns("FemaleParentIdMarkType")
            Me.columnShowRegulation8 = Me.Columns("ShowRegulation8")
            Me.columnPchIdMarkType = Me.Columns("PchIdMarkType")
            Me.columnpchSpecies = Me.Columns("pchSpecies")
            Me.columnPchCommonName = Me.Columns("PchCommonName")
            Me.columnPchPresentKeeper = Me.Columns("PchPresentKeeper")
            Me.columnPchIdNo = Me.Columns("PchIdNo")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBarcode = New DataColumn("Barcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarcode)
            Me.columnIssueDate = New DataColumn("IssueDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueDate)
            Me.columnDocumentNo = New DataColumn("DocumentNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocumentNo)
            Me.columnPreviousDocumentNo = New DataColumn("PreviousDocumentNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPreviousDocumentNo)
            Me.columnKeeperDetails = New DataColumn("KeeperDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperDetails)
            Me.columnKeptAddress = New DataColumn("KeptAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeptAddress)
            Me.columnIdMarksTypes = New DataColumn("IdMarksTypes", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarksTypes)
            Me.columnSpecies = New DataColumn("Species", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecies)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnOrigin = New DataColumn("Origin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrigin)
            Me.columnDateHatched = New DataColumn("DateHatched", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateHatched)
            Me.columnDateAcquired = New DataColumn("DateAcquired", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateAcquired)
            Me.columnSex = New DataColumn("Sex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSex)
            Me.columnLicenceNumber = New DataColumn("LicenceNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLicenceNumber)
            Me.columnMaleParentIdMarkType = New DataColumn("MaleParentIdMarkType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaleParentIdMarkType)
            Me.columnFemaleParentIdMarkType = New DataColumn("FemaleParentIdMarkType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFemaleParentIdMarkType)
            Me.columnShowRegulation8 = New DataColumn("ShowRegulation8", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnShowRegulation8)
            Me.columnPchIdMarkType = New DataColumn("PchIdMarkType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPchIdMarkType)
            Me.columnpchSpecies = New DataColumn("pchSpecies", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpchSpecies)
            Me.columnPchCommonName = New DataColumn("PchCommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPchCommonName)
            Me.columnPchPresentKeeper = New DataColumn("PchPresentKeeper", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPchPresentKeeper)
            Me.columnPchIdNo = New DataColumn("PchIdNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPchIdNo)
        End Sub
        
        Public Function NewBOBirdRegDoc_MainRow() As BOBirdRegDoc_MainRow
            Return CType(Me.NewRow,BOBirdRegDoc_MainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOBirdRegDoc_MainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOBirdRegDoc_MainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOBirdRegDoc_MainRowChangedEvent) Is Nothing) Then
                RaiseEvent BOBirdRegDoc_MainRowChanged(Me, New BOBirdRegDoc_MainRowChangeEvent(CType(e.Row,BOBirdRegDoc_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOBirdRegDoc_MainRowChangingEvent) Is Nothing) Then
                RaiseEvent BOBirdRegDoc_MainRowChanging(Me, New BOBirdRegDoc_MainRowChangeEvent(CType(e.Row,BOBirdRegDoc_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOBirdRegDoc_MainRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOBirdRegDoc_MainRowDeleted(Me, New BOBirdRegDoc_MainRowChangeEvent(CType(e.Row,BOBirdRegDoc_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOBirdRegDoc_MainRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOBirdRegDoc_MainRowDeleting(Me, New BOBirdRegDoc_MainRowChangeEvent(CType(e.Row,BOBirdRegDoc_MainRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOBirdRegDoc_MainRow(ByVal row As BOBirdRegDoc_MainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOBirdRegDoc_MainRow
        Inherits DataRow
        
        Private tableBOBirdRegDoc_Main As BOBirdRegDoc_MainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOBirdRegDoc_Main = CType(Me.Table,BOBirdRegDoc_MainDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.ApplicationIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property Barcode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.BarcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.BarcodeColumn) = value
            End Set
        End Property
        
        Public Property IssueDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.IssueDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.IssueDateColumn) = value
            End Set
        End Property
        
        Public Property DocumentNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.DocumentNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.DocumentNoColumn) = value
            End Set
        End Property
        
        Public Property PreviousDocumentNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.PreviousDocumentNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.PreviousDocumentNoColumn) = value
            End Set
        End Property
        
        Public Property KeeperDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.KeeperDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.KeeperDetailsColumn) = value
            End Set
        End Property
        
        Public Property KeptAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.KeptAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.KeptAddressColumn) = value
            End Set
        End Property
        
        Public Property IdMarksTypes As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.IdMarksTypesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.IdMarksTypesColumn) = value
            End Set
        End Property
        
        Public Property Species As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.SpeciesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.SpeciesColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property Origin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.OriginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.OriginColumn) = value
            End Set
        End Property
        
        Public Property DateHatched As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.DateHatchedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.DateHatchedColumn) = value
            End Set
        End Property
        
        Public Property DateAcquired As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.DateAcquiredColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.DateAcquiredColumn) = value
            End Set
        End Property
        
        Public Property Sex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.SexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.SexColumn) = value
            End Set
        End Property
        
        Public Property LicenceNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.LicenceNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.LicenceNumberColumn) = value
            End Set
        End Property
        
        Public Property MaleParentIdMarkType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.MaleParentIdMarkTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.MaleParentIdMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property FemaleParentIdMarkType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.FemaleParentIdMarkTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.FemaleParentIdMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property ShowRegulation8 As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.ShowRegulation8Column),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.ShowRegulation8Column) = value
            End Set
        End Property
        
        Public Property PchIdMarkType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.PchIdMarkTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.PchIdMarkTypeColumn) = value
            End Set
        End Property
        
        Public Property pchSpecies As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.pchSpeciesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.pchSpeciesColumn) = value
            End Set
        End Property
        
        Public Property PchCommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.PchCommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.PchCommonNameColumn) = value
            End Set
        End Property
        
        Public Property PchPresentKeeper As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.PchPresentKeeperColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.PchPresentKeeperColumn) = value
            End Set
        End Property
        
        Public Property PchIdNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOBirdRegDoc_Main.PchIdNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOBirdRegDoc_Main.PchIdNoColumn) = value
            End Set
        End Property
        
        Public Function IsApplicationIdNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.ApplicationIdColumn)
        End Function
        
        Public Sub SetApplicationIdNull()
            Me(Me.tableBOBirdRegDoc_Main.ApplicationIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.BarcodeColumn)
        End Function
        
        Public Sub SetBarcodeNull()
            Me(Me.tableBOBirdRegDoc_Main.BarcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.IssueDateColumn)
        End Function
        
        Public Sub SetIssueDateNull()
            Me(Me.tableBOBirdRegDoc_Main.IssueDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDocumentNoNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.DocumentNoColumn)
        End Function
        
        Public Sub SetDocumentNoNull()
            Me(Me.tableBOBirdRegDoc_Main.DocumentNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPreviousDocumentNoNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.PreviousDocumentNoColumn)
        End Function
        
        Public Sub SetPreviousDocumentNoNull()
            Me(Me.tableBOBirdRegDoc_Main.PreviousDocumentNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperDetailsNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.KeeperDetailsColumn)
        End Function
        
        Public Sub SetKeeperDetailsNull()
            Me(Me.tableBOBirdRegDoc_Main.KeeperDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeptAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.KeptAddressColumn)
        End Function
        
        Public Sub SetKeptAddressNull()
            Me(Me.tableBOBirdRegDoc_Main.KeptAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarksTypesNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.IdMarksTypesColumn)
        End Function
        
        Public Sub SetIdMarksTypesNull()
            Me(Me.tableBOBirdRegDoc_Main.IdMarksTypesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpeciesNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.SpeciesColumn)
        End Function
        
        Public Sub SetSpeciesNull()
            Me(Me.tableBOBirdRegDoc_Main.SpeciesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.CommonNameColumn)
        End Function
        
        Public Sub SetCommonNameNull()
            Me(Me.tableBOBirdRegDoc_Main.CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.OriginColumn)
        End Function
        
        Public Sub SetOriginNull()
            Me(Me.tableBOBirdRegDoc_Main.OriginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateHatchedNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.DateHatchedColumn)
        End Function
        
        Public Sub SetDateHatchedNull()
            Me(Me.tableBOBirdRegDoc_Main.DateHatchedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.DateAcquiredColumn)
        End Function
        
        Public Sub SetDateAcquiredNull()
            Me(Me.tableBOBirdRegDoc_Main.DateAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.SexColumn)
        End Function
        
        Public Sub SetSexNull()
            Me(Me.tableBOBirdRegDoc_Main.SexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLicenceNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.LicenceNumberColumn)
        End Function
        
        Public Sub SetLicenceNumberNull()
            Me(Me.tableBOBirdRegDoc_Main.LicenceNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaleParentIdMarkTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.MaleParentIdMarkTypeColumn)
        End Function
        
        Public Sub SetMaleParentIdMarkTypeNull()
            Me(Me.tableBOBirdRegDoc_Main.MaleParentIdMarkTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFemaleParentIdMarkTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.FemaleParentIdMarkTypeColumn)
        End Function
        
        Public Sub SetFemaleParentIdMarkTypeNull()
            Me(Me.tableBOBirdRegDoc_Main.FemaleParentIdMarkTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShowRegulation8Null() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.ShowRegulation8Column)
        End Function
        
        Public Sub SetShowRegulation8Null()
            Me(Me.tableBOBirdRegDoc_Main.ShowRegulation8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPchIdMarkTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.PchIdMarkTypeColumn)
        End Function
        
        Public Sub SetPchIdMarkTypeNull()
            Me(Me.tableBOBirdRegDoc_Main.PchIdMarkTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspchSpeciesNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.pchSpeciesColumn)
        End Function
        
        Public Sub SetpchSpeciesNull()
            Me(Me.tableBOBirdRegDoc_Main.pchSpeciesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPchCommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.PchCommonNameColumn)
        End Function
        
        Public Sub SetPchCommonNameNull()
            Me(Me.tableBOBirdRegDoc_Main.PchCommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPchPresentKeeperNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.PchPresentKeeperColumn)
        End Function
        
        Public Sub SetPchPresentKeeperNull()
            Me(Me.tableBOBirdRegDoc_Main.PchPresentKeeperColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPchIdNoNull() As Boolean
            Return Me.IsNull(Me.tableBOBirdRegDoc_Main.PchIdNoColumn)
        End Function
        
        Public Sub SetPchIdNoNull()
            Me(Me.tableBOBirdRegDoc_Main.PchIdNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOBirdRegDoc_MainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOBirdRegDoc_MainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOBirdRegDoc_MainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOBirdRegDoc_MainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
