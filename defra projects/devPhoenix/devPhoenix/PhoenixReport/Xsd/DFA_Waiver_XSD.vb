'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DFA_WaiverData
    Inherits DataSet
    
    Private tableBODFA_Waiver As BODFA_WaiverDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BODFA_Waiver")) Is Nothing) Then
                Me.Tables.Add(New BODFA_WaiverDataTable(ds.Tables("BODFA_Waiver")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BODFA_Waiver As BODFA_WaiverDataTable
        Get
            Return Me.tableBODFA_Waiver
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DFA_WaiverData = CType(MyBase.Clone,DFA_WaiverData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BODFA_Waiver")) Is Nothing) Then
            Me.Tables.Add(New BODFA_WaiverDataTable(ds.Tables("BODFA_Waiver")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBODFA_Waiver = CType(Me.Tables("BODFA_Waiver"),BODFA_WaiverDataTable)
        If (Not (Me.tableBODFA_Waiver) Is Nothing) Then
            Me.tableBODFA_Waiver.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DFA_WaiverData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DFA_WaiverData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBODFA_Waiver = New BODFA_WaiverDataTable
        Me.Tables.Add(Me.tableBODFA_Waiver)
    End Sub
    
    Private Function ShouldSerializeBODFA_Waiver() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BODFA_WaiverRowChangeEventHandler(ByVal sender As Object, ByVal e As BODFA_WaiverRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BODFA_WaiverDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRowId As DataColumn
        
        Private columnBoldRow As DataColumn
        
        Private columnColumnData As DataColumn
        
        Private columnReference As DataColumn
        
        Private columnApplicationNumber As DataColumn
        
        Private columnOriginalAmount As DataColumn
        
        Private columnAmountWaived As DataColumn
        
        Private columnPartyID As DataColumn
        
        Private columnPartyName As DataColumn
        
        Private columnUserName As DataColumn
        
        Friend Sub New()
            MyBase.New("BODFA_Waiver")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property RowIdColumn As DataColumn
            Get
                Return Me.columnRowId
            End Get
        End Property
        
        Friend ReadOnly Property BoldRowColumn As DataColumn
            Get
                Return Me.columnBoldRow
            End Get
        End Property
        
        Friend ReadOnly Property ColumnDataColumn As DataColumn
            Get
                Return Me.columnColumnData
            End Get
        End Property
        
        Friend ReadOnly Property ReferenceColumn As DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationNumberColumn As DataColumn
            Get
                Return Me.columnApplicationNumber
            End Get
        End Property
        
        Friend ReadOnly Property OriginalAmountColumn As DataColumn
            Get
                Return Me.columnOriginalAmount
            End Get
        End Property
        
        Friend ReadOnly Property AmountWaivedColumn As DataColumn
            Get
                Return Me.columnAmountWaived
            End Get
        End Property
        
        Friend ReadOnly Property PartyIDColumn As DataColumn
            Get
                Return Me.columnPartyID
            End Get
        End Property
        
        Friend ReadOnly Property PartyNameColumn As DataColumn
            Get
                Return Me.columnPartyName
            End Get
        End Property
        
        Friend ReadOnly Property UserNameColumn As DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BODFA_WaiverRow
            Get
                Return CType(Me.Rows(index),BODFA_WaiverRow)
            End Get
        End Property
        
        Public Event BODFA_WaiverRowChanged As BODFA_WaiverRowChangeEventHandler
        
        Public Event BODFA_WaiverRowChanging As BODFA_WaiverRowChangeEventHandler
        
        Public Event BODFA_WaiverRowDeleted As BODFA_WaiverRowChangeEventHandler
        
        Public Event BODFA_WaiverRowDeleting As BODFA_WaiverRowChangeEventHandler
        
        Public Overloads Sub AddBODFA_WaiverRow(ByVal row As BODFA_WaiverRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBODFA_WaiverRow(ByVal RowId As Long, ByVal BoldRow As Boolean, ByVal ColumnData As String, ByVal Reference As String, ByVal ApplicationNumber As String, ByVal OriginalAmount As String, ByVal AmountWaived As String, ByVal PartyID As String, ByVal PartyName As String, ByVal UserName As String) As BODFA_WaiverRow
            Dim rowBODFA_WaiverRow As BODFA_WaiverRow = CType(Me.NewRow,BODFA_WaiverRow)
            rowBODFA_WaiverRow.ItemArray = New Object() {RowId, BoldRow, ColumnData, Reference, ApplicationNumber, OriginalAmount, AmountWaived, PartyID, PartyName, UserName}
            Me.Rows.Add(rowBODFA_WaiverRow)
            Return rowBODFA_WaiverRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BODFA_WaiverDataTable = CType(MyBase.Clone,BODFA_WaiverDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BODFA_WaiverDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnRowId = Me.Columns("RowId")
            Me.columnBoldRow = Me.Columns("BoldRow")
            Me.columnColumnData = Me.Columns("ColumnData")
            Me.columnReference = Me.Columns("Reference")
            Me.columnApplicationNumber = Me.Columns("ApplicationNumber")
            Me.columnOriginalAmount = Me.Columns("OriginalAmount")
            Me.columnAmountWaived = Me.Columns("AmountWaived")
            Me.columnPartyID = Me.Columns("PartyID")
            Me.columnPartyName = Me.Columns("PartyName")
            Me.columnUserName = Me.Columns("UserName")
        End Sub
        
        Private Sub InitClass()
            Me.columnRowId = New DataColumn("RowId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRowId)
            Me.columnBoldRow = New DataColumn("BoldRow", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBoldRow)
            Me.columnColumnData = New DataColumn("ColumnData", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnColumnData)
            Me.columnReference = New DataColumn("Reference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReference)
            Me.columnApplicationNumber = New DataColumn("ApplicationNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationNumber)
            Me.columnOriginalAmount = New DataColumn("OriginalAmount", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOriginalAmount)
            Me.columnAmountWaived = New DataColumn("AmountWaived", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountWaived)
            Me.columnPartyID = New DataColumn("PartyID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyID)
            Me.columnPartyName = New DataColumn("PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPartyName)
            Me.columnUserName = New DataColumn("UserName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserName)
        End Sub
        
        Public Function NewBODFA_WaiverRow() As BODFA_WaiverRow
            Return CType(Me.NewRow,BODFA_WaiverRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BODFA_WaiverRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BODFA_WaiverRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BODFA_WaiverRowChangedEvent) Is Nothing) Then
                RaiseEvent BODFA_WaiverRowChanged(Me, New BODFA_WaiverRowChangeEvent(CType(e.Row,BODFA_WaiverRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BODFA_WaiverRowChangingEvent) Is Nothing) Then
                RaiseEvent BODFA_WaiverRowChanging(Me, New BODFA_WaiverRowChangeEvent(CType(e.Row,BODFA_WaiverRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BODFA_WaiverRowDeletedEvent) Is Nothing) Then
                RaiseEvent BODFA_WaiverRowDeleted(Me, New BODFA_WaiverRowChangeEvent(CType(e.Row,BODFA_WaiverRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BODFA_WaiverRowDeletingEvent) Is Nothing) Then
                RaiseEvent BODFA_WaiverRowDeleting(Me, New BODFA_WaiverRowChangeEvent(CType(e.Row,BODFA_WaiverRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBODFA_WaiverRow(ByVal row As BODFA_WaiverRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BODFA_WaiverRow
        Inherits DataRow
        
        Private tableBODFA_Waiver As BODFA_WaiverDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBODFA_Waiver = CType(Me.Table,BODFA_WaiverDataTable)
        End Sub
        
        Public Property RowId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.RowIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.RowIdColumn) = value
            End Set
        End Property
        
        Public Property BoldRow As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.BoldRowColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.BoldRowColumn) = value
            End Set
        End Property
        
        Public Property ColumnData As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.ColumnDataColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.ColumnDataColumn) = value
            End Set
        End Property
        
        Public Property Reference As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.ReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.ReferenceColumn) = value
            End Set
        End Property
        
        Public Property ApplicationNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.ApplicationNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.ApplicationNumberColumn) = value
            End Set
        End Property
        
        Public Property OriginalAmount As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.OriginalAmountColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.OriginalAmountColumn) = value
            End Set
        End Property
        
        Public Property AmountWaived As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.AmountWaivedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.AmountWaivedColumn) = value
            End Set
        End Property
        
        Public Property PartyID As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.PartyIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.PartyIDColumn) = value
            End Set
        End Property
        
        Public Property PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.PartyNameColumn) = value
            End Set
        End Property
        
        Public Property UserName As String
            Get
                Try 
                    Return CType(Me(Me.tableBODFA_Waiver.UserNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBODFA_Waiver.UserNameColumn) = value
            End Set
        End Property
        
        Public Function IsRowIdNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.RowIdColumn)
        End Function
        
        Public Sub SetRowIdNull()
            Me(Me.tableBODFA_Waiver.RowIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBoldRowNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.BoldRowColumn)
        End Function
        
        Public Sub SetBoldRowNull()
            Me(Me.tableBODFA_Waiver.BoldRowColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsColumnDataNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.ColumnDataColumn)
        End Function
        
        Public Sub SetColumnDataNull()
            Me(Me.tableBODFA_Waiver.ColumnDataColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.ReferenceColumn)
        End Function
        
        Public Sub SetReferenceNull()
            Me(Me.tableBODFA_Waiver.ReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationNumberNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.ApplicationNumberColumn)
        End Function
        
        Public Sub SetApplicationNumberNull()
            Me(Me.tableBODFA_Waiver.ApplicationNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginalAmountNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.OriginalAmountColumn)
        End Function
        
        Public Sub SetOriginalAmountNull()
            Me(Me.tableBODFA_Waiver.OriginalAmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountWaivedNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.AmountWaivedColumn)
        End Function
        
        Public Sub SetAmountWaivedNull()
            Me(Me.tableBODFA_Waiver.AmountWaivedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartyIDNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.PartyIDColumn)
        End Function
        
        Public Sub SetPartyIDNull()
            Me(Me.tableBODFA_Waiver.PartyIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.PartyNameColumn)
        End Function
        
        Public Sub SetPartyNameNull()
            Me(Me.tableBODFA_Waiver.PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserNameNull() As Boolean
            Return Me.IsNull(Me.tableBODFA_Waiver.UserNameColumn)
        End Function
        
        Public Sub SetUserNameNull()
            Me(Me.tableBODFA_Waiver.UserNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BODFA_WaiverRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BODFA_WaiverRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BODFA_WaiverRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BODFA_WaiverRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
