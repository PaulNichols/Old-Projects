'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class LimisRunningTotalsData
    Inherits DataSet
    
    Private tableBORunningTotals As BORunningTotalsDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BORunningTotals")) Is Nothing) Then
                Me.Tables.Add(New BORunningTotalsDataTable(ds.Tables("BORunningTotals")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BORunningTotals As BORunningTotalsDataTable
        Get
            Return Me.tableBORunningTotals
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As LimisRunningTotalsData = CType(MyBase.Clone,LimisRunningTotalsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BORunningTotals")) Is Nothing) Then
            Me.Tables.Add(New BORunningTotalsDataTable(ds.Tables("BORunningTotals")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBORunningTotals = CType(Me.Tables("BORunningTotals"),BORunningTotalsDataTable)
        If (Not (Me.tableBORunningTotals) Is Nothing) Then
            Me.tableBORunningTotals.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "LimisRunningTotalsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/LimisRunningTotalsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBORunningTotals = New BORunningTotalsDataTable
        Me.Tables.Add(Me.tableBORunningTotals)
    End Sub
    
    Private Function ShouldSerializeBORunningTotals() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BORunningTotalsRowChangeEventHandler(ByVal sender As Object, ByVal e As BORunningTotalsRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORunningTotalsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMonthIdx As DataColumn
        
        Private columnMonth As DataColumn
        
        Private columnArticle10_TotDocs As DataColumn
        
        Private columnArticle10_DocsInTarget As DataColumn
        
        Private columnArticle10_PercentInTarget As DataColumn
        
        Private columnCitesPermits_TotDocs As DataColumn
        
        Private columnCitesPermits_DocsInTarget As DataColumn
        
        Private columnCitesPermits_PercentInTarget As DataColumn
        
        Private columnBirdChicks_TotDocs As DataColumn
        
        Private columnBirdChicks_DocsInTarget As DataColumn
        
        Private columnBirdChicks_PercentInTarget As DataColumn
        
        Private columnBirdAdult_TotDocs As DataColumn
        
        Private columnBirdAdult_DocsInTarget As DataColumn
        
        Private columnBirdAdult_PercentInTarget As DataColumn
        
        Private columnPageHeading As DataColumn
        
        Private columnTotalHeading As DataColumn
        
        Friend Sub New()
            MyBase.New("BORunningTotals")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MonthIdxColumn As DataColumn
            Get
                Return Me.columnMonthIdx
            End Get
        End Property
        
        Friend ReadOnly Property MonthColumn As DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        Friend ReadOnly Property Article10_TotDocsColumn As DataColumn
            Get
                Return Me.columnArticle10_TotDocs
            End Get
        End Property
        
        Friend ReadOnly Property Article10_DocsInTargetColumn As DataColumn
            Get
                Return Me.columnArticle10_DocsInTarget
            End Get
        End Property
        
        Friend ReadOnly Property Article10_PercentInTargetColumn As DataColumn
            Get
                Return Me.columnArticle10_PercentInTarget
            End Get
        End Property
        
        Friend ReadOnly Property CitesPermits_TotDocsColumn As DataColumn
            Get
                Return Me.columnCitesPermits_TotDocs
            End Get
        End Property
        
        Friend ReadOnly Property CitesPermits_DocsInTargetColumn As DataColumn
            Get
                Return Me.columnCitesPermits_DocsInTarget
            End Get
        End Property
        
        Friend ReadOnly Property CitesPermits_PercentInTargetColumn As DataColumn
            Get
                Return Me.columnCitesPermits_PercentInTarget
            End Get
        End Property
        
        Friend ReadOnly Property BirdChicks_TotDocsColumn As DataColumn
            Get
                Return Me.columnBirdChicks_TotDocs
            End Get
        End Property
        
        Friend ReadOnly Property BirdChicks_DocsInTargetColumn As DataColumn
            Get
                Return Me.columnBirdChicks_DocsInTarget
            End Get
        End Property
        
        Friend ReadOnly Property BirdChicks_PercentInTargetColumn As DataColumn
            Get
                Return Me.columnBirdChicks_PercentInTarget
            End Get
        End Property
        
        Friend ReadOnly Property BirdAdult_TotDocsColumn As DataColumn
            Get
                Return Me.columnBirdAdult_TotDocs
            End Get
        End Property
        
        Friend ReadOnly Property BirdAdult_DocsInTargetColumn As DataColumn
            Get
                Return Me.columnBirdAdult_DocsInTarget
            End Get
        End Property
        
        Friend ReadOnly Property BirdAdult_PercentInTargetColumn As DataColumn
            Get
                Return Me.columnBirdAdult_PercentInTarget
            End Get
        End Property
        
        Friend ReadOnly Property PageHeadingColumn As DataColumn
            Get
                Return Me.columnPageHeading
            End Get
        End Property
        
        Friend ReadOnly Property TotalHeadingColumn As DataColumn
            Get
                Return Me.columnTotalHeading
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BORunningTotalsRow
            Get
                Return CType(Me.Rows(index),BORunningTotalsRow)
            End Get
        End Property
        
        Public Event BORunningTotalsRowChanged As BORunningTotalsRowChangeEventHandler
        
        Public Event BORunningTotalsRowChanging As BORunningTotalsRowChangeEventHandler
        
        Public Event BORunningTotalsRowDeleted As BORunningTotalsRowChangeEventHandler
        
        Public Event BORunningTotalsRowDeleting As BORunningTotalsRowChangeEventHandler
        
        Public Overloads Sub AddBORunningTotalsRow(ByVal row As BORunningTotalsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBORunningTotalsRow( _
                    ByVal MonthIdx As Long,  _
                    ByVal Month As String,  _
                    ByVal Article10_TotDocs As String,  _
                    ByVal Article10_DocsInTarget As String,  _
                    ByVal Article10_PercentInTarget As String,  _
                    ByVal CitesPermits_TotDocs As String,  _
                    ByVal CitesPermits_DocsInTarget As String,  _
                    ByVal CitesPermits_PercentInTarget As String,  _
                    ByVal BirdChicks_TotDocs As String,  _
                    ByVal BirdChicks_DocsInTarget As String,  _
                    ByVal BirdChicks_PercentInTarget As String,  _
                    ByVal BirdAdult_TotDocs As String,  _
                    ByVal BirdAdult_DocsInTarget As String,  _
                    ByVal BirdAdult_PercentInTarget As String,  _
                    ByVal PageHeading As Boolean,  _
                    ByVal TotalHeading As Boolean) As BORunningTotalsRow
            Dim rowBORunningTotalsRow As BORunningTotalsRow = CType(Me.NewRow,BORunningTotalsRow)
            rowBORunningTotalsRow.ItemArray = New Object() {MonthIdx, Month, Article10_TotDocs, Article10_DocsInTarget, Article10_PercentInTarget, CitesPermits_TotDocs, CitesPermits_DocsInTarget, CitesPermits_PercentInTarget, BirdChicks_TotDocs, BirdChicks_DocsInTarget, BirdChicks_PercentInTarget, BirdAdult_TotDocs, BirdAdult_DocsInTarget, BirdAdult_PercentInTarget, PageHeading, TotalHeading}
            Me.Rows.Add(rowBORunningTotalsRow)
            Return rowBORunningTotalsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BORunningTotalsDataTable = CType(MyBase.Clone,BORunningTotalsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BORunningTotalsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMonthIdx = Me.Columns("MonthIdx")
            Me.columnMonth = Me.Columns("Month")
            Me.columnArticle10_TotDocs = Me.Columns("Article10_TotDocs")
            Me.columnArticle10_DocsInTarget = Me.Columns("Article10_DocsInTarget")
            Me.columnArticle10_PercentInTarget = Me.Columns("Article10_PercentInTarget")
            Me.columnCitesPermits_TotDocs = Me.Columns("CitesPermits_TotDocs")
            Me.columnCitesPermits_DocsInTarget = Me.Columns("CitesPermits_DocsInTarget")
            Me.columnCitesPermits_PercentInTarget = Me.Columns("CitesPermits_PercentInTarget")
            Me.columnBirdChicks_TotDocs = Me.Columns("BirdChicks_TotDocs")
            Me.columnBirdChicks_DocsInTarget = Me.Columns("BirdChicks_DocsInTarget")
            Me.columnBirdChicks_PercentInTarget = Me.Columns("BirdChicks_PercentInTarget")
            Me.columnBirdAdult_TotDocs = Me.Columns("BirdAdult_TotDocs")
            Me.columnBirdAdult_DocsInTarget = Me.Columns("BirdAdult_DocsInTarget")
            Me.columnBirdAdult_PercentInTarget = Me.Columns("BirdAdult_PercentInTarget")
            Me.columnPageHeading = Me.Columns("PageHeading")
            Me.columnTotalHeading = Me.Columns("TotalHeading")
        End Sub
        
        Private Sub InitClass()
            Me.columnMonthIdx = New DataColumn("MonthIdx", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonthIdx)
            Me.columnMonth = New DataColumn("Month", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMonth)
            Me.columnArticle10_TotDocs = New DataColumn("Article10_TotDocs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10_TotDocs)
            Me.columnArticle10_DocsInTarget = New DataColumn("Article10_DocsInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10_DocsInTarget)
            Me.columnArticle10_PercentInTarget = New DataColumn("Article10_PercentInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArticle10_PercentInTarget)
            Me.columnCitesPermits_TotDocs = New DataColumn("CitesPermits_TotDocs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCitesPermits_TotDocs)
            Me.columnCitesPermits_DocsInTarget = New DataColumn("CitesPermits_DocsInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCitesPermits_DocsInTarget)
            Me.columnCitesPermits_PercentInTarget = New DataColumn("CitesPermits_PercentInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCitesPermits_PercentInTarget)
            Me.columnBirdChicks_TotDocs = New DataColumn("BirdChicks_TotDocs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdChicks_TotDocs)
            Me.columnBirdChicks_DocsInTarget = New DataColumn("BirdChicks_DocsInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdChicks_DocsInTarget)
            Me.columnBirdChicks_PercentInTarget = New DataColumn("BirdChicks_PercentInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdChicks_PercentInTarget)
            Me.columnBirdAdult_TotDocs = New DataColumn("BirdAdult_TotDocs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdAdult_TotDocs)
            Me.columnBirdAdult_DocsInTarget = New DataColumn("BirdAdult_DocsInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdAdult_DocsInTarget)
            Me.columnBirdAdult_PercentInTarget = New DataColumn("BirdAdult_PercentInTarget", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdAdult_PercentInTarget)
            Me.columnPageHeading = New DataColumn("PageHeading", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageHeading)
            Me.columnTotalHeading = New DataColumn("TotalHeading", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotalHeading)
        End Sub
        
        Public Function NewBORunningTotalsRow() As BORunningTotalsRow
            Return CType(Me.NewRow,BORunningTotalsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BORunningTotalsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BORunningTotalsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BORunningTotalsRowChangedEvent) Is Nothing) Then
                RaiseEvent BORunningTotalsRowChanged(Me, New BORunningTotalsRowChangeEvent(CType(e.Row,BORunningTotalsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BORunningTotalsRowChangingEvent) Is Nothing) Then
                RaiseEvent BORunningTotalsRowChanging(Me, New BORunningTotalsRowChangeEvent(CType(e.Row,BORunningTotalsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BORunningTotalsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BORunningTotalsRowDeleted(Me, New BORunningTotalsRowChangeEvent(CType(e.Row,BORunningTotalsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BORunningTotalsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BORunningTotalsRowDeleting(Me, New BORunningTotalsRowChangeEvent(CType(e.Row,BORunningTotalsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBORunningTotalsRow(ByVal row As BORunningTotalsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORunningTotalsRow
        Inherits DataRow
        
        Private tableBORunningTotals As BORunningTotalsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBORunningTotals = CType(Me.Table,BORunningTotalsDataTable)
        End Sub
        
        Public Property MonthIdx As Long
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.MonthIdxColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.MonthIdxColumn) = value
            End Set
        End Property
        
        Public Property Month As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.MonthColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.MonthColumn) = value
            End Set
        End Property
        
        Public Property Article10_TotDocs As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.Article10_TotDocsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.Article10_TotDocsColumn) = value
            End Set
        End Property
        
        Public Property Article10_DocsInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.Article10_DocsInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.Article10_DocsInTargetColumn) = value
            End Set
        End Property
        
        Public Property Article10_PercentInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.Article10_PercentInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.Article10_PercentInTargetColumn) = value
            End Set
        End Property
        
        Public Property CitesPermits_TotDocs As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.CitesPermits_TotDocsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.CitesPermits_TotDocsColumn) = value
            End Set
        End Property
        
        Public Property CitesPermits_DocsInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.CitesPermits_DocsInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.CitesPermits_DocsInTargetColumn) = value
            End Set
        End Property
        
        Public Property CitesPermits_PercentInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.CitesPermits_PercentInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.CitesPermits_PercentInTargetColumn) = value
            End Set
        End Property
        
        Public Property BirdChicks_TotDocs As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.BirdChicks_TotDocsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.BirdChicks_TotDocsColumn) = value
            End Set
        End Property
        
        Public Property BirdChicks_DocsInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.BirdChicks_DocsInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.BirdChicks_DocsInTargetColumn) = value
            End Set
        End Property
        
        Public Property BirdChicks_PercentInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.BirdChicks_PercentInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.BirdChicks_PercentInTargetColumn) = value
            End Set
        End Property
        
        Public Property BirdAdult_TotDocs As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.BirdAdult_TotDocsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.BirdAdult_TotDocsColumn) = value
            End Set
        End Property
        
        Public Property BirdAdult_DocsInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.BirdAdult_DocsInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.BirdAdult_DocsInTargetColumn) = value
            End Set
        End Property
        
        Public Property BirdAdult_PercentInTarget As String
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.BirdAdult_PercentInTargetColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.BirdAdult_PercentInTargetColumn) = value
            End Set
        End Property
        
        Public Property PageHeading As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.PageHeadingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.PageHeadingColumn) = value
            End Set
        End Property
        
        Public Property TotalHeading As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBORunningTotals.TotalHeadingColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORunningTotals.TotalHeadingColumn) = value
            End Set
        End Property
        
        Public Function IsMonthIdxNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.MonthIdxColumn)
        End Function
        
        Public Sub SetMonthIdxNull()
            Me(Me.tableBORunningTotals.MonthIdxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMonthNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.MonthColumn)
        End Function
        
        Public Sub SetMonthNull()
            Me(Me.tableBORunningTotals.MonthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10_TotDocsNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.Article10_TotDocsColumn)
        End Function
        
        Public Sub SetArticle10_TotDocsNull()
            Me(Me.tableBORunningTotals.Article10_TotDocsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10_DocsInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.Article10_DocsInTargetColumn)
        End Function
        
        Public Sub SetArticle10_DocsInTargetNull()
            Me(Me.tableBORunningTotals.Article10_DocsInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArticle10_PercentInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.Article10_PercentInTargetColumn)
        End Function
        
        Public Sub SetArticle10_PercentInTargetNull()
            Me(Me.tableBORunningTotals.Article10_PercentInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCitesPermits_TotDocsNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.CitesPermits_TotDocsColumn)
        End Function
        
        Public Sub SetCitesPermits_TotDocsNull()
            Me(Me.tableBORunningTotals.CitesPermits_TotDocsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCitesPermits_DocsInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.CitesPermits_DocsInTargetColumn)
        End Function
        
        Public Sub SetCitesPermits_DocsInTargetNull()
            Me(Me.tableBORunningTotals.CitesPermits_DocsInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCitesPermits_PercentInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.CitesPermits_PercentInTargetColumn)
        End Function
        
        Public Sub SetCitesPermits_PercentInTargetNull()
            Me(Me.tableBORunningTotals.CitesPermits_PercentInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdChicks_TotDocsNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.BirdChicks_TotDocsColumn)
        End Function
        
        Public Sub SetBirdChicks_TotDocsNull()
            Me(Me.tableBORunningTotals.BirdChicks_TotDocsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdChicks_DocsInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.BirdChicks_DocsInTargetColumn)
        End Function
        
        Public Sub SetBirdChicks_DocsInTargetNull()
            Me(Me.tableBORunningTotals.BirdChicks_DocsInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdChicks_PercentInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.BirdChicks_PercentInTargetColumn)
        End Function
        
        Public Sub SetBirdChicks_PercentInTargetNull()
            Me(Me.tableBORunningTotals.BirdChicks_PercentInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdAdult_TotDocsNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.BirdAdult_TotDocsColumn)
        End Function
        
        Public Sub SetBirdAdult_TotDocsNull()
            Me(Me.tableBORunningTotals.BirdAdult_TotDocsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdAdult_DocsInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.BirdAdult_DocsInTargetColumn)
        End Function
        
        Public Sub SetBirdAdult_DocsInTargetNull()
            Me(Me.tableBORunningTotals.BirdAdult_DocsInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdAdult_PercentInTargetNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.BirdAdult_PercentInTargetColumn)
        End Function
        
        Public Sub SetBirdAdult_PercentInTargetNull()
            Me(Me.tableBORunningTotals.BirdAdult_PercentInTargetColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.PageHeadingColumn)
        End Function
        
        Public Sub SetPageHeadingNull()
            Me(Me.tableBORunningTotals.PageHeadingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalHeadingNull() As Boolean
            Return Me.IsNull(Me.tableBORunningTotals.TotalHeadingColumn)
        End Function
        
        Public Sub SetTotalHeadingNull()
            Me(Me.tableBORunningTotals.TotalHeadingColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORunningTotalsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BORunningTotalsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BORunningTotalsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BORunningTotalsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
