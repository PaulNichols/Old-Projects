'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Schedule4ReplacementRingsData
    Inherits DataSet
    
    Private tableBOSchedule4ReplacementRings_Main As BOSchedule4ReplacementRings_MainDataTable
    
    Private tableBOSchedule4ReplacementRings_Sub1 As BOSchedule4ReplacementRings_Sub1DataTable
    
    Private tableBOSchedule4InspectorSig As BOSchedule4InspectorSigDataTable
    
    Private relationBOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1 As DataRelation
    
    Private relationBOSchedule4ReplacementRings_MainBOSchedule4InspectorSig As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOSchedule4ReplacementRings_Main")) Is Nothing) Then
                Me.Tables.Add(New BOSchedule4ReplacementRings_MainDataTable(ds.Tables("BOSchedule4ReplacementRings_Main")))
            End If
            If (Not (ds.Tables("BOSchedule4ReplacementRings_Sub1")) Is Nothing) Then
                Me.Tables.Add(New BOSchedule4ReplacementRings_Sub1DataTable(ds.Tables("BOSchedule4ReplacementRings_Sub1")))
            End If
            If (Not (ds.Tables("BOSchedule4InspectorSig")) Is Nothing) Then
                Me.Tables.Add(New BOSchedule4InspectorSigDataTable(ds.Tables("BOSchedule4InspectorSig")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSchedule4ReplacementRings_Main As BOSchedule4ReplacementRings_MainDataTable
        Get
            Return Me.tableBOSchedule4ReplacementRings_Main
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSchedule4ReplacementRings_Sub1 As BOSchedule4ReplacementRings_Sub1DataTable
        Get
            Return Me.tableBOSchedule4ReplacementRings_Sub1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOSchedule4InspectorSig As BOSchedule4InspectorSigDataTable
        Get
            Return Me.tableBOSchedule4InspectorSig
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Schedule4ReplacementRingsData = CType(MyBase.Clone,Schedule4ReplacementRingsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOSchedule4ReplacementRings_Main")) Is Nothing) Then
            Me.Tables.Add(New BOSchedule4ReplacementRings_MainDataTable(ds.Tables("BOSchedule4ReplacementRings_Main")))
        End If
        If (Not (ds.Tables("BOSchedule4ReplacementRings_Sub1")) Is Nothing) Then
            Me.Tables.Add(New BOSchedule4ReplacementRings_Sub1DataTable(ds.Tables("BOSchedule4ReplacementRings_Sub1")))
        End If
        If (Not (ds.Tables("BOSchedule4InspectorSig")) Is Nothing) Then
            Me.Tables.Add(New BOSchedule4InspectorSigDataTable(ds.Tables("BOSchedule4InspectorSig")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOSchedule4ReplacementRings_Main = CType(Me.Tables("BOSchedule4ReplacementRings_Main"),BOSchedule4ReplacementRings_MainDataTable)
        If (Not (Me.tableBOSchedule4ReplacementRings_Main) Is Nothing) Then
            Me.tableBOSchedule4ReplacementRings_Main.InitVars
        End If
        Me.tableBOSchedule4ReplacementRings_Sub1 = CType(Me.Tables("BOSchedule4ReplacementRings_Sub1"),BOSchedule4ReplacementRings_Sub1DataTable)
        If (Not (Me.tableBOSchedule4ReplacementRings_Sub1) Is Nothing) Then
            Me.tableBOSchedule4ReplacementRings_Sub1.InitVars
        End If
        Me.tableBOSchedule4InspectorSig = CType(Me.Tables("BOSchedule4InspectorSig"),BOSchedule4InspectorSigDataTable)
        If (Not (Me.tableBOSchedule4InspectorSig) Is Nothing) Then
            Me.tableBOSchedule4InspectorSig.InitVars
        End If
        Me.relationBOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1 = Me.Relations("BOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1")
        Me.relationBOSchedule4ReplacementRings_MainBOSchedule4InspectorSig = Me.Relations("BOSchedule4ReplacementRings_MainBOSchedule4InspectorSig")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Schedule4ReplacementRingsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Schedule4ReplacementRingsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOSchedule4ReplacementRings_Main = New BOSchedule4ReplacementRings_MainDataTable
        Me.Tables.Add(Me.tableBOSchedule4ReplacementRings_Main)
        Me.tableBOSchedule4ReplacementRings_Sub1 = New BOSchedule4ReplacementRings_Sub1DataTable
        Me.Tables.Add(Me.tableBOSchedule4ReplacementRings_Sub1)
        Me.tableBOSchedule4InspectorSig = New BOSchedule4InspectorSigDataTable
        Me.Tables.Add(Me.tableBOSchedule4InspectorSig)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1", New DataColumn() {Me.tableBOSchedule4ReplacementRings_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4ReplacementRings_Sub1.ApplicationIdColumn})
        Me.tableBOSchedule4ReplacementRings_Sub1.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("BOSchedule4ReplacementRings_MainBOSchedule4InspectorSig", New DataColumn() {Me.tableBOSchedule4ReplacementRings_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4InspectorSig.ApplicationIdColumn})
        Me.tableBOSchedule4InspectorSig.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1 = New DataRelation("BOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1", New DataColumn() {Me.tableBOSchedule4ReplacementRings_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4ReplacementRings_Sub1.ApplicationIdColumn}, false)
        Me.Relations.Add(Me.relationBOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1)
        Me.relationBOSchedule4ReplacementRings_MainBOSchedule4InspectorSig = New DataRelation("BOSchedule4ReplacementRings_MainBOSchedule4InspectorSig", New DataColumn() {Me.tableBOSchedule4ReplacementRings_Main.ApplicationIdColumn}, New DataColumn() {Me.tableBOSchedule4InspectorSig.ApplicationIdColumn}, false)
        Me.Relations.Add(Me.relationBOSchedule4ReplacementRings_MainBOSchedule4InspectorSig)
    End Sub
    
    Private Function ShouldSerializeBOSchedule4ReplacementRings_Main() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOSchedule4ReplacementRings_Sub1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOSchedule4InspectorSig() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOSchedule4ReplacementRings_MainRowChangeEventHandler(ByVal sender As Object, ByVal e As BOSchedule4ReplacementRings_MainRowChangeEvent)
    
    Public Delegate Sub BOSchedule4ReplacementRings_Sub1RowChangeEventHandler(ByVal sender As Object, ByVal e As BOSchedule4ReplacementRings_Sub1RowChangeEvent)
    
    Public Delegate Sub BOSchedule4InspectorSigRowChangeEventHandler(ByVal sender As Object, ByVal e As BOSchedule4InspectorSigRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4ReplacementRings_MainDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBarcode As DataColumn
        
        Private columnInspectionSection As DataColumn
        
        Private columnMaxSignatures As DataColumn
        
        Private columnKeeperDetails As DataColumn
        
        Private columnApplicationRef As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSchedule4ReplacementRings_Main")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BarcodeColumn As DataColumn
            Get
                Return Me.columnBarcode
            End Get
        End Property
        
        Friend ReadOnly Property InspectionSectionColumn As DataColumn
            Get
                Return Me.columnInspectionSection
            End Get
        End Property
        
        Friend ReadOnly Property MaxSignaturesColumn As DataColumn
            Get
                Return Me.columnMaxSignatures
            End Get
        End Property
        
        Friend ReadOnly Property KeeperDetailsColumn As DataColumn
            Get
                Return Me.columnKeeperDetails
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationRefColumn As DataColumn
            Get
                Return Me.columnApplicationRef
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSchedule4ReplacementRings_MainRow
            Get
                Return CType(Me.Rows(index),BOSchedule4ReplacementRings_MainRow)
            End Get
        End Property
        
        Public Event BOSchedule4ReplacementRings_MainRowChanged As BOSchedule4ReplacementRings_MainRowChangeEventHandler
        
        Public Event BOSchedule4ReplacementRings_MainRowChanging As BOSchedule4ReplacementRings_MainRowChangeEventHandler
        
        Public Event BOSchedule4ReplacementRings_MainRowDeleted As BOSchedule4ReplacementRings_MainRowChangeEventHandler
        
        Public Event BOSchedule4ReplacementRings_MainRowDeleting As BOSchedule4ReplacementRings_MainRowChangeEventHandler
        
        Public Overloads Sub AddBOSchedule4ReplacementRings_MainRow(ByVal row As BOSchedule4ReplacementRings_MainRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSchedule4ReplacementRings_MainRow(ByVal ApplicationId As Long, ByVal Barcode As String, ByVal InspectionSection As Boolean, ByVal MaxSignatures As Long, ByVal KeeperDetails As String, ByVal ApplicationRef As String) As BOSchedule4ReplacementRings_MainRow
            Dim rowBOSchedule4ReplacementRings_MainRow As BOSchedule4ReplacementRings_MainRow = CType(Me.NewRow,BOSchedule4ReplacementRings_MainRow)
            rowBOSchedule4ReplacementRings_MainRow.ItemArray = New Object() {ApplicationId, Barcode, InspectionSection, MaxSignatures, KeeperDetails, ApplicationRef}
            Me.Rows.Add(rowBOSchedule4ReplacementRings_MainRow)
            Return rowBOSchedule4ReplacementRings_MainRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSchedule4ReplacementRings_MainDataTable = CType(MyBase.Clone,BOSchedule4ReplacementRings_MainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSchedule4ReplacementRings_MainDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBarcode = Me.Columns("Barcode")
            Me.columnInspectionSection = Me.Columns("InspectionSection")
            Me.columnMaxSignatures = Me.Columns("MaxSignatures")
            Me.columnKeeperDetails = Me.Columns("KeeperDetails")
            Me.columnApplicationRef = Me.Columns("ApplicationRef")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBarcode = New DataColumn("Barcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarcode)
            Me.columnInspectionSection = New DataColumn("InspectionSection", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInspectionSection)
            Me.columnMaxSignatures = New DataColumn("MaxSignatures", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaxSignatures)
            Me.columnKeeperDetails = New DataColumn("KeeperDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeeperDetails)
            Me.columnApplicationRef = New DataColumn("ApplicationRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationRef)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnApplicationId}, false))
            Me.columnApplicationId.AllowDBNull = false
            Me.columnApplicationId.Unique = true
        End Sub
        
        Public Function NewBOSchedule4ReplacementRings_MainRow() As BOSchedule4ReplacementRings_MainRow
            Return CType(Me.NewRow,BOSchedule4ReplacementRings_MainRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSchedule4ReplacementRings_MainRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSchedule4ReplacementRings_MainRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSchedule4ReplacementRings_MainRowChangedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_MainRowChanged(Me, New BOSchedule4ReplacementRings_MainRowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSchedule4ReplacementRings_MainRowChangingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_MainRowChanging(Me, New BOSchedule4ReplacementRings_MainRowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSchedule4ReplacementRings_MainRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_MainRowDeleted(Me, New BOSchedule4ReplacementRings_MainRowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_MainRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSchedule4ReplacementRings_MainRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_MainRowDeleting(Me, New BOSchedule4ReplacementRings_MainRowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_MainRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSchedule4ReplacementRings_MainRow(ByVal row As BOSchedule4ReplacementRings_MainRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4ReplacementRings_MainRow
        Inherits DataRow
        
        Private tableBOSchedule4ReplacementRings_Main As BOSchedule4ReplacementRings_MainDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSchedule4ReplacementRings_Main = CType(Me.Table,BOSchedule4ReplacementRings_MainDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Return CType(Me(Me.tableBOSchedule4ReplacementRings_Main.ApplicationIdColumn),Long)
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Main.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property Barcode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Main.BarcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Main.BarcodeColumn) = value
            End Set
        End Property
        
        Public Property InspectionSection As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Main.InspectionSectionColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Main.InspectionSectionColumn) = value
            End Set
        End Property
        
        Public Property MaxSignatures As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Main.MaxSignaturesColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Main.MaxSignaturesColumn) = value
            End Set
        End Property
        
        Public Property KeeperDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Main.KeeperDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Main.KeeperDetailsColumn) = value
            End Set
        End Property
        
        Public Property ApplicationRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Main.ApplicationRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Main.ApplicationRefColumn) = value
            End Set
        End Property
        
        Public Function IsBarcodeNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Main.BarcodeColumn)
        End Function
        
        Public Sub SetBarcodeNull()
            Me(Me.tableBOSchedule4ReplacementRings_Main.BarcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInspectionSectionNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Main.InspectionSectionColumn)
        End Function
        
        Public Sub SetInspectionSectionNull()
            Me(Me.tableBOSchedule4ReplacementRings_Main.InspectionSectionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMaxSignaturesNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Main.MaxSignaturesColumn)
        End Function
        
        Public Sub SetMaxSignaturesNull()
            Me(Me.tableBOSchedule4ReplacementRings_Main.MaxSignaturesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeeperDetailsNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Main.KeeperDetailsColumn)
        End Function
        
        Public Sub SetKeeperDetailsNull()
            Me(Me.tableBOSchedule4ReplacementRings_Main.KeeperDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsApplicationRefNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Main.ApplicationRefColumn)
        End Function
        
        Public Sub SetApplicationRefNull()
            Me(Me.tableBOSchedule4ReplacementRings_Main.ApplicationRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBOSchedule4ReplacementRings_Sub1Rows() As BOSchedule4ReplacementRings_Sub1Row()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1")),BOSchedule4ReplacementRings_Sub1Row())
        End Function
        
        Public Function GetBOSchedule4InspectorSigRows() As BOSchedule4InspectorSigRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOSchedule4ReplacementRings_MainBOSchedule4InspectorSig")),BOSchedule4InspectorSigRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4ReplacementRings_MainRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSchedule4ReplacementRings_MainRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSchedule4ReplacementRings_MainRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSchedule4ReplacementRings_MainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4ReplacementRings_Sub1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBirdNo As DataColumn
        
        Private columnSpecies As DataColumn
        
        Private columnCommonName As DataColumn
        
        Private columnKeptAddress As DataColumn
        
        Private columnDateHatched As DataColumn
        
        Private columnSex As DataColumn
        
        Private columnOrigin As DataColumn
        
        Private columnDateAcquired As DataColumn
        
        Private columnRingNo1 As DataColumn
        
        Private columnRingNo2 As DataColumn
        
        Private columnRingNo3 As DataColumn
        
        Private columnRingNo4 As DataColumn
        
        Private columnRingNo5 As DataColumn
        
        Private columnRingNo6 As DataColumn
        
        Private columnRingNo7 As DataColumn
        
        Private columnRingNo8 As DataColumn
        
        Private columnRingNo9 As DataColumn
        
        Private columnRingNo10 As DataColumn
        
        Private columnIdMarkType1 As DataColumn
        
        Private columnIdMarkType2 As DataColumn
        
        Private columnIdMarkType3 As DataColumn
        
        Private columnIdMarkType4 As DataColumn
        
        Private columnIdMarkType5 As DataColumn
        
        Private columnIdMarkType6 As DataColumn
        
        Private columnIdMarkType7 As DataColumn
        
        Private columnIdMarkType8 As DataColumn
        
        Private columnIdMarkType9 As DataColumn
        
        Private columnIdMarkType10 As DataColumn
        
        Private columnIdMarkTypeFitted1X As DataColumn
        
        Private columnIdMarkTypeFitted2X As DataColumn
        
        Private columnIdMarkTypeFitted3X As DataColumn
        
        Private columnIdMarkTypeFitted4X As DataColumn
        
        Private columnIdMarkTypeFitted5X As DataColumn
        
        Private columnIdMarkTypeFitted6X As DataColumn
        
        Private columnIdMarkTypeFitted7X As DataColumn
        
        Private columnIdMarkTypeFitted8X As DataColumn
        
        Private columnIdMarkTypeFitted9X As DataColumn
        
        Private columnIdMarkTypeFitted10X As DataColumn
        
        Private columnIdMarkTypeRemoved1X As DataColumn
        
        Private columnIdMarkTypeRemoved2X As DataColumn
        
        Private columnIdMarkTypeRemoved3X As DataColumn
        
        Private columnIdMarkTypeRemoved4X As DataColumn
        
        Private columnIdMarkTypeRemoved5X As DataColumn
        
        Private columnIdMarkTypeRemoved6X As DataColumn
        
        Private columnIdMarkTypeRemoved7X As DataColumn
        
        Private columnIdMarkTypeRemoved8X As DataColumn
        
        Private columnIdMarkTypeRemoved9X As DataColumn
        
        Private columnIdMarkTypeRemoved10X As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSchedule4ReplacementRings_Sub1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BirdNoColumn As DataColumn
            Get
                Return Me.columnBirdNo
            End Get
        End Property
        
        Friend ReadOnly Property SpeciesColumn As DataColumn
            Get
                Return Me.columnSpecies
            End Get
        End Property
        
        Friend ReadOnly Property CommonNameColumn As DataColumn
            Get
                Return Me.columnCommonName
            End Get
        End Property
        
        Friend ReadOnly Property KeptAddressColumn As DataColumn
            Get
                Return Me.columnKeptAddress
            End Get
        End Property
        
        Friend ReadOnly Property DateHatchedColumn As DataColumn
            Get
                Return Me.columnDateHatched
            End Get
        End Property
        
        Friend ReadOnly Property SexColumn As DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        Friend ReadOnly Property OriginColumn As DataColumn
            Get
                Return Me.columnOrigin
            End Get
        End Property
        
        Friend ReadOnly Property DateAcquiredColumn As DataColumn
            Get
                Return Me.columnDateAcquired
            End Get
        End Property
        
        Friend ReadOnly Property RingNo1Column As DataColumn
            Get
                Return Me.columnRingNo1
            End Get
        End Property
        
        Friend ReadOnly Property RingNo2Column As DataColumn
            Get
                Return Me.columnRingNo2
            End Get
        End Property
        
        Friend ReadOnly Property RingNo3Column As DataColumn
            Get
                Return Me.columnRingNo3
            End Get
        End Property
        
        Friend ReadOnly Property RingNo4Column As DataColumn
            Get
                Return Me.columnRingNo4
            End Get
        End Property
        
        Friend ReadOnly Property RingNo5Column As DataColumn
            Get
                Return Me.columnRingNo5
            End Get
        End Property
        
        Friend ReadOnly Property RingNo6Column As DataColumn
            Get
                Return Me.columnRingNo6
            End Get
        End Property
        
        Friend ReadOnly Property RingNo7Column As DataColumn
            Get
                Return Me.columnRingNo7
            End Get
        End Property
        
        Friend ReadOnly Property RingNo8Column As DataColumn
            Get
                Return Me.columnRingNo8
            End Get
        End Property
        
        Friend ReadOnly Property RingNo9Column As DataColumn
            Get
                Return Me.columnRingNo9
            End Get
        End Property
        
        Friend ReadOnly Property RingNo10Column As DataColumn
            Get
                Return Me.columnRingNo10
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType1Column As DataColumn
            Get
                Return Me.columnIdMarkType1
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType2Column As DataColumn
            Get
                Return Me.columnIdMarkType2
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType3Column As DataColumn
            Get
                Return Me.columnIdMarkType3
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType4Column As DataColumn
            Get
                Return Me.columnIdMarkType4
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType5Column As DataColumn
            Get
                Return Me.columnIdMarkType5
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType6Column As DataColumn
            Get
                Return Me.columnIdMarkType6
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType7Column As DataColumn
            Get
                Return Me.columnIdMarkType7
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType8Column As DataColumn
            Get
                Return Me.columnIdMarkType8
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType9Column As DataColumn
            Get
                Return Me.columnIdMarkType9
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkType10Column As DataColumn
            Get
                Return Me.columnIdMarkType10
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted1XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted1X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted2XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted2X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted3XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted3X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted4XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted4X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted5XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted5X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted6XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted6X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted7XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted7X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted8XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted8X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted9XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted9X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeFitted10XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeFitted10X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved1XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved1X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved2XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved2X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved3XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved3X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved4XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved4X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved5XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved5X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved6XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved6X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved7XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved7X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved8XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved8X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved9XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved9X
            End Get
        End Property
        
        Friend ReadOnly Property IdMarkTypeRemoved10XColumn As DataColumn
            Get
                Return Me.columnIdMarkTypeRemoved10X
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSchedule4ReplacementRings_Sub1Row
            Get
                Return CType(Me.Rows(index),BOSchedule4ReplacementRings_Sub1Row)
            End Get
        End Property
        
        Public Event BOSchedule4ReplacementRings_Sub1RowChanged As BOSchedule4ReplacementRings_Sub1RowChangeEventHandler
        
        Public Event BOSchedule4ReplacementRings_Sub1RowChanging As BOSchedule4ReplacementRings_Sub1RowChangeEventHandler
        
        Public Event BOSchedule4ReplacementRings_Sub1RowDeleted As BOSchedule4ReplacementRings_Sub1RowChangeEventHandler
        
        Public Event BOSchedule4ReplacementRings_Sub1RowDeleting As BOSchedule4ReplacementRings_Sub1RowChangeEventHandler
        
        Public Overloads Sub AddBOSchedule4ReplacementRings_Sub1Row(ByVal row As BOSchedule4ReplacementRings_Sub1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSchedule4ReplacementRings_Sub1Row( _
                    ByVal parentBOSchedule4ReplacementRings_MainRowByBOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1 As BOSchedule4ReplacementRings_MainRow,  _
                    ByVal BirdNo As String,  _
                    ByVal Species As String,  _
                    ByVal CommonName As String,  _
                    ByVal KeptAddress As String,  _
                    ByVal DateHatched As String,  _
                    ByVal Sex As String,  _
                    ByVal Origin As String,  _
                    ByVal DateAcquired As String,  _
                    ByVal RingNo1 As String,  _
                    ByVal RingNo2 As String,  _
                    ByVal RingNo3 As String,  _
                    ByVal RingNo4 As String,  _
                    ByVal RingNo5 As String,  _
                    ByVal RingNo6 As String,  _
                    ByVal RingNo7 As String,  _
                    ByVal RingNo8 As String,  _
                    ByVal RingNo9 As String,  _
                    ByVal RingNo10 As String,  _
                    ByVal IdMarkType1 As String,  _
                    ByVal IdMarkType2 As String,  _
                    ByVal IdMarkType3 As String,  _
                    ByVal IdMarkType4 As String,  _
                    ByVal IdMarkType5 As String,  _
                    ByVal IdMarkType6 As String,  _
                    ByVal IdMarkType7 As String,  _
                    ByVal IdMarkType8 As String,  _
                    ByVal IdMarkType9 As String,  _
                    ByVal IdMarkType10 As String,  _
                    ByVal IdMarkTypeFitted1X As String,  _
                    ByVal IdMarkTypeFitted2X As String,  _
                    ByVal IdMarkTypeFitted3X As String,  _
                    ByVal IdMarkTypeFitted4X As String,  _
                    ByVal IdMarkTypeFitted5X As String,  _
                    ByVal IdMarkTypeFitted6X As String,  _
                    ByVal IdMarkTypeFitted7X As String,  _
                    ByVal IdMarkTypeFitted8X As String,  _
                    ByVal IdMarkTypeFitted9X As String,  _
                    ByVal IdMarkTypeFitted10X As String,  _
                    ByVal IdMarkTypeRemoved1X As String,  _
                    ByVal IdMarkTypeRemoved2X As String,  _
                    ByVal IdMarkTypeRemoved3X As String,  _
                    ByVal IdMarkTypeRemoved4X As String,  _
                    ByVal IdMarkTypeRemoved5X As String,  _
                    ByVal IdMarkTypeRemoved6X As String,  _
                    ByVal IdMarkTypeRemoved7X As String,  _
                    ByVal IdMarkTypeRemoved8X As String,  _
                    ByVal IdMarkTypeRemoved9X As String,  _
                    ByVal IdMarkTypeRemoved10X As String) As BOSchedule4ReplacementRings_Sub1Row
            Dim rowBOSchedule4ReplacementRings_Sub1Row As BOSchedule4ReplacementRings_Sub1Row = CType(Me.NewRow,BOSchedule4ReplacementRings_Sub1Row)
            rowBOSchedule4ReplacementRings_Sub1Row.ItemArray = New Object() {parentBOSchedule4ReplacementRings_MainRowByBOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1(0), BirdNo, Species, CommonName, KeptAddress, DateHatched, Sex, Origin, DateAcquired, RingNo1, RingNo2, RingNo3, RingNo4, RingNo5, RingNo6, RingNo7, RingNo8, RingNo9, RingNo10, IdMarkType1, IdMarkType2, IdMarkType3, IdMarkType4, IdMarkType5, IdMarkType6, IdMarkType7, IdMarkType8, IdMarkType9, IdMarkType10, IdMarkTypeFitted1X, IdMarkTypeFitted2X, IdMarkTypeFitted3X, IdMarkTypeFitted4X, IdMarkTypeFitted5X, IdMarkTypeFitted6X, IdMarkTypeFitted7X, IdMarkTypeFitted8X, IdMarkTypeFitted9X, IdMarkTypeFitted10X, IdMarkTypeRemoved1X, IdMarkTypeRemoved2X, IdMarkTypeRemoved3X, IdMarkTypeRemoved4X, IdMarkTypeRemoved5X, IdMarkTypeRemoved6X, IdMarkTypeRemoved7X, IdMarkTypeRemoved8X, IdMarkTypeRemoved9X, IdMarkTypeRemoved10X}
            Me.Rows.Add(rowBOSchedule4ReplacementRings_Sub1Row)
            Return rowBOSchedule4ReplacementRings_Sub1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSchedule4ReplacementRings_Sub1DataTable = CType(MyBase.Clone,BOSchedule4ReplacementRings_Sub1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSchedule4ReplacementRings_Sub1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBirdNo = Me.Columns("BirdNo")
            Me.columnSpecies = Me.Columns("Species")
            Me.columnCommonName = Me.Columns("CommonName")
            Me.columnKeptAddress = Me.Columns("KeptAddress")
            Me.columnDateHatched = Me.Columns("DateHatched")
            Me.columnSex = Me.Columns("Sex")
            Me.columnOrigin = Me.Columns("Origin")
            Me.columnDateAcquired = Me.Columns("DateAcquired")
            Me.columnRingNo1 = Me.Columns("RingNo1")
            Me.columnRingNo2 = Me.Columns("RingNo2")
            Me.columnRingNo3 = Me.Columns("RingNo3")
            Me.columnRingNo4 = Me.Columns("RingNo4")
            Me.columnRingNo5 = Me.Columns("RingNo5")
            Me.columnRingNo6 = Me.Columns("RingNo6")
            Me.columnRingNo7 = Me.Columns("RingNo7")
            Me.columnRingNo8 = Me.Columns("RingNo8")
            Me.columnRingNo9 = Me.Columns("RingNo9")
            Me.columnRingNo10 = Me.Columns("RingNo10")
            Me.columnIdMarkType1 = Me.Columns("IdMarkType1")
            Me.columnIdMarkType2 = Me.Columns("IdMarkType2")
            Me.columnIdMarkType3 = Me.Columns("IdMarkType3")
            Me.columnIdMarkType4 = Me.Columns("IdMarkType4")
            Me.columnIdMarkType5 = Me.Columns("IdMarkType5")
            Me.columnIdMarkType6 = Me.Columns("IdMarkType6")
            Me.columnIdMarkType7 = Me.Columns("IdMarkType7")
            Me.columnIdMarkType8 = Me.Columns("IdMarkType8")
            Me.columnIdMarkType9 = Me.Columns("IdMarkType9")
            Me.columnIdMarkType10 = Me.Columns("IdMarkType10")
            Me.columnIdMarkTypeFitted1X = Me.Columns("IdMarkTypeFitted1X")
            Me.columnIdMarkTypeFitted2X = Me.Columns("IdMarkTypeFitted2X")
            Me.columnIdMarkTypeFitted3X = Me.Columns("IdMarkTypeFitted3X")
            Me.columnIdMarkTypeFitted4X = Me.Columns("IdMarkTypeFitted4X")
            Me.columnIdMarkTypeFitted5X = Me.Columns("IdMarkTypeFitted5X")
            Me.columnIdMarkTypeFitted6X = Me.Columns("IdMarkTypeFitted6X")
            Me.columnIdMarkTypeFitted7X = Me.Columns("IdMarkTypeFitted7X")
            Me.columnIdMarkTypeFitted8X = Me.Columns("IdMarkTypeFitted8X")
            Me.columnIdMarkTypeFitted9X = Me.Columns("IdMarkTypeFitted9X")
            Me.columnIdMarkTypeFitted10X = Me.Columns("IdMarkTypeFitted10X")
            Me.columnIdMarkTypeRemoved1X = Me.Columns("IdMarkTypeRemoved1X")
            Me.columnIdMarkTypeRemoved2X = Me.Columns("IdMarkTypeRemoved2X")
            Me.columnIdMarkTypeRemoved3X = Me.Columns("IdMarkTypeRemoved3X")
            Me.columnIdMarkTypeRemoved4X = Me.Columns("IdMarkTypeRemoved4X")
            Me.columnIdMarkTypeRemoved5X = Me.Columns("IdMarkTypeRemoved5X")
            Me.columnIdMarkTypeRemoved6X = Me.Columns("IdMarkTypeRemoved6X")
            Me.columnIdMarkTypeRemoved7X = Me.Columns("IdMarkTypeRemoved7X")
            Me.columnIdMarkTypeRemoved8X = Me.Columns("IdMarkTypeRemoved8X")
            Me.columnIdMarkTypeRemoved9X = Me.Columns("IdMarkTypeRemoved9X")
            Me.columnIdMarkTypeRemoved10X = Me.Columns("IdMarkTypeRemoved10X")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBirdNo = New DataColumn("BirdNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo)
            Me.columnSpecies = New DataColumn("Species", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecies)
            Me.columnCommonName = New DataColumn("CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCommonName)
            Me.columnKeptAddress = New DataColumn("KeptAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnKeptAddress)
            Me.columnDateHatched = New DataColumn("DateHatched", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateHatched)
            Me.columnSex = New DataColumn("Sex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSex)
            Me.columnOrigin = New DataColumn("Origin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOrigin)
            Me.columnDateAcquired = New DataColumn("DateAcquired", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateAcquired)
            Me.columnRingNo1 = New DataColumn("RingNo1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo1)
            Me.columnRingNo2 = New DataColumn("RingNo2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo2)
            Me.columnRingNo3 = New DataColumn("RingNo3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo3)
            Me.columnRingNo4 = New DataColumn("RingNo4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo4)
            Me.columnRingNo5 = New DataColumn("RingNo5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo5)
            Me.columnRingNo6 = New DataColumn("RingNo6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo6)
            Me.columnRingNo7 = New DataColumn("RingNo7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo7)
            Me.columnRingNo8 = New DataColumn("RingNo8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo8)
            Me.columnRingNo9 = New DataColumn("RingNo9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo9)
            Me.columnRingNo10 = New DataColumn("RingNo10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRingNo10)
            Me.columnIdMarkType1 = New DataColumn("IdMarkType1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType1)
            Me.columnIdMarkType2 = New DataColumn("IdMarkType2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType2)
            Me.columnIdMarkType3 = New DataColumn("IdMarkType3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType3)
            Me.columnIdMarkType4 = New DataColumn("IdMarkType4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType4)
            Me.columnIdMarkType5 = New DataColumn("IdMarkType5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType5)
            Me.columnIdMarkType6 = New DataColumn("IdMarkType6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType6)
            Me.columnIdMarkType7 = New DataColumn("IdMarkType7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType7)
            Me.columnIdMarkType8 = New DataColumn("IdMarkType8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType8)
            Me.columnIdMarkType9 = New DataColumn("IdMarkType9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType9)
            Me.columnIdMarkType10 = New DataColumn("IdMarkType10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkType10)
            Me.columnIdMarkTypeFitted1X = New DataColumn("IdMarkTypeFitted1X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted1X)
            Me.columnIdMarkTypeFitted2X = New DataColumn("IdMarkTypeFitted2X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted2X)
            Me.columnIdMarkTypeFitted3X = New DataColumn("IdMarkTypeFitted3X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted3X)
            Me.columnIdMarkTypeFitted4X = New DataColumn("IdMarkTypeFitted4X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted4X)
            Me.columnIdMarkTypeFitted5X = New DataColumn("IdMarkTypeFitted5X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted5X)
            Me.columnIdMarkTypeFitted6X = New DataColumn("IdMarkTypeFitted6X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted6X)
            Me.columnIdMarkTypeFitted7X = New DataColumn("IdMarkTypeFitted7X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted7X)
            Me.columnIdMarkTypeFitted8X = New DataColumn("IdMarkTypeFitted8X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted8X)
            Me.columnIdMarkTypeFitted9X = New DataColumn("IdMarkTypeFitted9X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted9X)
            Me.columnIdMarkTypeFitted10X = New DataColumn("IdMarkTypeFitted10X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeFitted10X)
            Me.columnIdMarkTypeRemoved1X = New DataColumn("IdMarkTypeRemoved1X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved1X)
            Me.columnIdMarkTypeRemoved2X = New DataColumn("IdMarkTypeRemoved2X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved2X)
            Me.columnIdMarkTypeRemoved3X = New DataColumn("IdMarkTypeRemoved3X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved3X)
            Me.columnIdMarkTypeRemoved4X = New DataColumn("IdMarkTypeRemoved4X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved4X)
            Me.columnIdMarkTypeRemoved5X = New DataColumn("IdMarkTypeRemoved5X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved5X)
            Me.columnIdMarkTypeRemoved6X = New DataColumn("IdMarkTypeRemoved6X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved6X)
            Me.columnIdMarkTypeRemoved7X = New DataColumn("IdMarkTypeRemoved7X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved7X)
            Me.columnIdMarkTypeRemoved8X = New DataColumn("IdMarkTypeRemoved8X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved8X)
            Me.columnIdMarkTypeRemoved9X = New DataColumn("IdMarkTypeRemoved9X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved9X)
            Me.columnIdMarkTypeRemoved10X = New DataColumn("IdMarkTypeRemoved10X", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIdMarkTypeRemoved10X)
        End Sub
        
        Public Function NewBOSchedule4ReplacementRings_Sub1Row() As BOSchedule4ReplacementRings_Sub1Row
            Return CType(Me.NewRow,BOSchedule4ReplacementRings_Sub1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSchedule4ReplacementRings_Sub1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSchedule4ReplacementRings_Sub1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSchedule4ReplacementRings_Sub1RowChangedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_Sub1RowChanged(Me, New BOSchedule4ReplacementRings_Sub1RowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_Sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSchedule4ReplacementRings_Sub1RowChangingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_Sub1RowChanging(Me, New BOSchedule4ReplacementRings_Sub1RowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_Sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSchedule4ReplacementRings_Sub1RowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_Sub1RowDeleted(Me, New BOSchedule4ReplacementRings_Sub1RowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_Sub1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSchedule4ReplacementRings_Sub1RowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4ReplacementRings_Sub1RowDeleting(Me, New BOSchedule4ReplacementRings_Sub1RowChangeEvent(CType(e.Row,BOSchedule4ReplacementRings_Sub1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSchedule4ReplacementRings_Sub1Row(ByVal row As BOSchedule4ReplacementRings_Sub1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4ReplacementRings_Sub1Row
        Inherits DataRow
        
        Private tableBOSchedule4ReplacementRings_Sub1 As BOSchedule4ReplacementRings_Sub1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSchedule4ReplacementRings_Sub1 = CType(Me.Table,BOSchedule4ReplacementRings_Sub1DataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.ApplicationIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property BirdNo As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.BirdNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.BirdNoColumn) = value
            End Set
        End Property
        
        Public Property Species As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.SpeciesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.SpeciesColumn) = value
            End Set
        End Property
        
        Public Property CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.CommonNameColumn) = value
            End Set
        End Property
        
        Public Property KeptAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.KeptAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.KeptAddressColumn) = value
            End Set
        End Property
        
        Public Property DateHatched As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.DateHatchedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.DateHatchedColumn) = value
            End Set
        End Property
        
        Public Property Sex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.SexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.SexColumn) = value
            End Set
        End Property
        
        Public Property Origin As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.OriginColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.OriginColumn) = value
            End Set
        End Property
        
        Public Property DateAcquired As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.DateAcquiredColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.DateAcquiredColumn) = value
            End Set
        End Property
        
        Public Property RingNo1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo1Column) = value
            End Set
        End Property
        
        Public Property RingNo2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo2Column) = value
            End Set
        End Property
        
        Public Property RingNo3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo3Column) = value
            End Set
        End Property
        
        Public Property RingNo4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo4Column) = value
            End Set
        End Property
        
        Public Property RingNo5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo5Column) = value
            End Set
        End Property
        
        Public Property RingNo6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo6Column) = value
            End Set
        End Property
        
        Public Property RingNo7 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo7Column) = value
            End Set
        End Property
        
        Public Property RingNo8 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo8Column) = value
            End Set
        End Property
        
        Public Property RingNo9 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo9Column) = value
            End Set
        End Property
        
        Public Property RingNo10 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo10Column) = value
            End Set
        End Property
        
        Public Property IdMarkType1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType1Column) = value
            End Set
        End Property
        
        Public Property IdMarkType2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType2Column) = value
            End Set
        End Property
        
        Public Property IdMarkType3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType3Column) = value
            End Set
        End Property
        
        Public Property IdMarkType4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType4Column) = value
            End Set
        End Property
        
        Public Property IdMarkType5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType5Column) = value
            End Set
        End Property
        
        Public Property IdMarkType6 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType6Column) = value
            End Set
        End Property
        
        Public Property IdMarkType7 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType7Column) = value
            End Set
        End Property
        
        Public Property IdMarkType8 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType8Column) = value
            End Set
        End Property
        
        Public Property IdMarkType9 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType9Column) = value
            End Set
        End Property
        
        Public Property IdMarkType10 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType10Column) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted1X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted1XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted1XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted2X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted2XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted2XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted3X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted3XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted3XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted4X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted4XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted4XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted5X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted5XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted5XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted6X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted6XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted6XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted7X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted7XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted7XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted8X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted8XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted8XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted9X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted9XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted9XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeFitted10X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted10XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted10XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved1X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved1XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved1XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved2X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved2XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved2XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved3X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved3XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved3XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved4X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved4XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved4XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved5X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved5XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved5XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved6X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved6XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved6XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved7X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved7XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved7XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved8X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved8XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved8XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved9X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved9XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved9XColumn) = value
            End Set
        End Property
        
        Public Property IdMarkTypeRemoved10X As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved10XColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved10XColumn) = value
            End Set
        End Property
        
        Public Property BOSchedule4ReplacementRings_MainRow As BOSchedule4ReplacementRings_MainRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1")),BOSchedule4ReplacementRings_MainRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOSchedule4ReplacementRings_MainBOSchedule4ReplacementRings_Sub1"))
            End Set
        End Property
        
        Public Function IsApplicationIdNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.ApplicationIdColumn)
        End Function
        
        Public Sub SetApplicationIdNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.ApplicationIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNoNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.BirdNoColumn)
        End Function
        
        Public Sub SetBirdNoNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.BirdNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpeciesNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.SpeciesColumn)
        End Function
        
        Public Sub SetSpeciesNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.SpeciesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.CommonNameColumn)
        End Function
        
        Public Sub SetCommonNameNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsKeptAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.KeptAddressColumn)
        End Function
        
        Public Sub SetKeptAddressNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.KeptAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateHatchedNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.DateHatchedColumn)
        End Function
        
        Public Sub SetDateHatchedNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.DateHatchedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.SexColumn)
        End Function
        
        Public Sub SetSexNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.SexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOriginNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.OriginColumn)
        End Function
        
        Public Sub SetOriginNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.OriginColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateAcquiredNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.DateAcquiredColumn)
        End Function
        
        Public Sub SetDateAcquiredNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.DateAcquiredColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo1Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo1Column)
        End Function
        
        Public Sub SetRingNo1Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo2Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo2Column)
        End Function
        
        Public Sub SetRingNo2Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo3Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo3Column)
        End Function
        
        Public Sub SetRingNo3Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo4Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo4Column)
        End Function
        
        Public Sub SetRingNo4Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo5Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo5Column)
        End Function
        
        Public Sub SetRingNo5Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo6Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo6Column)
        End Function
        
        Public Sub SetRingNo6Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo7Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo7Column)
        End Function
        
        Public Sub SetRingNo7Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo8Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo8Column)
        End Function
        
        Public Sub SetRingNo8Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo9Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo9Column)
        End Function
        
        Public Sub SetRingNo9Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRingNo10Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo10Column)
        End Function
        
        Public Sub SetRingNo10Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.RingNo10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType1Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType1Column)
        End Function
        
        Public Sub SetIdMarkType1Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType2Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType2Column)
        End Function
        
        Public Sub SetIdMarkType2Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType3Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType3Column)
        End Function
        
        Public Sub SetIdMarkType3Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType4Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType4Column)
        End Function
        
        Public Sub SetIdMarkType4Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType5Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType5Column)
        End Function
        
        Public Sub SetIdMarkType5Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType6Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType6Column)
        End Function
        
        Public Sub SetIdMarkType6Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType7Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType7Column)
        End Function
        
        Public Sub SetIdMarkType7Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType8Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType8Column)
        End Function
        
        Public Sub SetIdMarkType8Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType9Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType9Column)
        End Function
        
        Public Sub SetIdMarkType9Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkType10Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType10Column)
        End Function
        
        Public Sub SetIdMarkType10Null()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkType10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted1XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted1XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted1XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted1XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted2XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted2XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted2XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted2XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted3XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted3XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted3XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted3XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted4XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted4XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted4XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted4XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted5XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted5XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted5XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted5XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted6XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted6XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted6XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted6XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted7XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted7XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted7XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted7XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted8XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted8XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted8XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted8XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted9XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted9XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted9XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted9XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeFitted10XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted10XColumn)
        End Function
        
        Public Sub SetIdMarkTypeFitted10XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeFitted10XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved1XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved1XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved1XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved1XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved2XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved2XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved2XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved2XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved3XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved3XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved3XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved3XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved4XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved4XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved4XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved4XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved5XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved5XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved5XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved5XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved6XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved6XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved6XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved6XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved7XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved7XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved7XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved7XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved8XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved8XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved8XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved8XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved9XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved9XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved9XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved9XColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIdMarkTypeRemoved10XNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved10XColumn)
        End Function
        
        Public Sub SetIdMarkTypeRemoved10XNull()
            Me(Me.tableBOSchedule4ReplacementRings_Sub1.IdMarkTypeRemoved10XColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4ReplacementRings_Sub1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSchedule4ReplacementRings_Sub1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSchedule4ReplacementRings_Sub1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSchedule4ReplacementRings_Sub1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4InspectorSigDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnBirdNo1 As DataColumn
        
        Private columnBirdNo2 As DataColumn
        
        Private columnBirdNo3 As DataColumn
        
        Private columnBirdNo4 As DataColumn
        
        Private columnBirdNo5 As DataColumn
        
        Friend Sub New()
            MyBase.New("BOSchedule4InspectorSig")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo1Column As DataColumn
            Get
                Return Me.columnBirdNo1
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo2Column As DataColumn
            Get
                Return Me.columnBirdNo2
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo3Column As DataColumn
            Get
                Return Me.columnBirdNo3
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo4Column As DataColumn
            Get
                Return Me.columnBirdNo4
            End Get
        End Property
        
        Friend ReadOnly Property BirdNo5Column As DataColumn
            Get
                Return Me.columnBirdNo5
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOSchedule4InspectorSigRow
            Get
                Return CType(Me.Rows(index),BOSchedule4InspectorSigRow)
            End Get
        End Property
        
        Public Event BOSchedule4InspectorSigRowChanged As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Event BOSchedule4InspectorSigRowChanging As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Event BOSchedule4InspectorSigRowDeleted As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Event BOSchedule4InspectorSigRowDeleting As BOSchedule4InspectorSigRowChangeEventHandler
        
        Public Overloads Sub AddBOSchedule4InspectorSigRow(ByVal row As BOSchedule4InspectorSigRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOSchedule4InspectorSigRow(ByVal parentBOSchedule4ReplacementRings_MainRowByBOSchedule4ReplacementRings_MainBOSchedule4InspectorSig As BOSchedule4ReplacementRings_MainRow, ByVal BirdNo1 As String, ByVal BirdNo2 As String, ByVal BirdNo3 As String, ByVal BirdNo4 As String, ByVal BirdNo5 As String) As BOSchedule4InspectorSigRow
            Dim rowBOSchedule4InspectorSigRow As BOSchedule4InspectorSigRow = CType(Me.NewRow,BOSchedule4InspectorSigRow)
            rowBOSchedule4InspectorSigRow.ItemArray = New Object() {parentBOSchedule4ReplacementRings_MainRowByBOSchedule4ReplacementRings_MainBOSchedule4InspectorSig(0), BirdNo1, BirdNo2, BirdNo3, BirdNo4, BirdNo5}
            Me.Rows.Add(rowBOSchedule4InspectorSigRow)
            Return rowBOSchedule4InspectorSigRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOSchedule4InspectorSigDataTable = CType(MyBase.Clone,BOSchedule4InspectorSigDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOSchedule4InspectorSigDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnBirdNo1 = Me.Columns("BirdNo1")
            Me.columnBirdNo2 = Me.Columns("BirdNo2")
            Me.columnBirdNo3 = Me.Columns("BirdNo3")
            Me.columnBirdNo4 = Me.Columns("BirdNo4")
            Me.columnBirdNo5 = Me.Columns("BirdNo5")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnBirdNo1 = New DataColumn("BirdNo1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo1)
            Me.columnBirdNo2 = New DataColumn("BirdNo2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo2)
            Me.columnBirdNo3 = New DataColumn("BirdNo3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo3)
            Me.columnBirdNo4 = New DataColumn("BirdNo4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo4)
            Me.columnBirdNo5 = New DataColumn("BirdNo5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBirdNo5)
        End Sub
        
        Public Function NewBOSchedule4InspectorSigRow() As BOSchedule4InspectorSigRow
            Return CType(Me.NewRow,BOSchedule4InspectorSigRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOSchedule4InspectorSigRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOSchedule4InspectorSigRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOSchedule4InspectorSigRowChangedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowChanged(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOSchedule4InspectorSigRowChangingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowChanging(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOSchedule4InspectorSigRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowDeleted(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOSchedule4InspectorSigRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOSchedule4InspectorSigRowDeleting(Me, New BOSchedule4InspectorSigRowChangeEvent(CType(e.Row,BOSchedule4InspectorSigRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOSchedule4InspectorSigRow(ByVal row As BOSchedule4InspectorSigRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4InspectorSigRow
        Inherits DataRow
        
        Private tableBOSchedule4InspectorSig As BOSchedule4InspectorSigDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOSchedule4InspectorSig = CType(Me.Table,BOSchedule4InspectorSigDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property BirdNo1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo1Column) = value
            End Set
        End Property
        
        Public Property BirdNo2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo2Column) = value
            End Set
        End Property
        
        Public Property BirdNo3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo3Column) = value
            End Set
        End Property
        
        Public Property BirdNo4 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo4Column) = value
            End Set
        End Property
        
        Public Property BirdNo5 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOSchedule4InspectorSig.BirdNo5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOSchedule4InspectorSig.BirdNo5Column) = value
            End Set
        End Property
        
        Public Property BOSchedule4ReplacementRings_MainRow As BOSchedule4ReplacementRings_MainRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOSchedule4ReplacementRings_MainBOSchedule4InspectorSig")),BOSchedule4ReplacementRings_MainRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOSchedule4ReplacementRings_MainBOSchedule4InspectorSig"))
            End Set
        End Property
        
        Public Function IsApplicationIdNull() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn)
        End Function
        
        Public Sub SetApplicationIdNull()
            Me(Me.tableBOSchedule4InspectorSig.ApplicationIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo1Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo1Column)
        End Function
        
        Public Sub SetBirdNo1Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo2Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo2Column)
        End Function
        
        Public Sub SetBirdNo2Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo3Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo3Column)
        End Function
        
        Public Sub SetBirdNo3Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo4Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo4Column)
        End Function
        
        Public Sub SetBirdNo4Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsBirdNo5Null() As Boolean
            Return Me.IsNull(Me.tableBOSchedule4InspectorSig.BirdNo5Column)
        End Function
        
        Public Sub SetBirdNo5Null()
            Me(Me.tableBOSchedule4InspectorSig.BirdNo5Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOSchedule4InspectorSigRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOSchedule4InspectorSigRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOSchedule4InspectorSigRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOSchedule4InspectorSigRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
