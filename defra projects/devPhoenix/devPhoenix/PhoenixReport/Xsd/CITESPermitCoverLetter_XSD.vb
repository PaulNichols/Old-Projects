'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class CITESPermitCoverLetterData
    Inherits DataSet
    
    Private tableBOCoverLetter As BOCoverLetterDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOCoverLetter")) Is Nothing) Then
                Me.Tables.Add(New BOCoverLetterDataTable(ds.Tables("BOCoverLetter")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOCoverLetter As BOCoverLetterDataTable
        Get
            Return Me.tableBOCoverLetter
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As CITESPermitCoverLetterData = CType(MyBase.Clone,CITESPermitCoverLetterData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOCoverLetter")) Is Nothing) Then
            Me.Tables.Add(New BOCoverLetterDataTable(ds.Tables("BOCoverLetter")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOCoverLetter = CType(Me.Tables("BOCoverLetter"),BOCoverLetterDataTable)
        If (Not (Me.tableBOCoverLetter) Is Nothing) Then
            Me.tableBOCoverLetter.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "CITESPermitCoverLetterData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/CITESPermitCoverLetterData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOCoverLetter = New BOCoverLetterDataTable
        Me.Tables.Add(Me.tableBOCoverLetter)
    End Sub
    
    Private Function ShouldSerializeBOCoverLetter() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOCoverLetterRowChangeEventHandler(ByVal sender As Object, ByVal e As BOCoverLetterRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOCoverLetterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGWDAddress As DataColumn
        
        Private columnToAddress As DataColumn
        
        Private columnOurReference As DataColumn
        
        Private columnLetterIssuedDate As DataColumn
        
        Private columnDearWho As DataColumn
        
        Private columnCITESRegulations As DataColumn
        
        Private columnAppDatePermitType As DataColumn
        
        Private columnPermitLines As DataColumn
        
        Private columnSpecialConditions As DataColumn
        
        Private columnStandardParagraphs As DataColumn
        
        Private columnCaseOfficerName As DataColumn
        
        Private columnCaseOfficerDirectLine As DataColumn
        
        Private columnCaseOfficerFax As DataColumn
        
        Private columnCaseOfficerEmail As DataColumn
        
        Friend Sub New()
            MyBase.New("BOCoverLetter")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GWDAddressColumn As DataColumn
            Get
                Return Me.columnGWDAddress
            End Get
        End Property
        
        Friend ReadOnly Property ToAddressColumn As DataColumn
            Get
                Return Me.columnToAddress
            End Get
        End Property
        
        Friend ReadOnly Property OurReferenceColumn As DataColumn
            Get
                Return Me.columnOurReference
            End Get
        End Property
        
        Friend ReadOnly Property LetterIssuedDateColumn As DataColumn
            Get
                Return Me.columnLetterIssuedDate
            End Get
        End Property
        
        Friend ReadOnly Property DearWhoColumn As DataColumn
            Get
                Return Me.columnDearWho
            End Get
        End Property
        
        Friend ReadOnly Property CITESRegulationsColumn As DataColumn
            Get
                Return Me.columnCITESRegulations
            End Get
        End Property
        
        Friend ReadOnly Property AppDatePermitTypeColumn As DataColumn
            Get
                Return Me.columnAppDatePermitType
            End Get
        End Property
        
        Friend ReadOnly Property PermitLinesColumn As DataColumn
            Get
                Return Me.columnPermitLines
            End Get
        End Property
        
        Friend ReadOnly Property SpecialConditionsColumn As DataColumn
            Get
                Return Me.columnSpecialConditions
            End Get
        End Property
        
        Friend ReadOnly Property StandardParagraphsColumn As DataColumn
            Get
                Return Me.columnStandardParagraphs
            End Get
        End Property
        
        Friend ReadOnly Property CaseOfficerNameColumn As DataColumn
            Get
                Return Me.columnCaseOfficerName
            End Get
        End Property
        
        Friend ReadOnly Property CaseOfficerDirectLineColumn As DataColumn
            Get
                Return Me.columnCaseOfficerDirectLine
            End Get
        End Property
        
        Friend ReadOnly Property CaseOfficerFaxColumn As DataColumn
            Get
                Return Me.columnCaseOfficerFax
            End Get
        End Property
        
        Friend ReadOnly Property CaseOfficerEmailColumn As DataColumn
            Get
                Return Me.columnCaseOfficerEmail
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOCoverLetterRow
            Get
                Return CType(Me.Rows(index),BOCoverLetterRow)
            End Get
        End Property
        
        Public Event BOCoverLetterRowChanged As BOCoverLetterRowChangeEventHandler
        
        Public Event BOCoverLetterRowChanging As BOCoverLetterRowChangeEventHandler
        
        Public Event BOCoverLetterRowDeleted As BOCoverLetterRowChangeEventHandler
        
        Public Event BOCoverLetterRowDeleting As BOCoverLetterRowChangeEventHandler
        
        Public Overloads Sub AddBOCoverLetterRow(ByVal row As BOCoverLetterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOCoverLetterRow(ByVal GWDAddress As String, ByVal ToAddress As String, ByVal OurReference As String, ByVal LetterIssuedDate As String, ByVal DearWho As String, ByVal CITESRegulations As String, ByVal AppDatePermitType As String, ByVal PermitLines As String, ByVal SpecialConditions As String, ByVal StandardParagraphs As String, ByVal CaseOfficerName As String, ByVal CaseOfficerDirectLine As String, ByVal CaseOfficerFax As String, ByVal CaseOfficerEmail As String) As BOCoverLetterRow
            Dim rowBOCoverLetterRow As BOCoverLetterRow = CType(Me.NewRow,BOCoverLetterRow)
            rowBOCoverLetterRow.ItemArray = New Object() {GWDAddress, ToAddress, OurReference, LetterIssuedDate, DearWho, CITESRegulations, AppDatePermitType, PermitLines, SpecialConditions, StandardParagraphs, CaseOfficerName, CaseOfficerDirectLine, CaseOfficerFax, CaseOfficerEmail}
            Me.Rows.Add(rowBOCoverLetterRow)
            Return rowBOCoverLetterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOCoverLetterDataTable = CType(MyBase.Clone,BOCoverLetterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOCoverLetterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGWDAddress = Me.Columns("GWDAddress")
            Me.columnToAddress = Me.Columns("ToAddress")
            Me.columnOurReference = Me.Columns("OurReference")
            Me.columnLetterIssuedDate = Me.Columns("LetterIssuedDate")
            Me.columnDearWho = Me.Columns("DearWho")
            Me.columnCITESRegulations = Me.Columns("CITESRegulations")
            Me.columnAppDatePermitType = Me.Columns("AppDatePermitType")
            Me.columnPermitLines = Me.Columns("PermitLines")
            Me.columnSpecialConditions = Me.Columns("SpecialConditions")
            Me.columnStandardParagraphs = Me.Columns("StandardParagraphs")
            Me.columnCaseOfficerName = Me.Columns("CaseOfficerName")
            Me.columnCaseOfficerDirectLine = Me.Columns("CaseOfficerDirectLine")
            Me.columnCaseOfficerFax = Me.Columns("CaseOfficerFax")
            Me.columnCaseOfficerEmail = Me.Columns("CaseOfficerEmail")
        End Sub
        
        Private Sub InitClass()
            Me.columnGWDAddress = New DataColumn("GWDAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGWDAddress)
            Me.columnToAddress = New DataColumn("ToAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnToAddress)
            Me.columnOurReference = New DataColumn("OurReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOurReference)
            Me.columnLetterIssuedDate = New DataColumn("LetterIssuedDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLetterIssuedDate)
            Me.columnDearWho = New DataColumn("DearWho", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDearWho)
            Me.columnCITESRegulations = New DataColumn("CITESRegulations", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCITESRegulations)
            Me.columnAppDatePermitType = New DataColumn("AppDatePermitType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAppDatePermitType)
            Me.columnPermitLines = New DataColumn("PermitLines", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermitLines)
            Me.columnSpecialConditions = New DataColumn("SpecialConditions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecialConditions)
            Me.columnStandardParagraphs = New DataColumn("StandardParagraphs", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStandardParagraphs)
            Me.columnCaseOfficerName = New DataColumn("CaseOfficerName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaseOfficerName)
            Me.columnCaseOfficerDirectLine = New DataColumn("CaseOfficerDirectLine", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaseOfficerDirectLine)
            Me.columnCaseOfficerFax = New DataColumn("CaseOfficerFax", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaseOfficerFax)
            Me.columnCaseOfficerEmail = New DataColumn("CaseOfficerEmail", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCaseOfficerEmail)
        End Sub
        
        Public Function NewBOCoverLetterRow() As BOCoverLetterRow
            Return CType(Me.NewRow,BOCoverLetterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOCoverLetterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOCoverLetterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOCoverLetterRowChangedEvent) Is Nothing) Then
                RaiseEvent BOCoverLetterRowChanged(Me, New BOCoverLetterRowChangeEvent(CType(e.Row,BOCoverLetterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOCoverLetterRowChangingEvent) Is Nothing) Then
                RaiseEvent BOCoverLetterRowChanging(Me, New BOCoverLetterRowChangeEvent(CType(e.Row,BOCoverLetterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOCoverLetterRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOCoverLetterRowDeleted(Me, New BOCoverLetterRowChangeEvent(CType(e.Row,BOCoverLetterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOCoverLetterRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOCoverLetterRowDeleting(Me, New BOCoverLetterRowChangeEvent(CType(e.Row,BOCoverLetterRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOCoverLetterRow(ByVal row As BOCoverLetterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOCoverLetterRow
        Inherits DataRow
        
        Private tableBOCoverLetter As BOCoverLetterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOCoverLetter = CType(Me.Table,BOCoverLetterDataTable)
        End Sub
        
        Public Property GWDAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.GWDAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.GWDAddressColumn) = value
            End Set
        End Property
        
        Public Property ToAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.ToAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.ToAddressColumn) = value
            End Set
        End Property
        
        Public Property OurReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.OurReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.OurReferenceColumn) = value
            End Set
        End Property
        
        Public Property LetterIssuedDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.LetterIssuedDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.LetterIssuedDateColumn) = value
            End Set
        End Property
        
        Public Property DearWho As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.DearWhoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.DearWhoColumn) = value
            End Set
        End Property
        
        Public Property CITESRegulations As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.CITESRegulationsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.CITESRegulationsColumn) = value
            End Set
        End Property
        
        Public Property AppDatePermitType As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.AppDatePermitTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.AppDatePermitTypeColumn) = value
            End Set
        End Property
        
        Public Property PermitLines As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.PermitLinesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.PermitLinesColumn) = value
            End Set
        End Property
        
        Public Property SpecialConditions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.SpecialConditionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.SpecialConditionsColumn) = value
            End Set
        End Property
        
        Public Property StandardParagraphs As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.StandardParagraphsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.StandardParagraphsColumn) = value
            End Set
        End Property
        
        Public Property CaseOfficerName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.CaseOfficerNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.CaseOfficerNameColumn) = value
            End Set
        End Property
        
        Public Property CaseOfficerDirectLine As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.CaseOfficerDirectLineColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.CaseOfficerDirectLineColumn) = value
            End Set
        End Property
        
        Public Property CaseOfficerFax As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.CaseOfficerFaxColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.CaseOfficerFaxColumn) = value
            End Set
        End Property
        
        Public Property CaseOfficerEmail As String
            Get
                Try 
                    Return CType(Me(Me.tableBOCoverLetter.CaseOfficerEmailColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOCoverLetter.CaseOfficerEmailColumn) = value
            End Set
        End Property
        
        Public Function IsGWDAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.GWDAddressColumn)
        End Function
        
        Public Sub SetGWDAddressNull()
            Me(Me.tableBOCoverLetter.GWDAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsToAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.ToAddressColumn)
        End Function
        
        Public Sub SetToAddressNull()
            Me(Me.tableBOCoverLetter.ToAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOurReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.OurReferenceColumn)
        End Function
        
        Public Sub SetOurReferenceNull()
            Me(Me.tableBOCoverLetter.OurReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLetterIssuedDateNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.LetterIssuedDateColumn)
        End Function
        
        Public Sub SetLetterIssuedDateNull()
            Me(Me.tableBOCoverLetter.LetterIssuedDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDearWhoNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.DearWhoColumn)
        End Function
        
        Public Sub SetDearWhoNull()
            Me(Me.tableBOCoverLetter.DearWhoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCITESRegulationsNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.CITESRegulationsColumn)
        End Function
        
        Public Sub SetCITESRegulationsNull()
            Me(Me.tableBOCoverLetter.CITESRegulationsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAppDatePermitTypeNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.AppDatePermitTypeColumn)
        End Function
        
        Public Sub SetAppDatePermitTypeNull()
            Me(Me.tableBOCoverLetter.AppDatePermitTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPermitLinesNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.PermitLinesColumn)
        End Function
        
        Public Sub SetPermitLinesNull()
            Me(Me.tableBOCoverLetter.PermitLinesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecialConditionsNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.SpecialConditionsColumn)
        End Function
        
        Public Sub SetSpecialConditionsNull()
            Me(Me.tableBOCoverLetter.SpecialConditionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStandardParagraphsNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.StandardParagraphsColumn)
        End Function
        
        Public Sub SetStandardParagraphsNull()
            Me(Me.tableBOCoverLetter.StandardParagraphsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaseOfficerNameNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.CaseOfficerNameColumn)
        End Function
        
        Public Sub SetCaseOfficerNameNull()
            Me(Me.tableBOCoverLetter.CaseOfficerNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaseOfficerDirectLineNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.CaseOfficerDirectLineColumn)
        End Function
        
        Public Sub SetCaseOfficerDirectLineNull()
            Me(Me.tableBOCoverLetter.CaseOfficerDirectLineColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaseOfficerFaxNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.CaseOfficerFaxColumn)
        End Function
        
        Public Sub SetCaseOfficerFaxNull()
            Me(Me.tableBOCoverLetter.CaseOfficerFaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCaseOfficerEmailNull() As Boolean
            Return Me.IsNull(Me.tableBOCoverLetter.CaseOfficerEmailColumn)
        End Function
        
        Public Sub SetCaseOfficerEmailNull()
            Me(Me.tableBOCoverLetter.CaseOfficerEmailColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOCoverLetterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOCoverLetterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOCoverLetterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOCoverLetterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
