'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class RegisteredBirdsData
    Inherits DataSet
    
    Private tableBORegisteredBirds As BORegisteredBirdsDataTable
    
    Private tableBOKeeper As BOKeeperDataTable
    
    Private relationBOKeeperBORegisteredBirds As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BORegisteredBirds")) Is Nothing) Then
                Me.Tables.Add(New BORegisteredBirdsDataTable(ds.Tables("BORegisteredBirds")))
            End If
            If (Not (ds.Tables("BOKeeper")) Is Nothing) Then
                Me.Tables.Add(New BOKeeperDataTable(ds.Tables("BOKeeper")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BORegisteredBirds As BORegisteredBirdsDataTable
        Get
            Return Me.tableBORegisteredBirds
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOKeeper As BOKeeperDataTable
        Get
            Return Me.tableBOKeeper
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As RegisteredBirdsData = CType(MyBase.Clone,RegisteredBirdsData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BORegisteredBirds")) Is Nothing) Then
            Me.Tables.Add(New BORegisteredBirdsDataTable(ds.Tables("BORegisteredBirds")))
        End If
        If (Not (ds.Tables("BOKeeper")) Is Nothing) Then
            Me.Tables.Add(New BOKeeperDataTable(ds.Tables("BOKeeper")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBORegisteredBirds = CType(Me.Tables("BORegisteredBirds"),BORegisteredBirdsDataTable)
        If (Not (Me.tableBORegisteredBirds) Is Nothing) Then
            Me.tableBORegisteredBirds.InitVars
        End If
        Me.tableBOKeeper = CType(Me.Tables("BOKeeper"),BOKeeperDataTable)
        If (Not (Me.tableBOKeeper) Is Nothing) Then
            Me.tableBOKeeper.InitVars
        End If
        Me.relationBOKeeperBORegisteredBirds = Me.Relations("BOKeeperBORegisteredBirds")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "RegisteredBirdsData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/RegisteredBirdsData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBORegisteredBirds = New BORegisteredBirdsDataTable
        Me.Tables.Add(Me.tableBORegisteredBirds)
        Me.tableBOKeeper = New BOKeeperDataTable
        Me.Tables.Add(Me.tableBOKeeper)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOKeeperBORegisteredBirds", New DataColumn() {Me.tableBOKeeper.HolderIdColumn}, New DataColumn() {Me.tableBORegisteredBirds.HolderIdColumn})
        Me.tableBORegisteredBirds.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOKeeperBORegisteredBirds = New DataRelation("BOKeeperBORegisteredBirds", New DataColumn() {Me.tableBOKeeper.HolderIdColumn}, New DataColumn() {Me.tableBORegisteredBirds.HolderIdColumn}, false)
        Me.Relations.Add(Me.relationBOKeeperBORegisteredBirds)
    End Sub
    
    Private Function ShouldSerializeBORegisteredBirds() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOKeeper() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BORegisteredBirdsRowChangeEventHandler(ByVal sender As Object, ByVal e As BORegisteredBirdsRowChangeEvent)
    
    Public Delegate Sub BOKeeperRowChangeEventHandler(ByVal sender As Object, ByVal e As BOKeeperRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORegisteredBirdsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHolderId As DataColumn
        
        Private columnSpeciesName As DataColumn
        
        Private columnNumberSpecimens As DataColumn
        
        Private columnFateName As DataColumn
        
        Private columnFateDate As DataColumn
        
        Friend Sub New()
            MyBase.New("BORegisteredBirds")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HolderIdColumn As DataColumn
            Get
                Return Me.columnHolderId
            End Get
        End Property
        
        Friend ReadOnly Property SpeciesNameColumn As DataColumn
            Get
                Return Me.columnSpeciesName
            End Get
        End Property
        
        Friend ReadOnly Property NumberSpecimensColumn As DataColumn
            Get
                Return Me.columnNumberSpecimens
            End Get
        End Property
        
        Friend ReadOnly Property FateNameColumn As DataColumn
            Get
                Return Me.columnFateName
            End Get
        End Property
        
        Friend ReadOnly Property FateDateColumn As DataColumn
            Get
                Return Me.columnFateDate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BORegisteredBirdsRow
            Get
                Return CType(Me.Rows(index),BORegisteredBirdsRow)
            End Get
        End Property
        
        Public Event BORegisteredBirdsRowChanged As BORegisteredBirdsRowChangeEventHandler
        
        Public Event BORegisteredBirdsRowChanging As BORegisteredBirdsRowChangeEventHandler
        
        Public Event BORegisteredBirdsRowDeleted As BORegisteredBirdsRowChangeEventHandler
        
        Public Event BORegisteredBirdsRowDeleting As BORegisteredBirdsRowChangeEventHandler
        
        Public Overloads Sub AddBORegisteredBirdsRow(ByVal row As BORegisteredBirdsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBORegisteredBirdsRow(ByVal parentBOKeeperRowByBOKeeperBORegisteredBirds As BOKeeperRow, ByVal SpeciesName As String, ByVal NumberSpecimens As String, ByVal FateName As String, ByVal FateDate As String) As BORegisteredBirdsRow
            Dim rowBORegisteredBirdsRow As BORegisteredBirdsRow = CType(Me.NewRow,BORegisteredBirdsRow)
            rowBORegisteredBirdsRow.ItemArray = New Object() {parentBOKeeperRowByBOKeeperBORegisteredBirds(0), SpeciesName, NumberSpecimens, FateName, FateDate}
            Me.Rows.Add(rowBORegisteredBirdsRow)
            Return rowBORegisteredBirdsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BORegisteredBirdsDataTable = CType(MyBase.Clone,BORegisteredBirdsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BORegisteredBirdsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHolderId = Me.Columns("HolderId")
            Me.columnSpeciesName = Me.Columns("SpeciesName")
            Me.columnNumberSpecimens = Me.Columns("NumberSpecimens")
            Me.columnFateName = Me.Columns("FateName")
            Me.columnFateDate = Me.Columns("FateDate")
        End Sub
        
        Private Sub InitClass()
            Me.columnHolderId = New DataColumn("HolderId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHolderId)
            Me.columnSpeciesName = New DataColumn("SpeciesName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpeciesName)
            Me.columnNumberSpecimens = New DataColumn("NumberSpecimens", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumberSpecimens)
            Me.columnFateName = New DataColumn("FateName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateName)
            Me.columnFateDate = New DataColumn("FateDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFateDate)
        End Sub
        
        Public Function NewBORegisteredBirdsRow() As BORegisteredBirdsRow
            Return CType(Me.NewRow,BORegisteredBirdsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BORegisteredBirdsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BORegisteredBirdsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BORegisteredBirdsRowChangedEvent) Is Nothing) Then
                RaiseEvent BORegisteredBirdsRowChanged(Me, New BORegisteredBirdsRowChangeEvent(CType(e.Row,BORegisteredBirdsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BORegisteredBirdsRowChangingEvent) Is Nothing) Then
                RaiseEvent BORegisteredBirdsRowChanging(Me, New BORegisteredBirdsRowChangeEvent(CType(e.Row,BORegisteredBirdsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BORegisteredBirdsRowDeletedEvent) Is Nothing) Then
                RaiseEvent BORegisteredBirdsRowDeleted(Me, New BORegisteredBirdsRowChangeEvent(CType(e.Row,BORegisteredBirdsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BORegisteredBirdsRowDeletingEvent) Is Nothing) Then
                RaiseEvent BORegisteredBirdsRowDeleting(Me, New BORegisteredBirdsRowChangeEvent(CType(e.Row,BORegisteredBirdsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBORegisteredBirdsRow(ByVal row As BORegisteredBirdsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORegisteredBirdsRow
        Inherits DataRow
        
        Private tableBORegisteredBirds As BORegisteredBirdsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBORegisteredBirds = CType(Me.Table,BORegisteredBirdsDataTable)
        End Sub
        
        Public Property HolderId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBORegisteredBirds.HolderIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORegisteredBirds.HolderIdColumn) = value
            End Set
        End Property
        
        Public Property SpeciesName As String
            Get
                Try 
                    Return CType(Me(Me.tableBORegisteredBirds.SpeciesNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORegisteredBirds.SpeciesNameColumn) = value
            End Set
        End Property
        
        Public Property NumberSpecimens As String
            Get
                Try 
                    Return CType(Me(Me.tableBORegisteredBirds.NumberSpecimensColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORegisteredBirds.NumberSpecimensColumn) = value
            End Set
        End Property
        
        Public Property FateName As String
            Get
                Try 
                    Return CType(Me(Me.tableBORegisteredBirds.FateNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORegisteredBirds.FateNameColumn) = value
            End Set
        End Property
        
        Public Property FateDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBORegisteredBirds.FateDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBORegisteredBirds.FateDateColumn) = value
            End Set
        End Property
        
        Public Property BOKeeperRow As BOKeeperRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOKeeperBORegisteredBirds")),BOKeeperRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOKeeperBORegisteredBirds"))
            End Set
        End Property
        
        Public Function IsHolderIdNull() As Boolean
            Return Me.IsNull(Me.tableBORegisteredBirds.HolderIdColumn)
        End Function
        
        Public Sub SetHolderIdNull()
            Me(Me.tableBORegisteredBirds.HolderIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpeciesNameNull() As Boolean
            Return Me.IsNull(Me.tableBORegisteredBirds.SpeciesNameColumn)
        End Function
        
        Public Sub SetSpeciesNameNull()
            Me(Me.tableBORegisteredBirds.SpeciesNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNumberSpecimensNull() As Boolean
            Return Me.IsNull(Me.tableBORegisteredBirds.NumberSpecimensColumn)
        End Function
        
        Public Sub SetNumberSpecimensNull()
            Me(Me.tableBORegisteredBirds.NumberSpecimensColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateNameNull() As Boolean
            Return Me.IsNull(Me.tableBORegisteredBirds.FateNameColumn)
        End Function
        
        Public Sub SetFateNameNull()
            Me(Me.tableBORegisteredBirds.FateNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFateDateNull() As Boolean
            Return Me.IsNull(Me.tableBORegisteredBirds.FateDateColumn)
        End Function
        
        Public Sub SetFateDateNull()
            Me(Me.tableBORegisteredBirds.FateDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BORegisteredBirdsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BORegisteredBirdsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BORegisteredBirdsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BORegisteredBirdsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHolderId As DataColumn
        
        Private columnNameAddress As DataColumn
        
        Friend Sub New()
            MyBase.New("BOKeeper")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HolderIdColumn As DataColumn
            Get
                Return Me.columnHolderId
            End Get
        End Property
        
        Friend ReadOnly Property NameAddressColumn As DataColumn
            Get
                Return Me.columnNameAddress
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOKeeperRow
            Get
                Return CType(Me.Rows(index),BOKeeperRow)
            End Get
        End Property
        
        Public Event BOKeeperRowChanged As BOKeeperRowChangeEventHandler
        
        Public Event BOKeeperRowChanging As BOKeeperRowChangeEventHandler
        
        Public Event BOKeeperRowDeleted As BOKeeperRowChangeEventHandler
        
        Public Event BOKeeperRowDeleting As BOKeeperRowChangeEventHandler
        
        Public Overloads Sub AddBOKeeperRow(ByVal row As BOKeeperRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOKeeperRow(ByVal HolderId As Long, ByVal NameAddress As String) As BOKeeperRow
            Dim rowBOKeeperRow As BOKeeperRow = CType(Me.NewRow,BOKeeperRow)
            rowBOKeeperRow.ItemArray = New Object() {HolderId, NameAddress}
            Me.Rows.Add(rowBOKeeperRow)
            Return rowBOKeeperRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOKeeperDataTable = CType(MyBase.Clone,BOKeeperDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOKeeperDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHolderId = Me.Columns("HolderId")
            Me.columnNameAddress = Me.Columns("NameAddress")
        End Sub
        
        Private Sub InitClass()
            Me.columnHolderId = New DataColumn("HolderId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHolderId)
            Me.columnNameAddress = New DataColumn("NameAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNameAddress)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnHolderId}, false))
            Me.columnHolderId.AllowDBNull = false
            Me.columnHolderId.Unique = true
        End Sub
        
        Public Function NewBOKeeperRow() As BOKeeperRow
            Return CType(Me.NewRow,BOKeeperRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOKeeperRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOKeeperRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOKeeperRowChangedEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowChanged(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOKeeperRowChangingEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowChanging(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOKeeperRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowDeleted(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOKeeperRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOKeeperRowDeleting(Me, New BOKeeperRowChangeEvent(CType(e.Row,BOKeeperRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOKeeperRow(ByVal row As BOKeeperRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperRow
        Inherits DataRow
        
        Private tableBOKeeper As BOKeeperDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOKeeper = CType(Me.Table,BOKeeperDataTable)
        End Sub
        
        Public Property HolderId As Long
            Get
                Return CType(Me(Me.tableBOKeeper.HolderIdColumn),Long)
            End Get
            Set
                Me(Me.tableBOKeeper.HolderIdColumn) = value
            End Set
        End Property
        
        Public Property NameAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOKeeper.NameAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOKeeper.NameAddressColumn) = value
            End Set
        End Property
        
        Public Function IsNameAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOKeeper.NameAddressColumn)
        End Function
        
        Public Sub SetNameAddressNull()
            Me(Me.tableBOKeeper.NameAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBORegisteredBirdsRows() As BORegisteredBirdsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOKeeperBORegisteredBirds")),BORegisteredBirdsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOKeeperRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOKeeperRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOKeeperRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOKeeperRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
