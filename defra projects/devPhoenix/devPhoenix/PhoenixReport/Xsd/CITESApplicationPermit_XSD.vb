'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class BOCITESApplicationPermitData
    Inherits DataSet
    
    Private tableBOPermit As BOPermitDataTable
    
    Private tableBOMoreSpecimens As BOMoreSpecimensDataTable
    
    Private relationBOPermitBOMoreSpecimens As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BOPermit")) Is Nothing) Then
                Me.Tables.Add(New BOPermitDataTable(ds.Tables("BOPermit")))
            End If
            If (Not (ds.Tables("BOMoreSpecimens")) Is Nothing) Then
                Me.Tables.Add(New BOMoreSpecimensDataTable(ds.Tables("BOMoreSpecimens")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOPermit As BOPermitDataTable
        Get
            Return Me.tableBOPermit
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BOMoreSpecimens As BOMoreSpecimensDataTable
        Get
            Return Me.tableBOMoreSpecimens
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As BOCITESApplicationPermitData = CType(MyBase.Clone,BOCITESApplicationPermitData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("BOPermit")) Is Nothing) Then
            Me.Tables.Add(New BOPermitDataTable(ds.Tables("BOPermit")))
        End If
        If (Not (ds.Tables("BOMoreSpecimens")) Is Nothing) Then
            Me.Tables.Add(New BOMoreSpecimensDataTable(ds.Tables("BOMoreSpecimens")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBOPermit = CType(Me.Tables("BOPermit"),BOPermitDataTable)
        If (Not (Me.tableBOPermit) Is Nothing) Then
            Me.tableBOPermit.InitVars
        End If
        Me.tableBOMoreSpecimens = CType(Me.Tables("BOMoreSpecimens"),BOMoreSpecimensDataTable)
        If (Not (Me.tableBOMoreSpecimens) Is Nothing) Then
            Me.tableBOMoreSpecimens.InitVars
        End If
        Me.relationBOPermitBOMoreSpecimens = Me.Relations("BOPermitBOMoreSpecimens")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "BOCITESApplicationPermitData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/BOCITESApplicationPermitData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBOPermit = New BOPermitDataTable
        Me.Tables.Add(Me.tableBOPermit)
        Me.tableBOMoreSpecimens = New BOMoreSpecimensDataTable
        Me.Tables.Add(Me.tableBOMoreSpecimens)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("BOPermitBOMoreSpecimens", New DataColumn() {Me.tableBOPermit.ApplicationIdColumn}, New DataColumn() {Me.tableBOMoreSpecimens.ApplicationIdColumn})
        Me.tableBOMoreSpecimens.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationBOPermitBOMoreSpecimens = New DataRelation("BOPermitBOMoreSpecimens", New DataColumn() {Me.tableBOPermit.ApplicationIdColumn}, New DataColumn() {Me.tableBOMoreSpecimens.ApplicationIdColumn}, false)
        Me.Relations.Add(Me.relationBOPermitBOMoreSpecimens)
    End Sub
    
    Private Function ShouldSerializeBOPermit() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBOMoreSpecimens() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BOPermitRowChangeEventHandler(ByVal sender As Object, ByVal e As BOPermitRowChangeEvent)
    
    Public Delegate Sub BOMoreSpecimensRowChangeEventHandler(ByVal sender As Object, ByVal e As BOMoreSpecimensRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnPermitReference As DataColumn
        
        Private columnBarCode As DataColumn
        
        Private columnExhibitionX As DataColumn
        
        Private columnExportX As DataColumn
        
        Private columnImportX As DataColumn
        
        Private columnImportCountry As DataColumn
        
        Private columnPetX As DataColumn
        
        Private columnReExportX As DataColumn
        
        Private columnReExportCountry As DataColumn
        
        Private columnAdditionalDetails As DataColumn
        
        Private columnSheetDescription As DataColumn
        
        Private columnSheetNumber As DataColumn
        
        Private columnPageMofN As DataColumn
        
        Private columnIssuingManagementAuthority_NameAddress As DataColumn
        
        Private columnLocation_Address As DataColumn
        
        Private columnSpecimen_Appendix As DataColumn
        
        Private columnSpecimen_CommonName As DataColumn
        
        Private columnSpecimen_EUAnnex As DataColumn
        
        Private columnSpecimen_LastReExportCountry As DataColumn
        
        Private columnSpecimen_Mass As DataColumn
        
        Private columnSpecimen_OriginCertificateDate As DataColumn
        
        Private columnSpecimen_OriginCertificateRef As DataColumn
        
        Private columnSpecimen_OriginCountry As DataColumn
        
        Private columnSpecimen_OriginPermitDate As DataColumn
        
        Private columnSpecimen_OriginPermitRef As DataColumn
        
        Private columnSpecimen_Purpose As DataColumn
        
        Private columnSpecimen_Quantity As DataColumn
        
        Private columnSpecimen_ScientificName As DataColumn
        
        Private columnSpecimen_Source As DataColumn
        
        Private columnSpecimen_Descriptions As DataColumn
        
        Private columnExporter_AuthorisedPartyId As DataColumn
        
        Private columnExporter_PartyAddress As DataColumn
        
        Private columnExporter_PartyName As DataColumn
        
        Private columnImporter_AuthorisedPartyId As DataColumn
        
        Private columnImporter_PartyAddress As DataColumn
        
        Private columnImporter_PartyName As DataColumn
        
        Friend Sub New()
            MyBase.New("BOPermit")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property PermitReferenceColumn As DataColumn
            Get
                Return Me.columnPermitReference
            End Get
        End Property
        
        Friend ReadOnly Property BarCodeColumn As DataColumn
            Get
                Return Me.columnBarCode
            End Get
        End Property
        
        Friend ReadOnly Property ExhibitionXColumn As DataColumn
            Get
                Return Me.columnExhibitionX
            End Get
        End Property
        
        Friend ReadOnly Property ExportXColumn As DataColumn
            Get
                Return Me.columnExportX
            End Get
        End Property
        
        Friend ReadOnly Property ImportXColumn As DataColumn
            Get
                Return Me.columnImportX
            End Get
        End Property
        
        Friend ReadOnly Property ImportCountryColumn As DataColumn
            Get
                Return Me.columnImportCountry
            End Get
        End Property
        
        Friend ReadOnly Property PetXColumn As DataColumn
            Get
                Return Me.columnPetX
            End Get
        End Property
        
        Friend ReadOnly Property ReExportXColumn As DataColumn
            Get
                Return Me.columnReExportX
            End Get
        End Property
        
        Friend ReadOnly Property ReExportCountryColumn As DataColumn
            Get
                Return Me.columnReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property AdditionalDetailsColumn As DataColumn
            Get
                Return Me.columnAdditionalDetails
            End Get
        End Property
        
        Friend ReadOnly Property SheetDescriptionColumn As DataColumn
            Get
                Return Me.columnSheetDescription
            End Get
        End Property
        
        Friend ReadOnly Property SheetNumberColumn As DataColumn
            Get
                Return Me.columnSheetNumber
            End Get
        End Property
        
        Friend ReadOnly Property PageMofNColumn As DataColumn
            Get
                Return Me.columnPageMofN
            End Get
        End Property
        
        Friend ReadOnly Property IssuingManagementAuthority_NameAddressColumn As DataColumn
            Get
                Return Me.columnIssuingManagementAuthority_NameAddress
            End Get
        End Property
        
        Friend ReadOnly Property Location_AddressColumn As DataColumn
            Get
                Return Me.columnLocation_Address
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_AppendixColumn As DataColumn
            Get
                Return Me.columnSpecimen_Appendix
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_CommonNameColumn As DataColumn
            Get
                Return Me.columnSpecimen_CommonName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_EUAnnexColumn As DataColumn
            Get
                Return Me.columnSpecimen_EUAnnex
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_LastReExportCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen_LastReExportCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_MassColumn As DataColumn
            Get
                Return Me.columnSpecimen_Mass
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateDateColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateRefColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCountryColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginCountry
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitDateColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitDate
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitRefColumn As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitRef
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_PurposeColumn As DataColumn
            Get
                Return Me.columnSpecimen_Purpose
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_QuantityColumn As DataColumn
            Get
                Return Me.columnSpecimen_Quantity
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_ScientificNameColumn As DataColumn
            Get
                Return Me.columnSpecimen_ScientificName
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_SourceColumn As DataColumn
            Get
                Return Me.columnSpecimen_Source
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_DescriptionsColumn As DataColumn
            Get
                Return Me.columnSpecimen_Descriptions
            End Get
        End Property
        
        Friend ReadOnly Property Exporter_AuthorisedPartyIdColumn As DataColumn
            Get
                Return Me.columnExporter_AuthorisedPartyId
            End Get
        End Property
        
        Friend ReadOnly Property Exporter_PartyAddressColumn As DataColumn
            Get
                Return Me.columnExporter_PartyAddress
            End Get
        End Property
        
        Friend ReadOnly Property Exporter_PartyNameColumn As DataColumn
            Get
                Return Me.columnExporter_PartyName
            End Get
        End Property
        
        Friend ReadOnly Property Importer_AuthorisedPartyIdColumn As DataColumn
            Get
                Return Me.columnImporter_AuthorisedPartyId
            End Get
        End Property
        
        Friend ReadOnly Property Importer_PartyAddressColumn As DataColumn
            Get
                Return Me.columnImporter_PartyAddress
            End Get
        End Property
        
        Friend ReadOnly Property Importer_PartyNameColumn As DataColumn
            Get
                Return Me.columnImporter_PartyName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOPermitRow
            Get
                Return CType(Me.Rows(index),BOPermitRow)
            End Get
        End Property
        
        Public Event BOPermitRowChanged As BOPermitRowChangeEventHandler
        
        Public Event BOPermitRowChanging As BOPermitRowChangeEventHandler
        
        Public Event BOPermitRowDeleted As BOPermitRowChangeEventHandler
        
        Public Event BOPermitRowDeleting As BOPermitRowChangeEventHandler
        
        Public Overloads Sub AddBOPermitRow(ByVal row As BOPermitRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOPermitRow( _
                    ByVal ApplicationId As Long,  _
                    ByVal PermitReference As String,  _
                    ByVal BarCode As String,  _
                    ByVal ExhibitionX As String,  _
                    ByVal ExportX As String,  _
                    ByVal ImportX As String,  _
                    ByVal ImportCountry As String,  _
                    ByVal PetX As String,  _
                    ByVal ReExportX As String,  _
                    ByVal ReExportCountry As String,  _
                    ByVal AdditionalDetails As String,  _
                    ByVal SheetDescription As String,  _
                    ByVal SheetNumber As String,  _
                    ByVal PageMofN As String,  _
                    ByVal IssuingManagementAuthority_NameAddress As String,  _
                    ByVal Location_Address As String,  _
                    ByVal Specimen_Appendix As String,  _
                    ByVal Specimen_CommonName As String,  _
                    ByVal Specimen_EUAnnex As String,  _
                    ByVal Specimen_LastReExportCountry As String,  _
                    ByVal Specimen_Mass As String,  _
                    ByVal Specimen_OriginCertificateDate As String,  _
                    ByVal Specimen_OriginCertificateRef As String,  _
                    ByVal Specimen_OriginCountry As String,  _
                    ByVal Specimen_OriginPermitDate As String,  _
                    ByVal Specimen_OriginPermitRef As String,  _
                    ByVal Specimen_Purpose As String,  _
                    ByVal Specimen_Quantity As String,  _
                    ByVal Specimen_ScientificName As String,  _
                    ByVal Specimen_Source As String,  _
                    ByVal Specimen_Descriptions As String,  _
                    ByVal Exporter_AuthorisedPartyId As String,  _
                    ByVal Exporter_PartyAddress As String,  _
                    ByVal Exporter_PartyName As String,  _
                    ByVal Importer_AuthorisedPartyId As String,  _
                    ByVal Importer_PartyAddress As String,  _
                    ByVal Importer_PartyName As String) As BOPermitRow
            Dim rowBOPermitRow As BOPermitRow = CType(Me.NewRow,BOPermitRow)
            rowBOPermitRow.ItemArray = New Object() {ApplicationId, PermitReference, BarCode, ExhibitionX, ExportX, ImportX, ImportCountry, PetX, ReExportX, ReExportCountry, AdditionalDetails, SheetDescription, SheetNumber, PageMofN, IssuingManagementAuthority_NameAddress, Location_Address, Specimen_Appendix, Specimen_CommonName, Specimen_EUAnnex, Specimen_LastReExportCountry, Specimen_Mass, Specimen_OriginCertificateDate, Specimen_OriginCertificateRef, Specimen_OriginCountry, Specimen_OriginPermitDate, Specimen_OriginPermitRef, Specimen_Purpose, Specimen_Quantity, Specimen_ScientificName, Specimen_Source, Specimen_Descriptions, Exporter_AuthorisedPartyId, Exporter_PartyAddress, Exporter_PartyName, Importer_AuthorisedPartyId, Importer_PartyAddress, Importer_PartyName}
            Me.Rows.Add(rowBOPermitRow)
            Return rowBOPermitRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOPermitDataTable = CType(MyBase.Clone,BOPermitDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOPermitDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnPermitReference = Me.Columns("PermitReference")
            Me.columnBarCode = Me.Columns("BarCode")
            Me.columnExhibitionX = Me.Columns("ExhibitionX")
            Me.columnExportX = Me.Columns("ExportX")
            Me.columnImportX = Me.Columns("ImportX")
            Me.columnImportCountry = Me.Columns("ImportCountry")
            Me.columnPetX = Me.Columns("PetX")
            Me.columnReExportX = Me.Columns("ReExportX")
            Me.columnReExportCountry = Me.Columns("ReExportCountry")
            Me.columnAdditionalDetails = Me.Columns("AdditionalDetails")
            Me.columnSheetDescription = Me.Columns("SheetDescription")
            Me.columnSheetNumber = Me.Columns("SheetNumber")
            Me.columnPageMofN = Me.Columns("PageMofN")
            Me.columnIssuingManagementAuthority_NameAddress = Me.Columns("IssuingManagementAuthority_NameAddress")
            Me.columnLocation_Address = Me.Columns("Location_Address")
            Me.columnSpecimen_Appendix = Me.Columns("Specimen_Appendix")
            Me.columnSpecimen_CommonName = Me.Columns("Specimen_CommonName")
            Me.columnSpecimen_EUAnnex = Me.Columns("Specimen_EUAnnex")
            Me.columnSpecimen_LastReExportCountry = Me.Columns("Specimen_LastReExportCountry")
            Me.columnSpecimen_Mass = Me.Columns("Specimen_Mass")
            Me.columnSpecimen_OriginCertificateDate = Me.Columns("Specimen_OriginCertificateDate")
            Me.columnSpecimen_OriginCertificateRef = Me.Columns("Specimen_OriginCertificateRef")
            Me.columnSpecimen_OriginCountry = Me.Columns("Specimen_OriginCountry")
            Me.columnSpecimen_OriginPermitDate = Me.Columns("Specimen_OriginPermitDate")
            Me.columnSpecimen_OriginPermitRef = Me.Columns("Specimen_OriginPermitRef")
            Me.columnSpecimen_Purpose = Me.Columns("Specimen_Purpose")
            Me.columnSpecimen_Quantity = Me.Columns("Specimen_Quantity")
            Me.columnSpecimen_ScientificName = Me.Columns("Specimen_ScientificName")
            Me.columnSpecimen_Source = Me.Columns("Specimen_Source")
            Me.columnSpecimen_Descriptions = Me.Columns("Specimen_Descriptions")
            Me.columnExporter_AuthorisedPartyId = Me.Columns("Exporter_AuthorisedPartyId")
            Me.columnExporter_PartyAddress = Me.Columns("Exporter_PartyAddress")
            Me.columnExporter_PartyName = Me.Columns("Exporter_PartyName")
            Me.columnImporter_AuthorisedPartyId = Me.Columns("Importer_AuthorisedPartyId")
            Me.columnImporter_PartyAddress = Me.Columns("Importer_PartyAddress")
            Me.columnImporter_PartyName = Me.Columns("Importer_PartyName")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnPermitReference = New DataColumn("PermitReference", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPermitReference)
            Me.columnBarCode = New DataColumn("BarCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarCode)
            Me.columnExhibitionX = New DataColumn("ExhibitionX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExhibitionX)
            Me.columnExportX = New DataColumn("ExportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExportX)
            Me.columnImportX = New DataColumn("ImportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportX)
            Me.columnImportCountry = New DataColumn("ImportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImportCountry)
            Me.columnPetX = New DataColumn("PetX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPetX)
            Me.columnReExportX = New DataColumn("ReExportX", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReExportX)
            Me.columnReExportCountry = New DataColumn("ReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReExportCountry)
            Me.columnAdditionalDetails = New DataColumn("AdditionalDetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdditionalDetails)
            Me.columnSheetDescription = New DataColumn("SheetDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSheetDescription)
            Me.columnSheetNumber = New DataColumn("SheetNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSheetNumber)
            Me.columnPageMofN = New DataColumn("PageMofN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageMofN)
            Me.columnIssuingManagementAuthority_NameAddress = New DataColumn("IssuingManagementAuthority_NameAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssuingManagementAuthority_NameAddress)
            Me.columnLocation_Address = New DataColumn("Location_Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLocation_Address)
            Me.columnSpecimen_Appendix = New DataColumn("Specimen_Appendix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Appendix)
            Me.columnSpecimen_CommonName = New DataColumn("Specimen_CommonName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_CommonName)
            Me.columnSpecimen_EUAnnex = New DataColumn("Specimen_EUAnnex", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_EUAnnex)
            Me.columnSpecimen_LastReExportCountry = New DataColumn("Specimen_LastReExportCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_LastReExportCountry)
            Me.columnSpecimen_Mass = New DataColumn("Specimen_Mass", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Mass)
            Me.columnSpecimen_OriginCertificateDate = New DataColumn("Specimen_OriginCertificateDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateDate)
            Me.columnSpecimen_OriginCertificateRef = New DataColumn("Specimen_OriginCertificateRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateRef)
            Me.columnSpecimen_OriginCountry = New DataColumn("Specimen_OriginCountry", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCountry)
            Me.columnSpecimen_OriginPermitDate = New DataColumn("Specimen_OriginPermitDate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitDate)
            Me.columnSpecimen_OriginPermitRef = New DataColumn("Specimen_OriginPermitRef", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitRef)
            Me.columnSpecimen_Purpose = New DataColumn("Specimen_Purpose", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Purpose)
            Me.columnSpecimen_Quantity = New DataColumn("Specimen_Quantity", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Quantity)
            Me.columnSpecimen_ScientificName = New DataColumn("Specimen_ScientificName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_ScientificName)
            Me.columnSpecimen_Source = New DataColumn("Specimen_Source", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Source)
            Me.columnSpecimen_Descriptions = New DataColumn("Specimen_Descriptions", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Descriptions)
            Me.columnExporter_AuthorisedPartyId = New DataColumn("Exporter_AuthorisedPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExporter_AuthorisedPartyId)
            Me.columnExporter_PartyAddress = New DataColumn("Exporter_PartyAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExporter_PartyAddress)
            Me.columnExporter_PartyName = New DataColumn("Exporter_PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnExporter_PartyName)
            Me.columnImporter_AuthorisedPartyId = New DataColumn("Importer_AuthorisedPartyId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImporter_AuthorisedPartyId)
            Me.columnImporter_PartyAddress = New DataColumn("Importer_PartyAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImporter_PartyAddress)
            Me.columnImporter_PartyName = New DataColumn("Importer_PartyName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImporter_PartyName)
            Me.Constraints.Add(New UniqueConstraint("key1", New DataColumn() {Me.columnApplicationId}, false))
            Me.columnApplicationId.AllowDBNull = false
            Me.columnApplicationId.Unique = true
        End Sub
        
        Public Function NewBOPermitRow() As BOPermitRow
            Return CType(Me.NewRow,BOPermitRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOPermitRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOPermitRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOPermitRowChangedEvent) Is Nothing) Then
                RaiseEvent BOPermitRowChanged(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOPermitRowChangingEvent) Is Nothing) Then
                RaiseEvent BOPermitRowChanging(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOPermitRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOPermitRowDeleted(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOPermitRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOPermitRowDeleting(Me, New BOPermitRowChangeEvent(CType(e.Row,BOPermitRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOPermitRow(ByVal row As BOPermitRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRow
        Inherits DataRow
        
        Private tableBOPermit As BOPermitDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOPermit = CType(Me.Table,BOPermitDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Return CType(Me(Me.tableBOPermit.ApplicationIdColumn),Long)
            End Get
            Set
                Me(Me.tableBOPermit.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property PermitReference As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PermitReferenceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PermitReferenceColumn) = value
            End Set
        End Property
        
        Public Property BarCode As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.BarCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.BarCodeColumn) = value
            End Set
        End Property
        
        Public Property ExhibitionX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ExhibitionXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ExhibitionXColumn) = value
            End Set
        End Property
        
        Public Property ExportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ExportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ExportXColumn) = value
            End Set
        End Property
        
        Public Property ImportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ImportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ImportXColumn) = value
            End Set
        End Property
        
        Public Property ImportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ImportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ImportCountryColumn) = value
            End Set
        End Property
        
        Public Property PetX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PetXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PetXColumn) = value
            End Set
        End Property
        
        Public Property ReExportX As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ReExportXColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ReExportXColumn) = value
            End Set
        End Property
        
        Public Property ReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.ReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.ReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property AdditionalDetails As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.AdditionalDetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.AdditionalDetailsColumn) = value
            End Set
        End Property
        
        Public Property SheetDescription As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SheetDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SheetDescriptionColumn) = value
            End Set
        End Property
        
        Public Property SheetNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.SheetNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.SheetNumberColumn) = value
            End Set
        End Property
        
        Public Property PageMofN As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.PageMofNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.PageMofNColumn) = value
            End Set
        End Property
        
        Public Property IssuingManagementAuthority_NameAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn) = value
            End Set
        End Property
        
        Public Property Location_Address As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Location_AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Location_AddressColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Appendix As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_AppendixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_AppendixColumn) = value
            End Set
        End Property
        
        Public Property Specimen_CommonName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_CommonNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_CommonNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen_EUAnnex As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_EUAnnexColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_EUAnnexColumn) = value
            End Set
        End Property
        
        Public Property Specimen_LastReExportCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_LastReExportCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_LastReExportCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Mass As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_MassColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_MassColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginCertificateDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginCertificateDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginCertificateRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginCertificateRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCountry As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginCountryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginCountryColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitDate As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginPermitDateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginPermitDateColumn) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitRef As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_OriginPermitRefColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_OriginPermitRefColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Purpose As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_PurposeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_PurposeColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Quantity As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_QuantityColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_QuantityColumn) = value
            End Set
        End Property
        
        Public Property Specimen_ScientificName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_ScientificNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_ScientificNameColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Source As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_SourceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_SourceColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Descriptions As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Specimen_DescriptionsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Specimen_DescriptionsColumn) = value
            End Set
        End Property
        
        Public Property Exporter_AuthorisedPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn) = value
            End Set
        End Property
        
        Public Property Exporter_PartyAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Exporter_PartyAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Exporter_PartyAddressColumn) = value
            End Set
        End Property
        
        Public Property Exporter_PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Exporter_PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Exporter_PartyNameColumn) = value
            End Set
        End Property
        
        Public Property Importer_AuthorisedPartyId As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn) = value
            End Set
        End Property
        
        Public Property Importer_PartyAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Importer_PartyAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Importer_PartyAddressColumn) = value
            End Set
        End Property
        
        Public Property Importer_PartyName As String
            Get
                Try 
                    Return CType(Me(Me.tableBOPermit.Importer_PartyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOPermit.Importer_PartyNameColumn) = value
            End Set
        End Property
        
        Public Function IsPermitReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PermitReferenceColumn)
        End Function
        
        Public Sub SetPermitReferenceNull()
            Me(Me.tableBOPermit.PermitReferenceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarCodeNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.BarCodeColumn)
        End Function
        
        Public Sub SetBarCodeNull()
            Me(Me.tableBOPermit.BarCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExhibitionXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ExhibitionXColumn)
        End Function
        
        Public Sub SetExhibitionXNull()
            Me(Me.tableBOPermit.ExhibitionXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExportXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ExportXColumn)
        End Function
        
        Public Sub SetExportXNull()
            Me(Me.tableBOPermit.ExportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ImportXColumn)
        End Function
        
        Public Sub SetImportXNull()
            Me(Me.tableBOPermit.ImportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ImportCountryColumn)
        End Function
        
        Public Sub SetImportCountryNull()
            Me(Me.tableBOPermit.ImportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPetXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PetXColumn)
        End Function
        
        Public Sub SetPetXNull()
            Me(Me.tableBOPermit.PetXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReExportXNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ReExportXColumn)
        End Function
        
        Public Sub SetReExportXNull()
            Me(Me.tableBOPermit.ReExportXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.ReExportCountryColumn)
        End Function
        
        Public Sub SetReExportCountryNull()
            Me(Me.tableBOPermit.ReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdditionalDetailsNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.AdditionalDetailsColumn)
        End Function
        
        Public Sub SetAdditionalDetailsNull()
            Me(Me.tableBOPermit.AdditionalDetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSheetDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SheetDescriptionColumn)
        End Function
        
        Public Sub SetSheetDescriptionNull()
            Me(Me.tableBOPermit.SheetDescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSheetNumberNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.SheetNumberColumn)
        End Function
        
        Public Sub SetSheetNumberNull()
            Me(Me.tableBOPermit.SheetNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageMofNNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.PageMofNColumn)
        End Function
        
        Public Sub SetPageMofNNull()
            Me(Me.tableBOPermit.PageMofNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssuingManagementAuthority_NameAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn)
        End Function
        
        Public Sub SetIssuingManagementAuthority_NameAddressNull()
            Me(Me.tableBOPermit.IssuingManagementAuthority_NameAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLocation_AddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Location_AddressColumn)
        End Function
        
        Public Sub SetLocation_AddressNull()
            Me(Me.tableBOPermit.Location_AddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_AppendixNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_AppendixColumn)
        End Function
        
        Public Sub SetSpecimen_AppendixNull()
            Me(Me.tableBOPermit.Specimen_AppendixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_CommonNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_CommonNameColumn)
        End Function
        
        Public Sub SetSpecimen_CommonNameNull()
            Me(Me.tableBOPermit.Specimen_CommonNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_EUAnnexNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_EUAnnexColumn)
        End Function
        
        Public Sub SetSpecimen_EUAnnexNull()
            Me(Me.tableBOPermit.Specimen_EUAnnexColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_LastReExportCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_LastReExportCountryColumn)
        End Function
        
        Public Sub SetSpecimen_LastReExportCountryNull()
            Me(Me.tableBOPermit.Specimen_LastReExportCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_MassNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_MassColumn)
        End Function
        
        Public Sub SetSpecimen_MassNull()
            Me(Me.tableBOPermit.Specimen_MassColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginCertificateDateColumn)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateDateNull()
            Me(Me.tableBOPermit.Specimen_OriginCertificateDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateRefNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginCertificateRefColumn)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateRefNull()
            Me(Me.tableBOPermit.Specimen_OriginCertificateRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCountryNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginCountryColumn)
        End Function
        
        Public Sub SetSpecimen_OriginCountryNull()
            Me(Me.tableBOPermit.Specimen_OriginCountryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitDateNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginPermitDateColumn)
        End Function
        
        Public Sub SetSpecimen_OriginPermitDateNull()
            Me(Me.tableBOPermit.Specimen_OriginPermitDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitRefNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_OriginPermitRefColumn)
        End Function
        
        Public Sub SetSpecimen_OriginPermitRefNull()
            Me(Me.tableBOPermit.Specimen_OriginPermitRefColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_PurposeNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_PurposeColumn)
        End Function
        
        Public Sub SetSpecimen_PurposeNull()
            Me(Me.tableBOPermit.Specimen_PurposeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_QuantityNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_QuantityColumn)
        End Function
        
        Public Sub SetSpecimen_QuantityNull()
            Me(Me.tableBOPermit.Specimen_QuantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_ScientificNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_ScientificNameColumn)
        End Function
        
        Public Sub SetSpecimen_ScientificNameNull()
            Me(Me.tableBOPermit.Specimen_ScientificNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_SourceNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_SourceColumn)
        End Function
        
        Public Sub SetSpecimen_SourceNull()
            Me(Me.tableBOPermit.Specimen_SourceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_DescriptionsNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Specimen_DescriptionsColumn)
        End Function
        
        Public Sub SetSpecimen_DescriptionsNull()
            Me(Me.tableBOPermit.Specimen_DescriptionsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExporter_AuthorisedPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn)
        End Function
        
        Public Sub SetExporter_AuthorisedPartyIdNull()
            Me(Me.tableBOPermit.Exporter_AuthorisedPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExporter_PartyAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Exporter_PartyAddressColumn)
        End Function
        
        Public Sub SetExporter_PartyAddressNull()
            Me(Me.tableBOPermit.Exporter_PartyAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExporter_PartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Exporter_PartyNameColumn)
        End Function
        
        Public Sub SetExporter_PartyNameNull()
            Me(Me.tableBOPermit.Exporter_PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImporter_AuthorisedPartyIdNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn)
        End Function
        
        Public Sub SetImporter_AuthorisedPartyIdNull()
            Me(Me.tableBOPermit.Importer_AuthorisedPartyIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImporter_PartyAddressNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Importer_PartyAddressColumn)
        End Function
        
        Public Sub SetImporter_PartyAddressNull()
            Me(Me.tableBOPermit.Importer_PartyAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImporter_PartyNameNull() As Boolean
            Return Me.IsNull(Me.tableBOPermit.Importer_PartyNameColumn)
        End Function
        
        Public Sub SetImporter_PartyNameNull()
            Me(Me.tableBOPermit.Importer_PartyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBOMoreSpecimensRows() As BOMoreSpecimensRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("BOPermitBOMoreSpecimens")),BOMoreSpecimensRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOPermitRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOPermitRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOPermitRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOPermitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOMoreSpecimensDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnApplicationId As DataColumn
        
        Private columnPageMofN As DataColumn
        
        Private columnSpecimen_Appendix1 As DataColumn
        
        Private columnSpecimen_CommonName1 As DataColumn
        
        Private columnSpecimen_EUAnnex1 As DataColumn
        
        Private columnSpecimen_LastReExportCountry1 As DataColumn
        
        Private columnSpecimen_Mass1 As DataColumn
        
        Private columnSpecimen_OriginCertificateDate1 As DataColumn
        
        Private columnSpecimen_OriginCertificateRef1 As DataColumn
        
        Private columnSpecimen_OriginCountry1 As DataColumn
        
        Private columnSpecimen_OriginPermitDate1 As DataColumn
        
        Private columnSpecimen_OriginPermitRef1 As DataColumn
        
        Private columnSpecimen_Purpose1 As DataColumn
        
        Private columnSpecimen_Quantity1 As DataColumn
        
        Private columnSpecimen_ScientificName1 As DataColumn
        
        Private columnSpecimen_Source1 As DataColumn
        
        Private columnSpecimen_Descriptions1 As DataColumn
        
        Private columnSpecimen_Appendix2 As DataColumn
        
        Private columnSpecimen_CommonName2 As DataColumn
        
        Private columnSpecimen_EUAnnex2 As DataColumn
        
        Private columnSpecimen_LastReExportCountry2 As DataColumn
        
        Private columnSpecimen_Mass2 As DataColumn
        
        Private columnSpecimen_OriginCertificateDate2 As DataColumn
        
        Private columnSpecimen_OriginCertificateRef2 As DataColumn
        
        Private columnSpecimen_OriginCountry2 As DataColumn
        
        Private columnSpecimen_OriginPermitDate2 As DataColumn
        
        Private columnSpecimen_OriginPermitRef2 As DataColumn
        
        Private columnSpecimen_Purpose2 As DataColumn
        
        Private columnSpecimen_Quantity2 As DataColumn
        
        Private columnSpecimen_ScientificName2 As DataColumn
        
        Private columnSpecimen_Source2 As DataColumn
        
        Private columnSpecimen_Descriptions2 As DataColumn
        
        Private columnSpecimen_Appendix3 As DataColumn
        
        Private columnSpecimen_CommonName3 As DataColumn
        
        Private columnSpecimen_EUAnnex3 As DataColumn
        
        Private columnSpecimen_LastReExportCountry3 As DataColumn
        
        Private columnSpecimen_Mass3 As DataColumn
        
        Private columnSpecimen_OriginCertificateDate3 As DataColumn
        
        Private columnSpecimen_OriginCertificateRef3 As DataColumn
        
        Private columnSpecimen_OriginCountry3 As DataColumn
        
        Private columnSpecimen_OriginPermitDate3 As DataColumn
        
        Private columnSpecimen_OriginPermitRef3 As DataColumn
        
        Private columnSpecimen_Purpose3 As DataColumn
        
        Private columnSpecimen_Quantity3 As DataColumn
        
        Private columnSpecimen_ScientificName3 As DataColumn
        
        Private columnSpecimen_Source3 As DataColumn
        
        Private columnSpecimen_Descriptions3 As DataColumn
        
        Friend Sub New()
            MyBase.New("BOMoreSpecimens")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ApplicationIdColumn As DataColumn
            Get
                Return Me.columnApplicationId
            End Get
        End Property
        
        Friend ReadOnly Property PageMofNColumn As DataColumn
            Get
                Return Me.columnPageMofN
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Appendix1Column As DataColumn
            Get
                Return Me.columnSpecimen_Appendix1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_CommonName1Column As DataColumn
            Get
                Return Me.columnSpecimen_CommonName1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_EUAnnex1Column As DataColumn
            Get
                Return Me.columnSpecimen_EUAnnex1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_LastReExportCountry1Column As DataColumn
            Get
                Return Me.columnSpecimen_LastReExportCountry1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Mass1Column As DataColumn
            Get
                Return Me.columnSpecimen_Mass1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateDate1Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateDate1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateRef1Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateRef1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCountry1Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCountry1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitDate1Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitDate1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitRef1Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitRef1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Purpose1Column As DataColumn
            Get
                Return Me.columnSpecimen_Purpose1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Quantity1Column As DataColumn
            Get
                Return Me.columnSpecimen_Quantity1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_ScientificName1Column As DataColumn
            Get
                Return Me.columnSpecimen_ScientificName1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Source1Column As DataColumn
            Get
                Return Me.columnSpecimen_Source1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Descriptions1Column As DataColumn
            Get
                Return Me.columnSpecimen_Descriptions1
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Appendix2Column As DataColumn
            Get
                Return Me.columnSpecimen_Appendix2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_CommonName2Column As DataColumn
            Get
                Return Me.columnSpecimen_CommonName2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_EUAnnex2Column As DataColumn
            Get
                Return Me.columnSpecimen_EUAnnex2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_LastReExportCountry2Column As DataColumn
            Get
                Return Me.columnSpecimen_LastReExportCountry2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Mass2Column As DataColumn
            Get
                Return Me.columnSpecimen_Mass2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateDate2Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateDate2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateRef2Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateRef2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCountry2Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCountry2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitDate2Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitDate2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitRef2Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitRef2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Purpose2Column As DataColumn
            Get
                Return Me.columnSpecimen_Purpose2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Quantity2Column As DataColumn
            Get
                Return Me.columnSpecimen_Quantity2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_ScientificName2Column As DataColumn
            Get
                Return Me.columnSpecimen_ScientificName2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Source2Column As DataColumn
            Get
                Return Me.columnSpecimen_Source2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Descriptions2Column As DataColumn
            Get
                Return Me.columnSpecimen_Descriptions2
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Appendix3Column As DataColumn
            Get
                Return Me.columnSpecimen_Appendix3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_CommonName3Column As DataColumn
            Get
                Return Me.columnSpecimen_CommonName3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_EUAnnex3Column As DataColumn
            Get
                Return Me.columnSpecimen_EUAnnex3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_LastReExportCountry3Column As DataColumn
            Get
                Return Me.columnSpecimen_LastReExportCountry3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Mass3Column As DataColumn
            Get
                Return Me.columnSpecimen_Mass3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateDate3Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateDate3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCertificateRef3Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCertificateRef3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginCountry3Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginCountry3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitDate3Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitDate3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_OriginPermitRef3Column As DataColumn
            Get
                Return Me.columnSpecimen_OriginPermitRef3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Purpose3Column As DataColumn
            Get
                Return Me.columnSpecimen_Purpose3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Quantity3Column As DataColumn
            Get
                Return Me.columnSpecimen_Quantity3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_ScientificName3Column As DataColumn
            Get
                Return Me.columnSpecimen_ScientificName3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Source3Column As DataColumn
            Get
                Return Me.columnSpecimen_Source3
            End Get
        End Property
        
        Friend ReadOnly Property Specimen_Descriptions3Column As DataColumn
            Get
                Return Me.columnSpecimen_Descriptions3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BOMoreSpecimensRow
            Get
                Return CType(Me.Rows(index),BOMoreSpecimensRow)
            End Get
        End Property
        
        Public Event BOMoreSpecimensRowChanged As BOMoreSpecimensRowChangeEventHandler
        
        Public Event BOMoreSpecimensRowChanging As BOMoreSpecimensRowChangeEventHandler
        
        Public Event BOMoreSpecimensRowDeleted As BOMoreSpecimensRowChangeEventHandler
        
        Public Event BOMoreSpecimensRowDeleting As BOMoreSpecimensRowChangeEventHandler
        
        Public Overloads Sub AddBOMoreSpecimensRow(ByVal row As BOMoreSpecimensRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBOMoreSpecimensRow( _
                    ByVal parentBOPermitRowByBOPermitBOMoreSpecimens As BOPermitRow,  _
                    ByVal PageMofN As String,  _
                    ByVal Specimen_Appendix1 As String,  _
                    ByVal Specimen_CommonName1 As String,  _
                    ByVal Specimen_EUAnnex1 As String,  _
                    ByVal Specimen_LastReExportCountry1 As String,  _
                    ByVal Specimen_Mass1 As String,  _
                    ByVal Specimen_OriginCertificateDate1 As String,  _
                    ByVal Specimen_OriginCertificateRef1 As String,  _
                    ByVal Specimen_OriginCountry1 As String,  _
                    ByVal Specimen_OriginPermitDate1 As String,  _
                    ByVal Specimen_OriginPermitRef1 As String,  _
                    ByVal Specimen_Purpose1 As String,  _
                    ByVal Specimen_Quantity1 As String,  _
                    ByVal Specimen_ScientificName1 As String,  _
                    ByVal Specimen_Source1 As String,  _
                    ByVal Specimen_Descriptions1 As String,  _
                    ByVal Specimen_Appendix2 As String,  _
                    ByVal Specimen_CommonName2 As String,  _
                    ByVal Specimen_EUAnnex2 As String,  _
                    ByVal Specimen_LastReExportCountry2 As String,  _
                    ByVal Specimen_Mass2 As String,  _
                    ByVal Specimen_OriginCertificateDate2 As String,  _
                    ByVal Specimen_OriginCertificateRef2 As String,  _
                    ByVal Specimen_OriginCountry2 As String,  _
                    ByVal Specimen_OriginPermitDate2 As String,  _
                    ByVal Specimen_OriginPermitRef2 As String,  _
                    ByVal Specimen_Purpose2 As String,  _
                    ByVal Specimen_Quantity2 As String,  _
                    ByVal Specimen_ScientificName2 As String,  _
                    ByVal Specimen_Source2 As String,  _
                    ByVal Specimen_Descriptions2 As String,  _
                    ByVal Specimen_Appendix3 As String,  _
                    ByVal Specimen_CommonName3 As String,  _
                    ByVal Specimen_EUAnnex3 As String,  _
                    ByVal Specimen_LastReExportCountry3 As String,  _
                    ByVal Specimen_Mass3 As String,  _
                    ByVal Specimen_OriginCertificateDate3 As String,  _
                    ByVal Specimen_OriginCertificateRef3 As String,  _
                    ByVal Specimen_OriginCountry3 As String,  _
                    ByVal Specimen_OriginPermitDate3 As String,  _
                    ByVal Specimen_OriginPermitRef3 As String,  _
                    ByVal Specimen_Purpose3 As String,  _
                    ByVal Specimen_Quantity3 As String,  _
                    ByVal Specimen_ScientificName3 As String,  _
                    ByVal Specimen_Source3 As String,  _
                    ByVal Specimen_Descriptions3 As String) As BOMoreSpecimensRow
            Dim rowBOMoreSpecimensRow As BOMoreSpecimensRow = CType(Me.NewRow,BOMoreSpecimensRow)
            rowBOMoreSpecimensRow.ItemArray = New Object() {parentBOPermitRowByBOPermitBOMoreSpecimens(0), PageMofN, Specimen_Appendix1, Specimen_CommonName1, Specimen_EUAnnex1, Specimen_LastReExportCountry1, Specimen_Mass1, Specimen_OriginCertificateDate1, Specimen_OriginCertificateRef1, Specimen_OriginCountry1, Specimen_OriginPermitDate1, Specimen_OriginPermitRef1, Specimen_Purpose1, Specimen_Quantity1, Specimen_ScientificName1, Specimen_Source1, Specimen_Descriptions1, Specimen_Appendix2, Specimen_CommonName2, Specimen_EUAnnex2, Specimen_LastReExportCountry2, Specimen_Mass2, Specimen_OriginCertificateDate2, Specimen_OriginCertificateRef2, Specimen_OriginCountry2, Specimen_OriginPermitDate2, Specimen_OriginPermitRef2, Specimen_Purpose2, Specimen_Quantity2, Specimen_ScientificName2, Specimen_Source2, Specimen_Descriptions2, Specimen_Appendix3, Specimen_CommonName3, Specimen_EUAnnex3, Specimen_LastReExportCountry3, Specimen_Mass3, Specimen_OriginCertificateDate3, Specimen_OriginCertificateRef3, Specimen_OriginCountry3, Specimen_OriginPermitDate3, Specimen_OriginPermitRef3, Specimen_Purpose3, Specimen_Quantity3, Specimen_ScientificName3, Specimen_Source3, Specimen_Descriptions3}
            Me.Rows.Add(rowBOMoreSpecimensRow)
            Return rowBOMoreSpecimensRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BOMoreSpecimensDataTable = CType(MyBase.Clone,BOMoreSpecimensDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BOMoreSpecimensDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnApplicationId = Me.Columns("ApplicationId")
            Me.columnPageMofN = Me.Columns("PageMofN")
            Me.columnSpecimen_Appendix1 = Me.Columns("Specimen_Appendix1")
            Me.columnSpecimen_CommonName1 = Me.Columns("Specimen_CommonName1")
            Me.columnSpecimen_EUAnnex1 = Me.Columns("Specimen_EUAnnex1")
            Me.columnSpecimen_LastReExportCountry1 = Me.Columns("Specimen_LastReExportCountry1")
            Me.columnSpecimen_Mass1 = Me.Columns("Specimen_Mass1")
            Me.columnSpecimen_OriginCertificateDate1 = Me.Columns("Specimen_OriginCertificateDate1")
            Me.columnSpecimen_OriginCertificateRef1 = Me.Columns("Specimen_OriginCertificateRef1")
            Me.columnSpecimen_OriginCountry1 = Me.Columns("Specimen_OriginCountry1")
            Me.columnSpecimen_OriginPermitDate1 = Me.Columns("Specimen_OriginPermitDate1")
            Me.columnSpecimen_OriginPermitRef1 = Me.Columns("Specimen_OriginPermitRef1")
            Me.columnSpecimen_Purpose1 = Me.Columns("Specimen_Purpose1")
            Me.columnSpecimen_Quantity1 = Me.Columns("Specimen_Quantity1")
            Me.columnSpecimen_ScientificName1 = Me.Columns("Specimen_ScientificName1")
            Me.columnSpecimen_Source1 = Me.Columns("Specimen_Source1")
            Me.columnSpecimen_Descriptions1 = Me.Columns("Specimen_Descriptions1")
            Me.columnSpecimen_Appendix2 = Me.Columns("Specimen_Appendix2")
            Me.columnSpecimen_CommonName2 = Me.Columns("Specimen_CommonName2")
            Me.columnSpecimen_EUAnnex2 = Me.Columns("Specimen_EUAnnex2")
            Me.columnSpecimen_LastReExportCountry2 = Me.Columns("Specimen_LastReExportCountry2")
            Me.columnSpecimen_Mass2 = Me.Columns("Specimen_Mass2")
            Me.columnSpecimen_OriginCertificateDate2 = Me.Columns("Specimen_OriginCertificateDate2")
            Me.columnSpecimen_OriginCertificateRef2 = Me.Columns("Specimen_OriginCertificateRef2")
            Me.columnSpecimen_OriginCountry2 = Me.Columns("Specimen_OriginCountry2")
            Me.columnSpecimen_OriginPermitDate2 = Me.Columns("Specimen_OriginPermitDate2")
            Me.columnSpecimen_OriginPermitRef2 = Me.Columns("Specimen_OriginPermitRef2")
            Me.columnSpecimen_Purpose2 = Me.Columns("Specimen_Purpose2")
            Me.columnSpecimen_Quantity2 = Me.Columns("Specimen_Quantity2")
            Me.columnSpecimen_ScientificName2 = Me.Columns("Specimen_ScientificName2")
            Me.columnSpecimen_Source2 = Me.Columns("Specimen_Source2")
            Me.columnSpecimen_Descriptions2 = Me.Columns("Specimen_Descriptions2")
            Me.columnSpecimen_Appendix3 = Me.Columns("Specimen_Appendix3")
            Me.columnSpecimen_CommonName3 = Me.Columns("Specimen_CommonName3")
            Me.columnSpecimen_EUAnnex3 = Me.Columns("Specimen_EUAnnex3")
            Me.columnSpecimen_LastReExportCountry3 = Me.Columns("Specimen_LastReExportCountry3")
            Me.columnSpecimen_Mass3 = Me.Columns("Specimen_Mass3")
            Me.columnSpecimen_OriginCertificateDate3 = Me.Columns("Specimen_OriginCertificateDate3")
            Me.columnSpecimen_OriginCertificateRef3 = Me.Columns("Specimen_OriginCertificateRef3")
            Me.columnSpecimen_OriginCountry3 = Me.Columns("Specimen_OriginCountry3")
            Me.columnSpecimen_OriginPermitDate3 = Me.Columns("Specimen_OriginPermitDate3")
            Me.columnSpecimen_OriginPermitRef3 = Me.Columns("Specimen_OriginPermitRef3")
            Me.columnSpecimen_Purpose3 = Me.Columns("Specimen_Purpose3")
            Me.columnSpecimen_Quantity3 = Me.Columns("Specimen_Quantity3")
            Me.columnSpecimen_ScientificName3 = Me.Columns("Specimen_ScientificName3")
            Me.columnSpecimen_Source3 = Me.Columns("Specimen_Source3")
            Me.columnSpecimen_Descriptions3 = Me.Columns("Specimen_Descriptions3")
        End Sub
        
        Private Sub InitClass()
            Me.columnApplicationId = New DataColumn("ApplicationId", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnApplicationId)
            Me.columnPageMofN = New DataColumn("PageMofN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPageMofN)
            Me.columnSpecimen_Appendix1 = New DataColumn("Specimen_Appendix1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Appendix1)
            Me.columnSpecimen_CommonName1 = New DataColumn("Specimen_CommonName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_CommonName1)
            Me.columnSpecimen_EUAnnex1 = New DataColumn("Specimen_EUAnnex1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_EUAnnex1)
            Me.columnSpecimen_LastReExportCountry1 = New DataColumn("Specimen_LastReExportCountry1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_LastReExportCountry1)
            Me.columnSpecimen_Mass1 = New DataColumn("Specimen_Mass1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Mass1)
            Me.columnSpecimen_OriginCertificateDate1 = New DataColumn("Specimen_OriginCertificateDate1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateDate1)
            Me.columnSpecimen_OriginCertificateRef1 = New DataColumn("Specimen_OriginCertificateRef1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateRef1)
            Me.columnSpecimen_OriginCountry1 = New DataColumn("Specimen_OriginCountry1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCountry1)
            Me.columnSpecimen_OriginPermitDate1 = New DataColumn("Specimen_OriginPermitDate1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitDate1)
            Me.columnSpecimen_OriginPermitRef1 = New DataColumn("Specimen_OriginPermitRef1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitRef1)
            Me.columnSpecimen_Purpose1 = New DataColumn("Specimen_Purpose1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Purpose1)
            Me.columnSpecimen_Quantity1 = New DataColumn("Specimen_Quantity1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Quantity1)
            Me.columnSpecimen_ScientificName1 = New DataColumn("Specimen_ScientificName1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_ScientificName1)
            Me.columnSpecimen_Source1 = New DataColumn("Specimen_Source1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Source1)
            Me.columnSpecimen_Descriptions1 = New DataColumn("Specimen_Descriptions1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Descriptions1)
            Me.columnSpecimen_Appendix2 = New DataColumn("Specimen_Appendix2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Appendix2)
            Me.columnSpecimen_CommonName2 = New DataColumn("Specimen_CommonName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_CommonName2)
            Me.columnSpecimen_EUAnnex2 = New DataColumn("Specimen_EUAnnex2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_EUAnnex2)
            Me.columnSpecimen_LastReExportCountry2 = New DataColumn("Specimen_LastReExportCountry2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_LastReExportCountry2)
            Me.columnSpecimen_Mass2 = New DataColumn("Specimen_Mass2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Mass2)
            Me.columnSpecimen_OriginCertificateDate2 = New DataColumn("Specimen_OriginCertificateDate2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateDate2)
            Me.columnSpecimen_OriginCertificateRef2 = New DataColumn("Specimen_OriginCertificateRef2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateRef2)
            Me.columnSpecimen_OriginCountry2 = New DataColumn("Specimen_OriginCountry2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCountry2)
            Me.columnSpecimen_OriginPermitDate2 = New DataColumn("Specimen_OriginPermitDate2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitDate2)
            Me.columnSpecimen_OriginPermitRef2 = New DataColumn("Specimen_OriginPermitRef2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitRef2)
            Me.columnSpecimen_Purpose2 = New DataColumn("Specimen_Purpose2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Purpose2)
            Me.columnSpecimen_Quantity2 = New DataColumn("Specimen_Quantity2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Quantity2)
            Me.columnSpecimen_ScientificName2 = New DataColumn("Specimen_ScientificName2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_ScientificName2)
            Me.columnSpecimen_Source2 = New DataColumn("Specimen_Source2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Source2)
            Me.columnSpecimen_Descriptions2 = New DataColumn("Specimen_Descriptions2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Descriptions2)
            Me.columnSpecimen_Appendix3 = New DataColumn("Specimen_Appendix3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Appendix3)
            Me.columnSpecimen_CommonName3 = New DataColumn("Specimen_CommonName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_CommonName3)
            Me.columnSpecimen_EUAnnex3 = New DataColumn("Specimen_EUAnnex3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_EUAnnex3)
            Me.columnSpecimen_LastReExportCountry3 = New DataColumn("Specimen_LastReExportCountry3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_LastReExportCountry3)
            Me.columnSpecimen_Mass3 = New DataColumn("Specimen_Mass3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Mass3)
            Me.columnSpecimen_OriginCertificateDate3 = New DataColumn("Specimen_OriginCertificateDate3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateDate3)
            Me.columnSpecimen_OriginCertificateRef3 = New DataColumn("Specimen_OriginCertificateRef3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCertificateRef3)
            Me.columnSpecimen_OriginCountry3 = New DataColumn("Specimen_OriginCountry3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginCountry3)
            Me.columnSpecimen_OriginPermitDate3 = New DataColumn("Specimen_OriginPermitDate3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitDate3)
            Me.columnSpecimen_OriginPermitRef3 = New DataColumn("Specimen_OriginPermitRef3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_OriginPermitRef3)
            Me.columnSpecimen_Purpose3 = New DataColumn("Specimen_Purpose3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Purpose3)
            Me.columnSpecimen_Quantity3 = New DataColumn("Specimen_Quantity3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Quantity3)
            Me.columnSpecimen_ScientificName3 = New DataColumn("Specimen_ScientificName3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_ScientificName3)
            Me.columnSpecimen_Source3 = New DataColumn("Specimen_Source3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Source3)
            Me.columnSpecimen_Descriptions3 = New DataColumn("Specimen_Descriptions3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSpecimen_Descriptions3)
        End Sub
        
        Public Function NewBOMoreSpecimensRow() As BOMoreSpecimensRow
            Return CType(Me.NewRow,BOMoreSpecimensRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BOMoreSpecimensRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BOMoreSpecimensRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BOMoreSpecimensRowChangedEvent) Is Nothing) Then
                RaiseEvent BOMoreSpecimensRowChanged(Me, New BOMoreSpecimensRowChangeEvent(CType(e.Row,BOMoreSpecimensRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BOMoreSpecimensRowChangingEvent) Is Nothing) Then
                RaiseEvent BOMoreSpecimensRowChanging(Me, New BOMoreSpecimensRowChangeEvent(CType(e.Row,BOMoreSpecimensRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BOMoreSpecimensRowDeletedEvent) Is Nothing) Then
                RaiseEvent BOMoreSpecimensRowDeleted(Me, New BOMoreSpecimensRowChangeEvent(CType(e.Row,BOMoreSpecimensRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BOMoreSpecimensRowDeletingEvent) Is Nothing) Then
                RaiseEvent BOMoreSpecimensRowDeleting(Me, New BOMoreSpecimensRowChangeEvent(CType(e.Row,BOMoreSpecimensRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBOMoreSpecimensRow(ByVal row As BOMoreSpecimensRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOMoreSpecimensRow
        Inherits DataRow
        
        Private tableBOMoreSpecimens As BOMoreSpecimensDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBOMoreSpecimens = CType(Me.Table,BOMoreSpecimensDataTable)
        End Sub
        
        Public Property ApplicationId As Long
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.ApplicationIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.ApplicationIdColumn) = value
            End Set
        End Property
        
        Public Property PageMofN As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.PageMofNColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.PageMofNColumn) = value
            End Set
        End Property
        
        Public Property Specimen_Appendix1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Appendix1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Appendix1Column) = value
            End Set
        End Property
        
        Public Property Specimen_CommonName1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_CommonName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_CommonName1Column) = value
            End Set
        End Property
        
        Public Property Specimen_EUAnnex1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex1Column) = value
            End Set
        End Property
        
        Public Property Specimen_LastReExportCountry1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry1Column) = value
            End Set
        End Property
        
        Public Property Specimen_Mass1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Mass1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Mass1Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateDate1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate1Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateRef1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef1Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCountry1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry1Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitDate1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate1Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitRef1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef1Column) = value
            End Set
        End Property
        
        Public Property Specimen_Purpose1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Purpose1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Purpose1Column) = value
            End Set
        End Property
        
        Public Property Specimen_Quantity1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Quantity1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Quantity1Column) = value
            End Set
        End Property
        
        Public Property Specimen_ScientificName1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_ScientificName1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_ScientificName1Column) = value
            End Set
        End Property
        
        Public Property Specimen_Source1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Source1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Source1Column) = value
            End Set
        End Property
        
        Public Property Specimen_Descriptions1 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Descriptions1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Descriptions1Column) = value
            End Set
        End Property
        
        Public Property Specimen_Appendix2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Appendix2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Appendix2Column) = value
            End Set
        End Property
        
        Public Property Specimen_CommonName2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_CommonName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_CommonName2Column) = value
            End Set
        End Property
        
        Public Property Specimen_EUAnnex2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex2Column) = value
            End Set
        End Property
        
        Public Property Specimen_LastReExportCountry2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry2Column) = value
            End Set
        End Property
        
        Public Property Specimen_Mass2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Mass2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Mass2Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateDate2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate2Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateRef2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef2Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCountry2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry2Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitDate2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate2Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitRef2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef2Column) = value
            End Set
        End Property
        
        Public Property Specimen_Purpose2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Purpose2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Purpose2Column) = value
            End Set
        End Property
        
        Public Property Specimen_Quantity2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Quantity2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Quantity2Column) = value
            End Set
        End Property
        
        Public Property Specimen_ScientificName2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_ScientificName2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_ScientificName2Column) = value
            End Set
        End Property
        
        Public Property Specimen_Source2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Source2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Source2Column) = value
            End Set
        End Property
        
        Public Property Specimen_Descriptions2 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Descriptions2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Descriptions2Column) = value
            End Set
        End Property
        
        Public Property Specimen_Appendix3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Appendix3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Appendix3Column) = value
            End Set
        End Property
        
        Public Property Specimen_CommonName3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_CommonName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_CommonName3Column) = value
            End Set
        End Property
        
        Public Property Specimen_EUAnnex3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex3Column) = value
            End Set
        End Property
        
        Public Property Specimen_LastReExportCountry3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry3Column) = value
            End Set
        End Property
        
        Public Property Specimen_Mass3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Mass3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Mass3Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateDate3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate3Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCertificateRef3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef3Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginCountry3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry3Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitDate3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate3Column) = value
            End Set
        End Property
        
        Public Property Specimen_OriginPermitRef3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef3Column) = value
            End Set
        End Property
        
        Public Property Specimen_Purpose3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Purpose3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Purpose3Column) = value
            End Set
        End Property
        
        Public Property Specimen_Quantity3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Quantity3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Quantity3Column) = value
            End Set
        End Property
        
        Public Property Specimen_ScientificName3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_ScientificName3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_ScientificName3Column) = value
            End Set
        End Property
        
        Public Property Specimen_Source3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Source3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Source3Column) = value
            End Set
        End Property
        
        Public Property Specimen_Descriptions3 As String
            Get
                Try 
                    Return CType(Me(Me.tableBOMoreSpecimens.Specimen_Descriptions3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBOMoreSpecimens.Specimen_Descriptions3Column) = value
            End Set
        End Property
        
        Public Property BOPermitRow As BOPermitRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("BOPermitBOMoreSpecimens")),BOPermitRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("BOPermitBOMoreSpecimens"))
            End Set
        End Property
        
        Public Function IsApplicationIdNull() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.ApplicationIdColumn)
        End Function
        
        Public Sub SetApplicationIdNull()
            Me(Me.tableBOMoreSpecimens.ApplicationIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPageMofNNull() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.PageMofNColumn)
        End Function
        
        Public Sub SetPageMofNNull()
            Me(Me.tableBOMoreSpecimens.PageMofNColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Appendix1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Appendix1Column)
        End Function
        
        Public Sub SetSpecimen_Appendix1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Appendix1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_CommonName1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_CommonName1Column)
        End Function
        
        Public Sub SetSpecimen_CommonName1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_CommonName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_EUAnnex1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_EUAnnex1Column)
        End Function
        
        Public Sub SetSpecimen_EUAnnex1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_LastReExportCountry1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry1Column)
        End Function
        
        Public Sub SetSpecimen_LastReExportCountry1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Mass1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Mass1Column)
        End Function
        
        Public Sub SetSpecimen_Mass1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Mass1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateDate1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate1Column)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateDate1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateRef1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef1Column)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateRef1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCountry1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCountry1Column)
        End Function
        
        Public Sub SetSpecimen_OriginCountry1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitDate1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate1Column)
        End Function
        
        Public Sub SetSpecimen_OriginPermitDate1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitRef1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef1Column)
        End Function
        
        Public Sub SetSpecimen_OriginPermitRef1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Purpose1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Purpose1Column)
        End Function
        
        Public Sub SetSpecimen_Purpose1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Purpose1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Quantity1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Quantity1Column)
        End Function
        
        Public Sub SetSpecimen_Quantity1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Quantity1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_ScientificName1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_ScientificName1Column)
        End Function
        
        Public Sub SetSpecimen_ScientificName1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_ScientificName1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Source1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Source1Column)
        End Function
        
        Public Sub SetSpecimen_Source1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Source1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Descriptions1Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Descriptions1Column)
        End Function
        
        Public Sub SetSpecimen_Descriptions1Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Descriptions1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Appendix2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Appendix2Column)
        End Function
        
        Public Sub SetSpecimen_Appendix2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Appendix2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_CommonName2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_CommonName2Column)
        End Function
        
        Public Sub SetSpecimen_CommonName2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_CommonName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_EUAnnex2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_EUAnnex2Column)
        End Function
        
        Public Sub SetSpecimen_EUAnnex2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_LastReExportCountry2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry2Column)
        End Function
        
        Public Sub SetSpecimen_LastReExportCountry2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Mass2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Mass2Column)
        End Function
        
        Public Sub SetSpecimen_Mass2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Mass2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateDate2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate2Column)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateDate2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateRef2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef2Column)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateRef2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCountry2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCountry2Column)
        End Function
        
        Public Sub SetSpecimen_OriginCountry2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitDate2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate2Column)
        End Function
        
        Public Sub SetSpecimen_OriginPermitDate2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitRef2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef2Column)
        End Function
        
        Public Sub SetSpecimen_OriginPermitRef2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Purpose2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Purpose2Column)
        End Function
        
        Public Sub SetSpecimen_Purpose2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Purpose2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Quantity2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Quantity2Column)
        End Function
        
        Public Sub SetSpecimen_Quantity2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Quantity2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_ScientificName2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_ScientificName2Column)
        End Function
        
        Public Sub SetSpecimen_ScientificName2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_ScientificName2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Source2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Source2Column)
        End Function
        
        Public Sub SetSpecimen_Source2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Source2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Descriptions2Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Descriptions2Column)
        End Function
        
        Public Sub SetSpecimen_Descriptions2Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Descriptions2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Appendix3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Appendix3Column)
        End Function
        
        Public Sub SetSpecimen_Appendix3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Appendix3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_CommonName3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_CommonName3Column)
        End Function
        
        Public Sub SetSpecimen_CommonName3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_CommonName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_EUAnnex3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_EUAnnex3Column)
        End Function
        
        Public Sub SetSpecimen_EUAnnex3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_EUAnnex3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_LastReExportCountry3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry3Column)
        End Function
        
        Public Sub SetSpecimen_LastReExportCountry3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_LastReExportCountry3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Mass3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Mass3Column)
        End Function
        
        Public Sub SetSpecimen_Mass3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Mass3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateDate3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate3Column)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateDate3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateDate3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCertificateRef3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef3Column)
        End Function
        
        Public Sub SetSpecimen_OriginCertificateRef3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCertificateRef3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginCountry3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginCountry3Column)
        End Function
        
        Public Sub SetSpecimen_OriginCountry3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginCountry3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitDate3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate3Column)
        End Function
        
        Public Sub SetSpecimen_OriginPermitDate3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitDate3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_OriginPermitRef3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef3Column)
        End Function
        
        Public Sub SetSpecimen_OriginPermitRef3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_OriginPermitRef3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Purpose3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Purpose3Column)
        End Function
        
        Public Sub SetSpecimen_Purpose3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Purpose3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Quantity3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Quantity3Column)
        End Function
        
        Public Sub SetSpecimen_Quantity3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Quantity3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_ScientificName3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_ScientificName3Column)
        End Function
        
        Public Sub SetSpecimen_ScientificName3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_ScientificName3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Source3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Source3Column)
        End Function
        
        Public Sub SetSpecimen_Source3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Source3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSpecimen_Descriptions3Null() As Boolean
            Return Me.IsNull(Me.tableBOMoreSpecimens.Specimen_Descriptions3Column)
        End Function
        
        Public Sub SetSpecimen_Descriptions3Null()
            Me(Me.tableBOMoreSpecimens.Specimen_Descriptions3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BOMoreSpecimensRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BOMoreSpecimensRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BOMoreSpecimensRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BOMoreSpecimensRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
