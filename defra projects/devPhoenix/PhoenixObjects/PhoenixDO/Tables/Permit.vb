'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Entity
    
    'Entity implementation for table 'Permit'
    '*DO* add your modifications to this file
    <System.Serializable()>  _
    Public Class Permit
        Inherits Base.PermitBase
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal permitId As Integer, ByVal tran As SqlClient.SqlTransaction)
            MyBase.New(permitId, tran)
        End Sub

        Public Shadows Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub

        Function GetRelatedSpecimens(ByVal tran As SqlClient.SqlTransaction) As EntitySet.SpecimenSet
            If Id > 0 Then
                Return Me.GetRelatedSpecimens(Me.Id, tran)
            Else
                Return Nothing
            End If
        End Function

        Shared Function GetRelatedSpecimens(ByVal permitId As Int32, ByVal tran As SqlClient.SqlTransaction) As EntitySet.SpecimenSet
            Return Entity.Specimen.GetForPermit(permitId, tran)
        End Function

        Function GetRelatedNotes(ByVal tran As SqlClient.SqlTransaction) As EntitySet.PermitNoteSet
            If Id > 0 Then
                Return GetRelatedNotes(Me.Id, tran)
            Else
                Return Nothing
            End If
        End Function

        Shared Function GetRelatedNotes(ByVal permitId As Int32, ByVal tran As SqlClient.SqlTransaction) As EntitySet.PermitNoteSet
            Return Entity.PermitNote.GetForPermit(permitId, tran)
        End Function

        Shared Function GetPermitsForApplication(ByVal permitNumber As String, ByVal keeperId As Int32) As EnterpriseObjects.EntitySet
            Return Permit.GetPermitsForApplication(permitNumber, keeperId, Nothing)
        End Function

        Shared Function GetPermitsForApplication(ByVal permitNumber As String, ByVal keeperId As Int32, ByVal tran As SqlClient.SqlTransaction) As EnterpriseObjects.EntitySet
            Dim PermitHelper As New Helpers.ApplicationPermitHelper(permitNumber)
            If PermitHelper.ApplicationId > 0 Then
                Return CType(Sprocs.dbo_usp_GetPermits(PermitHelper.ApplicationId, PermitHelper.PermitId, keeperId, tran, GetType(EnterpriseObjects.EntitySet)), EnterpriseObjects.EntitySet)
            End If
        End Function

        Shared Function GetPermitsForApplication(ByVal markType As Int32, ByVal markNumber As String, ByVal keeperId As Int32) As EnterpriseObjects.EntitySet
            Return Permit.GetPermitsForApplication(markType, markNumber, keeperId, Nothing)
        End Function

        Shared Function GetPermitsForApplication(ByVal markType As Int32, ByVal markNumber As String, ByVal keeperId As Int32, ByVal tran As SqlClient.SqlTransaction) As EnterpriseObjects.EntitySet
            Return CType(Sprocs.dbo_usp_GetPermitsByIdMarks(markType, markNumber, keeperId, tran, GetType(EnterpriseObjects.EntitySet)), EnterpriseObjects.EntitySet)
        End Function

        Shared Function GetSpecialConditions(ByVal permitId As Int32, ByVal hideFromGWD As Boolean) As Entity.PermitSpecialcondition()
            '  Dim Permit As New Permit(permitId, Nothing)
            'Get all SA's attached to the specified permit
            Dim SCEntitySet As EntitySet.PermitSpecialConditionSet = CType(Sprocs.dbo_usp_GetPermitSpecialConditions _
                (permitId, Nothing, GetType(EntitySet.PermitSpecialConditionSet)), EntitySet.PermitSpecialConditionSet) 'Permit.GetRelatedPermitSpecialCondition

            If Not SCEntitySet Is Nothing AndAlso SCEntitySet.Entities.Count > 0 Then
                'add all the sa's for the premit to a sorted list
                Dim List() As Entity.PermitSpecialCondition
                Dim index As Int32 = 0
                For Each SC As Entity.PermitSpecialCondition In SCEntitySet.Entities
                    If Not hideFromGWD OrElse (hideFromGWD AndAlso (Not SC.Current OrElse (SC.Current AndAlso Not SC.AddedBySA))) Then
                        ReDim Preserve List(index)
                        List(index) = SC
                        index += 1
                    End If
                Next

                'If Not List Is Nothing AndAlso List.Count > 0 Then
                '    Dim ReturnArrayIndex As Int32 = List.Count - 1
                '    'set up a return array of sa's
                '    Dim ReturnArray(List.Count - 1) As Entity.PermitSpecialCondition

                '    For Each Item As Object In List
                '        ReturnArray(ReturnArrayIndex) = Item
                '        ReturnArrayIndex -= 1
                '    Next
                '    Return ReturnArray
                'End If
                Return list
            End If
        End Function

        Shared Function GetScientificAdvice(ByVal permitId As Int32, ByVal hideFromGWD As Boolean) As Entity.PermitScientificAdvice()
            '    Dim Permit As New Permit(permitId, Nothing)
            'Get all SA's attached to the specified permit
            Dim SAEntitySet As EntitySet.PermitScientificAdviceSet = CType(Sprocs.dbo_usp_GetPermitScientificAdvice _
                (permitId, Nothing, GetType(EntitySet.PermitScientificAdviceSet)), EntitySet.PermitScientificAdviceSet) 'Permit.GetRelatedPermitSpecialCondition


            If Not SAEntitySet Is Nothing AndAlso SAEntitySet.Entities.Count > 0 Then
                'add all the sa's for the premit to a sorted list
                Dim List() As Entity.PermitScientificAdvice
                Dim index As Int32
                For Each SA As Entity.PermitScientificAdvice In SAEntitySet.Entities
                    If Not hideFromGWD OrElse (hideFromGWD AndAlso Not SA.Current) Then
                        ReDim Preserve List(index)
                        List(index) = SA
                        index += 1
                    End If
                Next

                'If Not List Is Nothing AndAlso List.Count > 0 Then
                '    'dset up a return array of sa's
                '    Dim ReturnArrayIndex As Int32 = List.Count - 1

                '    Dim ReturnArray(List.Count - 1) As Entity.PermitScientificAdvice

                '    For Each item As Object In List.Values
                '        ReturnArray(ReturnArrayIndex) = item
                '        ReturnArrayIndex -= 1
                '    Next
                '    Return ReturnArray
                'End If
                Return list
            End If
        End Function

        Public Shared Function GetSpecialConditionsNotAssigned(ByVal permitId As Int32) As EntitySet.SpecialConditionSet
            Return uk.gov.defra.Phoenix.DO.DataObjects.Sprocs.dbo_usp_GetSpecialConditionsNoAssigned(permitId, Nothing, GetType(EntitySet.SpecialConditionSet))
        End Function
    End Class
End Namespace
