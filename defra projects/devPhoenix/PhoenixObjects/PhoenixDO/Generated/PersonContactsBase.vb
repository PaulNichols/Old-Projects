'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'PersonContacts'
    '*DO NOT* modify this file.
    'Add new properties and methods to PersonContacts instead.
    Public MustInherit Class PersonContactsBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal contactId As Integer, ByVal personId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(contactId, personId, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal contactId As Integer, ByVal personId As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(contactId, personId).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property ContactId As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property PersonId As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),Integer)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.PersonContactsService
            Get
                Return CType(GetServiceObject(GetType(Service.PersonContactsService)),Service.PersonContactsService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(3)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.PersonContactsSet
            Return PersonContactsBase.GetAll(false, false, PersonContactsServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.PersonContactsSet
            Return PersonContactsBase.GetAll(includeHyphen, false, PersonContactsServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As PersonContactsServiceBase.OrderBy) As EntitySet.PersonContactsSet
            Dim service As Service.PersonContactsService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As PersonContactsServiceBase.OrderBy) As EntitySet.PersonContactsSet
            Return PersonContactsBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal contactId As Integer, ByVal personId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.PersonContacts
            Dim service As Service.PersonContactsService
            service = ServiceObject
            Return service.GetById(New Integer() {contactId, personId}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal contactId As Integer, ByVal personId As Integer) As Entity.PersonContacts
            Dim service As Service.PersonContactsService
            service = ServiceObject
            Return service.GetById(New Integer() {contactId, personId})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal contactId As Integer, ByVal personId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.PersonContactsService
            service = ServiceObject
            Return service.DeleteById(New Integer() {contactId, personId}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal contactId As Integer, ByVal personId As Integer) As Boolean
            Return PersonContactsBase.DeleteById(contactId, personId, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal contactId As Integer, ByVal personId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return PersonContactsBase.DeleteById(contactId, personId, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForContact(ByVal contactId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.PersonContactsSet
            Dim service As Service.PersonContactsService
            service = ServiceObject
            Return service.GetForContact(contactId, tran)
        End Function
        
        Public Overloads Shared Function GetForContact(ByVal contactId As Integer) As EntitySet.PersonContactsSet
            Return PersonContactsBase.GetForContact(contactId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForPerson(ByVal personId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.PersonContactsSet
            Dim service As Service.PersonContactsService
            service = ServiceObject
            Return service.GetForPerson(personId, tran)
        End Function
        
        Public Overloads Shared Function GetForPerson(ByVal personId As Integer) As EntitySet.PersonContactsSet
            Return PersonContactsBase.GetForPerson(personId, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal contactId As Integer, ByVal personId As Integer)
            Entity.PersonContacts.ServiceObject.Insert(contactId, personId)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim contactIdParam As Integer = Me.ContactId
            Dim personIdParam As Integer = Me.PersonId
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.PersonContacts.ServiceObject.Update(contactIdParam, personIdParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
