'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'PermitSpecialCondition'
    '*DO NOT* modify this file.
    'Add new properties and methods to PermitSpecialCondition instead.
    Public MustInherit Class PermitSpecialConditionBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal permitSpecialConditionId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(permitSpecialConditionId, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal permitSpecialConditionId As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(permitSpecialConditionId).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property PermitSpecialConditionId As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property PermitId As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property BFDate As Date
            Get
                If (Me.IsBFDateNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),Date)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property StatusId As Integer
            Get
                If (Me.IsStatusIdNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(3),Integer)
                End If
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property DateApplied As Date
            Get
                Return CType(Me(4),Date)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property SpecialConditionId As Integer
            Get
                Return CType(Me(5),Integer)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property SSOUserId As Decimal
            Get
                Return CType(Me(6),Decimal)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property Condition As String
            Get
                If (Me.IsConditionNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),String)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property Current As Boolean
            Get
                Return CType(Me(8),Boolean)
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Property AddedBySA As Boolean
            Get
                If (Me.IsAddedBySANull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Boolean)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(10),Integer)
                End If
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.PermitSpecialConditionService
            Get
                Return CType(GetServiceObject(GetType(Service.PermitSpecialConditionService)),Service.PermitSpecialConditionService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsBFDateNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetBFDateToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsStatusIdNull() As Boolean
            Return Me.IsNull(3)
        End Function
        
        Public Sub SetStatusIdToNull()
            Me(3) = System.DBNull.Value
        End Sub
        
        Public Function IsConditionNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetConditionToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Function IsAddedBySANull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetAddedBySAToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(10)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(10) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(11)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.PermitSpecialConditionSet
            Return PermitSpecialConditionBase.GetAll(false, false, PermitSpecialConditionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.PermitSpecialConditionSet
            Return PermitSpecialConditionBase.GetAll(includeHyphen, false, PermitSpecialConditionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As PermitSpecialConditionServiceBase.OrderBy) As EntitySet.PermitSpecialConditionSet
            Dim service As Service.PermitSpecialConditionService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As PermitSpecialConditionServiceBase.OrderBy) As EntitySet.PermitSpecialConditionSet
            Return PermitSpecialConditionBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal permitSpecialConditionId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.PermitSpecialCondition
            Dim service As Service.PermitSpecialConditionService
            service = ServiceObject
            Return service.GetById(PermitSpecialConditionId, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal permitSpecialConditionId As Integer) As Entity.PermitSpecialCondition
            Dim service As Service.PermitSpecialConditionService
            service = ServiceObject
            Return service.GetById(PermitSpecialConditionId)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal permitSpecialConditionId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.PermitSpecialConditionService
            service = ServiceObject
            Return service.DeleteById(permitSpecialConditionId, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal permitSpecialConditionId As Integer) As Boolean
            Return PermitSpecialConditionBase.DeleteById(permitSpecialConditionId, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal permitSpecialConditionId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return PermitSpecialConditionBase.DeleteById(permitSpecialConditionId, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForPermit(ByVal permitId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.PermitSpecialConditionSet
            Dim service As Service.PermitSpecialConditionService
            service = ServiceObject
            Return service.GetForPermit(permitId, tran)
        End Function
        
        Public Overloads Shared Function GetForPermit(ByVal permitId As Integer) As EntitySet.PermitSpecialConditionSet
            Return PermitSpecialConditionBase.GetForPermit(permitId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForSpecialCondition(ByVal specialConditionId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.PermitSpecialConditionSet
            Dim service As Service.PermitSpecialConditionService
            service = ServiceObject
            Return service.GetForSpecialCondition(specialConditionId, tran)
        End Function
        
        Public Overloads Shared Function GetForSpecialCondition(ByVal specialConditionId As Integer) As EntitySet.PermitSpecialConditionSet
            Return PermitSpecialConditionBase.GetForSpecialCondition(specialConditionId, Nothing)
        End Function
        
        Public Shared Function Insert(ByVal permitId As Integer, ByVal bFDate As Object, ByVal statusId As Object, ByVal dateApplied As Date, ByVal specialConditionId As Integer, ByVal sSOUserId As Decimal, ByVal condition As Object, ByVal current As Boolean, ByVal addedBySA As Object) As Entity.PermitSpecialCondition
            Return Entity.PermitSpecialCondition.ServiceObject.Insert(permitId, bFDate, statusId, dateApplied, specialConditionId, sSOUserId, condition, current, addedBySA)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim permitIdParam As Integer = Me.PermitId
            Dim bFDateParam As Object
            If (Me.IsBFDateNull = false) Then
                bFDateParam = Me.BFDate
            Else
                bFDateParam = System.DBNull.Value
            End If
            Dim statusIdParam As Object
            If (Me.IsStatusIdNull = false) Then
                statusIdParam = Me.StatusId
            Else
                statusIdParam = System.DBNull.Value
            End If
            Dim dateAppliedParam As Date = Me.DateApplied
            Dim specialConditionIdParam As Integer = Me.SpecialConditionId
            Dim sSOUserIdParam As Decimal = Me.SSOUserId
            Dim conditionParam As Object
            If (Me.IsConditionNull = false) Then
                conditionParam = Me.Condition
            Else
                conditionParam = System.DBNull.Value
            End If
            Dim currentParam As Boolean = Me.Current
            Dim addedBySAParam As Object
            If (Me.IsAddedBySANull = false) Then
                addedBySAParam = Me.AddedBySA
            Else
                addedBySAParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.PermitSpecialCondition.ServiceObject.Update(Me.Id, permitIdParam, bFDateParam, statusIdParam, dateAppliedParam, specialConditionIdParam, sSOUserIdParam, conditionParam, currentParam, addedBySAParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
