'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyTaxon'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyTaxon instead.
    Public MustInherit Class TaxonomyTaxonBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(iD, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal iD As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(iD).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property KingdomID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(100)>  _
        Public Property EpithetType As String
            Get
                If (Me.IsEpithetTypeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(4),String)
                End If
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(300)>  _
        Public Property TaxonName As String
            Get
                Return CType(Me(5),String)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(140)>  _
        Public Property TaxonAuthor As String
            Get
                If (Me.IsTaxonAuthorNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),String)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property TaxonStatusID As Integer
            Get
                Return CType(Me(7),Integer)
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property ParentKingdomID As Integer
            Get
                If (Me.IsParentKingdomIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(8),Integer)
                End If
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Property ParentTaxonID As Integer
            Get
                If (Me.IsParentTaxonIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Integer)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Property ParentTaxonTypeID As Integer
            Get
                If (Me.IsParentTaxonTypeIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(10),Integer)
                End If
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property DistributionComplete As String
            Get
                If (Me.IsDistributionCompleteNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(11),String)
                End If
            End Get
            Set
                Me(11) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(30)>  _
        Public Property CITESReference As String
            Get
                If (Me.IsCITESReferenceNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(12),String)
                End If
            End Get
            Set
                Me(12) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(100)>  _
        Public Property Lineage As String
            Get
                If (Me.IsLineageNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(13),String)
                End If
            End Get
            Set
                Me(13) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(14),Integer)
                End If
            End Get
            Set
                Me(14) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyTaxonService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyTaxonService)),Service.TaxonomyTaxonService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsEpithetTypeNull() As Boolean
            Return Me.IsNull(4)
        End Function
        
        Public Sub SetEpithetTypeToNull()
            Me(4) = System.DBNull.Value
        End Sub
        
        Public Function IsTaxonAuthorNull() As Boolean
            Return Me.IsNull(6)
        End Function
        
        Public Sub SetTaxonAuthorToNull()
            Me(6) = System.DBNull.Value
        End Sub
        
        Public Function IsParentKingdomIDNull() As Boolean
            Return Me.IsNull(8)
        End Function
        
        Public Sub SetParentKingdomIDToNull()
            Me(8) = System.DBNull.Value
        End Sub
        
        Public Function IsParentTaxonIDNull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetParentTaxonIDToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Function IsParentTaxonTypeIDNull() As Boolean
            Return Me.IsNull(10)
        End Function
        
        Public Sub SetParentTaxonTypeIDToNull()
            Me(10) = System.DBNull.Value
        End Sub
        
        Public Function IsDistributionCompleteNull() As Boolean
            Return Me.IsNull(11)
        End Function
        
        Public Sub SetDistributionCompleteToNull()
            Me(11) = System.DBNull.Value
        End Sub
        
        Public Function IsCITESReferenceNull() As Boolean
            Return Me.IsNull(12)
        End Function
        
        Public Sub SetCITESReferenceToNull()
            Me(12) = System.DBNull.Value
        End Sub
        
        Public Function IsLineageNull() As Boolean
            Return Me.IsNull(13)
        End Function
        
        Public Sub SetLineageToNull()
            Me(13) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(14)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(14) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(15)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyTaxonSet
            Return TaxonomyTaxonBase.GetAll(false, false, TaxonomyTaxonServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyTaxonSet
            Return TaxonomyTaxonBase.GetAll(includeHyphen, false, TaxonomyTaxonServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyTaxonServiceBase.OrderBy) As EntitySet.TaxonomyTaxonSet
            Dim service As Service.TaxonomyTaxonService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyTaxonServiceBase.OrderBy) As EntitySet.TaxonomyTaxonSet
            Return TaxonomyTaxonBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Dim service As Service.TaxonomyTaxonService
            service = ServiceObject
            Return service.GetById(ID, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal iD As Integer) As Entity.TaxonomyTaxon
            Dim service As Service.TaxonomyTaxonService
            service = ServiceObject
            Return service.GetById(ID)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal iD As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyTaxonService
            service = ServiceObject
            Return service.DeleteById(iD, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal iD As Integer) As Boolean
            Return TaxonomyTaxonBase.DeleteById(iD, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal iD As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyTaxonBase.DeleteById(iD, 0, transaction)
        End Function
        
        Public Overloads Function GetRelatedTaxonomyNote(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyNoteSet
            Return Entity.TaxonomyNote.GetForTaxonomyTaxon(Me.ID, tran)
        End Function
        
        Public Overloads Function GetRelatedTaxonomyNote() As EntitySet.TaxonomyNoteSet
            Return Me.GetRelatedTaxonomyNote(Nothing)
        End Function
        
        Public Shared Function Insert(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal epithetType As Object, ByVal taxonName As String, ByVal taxonAuthor As Object, ByVal taxonStatusID As Integer, ByVal parentKingdomID As Object, ByVal parentTaxonID As Object, ByVal parentTaxonTypeID As Object, ByVal distributionComplete As Object, ByVal cITESReference As Object, ByVal lineage As Object) As Entity.TaxonomyTaxon
            Return Entity.TaxonomyTaxon.ServiceObject.Insert(kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim kingdomIDParam As Integer = Me.KingdomID
            Dim taxonIDParam As Integer = Me.TaxonID
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim epithetTypeParam As Object
            If (Me.IsEpithetTypeNull = false) Then
                epithetTypeParam = Me.EpithetType
            Else
                epithetTypeParam = System.DBNull.Value
            End If
            Dim taxonNameParam As String = Me.TaxonName
            Dim taxonAuthorParam As Object
            If (Me.IsTaxonAuthorNull = false) Then
                taxonAuthorParam = Me.TaxonAuthor
            Else
                taxonAuthorParam = System.DBNull.Value
            End If
            Dim taxonStatusIDParam As Integer = Me.TaxonStatusID
            Dim parentKingdomIDParam As Object
            If (Me.IsParentKingdomIDNull = false) Then
                parentKingdomIDParam = Me.ParentKingdomID
            Else
                parentKingdomIDParam = System.DBNull.Value
            End If
            Dim parentTaxonIDParam As Object
            If (Me.IsParentTaxonIDNull = false) Then
                parentTaxonIDParam = Me.ParentTaxonID
            Else
                parentTaxonIDParam = System.DBNull.Value
            End If
            Dim parentTaxonTypeIDParam As Object
            If (Me.IsParentTaxonTypeIDNull = false) Then
                parentTaxonTypeIDParam = Me.ParentTaxonTypeID
            Else
                parentTaxonTypeIDParam = System.DBNull.Value
            End If
            Dim distributionCompleteParam As Object
            If (Me.IsDistributionCompleteNull = false) Then
                distributionCompleteParam = Me.DistributionComplete
            Else
                distributionCompleteParam = System.DBNull.Value
            End If
            Dim cITESReferenceParam As Object
            If (Me.IsCITESReferenceNull = false) Then
                cITESReferenceParam = EnterpriseObjects.Common.ParseSQLText(Me.CITESReference)
            Else
                cITESReferenceParam = System.DBNull.Value
            End If
            Dim lineageParam As Object
            If (Me.IsLineageNull = false) Then
                lineageParam = EnterpriseObjects.Common.ParseSQLText(Me.Lineage)
            Else
                lineageParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyTaxon.ServiceObject.Update(Me.Id, kingdomIDParam, taxonIDParam, taxonTypeIDParam, epithetTypeParam, taxonNameParam, taxonAuthorParam, taxonStatusIDParam, parentKingdomIDParam, parentTaxonIDParam, parentTaxonTypeIDParam, distributionCompleteParam, cITESReferenceParam, lineageParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
