'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'Taxon'
    '*DO NOT* modify this file.
    'Add new properties and methods to Taxon instead.
    Public MustInherit Class TaxonBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal taxonID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(taxonID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal taxonID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(taxonID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property SpecieID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property TaxonomyKingdomID As Integer
            Get
                If (Me.IsTaxonomyKingdomIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),Integer)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonomyTaxonID As Integer
            Get
                If (Me.IsTaxonomyTaxonIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(3),Integer)
                End If
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property TaxonomyTaxonTypeID As Integer
            Get
                If (Me.IsTaxonomyTaxonTypeIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(4),Integer)
                End If
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property IsCoral As Boolean
            Get
                Return CType(Me(5),Boolean)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property PaymentKingdom As Integer
            Get
                If (Me.IsPaymentKingdomNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),Integer)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property PaymentTaxonType As Integer
            Get
                If (Me.IsPaymentTaxonTypeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(8),Integer)
                End If
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonService)),Service.TaxonService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsTaxonomyKingdomIDNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetTaxonomyKingdomIDToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsTaxonomyTaxonIDNull() As Boolean
            Return Me.IsNull(3)
        End Function
        
        Public Sub SetTaxonomyTaxonIDToNull()
            Me(3) = System.DBNull.Value
        End Sub
        
        Public Function IsTaxonomyTaxonTypeIDNull() As Boolean
            Return Me.IsNull(4)
        End Function
        
        Public Sub SetTaxonomyTaxonTypeIDToNull()
            Me(4) = System.DBNull.Value
        End Sub
        
        Public Function IsPaymentKingdomNull() As Boolean
            Return Me.IsNull(6)
        End Function
        
        Public Sub SetPaymentKingdomToNull()
            Me(6) = System.DBNull.Value
        End Sub
        
        Public Function IsPaymentTaxonTypeNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetPaymentTaxonTypeToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(8)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(8) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(9)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonSet
            Return TaxonBase.GetAll(false, false, TaxonServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonSet
            Return TaxonBase.GetAll(includeHyphen, false, TaxonServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonServiceBase.OrderBy) As EntitySet.TaxonSet
            Dim service As Service.TaxonService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonServiceBase.OrderBy) As EntitySet.TaxonSet
            Return TaxonBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal taxonID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.Taxon
            Dim service As Service.TaxonService
            service = ServiceObject
            Return service.GetById(TaxonID, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal taxonID As Integer) As Entity.Taxon
            Dim service As Service.TaxonService
            service = ServiceObject
            Return service.GetById(TaxonID)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal taxonID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonService
            service = ServiceObject
            Return service.DeleteById(taxonID, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal taxonID As Integer) As Boolean
            Return TaxonBase.DeleteById(taxonID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal taxonID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonBase.DeleteById(taxonID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForSpecie(ByVal specieId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonSet
            Dim service As Service.TaxonService
            service = ServiceObject
            Return service.GetForSpecie(specieId, tran)
        End Function
        
        Public Overloads Shared Function GetForSpecie(ByVal specieId As Integer) As EntitySet.TaxonSet
            Return TaxonBase.GetForSpecie(specieId, Nothing)
        End Function
        
        Public Shared Function Insert(ByVal specieID As Integer, ByVal taxonomyKingdomID As Object, ByVal taxonomyTaxonID As Object, ByVal taxonomyTaxonTypeID As Object, ByVal isCoral As Boolean, ByVal paymentKingdom As Object, ByVal paymentTaxonType As Object) As Entity.Taxon
            Return Entity.Taxon.ServiceObject.Insert(specieID, taxonomyKingdomID, taxonomyTaxonID, taxonomyTaxonTypeID, isCoral, paymentKingdom, paymentTaxonType)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim specieIDParam As Integer = Me.SpecieID
            Dim taxonomyKingdomIDParam As Object
            If (Me.IsTaxonomyKingdomIDNull = false) Then
                taxonomyKingdomIDParam = Me.TaxonomyKingdomID
            Else
                taxonomyKingdomIDParam = System.DBNull.Value
            End If
            Dim taxonomyTaxonIDParam As Object
            If (Me.IsTaxonomyTaxonIDNull = false) Then
                taxonomyTaxonIDParam = Me.TaxonomyTaxonID
            Else
                taxonomyTaxonIDParam = System.DBNull.Value
            End If
            Dim taxonomyTaxonTypeIDParam As Object
            If (Me.IsTaxonomyTaxonTypeIDNull = false) Then
                taxonomyTaxonTypeIDParam = Me.TaxonomyTaxonTypeID
            Else
                taxonomyTaxonTypeIDParam = System.DBNull.Value
            End If
            Dim isCoralParam As Boolean = Me.IsCoral
            Dim paymentKingdomParam As Object
            If (Me.IsPaymentKingdomNull = false) Then
                paymentKingdomParam = Me.PaymentKingdom
            Else
                paymentKingdomParam = System.DBNull.Value
            End If
            Dim paymentTaxonTypeParam As Object
            If (Me.IsPaymentTaxonTypeNull = false) Then
                paymentTaxonTypeParam = Me.PaymentTaxonType
            Else
                paymentTaxonTypeParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.Taxon.ServiceObject.Update(Me.Id, specieIDParam, taxonomyKingdomIDParam, taxonomyTaxonIDParam, taxonomyTaxonTypeIDParam, isCoralParam, paymentKingdomParam, paymentTaxonTypeParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
