'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyDataLoadRequestHistory'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyDataLoadRequestHistory instead.
    Public MustInherit Class TaxonomyDataLoadRequestHistoryBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal taxonomyDataLoadRequestHistoryID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(taxonomyDataLoadRequestHistoryID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal taxonomyDataLoadRequestHistoryID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(taxonomyDataLoadRequestHistoryID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property TaxonomyDataLoadRequestHistoryID As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property TaxonomyDataloadRequestID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property Stage As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property Status As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property [Date] As Date
            Get
                Return CType(Me(4),Date)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(4000)>  _
        Public Property Message As String
            Get
                If (Me.IsMessageNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(5),String)
                End If
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(4000)>  _
        Public Property Diagnostics As String
            Get
                If (Me.IsDiagnosticsNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),String)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property TaxonomyDataLoadDataID As Integer
            Get
                If (Me.IsTaxonomyDataLoadDataIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum() As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = True) Then
                    Return Nothing
                Else
                    Return CType(Me(8), Integer)
                End If
            End Get
            Set(ByVal Value As Integer)
                Me(8) = Value
            End Set
        End Property

        Public Shared ReadOnly Property ServiceObject() As Service.TaxonomyDataLoadRequestHistoryService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyDataLoadRequestHistoryService)), Service.TaxonomyDataLoadRequestHistoryService)
            End Get
        End Property

        Public Overridable Property RawDataset() As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set(ByVal Value As System.Data.DataSet)
                mRawDataset = Value
            End Set
        End Property

        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub

        Public Function IsMessageNull() As Boolean
            Return Me.IsNull(5)
        End Function

        Public Sub SetMessageToNull()
            Me(5) = System.DBNull.Value
        End Sub

        Public Function IsDiagnosticsNull() As Boolean
            Return Me.IsNull(6)
        End Function

        Public Sub SetDiagnosticsToNull()
            Me(6) = System.DBNull.Value
        End Sub

        Public Function IsTaxonomyDataLoadDataIDNull() As Boolean
            Return Me.IsNull(7)
        End Function

        Public Sub SetTaxonomyDataLoadDataIDToNull()
            Me(7) = System.DBNull.Value
        End Sub

        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(8)
        End Function

        Public Sub SetCheckSumToNull()
            Me(8) = System.DBNull.Value
        End Sub

        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(9)
        End Sub

        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyDataLoadRequestHistorySet
            Return TaxonomyDataLoadRequestHistoryBase.GetAll(False, False, TaxonomyDataLoadRequestHistoryServiceBase.OrderBy.DefaultOrder)
        End Function

        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Return TaxonomyDataLoadRequestHistoryBase.GetAll(includeHyphen, False, TaxonomyDataLoadRequestHistoryServiceBase.OrderBy.DefaultOrder)
        End Function

        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyDataLoadRequestHistoryServiceBase.OrderBy) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Dim service As service.TaxonomyDataLoadRequestHistoryService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function

        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyDataLoadRequestHistoryServiceBase.OrderBy) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Return TaxonomyDataLoadRequestHistoryBase.GetAll(False, False, orderBy)
        End Function

        Public Overloads Shared Function GetById(ByVal taxonomyDataLoadRequestHistoryID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyDataLoadRequestHistory
            Dim service As service.TaxonomyDataLoadRequestHistoryService
            service = ServiceObject
            Return service.GetById(taxonomyDataLoadRequestHistoryID, tran)
        End Function

        Public Overloads Shared Function GetById(ByVal taxonomyDataLoadRequestHistoryID As Integer) As Entity.TaxonomyDataLoadRequestHistory
            Dim service As service.TaxonomyDataLoadRequestHistoryService
            service = ServiceObject
            Return service.GetById(taxonomyDataLoadRequestHistoryID)
        End Function

        Public Overloads Shared Function DeleteById(ByVal taxonomyDataLoadRequestHistoryID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As service.TaxonomyDataLoadRequestHistoryService
            service = ServiceObject
            Return service.DeleteById(taxonomyDataLoadRequestHistoryID, checkSum, transaction)
        End Function

        Public Overloads Shared Function DeleteById(ByVal taxonomyDataLoadRequestHistoryID As Integer) As Boolean
            Return TaxonomyDataLoadRequestHistoryBase.DeleteById(taxonomyDataLoadRequestHistoryID, 0, Nothing)
        End Function

        Public Overloads Shared Function DeleteById(ByVal taxonomyDataLoadRequestHistoryID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyDataLoadRequestHistoryBase.DeleteById(taxonomyDataLoadRequestHistoryID, 0, transaction)
        End Function

        Public Overloads Shared Function GetForTaxonomyDataLoadRequest(ByVal taxonomyDataLoadRequestID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Dim service As service.TaxonomyDataLoadRequestHistoryService
            service = ServiceObject
            Return service.GetForTaxonomyDataLoadRequest(taxonomyDataLoadRequestID, tran)
        End Function

        Public Overloads Shared Function GetForTaxonomyDataLoadRequest(ByVal taxonomyDataLoadRequestID As Integer) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Return TaxonomyDataLoadRequestHistoryBase.GetForTaxonomyDataLoadRequest(taxonomyDataLoadRequestID, Nothing)
        End Function

        Public Overloads Shared Function GetForTaxonomyDataLoadData(ByVal taxonomyDataLoadDataID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Dim service As service.TaxonomyDataLoadRequestHistoryService
            service = ServiceObject
            Return service.GetForTaxonomyDataLoadData(taxonomyDataLoadDataID, tran)
        End Function

        Public Overloads Shared Function GetForTaxonomyDataLoadData(ByVal taxonomyDataLoadDataID As Integer) As EntitySet.TaxonomyDataLoadRequestHistorySet
            Return TaxonomyDataLoadRequestHistoryBase.GetForTaxonomyDataLoadData(taxonomyDataLoadDataID, Nothing)
        End Function

        Public Shared Function Insert(ByVal taxonomyDataloadRequestID As Integer, ByVal stage As Integer, ByVal status As Integer, ByVal [date] As Date, ByVal message As Object, ByVal diagnostics As Object, ByVal taxonomyDataLoadDataID As Object) As Entity.TaxonomyDataLoadRequestHistory
            Return Entity.TaxonomyDataLoadRequestHistory.ServiceObject.Insert(taxonomyDataloadRequestID, stage, status, [date], message, diagnostics, taxonomyDataLoadDataID)
        End Function

        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim taxonomyDataloadRequestIDParam As Integer = Me.TaxonomyDataloadRequestID
            Dim stageParam As Integer = Me.Stage
            Dim statusParam As Integer = Me.Status
            Dim dateParam As Date = Me.Date
            Dim messageParam As Object
            If (Me.IsMessageNull = False) Then
                messageParam = EnterpriseObjects.Common.ParseSQLText(Me.Message)
            Else
                messageParam = System.DBNull.Value
            End If
            Dim diagnosticsParam As Object
            If (Me.IsDiagnosticsNull = False) Then
                diagnosticsParam = EnterpriseObjects.Common.ParseSQLText(Me.Diagnostics)
            Else
                diagnosticsParam = System.DBNull.Value
            End If
            Dim taxonomyDataLoadDataIDParam As Object
            If (Me.IsTaxonomyDataLoadDataIDNull = False) Then
                taxonomyDataLoadDataIDParam = Me.TaxonomyDataLoadDataID
            Else
                taxonomyDataLoadDataIDParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = True) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As Object = Entity.TaxonomyDataLoadRequestHistory.ServiceObject.Update(Me.Id, taxonomyDataloadRequestIDParam, stageParam, statusParam, dateParam, messageParam, diagnosticsParam, taxonomyDataLoadDataIDParam, checkSum)
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
