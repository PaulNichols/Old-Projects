'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'NotificationSpecieLink'
    '*DO NOT* modify this file.
    'Add new properties and methods to NotificationSpecieLink instead.
    Public MustInherit Class NotificationSpecieLinkBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal specieId As Integer, ByVal cITESNotificationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(specieId, cITESNotificationId, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal specieId As Integer, ByVal cITESNotificationId As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(specieId, cITESNotificationId).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property SpecieId As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property CITESNotificationId As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property CITESDerivativeId As Integer
            Get
                If (Me.IsCITESDerivativeIdNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),Integer)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property UOMId As Integer
            Get
                If (Me.IsUOMIdNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(3),Integer)
                End If
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(4),Integer)
                End If
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.NotificationSpecieLinkService
            Get
                Return CType(GetServiceObject(GetType(Service.NotificationSpecieLinkService)),Service.NotificationSpecieLinkService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsCITESDerivativeIdNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetCITESDerivativeIdToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsUOMIdNull() As Boolean
            Return Me.IsNull(3)
        End Function
        
        Public Sub SetUOMIdToNull()
            Me(3) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(4)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(4) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(5)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetAll(false, false, NotificationSpecieLinkServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetAll(includeHyphen, false, NotificationSpecieLinkServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As NotificationSpecieLinkServiceBase.OrderBy) As EntitySet.NotificationSpecieLinkSet
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As NotificationSpecieLinkServiceBase.OrderBy) As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal specieId As Integer, ByVal cITESNotificationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.NotificationSpecieLink
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetById(New Integer() {specieId, cITESNotificationId}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal specieId As Integer, ByVal cITESNotificationId As Integer) As Entity.NotificationSpecieLink
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetById(New Integer() {specieId, cITESNotificationId})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal specieId As Integer, ByVal cITESNotificationId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.DeleteById(New Integer() {specieId, cITESNotificationId}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal specieId As Integer, ByVal cITESNotificationId As Integer) As Boolean
            Return NotificationSpecieLinkBase.DeleteById(specieId, cITESNotificationId, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal specieId As Integer, ByVal cITESNotificationId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return NotificationSpecieLinkBase.DeleteById(specieId, cITESNotificationId, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForSpecie(ByVal specieId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.NotificationSpecieLinkSet
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetForSpecie(specieId, tran)
        End Function
        
        Public Overloads Shared Function GetForSpecie(ByVal specieId As Integer) As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetForSpecie(specieId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForCITESNotification(ByVal cITESNotificationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.NotificationSpecieLinkSet
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetForCITESNotification(cITESNotificationId, tran)
        End Function
        
        Public Overloads Shared Function GetForCITESNotification(ByVal cITESNotificationId As Integer) As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetForCITESNotification(cITESNotificationId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForCITESDerivative(ByVal cITESDerivativeId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.NotificationSpecieLinkSet
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetForCITESDerivative(cITESDerivativeId, tran)
        End Function
        
        Public Overloads Shared Function GetForCITESDerivative(ByVal cITESDerivativeId As Integer) As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetForCITESDerivative(cITESDerivativeId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForUOM(ByVal uOMId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.NotificationSpecieLinkSet
            Dim service As Service.NotificationSpecieLinkService
            service = ServiceObject
            Return service.GetForUOM(uOMId, tran)
        End Function
        
        Public Overloads Shared Function GetForUOM(ByVal uOMId As Integer) As EntitySet.NotificationSpecieLinkSet
            Return NotificationSpecieLinkBase.GetForUOM(uOMId, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal specieId As Integer, ByVal cITESNotificationId As Integer, ByVal cITESDerivativeId As Object, ByVal uOMId As Object)
            Entity.NotificationSpecieLink.ServiceObject.Insert(specieId, cITESNotificationId, cITESDerivativeId, uOMId)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim specieIdParam As Integer = Me.SpecieId
            Dim cITESNotificationIdParam As Integer = Me.CITESNotificationId
            Dim cITESDerivativeIdParam As Object
            If (Me.IsCITESDerivativeIdNull = false) Then
                cITESDerivativeIdParam = Me.CITESDerivativeId
            Else
                cITESDerivativeIdParam = System.DBNull.Value
            End If
            Dim uOMIdParam As Object
            If (Me.IsUOMIdNull = false) Then
                uOMIdParam = Me.UOMId
            Else
                uOMIdParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.NotificationSpecieLink.ServiceObject.Update(specieIdParam, cITESNotificationIdParam, cITESDerivativeIdParam, uOMIdParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
