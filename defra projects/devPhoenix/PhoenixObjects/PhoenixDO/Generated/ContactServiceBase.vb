'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'Contact'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class ContactServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll, EnterpriseObjects.IServiceId
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.ContactSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.ContactSet
            Return CType(MyBase.GetAll("eosp_SelectContact", GetType(EntitySet.ContactSet), includeHyphen, includeInactive, orderBy),EntitySet.ContactSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.ContactSet
            Return Me.GetAll(includeHyphen, includeInactive, ContactServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, ContactServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal contactId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return CType(MyBase.GetById("eosp_SelectContact", "ContactId", contactId, GetType(EntitySet.ContactSet), tran),Entity.Contact)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal contactId As Integer) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return Me.GetById(contactId, Nothing)
        End Function
        
        Public Overloads Function GetById(ByVal contactId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return CType(MyBase.GetById("eosp_SelectContact", "ContactId", contactId, GetType(EntitySet.ContactSet), tran),Entity.Contact)
        End Function
        
        Public Overloads Function GetById(ByVal contactId As Integer) As Entity.Contact
            Return Me.GetById(contactId, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal contactId As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(contactId, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal contactId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteContact", "ContactId", contactId, checkSum, transaction)
        End Function
        
        'GetForContactType - links to the ContactType table...
        Public Overloads Function GetForContactType(ByVal IdContactType As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.ContactSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from Contact where ContactTypeId=" + IdContactType.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.ContactSet), tran),EntitySet.ContactSet)
        End Function
        
        'GetForContactType - links to the ContactType table...
        Public Overloads Function GetForContactType(ByVal IdContactType As Integer) As EntitySet.ContactSet
            Return Me.GetForContactType(IdContactType, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal contactDetail As Object, ByVal active As Boolean, ByVal contactTypeId As Integer, ByVal location As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return Me.GetById(Sprocs.eosp_CreateContact(contactDetail, active, contactTypeId, location, transaction), transaction)
        End Function
        
        Public Overloads Function Insert(ByVal contactDetail As Object, ByVal active As Boolean, ByVal contactTypeId As Integer, ByVal location As Object) As Entity.Contact
            Return Me.Insert(contactDetail, active, contactTypeId, location, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal contact As Entity.Contact) As Entity.Contact
            Return Me.Insert(contact(1), contact(2), contact(3), contact(4))
        End Function
        
        Public Overloads Function Insert(ByVal contact As Entity.Contact, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return Me.Insert(contact(1), contact(2), contact(3), contact(4), transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal contactDetail As Object, ByVal active As Boolean, ByVal contactTypeId As Integer, ByVal location As Object, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return Sprocs.eosp_UpdateContact(id, contactDetail, active, contactTypeId, location, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal contactDetail As Object, ByVal active As Boolean, ByVal contactTypeId As Integer, ByVal location As Object) As Entity.Contact
            Return Me.Update(id, contactDetail, active, contactTypeId, location, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal contactDetail As Object, ByVal active As Boolean, ByVal contactTypeId As Integer, ByVal location As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return Me.Update(id, contactDetail, active, contactTypeId, location, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal contactDetail As Object, ByVal active As Boolean, ByVal contactTypeId As Integer, ByVal location As Object, ByVal checkSum As Integer) As Entity.Contact
            Return Me.Update(id, contactDetail, active, contactTypeId, location, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal contact As Entity.Contact) As Entity.Contact
            Return Me.Update(contact.id, contact(1), contact(2), contact(3), contact(4))
        End Function
        
        Public Overloads Function Update(ByVal contact As Entity.Contact, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return Me.Update(contact.id, contact(1), contact(2), contact(3), contact(4), transaction)
        End Function
        
        Public Overloads Function Update(ByVal contact As Entity.Contact, ByVal checkSum As Integer) As Entity.Contact
            Return Me.Update(contact.id, contact(1), contact(2), contact(3), contact(4), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal contact As Entity.Contact, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.Contact
            Return Me.Update(contact.id, contact(1), contact(2), contact(3), contact(4), checkSum, transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
        End Enum
    End Class
End Namespace
