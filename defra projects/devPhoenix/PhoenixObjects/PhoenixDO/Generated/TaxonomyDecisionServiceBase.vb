'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomyDecision'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomyDecisionServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomyDecisionSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomyDecisionSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomyDecision", GetType(EntitySet.TaxonomyDecisionSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomyDecisionSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomyDecisionSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyDecisionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyDecisionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomyDecisionSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyDecision
            Return CType(MyBase.GetById("eosp_SelectTaxonomyDecision", New String() {"Source", "DecisionID"}, idColumns, GetType(EntitySet.TaxonomyDecisionSet), tran),Entity.TaxonomyDecision)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomyDecision
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomyDecision", New String() {"Source", "DecisionID"}, idColumns, checkSum, transaction)
        End Function
        
        'GetForCountry - links to the Country table...
        Public Overloads Function GetForCountry(ByVal CountryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyDecisionSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyDecision where CountryID=" + CountryId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyDecisionSet), tran),EntitySet.TaxonomyDecisionSet)
        End Function
        
        'GetForCountry - links to the Country table...
        Public Overloads Function GetForCountry(ByVal CountryId As Integer) As EntitySet.TaxonomyDecisionSet
            Return Me.GetForCountry(CountryId, Nothing)
        End Function
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal decisionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal sRGOpinion As Object, ByVal decisionDate As Object, ByVal article4Point6ImportRestriction As Object, ByVal decisionLevel As Object, ByVal decisionMiscellaneous As Object, ByVal countryID As Object, ByVal note As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomyDecision(source, decisionID, kingdomID, taxonID, taxonTypeID, sRGOpinion, decisionDate, article4Point6ImportRestriction, decisionLevel, decisionMiscellaneous, countryID, note, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal decisionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal sRGOpinion As Object, ByVal decisionDate As Object, ByVal article4Point6ImportRestriction As Object, ByVal decisionLevel As Object, ByVal decisionMiscellaneous As Object, ByVal countryID As Object, ByVal note As Object)
            Me.Insert(source, decisionID, kingdomID, taxonID, taxonTypeID, sRGOpinion, decisionDate, article4Point6ImportRestriction, decisionLevel, decisionMiscellaneous, countryID, note, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyDecision As Entity.TaxonomyDecision)
            Me.Insert(taxonomyDecision(0), taxonomyDecision(1), taxonomyDecision(2), taxonomyDecision(3), taxonomyDecision(4), taxonomyDecision(5), taxonomyDecision(6), taxonomyDecision(7), taxonomyDecision(8), taxonomyDecision(9), taxonomyDecision(10), taxonomyDecision(11))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyDecision As Entity.TaxonomyDecision, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomyDecision(0), taxonomyDecision(1), taxonomyDecision(2), taxonomyDecision(3), taxonomyDecision(4), taxonomyDecision(5), taxonomyDecision(6), taxonomyDecision(7), taxonomyDecision(8), taxonomyDecision(9), taxonomyDecision(10), taxonomyDecision(11), transaction)
        End Sub
        
        Public Overloads Function Update(ByVal source As Integer, ByVal decisionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal sRGOpinion As Object, ByVal decisionDate As Object, ByVal article4Point6ImportRestriction As Object, ByVal decisionLevel As Object, ByVal decisionMiscellaneous As Object, ByVal countryID As Object, ByVal note As Object, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyDecision
            Return Sprocs.eosp_UpdateTaxonomyDecision(source, decisionID, kingdomID, taxonID, taxonTypeID, sRGOpinion, decisionDate, article4Point6ImportRestriction, decisionLevel, decisionMiscellaneous, countryID, note, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal decisionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal sRGOpinion As Object, ByVal decisionDate As Object, ByVal article4Point6ImportRestriction As Object, ByVal decisionLevel As Object, ByVal decisionMiscellaneous As Object, ByVal countryID As Object, ByVal note As Object) As Entity.TaxonomyDecision
            Return Me.Update(source, decisionID, kingdomID, taxonID, taxonTypeID, sRGOpinion, decisionDate, article4Point6ImportRestriction, decisionLevel, decisionMiscellaneous, countryID, note, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal decisionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal sRGOpinion As Object, ByVal decisionDate As Object, ByVal article4Point6ImportRestriction As Object, ByVal decisionLevel As Object, ByVal decisionMiscellaneous As Object, ByVal countryID As Object, ByVal note As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyDecision
            Return Me.Update(source, decisionID, kingdomID, taxonID, taxonTypeID, sRGOpinion, decisionDate, article4Point6ImportRestriction, decisionLevel, decisionMiscellaneous, countryID, note, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal decisionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal sRGOpinion As Object, ByVal decisionDate As Object, ByVal article4Point6ImportRestriction As Object, ByVal decisionLevel As Object, ByVal decisionMiscellaneous As Object, ByVal countryID As Object, ByVal note As Object, ByVal checkSum As Integer) As Entity.TaxonomyDecision
            Return Me.Update(source, decisionID, kingdomID, taxonID, taxonTypeID, sRGOpinion, decisionDate, article4Point6ImportRestriction, decisionLevel, decisionMiscellaneous, countryID, note, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyDecision As Entity.TaxonomyDecision) As Entity.TaxonomyDecision
            Return Me.Update(taxonomyDecision(0), taxonomyDecision(1), taxonomyDecision(2), taxonomyDecision(3), taxonomyDecision(4), taxonomyDecision(5), taxonomyDecision(6), taxonomyDecision(7), taxonomyDecision(8), taxonomyDecision(9), taxonomyDecision(10), taxonomyDecision(11))
        End Function
        
        Public Overloads Function Update(ByVal taxonomyDecision As Entity.TaxonomyDecision, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyDecision
            Return Me.Update(taxonomyDecision(0), taxonomyDecision(1), taxonomyDecision(2), taxonomyDecision(3), taxonomyDecision(4), taxonomyDecision(5), taxonomyDecision(6), taxonomyDecision(7), taxonomyDecision(8), taxonomyDecision(9), taxonomyDecision(10), taxonomyDecision(11), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyDecision As Entity.TaxonomyDecision, ByVal checkSum As Integer) As Entity.TaxonomyDecision
            Return Me.Update(taxonomyDecision(0), taxonomyDecision(1), taxonomyDecision(2), taxonomyDecision(3), taxonomyDecision(4), taxonomyDecision(5), taxonomyDecision(6), taxonomyDecision(7), taxonomyDecision(8), taxonomyDecision(9), taxonomyDecision(10), taxonomyDecision(11), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyDecision As Entity.TaxonomyDecision, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyDecision
            Return Me.Update(taxonomyDecision(0), taxonomyDecision(1), taxonomyDecision(2), taxonomyDecision(3), taxonomyDecision(4), taxonomyDecision(5), taxonomyDecision(6), taxonomyDecision(7), taxonomyDecision(8), taxonomyDecision(9), taxonomyDecision(10), taxonomyDecision(11), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyDecision(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomyDecisionSet
            Return Sprocs.eosp_SelectTaxonomyDecision(source:=Nothing, decisionID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyDecision(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyDecisionSet
            Return Sprocs.eosp_SelectTaxonomyDecision(source:=Nothing, decisionID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomyDecision
            
            
        End Enum
    End Class
End Namespace
