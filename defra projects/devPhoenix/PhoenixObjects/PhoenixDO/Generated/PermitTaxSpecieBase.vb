'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'PermitTaxSpecie'
    '*DO NOT* modify this file.
    'Add new properties and methods to PermitTaxSpecie instead.
    Public MustInherit Class PermitTaxSpecieBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal permitTaxSpecie As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(permitTaxSpecie, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal permitTaxSpecie As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(permitTaxSpecie).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property PermitTaxSpecie As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property CommonName As String
            Get
                If (Me.IsCommonNameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(1),String)
                End If
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(5)>  _
        Public Property ACAnnex As String
            Get
                Return CType(Me(2),String)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(5)>  _
        Public Property CITESAppendix As String
            Get
                Return CType(Me(3),String)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property ScientificName As String
            Get
                Return CType(Me(4),String)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Description As String
            Get
                Return CType(Me(5),String)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property AppliedforName As String
            Get
                Return CType(Me(6),String)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property SpecieId As Integer
            Get
                If (Me.IsSpecieIdNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property PermitSpecie As Integer
            Get
                If (Me.IsPermitSpecieNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(8),Integer)
                End If
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Integer)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.PermitTaxSpecieService
            Get
                Return CType(GetServiceObject(GetType(Service.PermitTaxSpecieService)),Service.PermitTaxSpecieService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsCommonNameNull() As Boolean
            Return Me.IsNull(1)
        End Function
        
        Public Sub SetCommonNameToNull()
            Me(1) = System.DBNull.Value
        End Sub
        
        Public Function IsSpecieIdNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetSpecieIdToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Function IsPermitSpecieNull() As Boolean
            Return Me.IsNull(8)
        End Function
        
        Public Sub SetPermitSpecieToNull()
            Me(8) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(10)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.PermitTaxSpecieSet
            Return PermitTaxSpecieBase.GetAll(false, false, PermitTaxSpecieServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.PermitTaxSpecieSet
            Return PermitTaxSpecieBase.GetAll(includeHyphen, false, PermitTaxSpecieServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As PermitTaxSpecieServiceBase.OrderBy) As EntitySet.PermitTaxSpecieSet
            Dim service As Service.PermitTaxSpecieService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As PermitTaxSpecieServiceBase.OrderBy) As EntitySet.PermitTaxSpecieSet
            Return PermitTaxSpecieBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal permitTaxSpecie As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.PermitTaxSpecie
            Dim service As Service.PermitTaxSpecieService
            service = ServiceObject
            Return service.GetById(PermitTaxSpecie, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal permitTaxSpecie As Integer) As Entity.PermitTaxSpecie
            Dim service As Service.PermitTaxSpecieService
            service = ServiceObject
            Return service.GetById(PermitTaxSpecie)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal permitTaxSpecie As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.PermitTaxSpecieService
            service = ServiceObject
            Return service.DeleteById(permitTaxSpecie, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal permitTaxSpecie As Integer) As Boolean
            Return PermitTaxSpecieBase.DeleteById(permitTaxSpecie, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal permitTaxSpecie As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return PermitTaxSpecieBase.DeleteById(permitTaxSpecie, 0, transaction)
        End Function
        
        Public Shared Function Insert(ByVal commonName As Object, ByVal aCAnnex As String, ByVal cITESAppendix As String, ByVal scientificName As String, ByVal description As String, ByVal appliedforName As String, ByVal specieId As Object, ByVal permitSpecie As Object) As Entity.PermitTaxSpecie
            Return Entity.PermitTaxSpecie.ServiceObject.Insert(commonName, aCAnnex, cITESAppendix, scientificName, description, appliedforName, specieId, permitSpecie)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim commonNameParam As Object
            If (Me.IsCommonNameNull = false) Then
                commonNameParam = EnterpriseObjects.Common.ParseSQLText(Me.CommonName)
            Else
                commonNameParam = System.DBNull.Value
            End If
            Dim aCAnnexParam As String = Me.ACAnnex
            Dim cITESAppendixParam As String = Me.CITESAppendix
            Dim scientificNameParam As String = Me.ScientificName
            Dim descriptionParam As String = Me.Description
            Dim appliedforNameParam As String = Me.AppliedforName
            Dim specieIdParam As Object
            If (Me.IsSpecieIdNull = false) Then
                specieIdParam = Me.SpecieId
            Else
                specieIdParam = System.DBNull.Value
            End If
            Dim permitSpecieParam As Object
            If (Me.IsPermitSpecieNull = false) Then
                permitSpecieParam = Me.PermitSpecie
            Else
                permitSpecieParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.PermitTaxSpecie.ServiceObject.Update(Me.Id, commonNameParam, aCAnnexParam, cITESAppendixParam, scientificNameParam, descriptionParam, appliedforNameParam, specieIdParam, permitSpecieParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
