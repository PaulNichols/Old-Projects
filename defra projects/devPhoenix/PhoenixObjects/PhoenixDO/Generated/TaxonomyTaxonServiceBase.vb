'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomyTaxon'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomyTaxonServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll, EnterpriseObjects.IServiceId
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomyTaxonSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomyTaxonSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomyTaxon", GetType(EntitySet.TaxonomyTaxonSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomyTaxonSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomyTaxonSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyTaxonServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyTaxonServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomyTaxonSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return CType(MyBase.GetById("eosp_SelectTaxonomyTaxon", "ID", iD, GetType(EntitySet.TaxonomyTaxonSet), tran),Entity.TaxonomyTaxon)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal iD As Integer) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return Me.GetById(iD, Nothing)
        End Function
        
        Public Overloads Function GetById(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return CType(MyBase.GetById("eosp_SelectTaxonomyTaxon", "ID", iD, GetType(EntitySet.TaxonomyTaxonSet), tran),Entity.TaxonomyTaxon)
        End Function
        
        Public Overloads Function GetById(ByVal iD As Integer) As Entity.TaxonomyTaxon
            Return Me.GetById(iD, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal iD As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(iD, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal iD As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomyTaxon", "ID", iD, checkSum, transaction)
        End Function
        
        Public Overloads Function Insert(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal epithetType As Object, ByVal taxonName As String, ByVal taxonAuthor As Object, ByVal taxonStatusID As Integer, ByVal parentKingdomID As Object, ByVal parentTaxonID As Object, ByVal parentTaxonTypeID As Object, ByVal distributionComplete As Object, ByVal cITESReference As Object, ByVal lineage As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return Me.GetById(Sprocs.eosp_CreateTaxonomyTaxon(kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage, transaction), transaction)
        End Function
        
        Public Overloads Function Insert(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal epithetType As Object, ByVal taxonName As String, ByVal taxonAuthor As Object, ByVal taxonStatusID As Integer, ByVal parentKingdomID As Object, ByVal parentTaxonID As Object, ByVal parentTaxonTypeID As Object, ByVal distributionComplete As Object, ByVal cITESReference As Object, ByVal lineage As Object) As Entity.TaxonomyTaxon
            Return Me.Insert(kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal taxonomyTaxon As Entity.TaxonomyTaxon) As Entity.TaxonomyTaxon
            Return Me.Insert(taxonomyTaxon(1), taxonomyTaxon(2), taxonomyTaxon(3), taxonomyTaxon(4), taxonomyTaxon(5), taxonomyTaxon(6), taxonomyTaxon(7), taxonomyTaxon(8), taxonomyTaxon(9), taxonomyTaxon(10), taxonomyTaxon(11), taxonomyTaxon(12), taxonomyTaxon(13))
        End Function
        
        Public Overloads Function Insert(ByVal taxonomyTaxon As Entity.TaxonomyTaxon, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return Me.Insert(taxonomyTaxon(1), taxonomyTaxon(2), taxonomyTaxon(3), taxonomyTaxon(4), taxonomyTaxon(5), taxonomyTaxon(6), taxonomyTaxon(7), taxonomyTaxon(8), taxonomyTaxon(9), taxonomyTaxon(10), taxonomyTaxon(11), taxonomyTaxon(12), taxonomyTaxon(13), transaction)
        End Function
        
        Public Overloads Function Update( _
                    ByVal id As Integer,  _
                    ByVal kingdomID As Integer,  _
                    ByVal taxonID As Integer,  _
                    ByVal taxonTypeID As Integer,  _
                    ByVal epithetType As Object,  _
                    ByVal taxonName As String,  _
                    ByVal taxonAuthor As Object,  _
                    ByVal taxonStatusID As Integer,  _
                    ByVal parentKingdomID As Object,  _
                    ByVal parentTaxonID As Object,  _
                    ByVal parentTaxonTypeID As Object,  _
                    ByVal distributionComplete As Object,  _
                    ByVal cITESReference As Object,  _
                    ByVal lineage As Object,  _
                    ByVal checkSum As Integer,  _
                    ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return Sprocs.eosp_UpdateTaxonomyTaxon(id, kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal epithetType As Object, ByVal taxonName As String, ByVal taxonAuthor As Object, ByVal taxonStatusID As Integer, ByVal parentKingdomID As Object, ByVal parentTaxonID As Object, ByVal parentTaxonTypeID As Object, ByVal distributionComplete As Object, ByVal cITESReference As Object, ByVal lineage As Object) As Entity.TaxonomyTaxon
            Return Me.Update(id, kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal epithetType As Object, ByVal taxonName As String, ByVal taxonAuthor As Object, ByVal taxonStatusID As Integer, ByVal parentKingdomID As Object, ByVal parentTaxonID As Object, ByVal parentTaxonTypeID As Object, ByVal distributionComplete As Object, ByVal cITESReference As Object, ByVal lineage As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return Me.Update(id, kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal epithetType As Object, ByVal taxonName As String, ByVal taxonAuthor As Object, ByVal taxonStatusID As Integer, ByVal parentKingdomID As Object, ByVal parentTaxonID As Object, ByVal parentTaxonTypeID As Object, ByVal distributionComplete As Object, ByVal cITESReference As Object, ByVal lineage As Object, ByVal checkSum As Integer) As Entity.TaxonomyTaxon
            Return Me.Update(id, kingdomID, taxonID, taxonTypeID, epithetType, taxonName, taxonAuthor, taxonStatusID, parentKingdomID, parentTaxonID, parentTaxonTypeID, distributionComplete, cITESReference, lineage, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxon As Entity.TaxonomyTaxon) As Entity.TaxonomyTaxon
            Return Me.Update(taxonomyTaxon.id, taxonomyTaxon(1), taxonomyTaxon(2), taxonomyTaxon(3), taxonomyTaxon(4), taxonomyTaxon(5), taxonomyTaxon(6), taxonomyTaxon(7), taxonomyTaxon(8), taxonomyTaxon(9), taxonomyTaxon(10), taxonomyTaxon(11), taxonomyTaxon(12), taxonomyTaxon(13))
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxon As Entity.TaxonomyTaxon, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return Me.Update(taxonomyTaxon.id, taxonomyTaxon(1), taxonomyTaxon(2), taxonomyTaxon(3), taxonomyTaxon(4), taxonomyTaxon(5), taxonomyTaxon(6), taxonomyTaxon(7), taxonomyTaxon(8), taxonomyTaxon(9), taxonomyTaxon(10), taxonomyTaxon(11), taxonomyTaxon(12), taxonomyTaxon(13), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxon As Entity.TaxonomyTaxon, ByVal checkSum As Integer) As Entity.TaxonomyTaxon
            Return Me.Update(taxonomyTaxon.id, taxonomyTaxon(1), taxonomyTaxon(2), taxonomyTaxon(3), taxonomyTaxon(4), taxonomyTaxon(5), taxonomyTaxon(6), taxonomyTaxon(7), taxonomyTaxon(8), taxonomyTaxon(9), taxonomyTaxon(10), taxonomyTaxon(11), taxonomyTaxon(12), taxonomyTaxon(13), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxon As Entity.TaxonomyTaxon, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxon
            Return Me.Update(taxonomyTaxon.id, taxonomyTaxon(1), taxonomyTaxon(2), taxonomyTaxon(3), taxonomyTaxon(4), taxonomyTaxon(5), taxonomyTaxon(6), taxonomyTaxon(7), taxonomyTaxon(8), taxonomyTaxon(9), taxonomyTaxon(10), taxonomyTaxon(11), taxonomyTaxon(12), taxonomyTaxon(13), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxon_3(ByVal lineage As String) As EntitySet.TaxonomyTaxonSet
            Return Sprocs.eosp_SelectTaxonomyTaxon(iD:=Nothing, Index_Lineage:=[lineage], Index_ParentKingdomID:=Nothing, Index_ParentTaxonID:=Nothing, Index_ParentTaxonTypeID:=Nothing, Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxon_3(ByVal lineage As String, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyTaxonSet
            Return Sprocs.eosp_SelectTaxonomyTaxon(iD:=Nothing, Index_Lineage:=[lineage], Index_ParentKingdomID:=Nothing, Index_ParentTaxonID:=Nothing, Index_ParentTaxonTypeID:=Nothing, Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxon_5(ByVal parentKingdomID As Integer, ByVal parentTaxonID As Integer, ByVal parentTaxonTypeID As Integer) As EntitySet.TaxonomyTaxonSet
            Return Sprocs.eosp_SelectTaxonomyTaxon(iD:=Nothing, Index_ParentKingdomID:=[parentKingdomID], Index_ParentTaxonID:=[parentTaxonID], Index_ParentTaxonTypeID:=[parentTaxonTypeID], Index_Lineage:=Nothing, Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxon_5(ByVal parentKingdomID As Integer, ByVal parentTaxonID As Integer, ByVal parentTaxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyTaxonSet
            Return Sprocs.eosp_SelectTaxonomyTaxon(iD:=Nothing, Index_ParentKingdomID:=[parentKingdomID], Index_ParentTaxonID:=[parentTaxonID], Index_ParentTaxonTypeID:=[parentTaxonTypeID], Index_Lineage:=Nothing, Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxon(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomyTaxonSet
            Return Sprocs.eosp_SelectTaxonomyTaxon(iD:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_Lineage:=Nothing, Index_ParentKingdomID:=Nothing, Index_ParentTaxonID:=Nothing, Index_ParentTaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxon(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyTaxonSet
            Return Sprocs.eosp_SelectTaxonomyTaxon(iD:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_Lineage:=Nothing, Index_ParentKingdomID:=Nothing, Index_ParentTaxonID:=Nothing, Index_ParentTaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomyTaxon_3
            
            IX_TaxonomyTaxon_5
            
            IX_TaxonomyTaxon
            
            
        End Enum
    End Class
End Namespace
