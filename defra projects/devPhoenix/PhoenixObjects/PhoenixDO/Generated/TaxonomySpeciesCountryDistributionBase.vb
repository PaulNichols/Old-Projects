'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomySpeciesCountryDistribution'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomySpeciesCountryDistribution instead.
    Public MustInherit Class TaxonomySpeciesCountryDistributionBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(source, speciesCountryDistributionID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(source, speciesCountryDistributionID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property Source As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property SpeciesCountryDistributionID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property KingdomID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Certain As String
            Get
                Return CType(Me(5),String)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Extinct As String
            Get
                Return CType(Me(6),String)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Introduced As String
            Get
                Return CType(Me(7),String)
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property ReIntroduced As String
            Get
                Return CType(Me(8),String)
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Breeding As String
            Get
                Return CType(Me(9),String)
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Vagrant As String
            Get
                Return CType(Me(10),String)
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        Public Property NoteID As Integer
            Get
                If (Me.IsNoteIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(11),Integer)
                End If
            End Get
            Set
                Me(11) = value
            End Set
        End Property
        
        Public Property CountryID As Integer
            Get
                Return CType(Me(12),Integer)
            End Get
            Set
                Me(12) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(13),Integer)
                End If
            End Get
            Set
                Me(13) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomySpeciesCountryDistributionService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomySpeciesCountryDistributionService)),Service.TaxonomySpeciesCountryDistributionService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsNoteIDNull() As Boolean
            Return Me.IsNull(11)
        End Function
        
        Public Sub SetNoteIDToNull()
            Me(11) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(13)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(13) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(14)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return TaxonomySpeciesCountryDistributionBase.GetAll(false, false, TaxonomySpeciesCountryDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return TaxonomySpeciesCountryDistributionBase.GetAll(includeHyphen, false, TaxonomySpeciesCountryDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomySpeciesCountryDistributionServiceBase.OrderBy) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Dim service As Service.TaxonomySpeciesCountryDistributionService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomySpeciesCountryDistributionServiceBase.OrderBy) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return TaxonomySpeciesCountryDistributionBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesCountryDistribution
            Dim service As Service.TaxonomySpeciesCountryDistributionService
            service = ServiceObject
            Return service.GetById(New Integer() {source, speciesCountryDistributionID}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer) As Entity.TaxonomySpeciesCountryDistribution
            Dim service As Service.TaxonomySpeciesCountryDistributionService
            service = ServiceObject
            Return service.GetById(New Integer() {source, speciesCountryDistributionID})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomySpeciesCountryDistributionService
            service = ServiceObject
            Return service.DeleteById(New Integer() {source, speciesCountryDistributionID}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer) As Boolean
            Return TaxonomySpeciesCountryDistributionBase.DeleteById(source, speciesCountryDistributionID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomySpeciesCountryDistributionBase.DeleteById(source, speciesCountryDistributionID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Dim service As Service.TaxonomySpeciesCountryDistributionService
            service = ServiceObject
            Return service.GetForCountry(countryId, tran)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return TaxonomySpeciesCountryDistributionBase.GetForCountry(countryId, Nothing)
        End Function
        
        Public Overloads Function GetRelatedCountryDistributionIDTaxonomySpeciesBRUDistribution(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Entity.TaxonomySpeciesBRUDistribution.GetForCountryDistributionIDTaxonomySpeciesCountryDistribution(Me.Source, tran)
        End Function
        
        Public Overloads Function GetRelatedCountryDistributionIDTaxonomySpeciesBRUDistribution() As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetRelatedCountryDistributionIDTaxonomySpeciesBRUDistribution(Nothing)
        End Function
        
        Public Overloads Function GetRelatedSourceTaxonomySpeciesBRUDistribution(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Entity.TaxonomySpeciesBRUDistribution.GetForSourceTaxonomySpeciesCountryDistribution(Me.Source, tran)
        End Function
        
        Public Overloads Function GetRelatedSourceTaxonomySpeciesBRUDistribution() As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetRelatedSourceTaxonomySpeciesBRUDistribution(Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer)
            Entity.TaxonomySpeciesCountryDistribution.ServiceObject.Insert(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim sourceParam As Integer = Me.Source
            Dim speciesCountryDistributionIDParam As Integer = Me.SpeciesCountryDistributionID
            Dim kingdomIDParam As Integer = Me.KingdomID
            Dim taxonIDParam As Integer = Me.TaxonID
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim certainParam As String = Me.Certain
            Dim extinctParam As String = Me.Extinct
            Dim introducedParam As String = Me.Introduced
            Dim reIntroducedParam As String = Me.ReIntroduced
            Dim breedingParam As String = Me.Breeding
            Dim vagrantParam As String = Me.Vagrant
            Dim noteIDParam As Object
            If (Me.IsNoteIDNull = false) Then
                noteIDParam = Me.NoteID
            Else
                noteIDParam = System.DBNull.Value
            End If
            Dim countryIDParam As Integer = Me.CountryID
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomySpeciesCountryDistribution.ServiceObject.Update(sourceParam, speciesCountryDistributionIDParam, kingdomIDParam, taxonIDParam, taxonTypeIDParam, certainParam, extinctParam, introducedParam, reIntroducedParam, breedingParam, vagrantParam, noteIDParam, countryIDParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
