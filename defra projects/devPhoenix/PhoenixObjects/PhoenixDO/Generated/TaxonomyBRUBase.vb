'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyBRU'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyBRU instead.
    Public MustInherit Class TaxonomyBRUBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal bRUID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(bRUID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal bRUID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(bRUID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property BRUID As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(80)>  _
        Public Property WCMCName As String
            Get
                If (Me.IsWCMCNameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(1),String)
                End If
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(80)>  _
        Public Property Level3Name As String
            Get
                If (Me.IsLevel3NameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),String)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(7)>  _
        Public Property Level4Code As String
            Get
                If (Me.IsLevel4CodeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(3),String)
                End If
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(80)>  _
        Public Property Level4Name As String
            Get
                If (Me.IsLevel4NameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(4),String)
                End If
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property CountryID As Integer
            Get
                Return CType(Me(5),Integer)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property Valid As Boolean
            Get
                Return CType(Me(6),Boolean)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyBRUService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyBRUService)),Service.TaxonomyBRUService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsWCMCNameNull() As Boolean
            Return Me.IsNull(1)
        End Function
        
        Public Sub SetWCMCNameToNull()
            Me(1) = System.DBNull.Value
        End Sub
        
        Public Function IsLevel3NameNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetLevel3NameToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsLevel4CodeNull() As Boolean
            Return Me.IsNull(3)
        End Function
        
        Public Sub SetLevel4CodeToNull()
            Me(3) = System.DBNull.Value
        End Sub
        
        Public Function IsLevel4NameNull() As Boolean
            Return Me.IsNull(4)
        End Function
        
        Public Sub SetLevel4NameToNull()
            Me(4) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(8)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyBRUSet
            Return TaxonomyBRUBase.GetAll(false, false, TaxonomyBRUServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyBRUSet
            Return TaxonomyBRUBase.GetAll(includeHyphen, false, TaxonomyBRUServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyBRUServiceBase.OrderBy) As EntitySet.TaxonomyBRUSet
            Dim service As Service.TaxonomyBRUService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyBRUServiceBase.OrderBy) As EntitySet.TaxonomyBRUSet
            Return TaxonomyBRUBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal bRUID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyBRU
            Dim service As Service.TaxonomyBRUService
            service = ServiceObject
            Return service.GetById(BRUID, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal bRUID As Integer) As Entity.TaxonomyBRU
            Dim service As Service.TaxonomyBRUService
            service = ServiceObject
            Return service.GetById(BRUID)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal bRUID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyBRUService
            service = ServiceObject
            Return service.DeleteById(bRUID, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal bRUID As Integer) As Boolean
            Return TaxonomyBRUBase.DeleteById(bRUID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal bRUID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyBRUBase.DeleteById(bRUID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyBRU(ByVal bRUID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyBRUSet
            Dim service As Service.TaxonomyBRUService
            service = ServiceObject
            Return service.GetForTaxonomyBRU(bRUID, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyBRU(ByVal bRUID As Integer) As EntitySet.TaxonomyBRUSet
            Return TaxonomyBRUBase.GetForTaxonomyBRU(bRUID, Nothing)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyBRUSet
            Dim service As Service.TaxonomyBRUService
            service = ServiceObject
            Return service.GetForCountry(countryId, tran)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer) As EntitySet.TaxonomyBRUSet
            Return TaxonomyBRUBase.GetForCountry(countryId, Nothing)
        End Function
        
        Public Overloads Function GetRelatedTaxonomyBRU(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyBRUSet
            Return Entity.TaxonomyBRU.GetForTaxonomyBRU(Me.BRUID, tran)
        End Function
        
        Public Overloads Function GetRelatedTaxonomyBRU() As EntitySet.TaxonomyBRUSet
            Return Me.GetRelatedTaxonomyBRU(Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal bRUID As Integer, ByVal wCMCName As Object, ByVal level3Name As Object, ByVal level4Code As Object, ByVal level4Name As Object, ByVal countryID As Integer, ByVal valid As Boolean)
            Entity.TaxonomyBRU.ServiceObject.Insert(bRUID, wCMCName, level3Name, level4Code, level4Name, countryID, valid)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim wCMCNameParam As Object
            If (Me.IsWCMCNameNull = false) Then
                wCMCNameParam = Me.WCMCName
            Else
                wCMCNameParam = System.DBNull.Value
            End If
            Dim level3NameParam As Object
            If (Me.IsLevel3NameNull = false) Then
                level3NameParam = Me.Level3Name
            Else
                level3NameParam = System.DBNull.Value
            End If
            Dim level4CodeParam As Object
            If (Me.IsLevel4CodeNull = false) Then
                level4CodeParam = EnterpriseObjects.Common.ParseSQLText(Me.Level4Code)
            Else
                level4CodeParam = System.DBNull.Value
            End If
            Dim level4NameParam As Object
            If (Me.IsLevel4NameNull = false) Then
                level4NameParam = Me.Level4Name
            Else
                level4NameParam = System.DBNull.Value
            End If
            Dim countryIDParam As Integer = Me.CountryID
            Dim validParam As Boolean = Me.Valid
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyBRU.ServiceObject.Update(Me.Id, wCMCNameParam, level3NameParam, level4CodeParam, level4NameParam, countryIDParam, validParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
