'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'ApplicationLetter'
    '*DO NOT* modify this file.
    'Add new properties and methods to ApplicationLetter instead.
    Public MustInherit Class ApplicationLetterBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal applicationLetterId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(applicationLetterId, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal applicationLetterId As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(applicationLetterId).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property ApplicationLetterId As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property DueBackDate As Date
            Get
                If (Me.IsDueBackDateNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(1),Date)
                End If
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property DateIssued As Date
            Get
                Return CType(Me(2),Date)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property NumberOfTimesIssued As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property ApplicationId As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(5),Integer)
                End If
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.ApplicationLetterService
            Get
                Return CType(GetServiceObject(GetType(Service.ApplicationLetterService)),Service.ApplicationLetterService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsDueBackDateNull() As Boolean
            Return Me.IsNull(1)
        End Function
        
        Public Sub SetDueBackDateToNull()
            Me(1) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(5)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(5) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(6)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.ApplicationLetterSet
            Return ApplicationLetterBase.GetAll(false, false, ApplicationLetterServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.ApplicationLetterSet
            Return ApplicationLetterBase.GetAll(includeHyphen, false, ApplicationLetterServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As ApplicationLetterServiceBase.OrderBy) As EntitySet.ApplicationLetterSet
            Dim service As Service.ApplicationLetterService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As ApplicationLetterServiceBase.OrderBy) As EntitySet.ApplicationLetterSet
            Return ApplicationLetterBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal applicationLetterId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.ApplicationLetter
            Dim service As Service.ApplicationLetterService
            service = ServiceObject
            Return service.GetById(ApplicationLetterId, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal applicationLetterId As Integer) As Entity.ApplicationLetter
            Dim service As Service.ApplicationLetterService
            service = ServiceObject
            Return service.GetById(ApplicationLetterId)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal applicationLetterId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.ApplicationLetterService
            service = ServiceObject
            Return service.DeleteById(applicationLetterId, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal applicationLetterId As Integer) As Boolean
            Return ApplicationLetterBase.DeleteById(applicationLetterId, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal applicationLetterId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return ApplicationLetterBase.DeleteById(applicationLetterId, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForApplication(ByVal applicationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.ApplicationLetterSet
            Dim service As Service.ApplicationLetterService
            service = ServiceObject
            Return service.GetForApplication(applicationId, tran)
        End Function
        
        Public Overloads Shared Function GetForApplication(ByVal applicationId As Integer) As EntitySet.ApplicationLetterSet
            Return ApplicationLetterBase.GetForApplication(applicationId, Nothing)
        End Function
        
        Public Overloads Function GetRelatedPermitApplicationLetter(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.PermitApplicationLetterSet
            Return Entity.PermitApplicationLetter.GetForApplicationLetter(Me.ApplicationLetterId, tran)
        End Function
        
        Public Overloads Function GetRelatedPermitApplicationLetter() As EntitySet.PermitApplicationLetterSet
            Return Me.GetRelatedPermitApplicationLetter(Nothing)
        End Function
        
        Public Shared Function Insert(ByVal dueBackDate As Object, ByVal dateIssued As Date, ByVal numberOfTimesIssued As Integer, ByVal applicationId As Integer) As Entity.ApplicationLetter
            Return Entity.ApplicationLetter.ServiceObject.Insert(dueBackDate, dateIssued, numberOfTimesIssued, applicationId)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim dueBackDateParam As Object
            If (Me.IsDueBackDateNull = false) Then
                dueBackDateParam = Me.DueBackDate
            Else
                dueBackDateParam = System.DBNull.Value
            End If
            Dim dateIssuedParam As Date = Me.DateIssued
            Dim numberOfTimesIssuedParam As Integer = Me.NumberOfTimesIssued
            Dim applicationIdParam As Integer = Me.ApplicationId
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.ApplicationLetter.ServiceObject.Update(Me.Id, dueBackDateParam, dateIssuedParam, numberOfTimesIssuedParam, applicationIdParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
