'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomyUsage'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomyUsageServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomyUsageSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomyUsageSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomyUsage", GetType(EntitySet.TaxonomyUsageSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomyUsageSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomyUsageSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyUsageServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyUsageServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomyUsageSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyUsage
            Return CType(MyBase.GetById("eosp_SelectTaxonomyUsage", New String() {"Source", "UsageID"}, idColumns, GetType(EntitySet.TaxonomyUsageSet), tran),Entity.TaxonomyUsage)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomyUsage
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomyUsage", New String() {"Source", "UsageID"}, idColumns, checkSum, transaction)
        End Function
        
        'GetForTaxonomyUsageType - links to the TaxonomyUsageType table...
        Public Overloads Function GetForTaxonomyUsageType(ByVal ID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyUsage where UsageTypeID=" + ID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyUsageSet), tran),EntitySet.TaxonomyUsageSet)
        End Function
        
        'GetForTaxonomyUsageType - links to the TaxonomyUsageType table...
        Public Overloads Function GetForTaxonomyUsageType(ByVal ID As Integer) As EntitySet.TaxonomyUsageSet
            Return Me.GetForTaxonomyUsageType(ID, Nothing)
        End Function
        
        'GetForTaxonomyPart - links to the TaxonomyPart table...
        Public Overloads Function GetForTaxonomyPart(ByVal ID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyUsage where PartID=" + ID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyUsageSet), tran),EntitySet.TaxonomyUsageSet)
        End Function
        
        'GetForTaxonomyPart - links to the TaxonomyPart table...
        Public Overloads Function GetForTaxonomyPart(ByVal ID As Integer) As EntitySet.TaxonomyUsageSet
            Return Me.GetForTaxonomyPart(ID, Nothing)
        End Function
        
        'GetForTaxonomyLevelOfUse - links to the TaxonomyLevelOfUse table...
        Public Overloads Function GetForTaxonomyLevelOfUse(ByVal ID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyUsage where LevelOfUseID=" + ID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyUsageSet), tran),EntitySet.TaxonomyUsageSet)
        End Function
        
        'GetForTaxonomyLevelOfUse - links to the TaxonomyLevelOfUse table...
        Public Overloads Function GetForTaxonomyLevelOfUse(ByVal ID As Integer) As EntitySet.TaxonomyUsageSet
            Return Me.GetForTaxonomyLevelOfUse(ID, Nothing)
        End Function
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomyUsage(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object)
            Me.Insert(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyUsage As Entity.TaxonomyUsage)
            Me.Insert(taxonomyUsage(0), taxonomyUsage(1), taxonomyUsage(2), taxonomyUsage(3), taxonomyUsage(4), taxonomyUsage(5), taxonomyUsage(6), taxonomyUsage(7), taxonomyUsage(8))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyUsage As Entity.TaxonomyUsage, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomyUsage(0), taxonomyUsage(1), taxonomyUsage(2), taxonomyUsage(3), taxonomyUsage(4), taxonomyUsage(5), taxonomyUsage(6), taxonomyUsage(7), taxonomyUsage(8), transaction)
        End Sub
        
        Public Overloads Function Update(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyUsage
            Return Sprocs.eosp_UpdateTaxonomyUsage(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object) As Entity.TaxonomyUsage
            Return Me.Update(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyUsage
            Return Me.Update(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object, ByVal checkSum As Integer) As Entity.TaxonomyUsage
            Return Me.Update(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyUsage As Entity.TaxonomyUsage) As Entity.TaxonomyUsage
            Return Me.Update(taxonomyUsage(0), taxonomyUsage(1), taxonomyUsage(2), taxonomyUsage(3), taxonomyUsage(4), taxonomyUsage(5), taxonomyUsage(6), taxonomyUsage(7), taxonomyUsage(8))
        End Function
        
        Public Overloads Function Update(ByVal taxonomyUsage As Entity.TaxonomyUsage, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyUsage
            Return Me.Update(taxonomyUsage(0), taxonomyUsage(1), taxonomyUsage(2), taxonomyUsage(3), taxonomyUsage(4), taxonomyUsage(5), taxonomyUsage(6), taxonomyUsage(7), taxonomyUsage(8), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyUsage As Entity.TaxonomyUsage, ByVal checkSum As Integer) As Entity.TaxonomyUsage
            Return Me.Update(taxonomyUsage(0), taxonomyUsage(1), taxonomyUsage(2), taxonomyUsage(3), taxonomyUsage(4), taxonomyUsage(5), taxonomyUsage(6), taxonomyUsage(7), taxonomyUsage(8), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyUsage As Entity.TaxonomyUsage, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyUsage
            Return Me.Update(taxonomyUsage(0), taxonomyUsage(1), taxonomyUsage(2), taxonomyUsage(3), taxonomyUsage(4), taxonomyUsage(5), taxonomyUsage(6), taxonomyUsage(7), taxonomyUsage(8), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyUsage(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomyUsageSet
            Return Sprocs.eosp_SelectTaxonomyUsage(source:=Nothing, usageID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyUsage(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Return Sprocs.eosp_SelectTaxonomyUsage(source:=Nothing, usageID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomyUsage
            
            
        End Enum
    End Class
End Namespace
