'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'ContactType'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class ContactTypeServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll, EnterpriseObjects.IServiceId
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return true
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.ContactTypeSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.ContactTypeSet
            Return CType(MyBase.GetAll("eosp_SelectContactType", GetType(EntitySet.ContactTypeSet), includeHyphen, includeInactive, orderBy),EntitySet.ContactTypeSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.ContactTypeSet
            Return Me.GetAll(includeHyphen, includeInactive, ContactTypeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, ContactTypeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.ContactTypeSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal idContactType As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return CType(MyBase.GetById("eosp_SelectContactType", "IdContactType", idContactType, GetType(EntitySet.ContactTypeSet), tran),Entity.ContactType)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal idContactType As Integer) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return Me.GetById(idContactType, Nothing)
        End Function
        
        Public Overloads Function GetById(ByVal idContactType As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return CType(MyBase.GetById("eosp_SelectContactType", "IdContactType", idContactType, GetType(EntitySet.ContactTypeSet), tran),Entity.ContactType)
        End Function
        
        Public Overloads Function GetById(ByVal idContactType As Integer) As Entity.ContactType
            Return Me.GetById(idContactType, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idContactType As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idContactType, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idContactType As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteContactType", "IdContactType", idContactType, checkSum, transaction)
        End Function
        
        'GetForContactTypeGroup - links to the ContactTypeGroup table...
        Public Overloads Function GetForContactTypeGroup(ByVal ContactTypeGroupId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.ContactTypeSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from ContactType where GroupId=" + ContactTypeGroupId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.ContactTypeSet), tran),EntitySet.ContactTypeSet)
        End Function
        
        'GetForContactTypeGroup - links to the ContactTypeGroup table...
        Public Overloads Function GetForContactTypeGroup(ByVal ContactTypeGroupId As Integer) As EntitySet.ContactTypeSet
            Return Me.GetForContactTypeGroup(ContactTypeGroupId, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal description As String, ByVal active As Boolean, ByVal groupId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return Me.GetById(Sprocs.eosp_CreateContactType(description, active, groupId, transaction), transaction)
        End Function
        
        Public Overloads Function Insert(ByVal description As String, ByVal active As Boolean, ByVal groupId As Integer) As Entity.ContactType
            Return Me.Insert(description, active, groupId, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal contactType As Entity.ContactType) As Entity.ContactType
            Return Me.Insert(contactType(1), contactType(2), contactType(3))
        End Function
        
        Public Overloads Function Insert(ByVal contactType As Entity.ContactType, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return Me.Insert(contactType(1), contactType(2), contactType(3), transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal groupId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return Sprocs.eosp_UpdateContactType(id, description, active, groupId, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal groupId As Integer) As Entity.ContactType
            Return Me.Update(id, description, active, groupId, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal groupId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return Me.Update(id, description, active, groupId, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal groupId As Integer, ByVal checkSum As Integer) As Entity.ContactType
            Return Me.Update(id, description, active, groupId, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal contactType As Entity.ContactType) As Entity.ContactType
            Return Me.Update(contactType.id, contactType(1), contactType(2), contactType(3))
        End Function
        
        Public Overloads Function Update(ByVal contactType As Entity.ContactType, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return Me.Update(contactType.id, contactType(1), contactType(2), contactType(3), transaction)
        End Function
        
        Public Overloads Function Update(ByVal contactType As Entity.ContactType, ByVal checkSum As Integer) As Entity.ContactType
            Return Me.Update(contactType.id, contactType(1), contactType(2), contactType(3), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal contactType As Entity.ContactType, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.ContactType
            Return Me.Update(contactType.id, contactType(1), contactType(2), contactType(3), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_ContactType(ByVal description As String, ByVal includeInactive As Boolean) As EntitySet.ContactTypeSet
            Return Sprocs.eosp_SelectContactType(idContactType:=Nothing, Index_Description:=[description], includeInactive:=includeInactive, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_ContactType(ByVal description As String, ByVal includeInactive As Boolean, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.ContactTypeSet
            Return Sprocs.eosp_SelectContactType(idContactType:=Nothing, Index_Description:=[description], includeInactive:=includeInactive, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_ContactType
            
            
        End Enum
    End Class
End Namespace
