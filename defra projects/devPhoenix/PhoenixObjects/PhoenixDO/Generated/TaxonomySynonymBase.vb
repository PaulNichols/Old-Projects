'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomySynonym'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomySynonym instead.
    Public MustInherit Class TaxonomySynonymBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(synonymSource, synonymID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal synonymSource As Integer, ByVal synonymID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(synonymSource, synonymID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        <EnterpriseObjects.Attributes.FieldDescription("Source of synonym (Kew, Standard, Higher)")>  _
        Public Property SynonymSource As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property SynonymID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property AcceptedKingdomID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property AcceptedTaxonID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property AcceptedTaxonTypeID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property SynonymKingdomID As Integer
            Get
                Return CType(Me(5),Integer)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property SynonymTaxonID As Integer
            Get
                Return CType(Me(6),Integer)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property SynonymTaxonTypeID As Integer
            Get
                Return CType(Me(7),Integer)
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(8),Integer)
                End If
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomySynonymService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomySynonymService)),Service.TaxonomySynonymService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(8)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(8) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(9)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomySynonymSet
            Return TaxonomySynonymBase.GetAll(false, false, TaxonomySynonymServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomySynonymSet
            Return TaxonomySynonymBase.GetAll(includeHyphen, false, TaxonomySynonymServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomySynonymServiceBase.OrderBy) As EntitySet.TaxonomySynonymSet
            Dim service As Service.TaxonomySynonymService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomySynonymServiceBase.OrderBy) As EntitySet.TaxonomySynonymSet
            Return TaxonomySynonymBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySynonym
            Dim service As Service.TaxonomySynonymService
            service = ServiceObject
            Return service.GetById(New Integer() {synonymSource, synonymID}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal synonymSource As Integer, ByVal synonymID As Integer) As Entity.TaxonomySynonym
            Dim service As Service.TaxonomySynonymService
            service = ServiceObject
            Return service.GetById(New Integer() {synonymSource, synonymID})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomySynonymService
            service = ServiceObject
            Return service.DeleteById(New Integer() {synonymSource, synonymID}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal synonymSource As Integer, ByVal synonymID As Integer) As Boolean
            Return TaxonomySynonymBase.DeleteById(synonymSource, synonymID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomySynonymBase.DeleteById(synonymSource, synonymID, 0, transaction)
        End Function
        
        Public Shared Sub Insert(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer)
            Entity.TaxonomySynonym.ServiceObject.Insert(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim synonymSourceParam As Integer = Me.SynonymSource
            Dim synonymIDParam As Integer = Me.SynonymID
            Dim acceptedKingdomIDParam As Integer = Me.AcceptedKingdomID
            Dim acceptedTaxonIDParam As Integer = Me.AcceptedTaxonID
            Dim acceptedTaxonTypeIDParam As Integer = Me.AcceptedTaxonTypeID
            Dim synonymKingdomIDParam As Integer = Me.SynonymKingdomID
            Dim synonymTaxonIDParam As Integer = Me.SynonymTaxonID
            Dim synonymTaxonTypeIDParam As Integer = Me.SynonymTaxonTypeID
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomySynonym.ServiceObject.Update(synonymSourceParam, synonymIDParam, acceptedKingdomIDParam, acceptedTaxonIDParam, acceptedTaxonTypeIDParam, synonymKingdomIDParam, synonymTaxonIDParam, synonymTaxonTypeIDParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
