'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomySynonym'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomySynonymServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomySynonymSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomySynonymSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomySynonym", GetType(EntitySet.TaxonomySynonymSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomySynonymSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomySynonymSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomySynonymServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomySynonymServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomySynonymSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySynonym
            Return CType(MyBase.GetById("eosp_SelectTaxonomySynonym", New String() {"SynonymSource", "SynonymID"}, idColumns, GetType(EntitySet.TaxonomySynonymSet), tran),Entity.TaxonomySynonym)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomySynonym
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomySynonym", New String() {"SynonymSource", "SynonymID"}, idColumns, checkSum, transaction)
        End Function
        
        Public Overloads Sub Insert(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomySynonym(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer)
            Me.Insert(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomySynonym As Entity.TaxonomySynonym)
            Me.Insert(taxonomySynonym(0), taxonomySynonym(1), taxonomySynonym(2), taxonomySynonym(3), taxonomySynonym(4), taxonomySynonym(5), taxonomySynonym(6), taxonomySynonym(7))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomySynonym As Entity.TaxonomySynonym, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomySynonym(0), taxonomySynonym(1), taxonomySynonym(2), taxonomySynonym(3), taxonomySynonym(4), taxonomySynonym(5), taxonomySynonym(6), taxonomySynonym(7), transaction)
        End Sub
        
        Public Overloads Function Update(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySynonym
            Return Sprocs.eosp_UpdateTaxonomySynonym(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer) As Entity.TaxonomySynonym
            Return Me.Update(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySynonym
            Return Me.Update(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal synonymSource As Integer, ByVal synonymID As Integer, ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer, ByVal checkSum As Integer) As Entity.TaxonomySynonym
            Return Me.Update(synonymSource, synonymID, acceptedKingdomID, acceptedTaxonID, acceptedTaxonTypeID, synonymKingdomID, synonymTaxonID, synonymTaxonTypeID, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySynonym As Entity.TaxonomySynonym) As Entity.TaxonomySynonym
            Return Me.Update(taxonomySynonym(0), taxonomySynonym(1), taxonomySynonym(2), taxonomySynonym(3), taxonomySynonym(4), taxonomySynonym(5), taxonomySynonym(6), taxonomySynonym(7))
        End Function
        
        Public Overloads Function Update(ByVal taxonomySynonym As Entity.TaxonomySynonym, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySynonym
            Return Me.Update(taxonomySynonym(0), taxonomySynonym(1), taxonomySynonym(2), taxonomySynonym(3), taxonomySynonym(4), taxonomySynonym(5), taxonomySynonym(6), taxonomySynonym(7), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySynonym As Entity.TaxonomySynonym, ByVal checkSum As Integer) As Entity.TaxonomySynonym
            Return Me.Update(taxonomySynonym(0), taxonomySynonym(1), taxonomySynonym(2), taxonomySynonym(3), taxonomySynonym(4), taxonomySynonym(5), taxonomySynonym(6), taxonomySynonym(7), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySynonym As Entity.TaxonomySynonym, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySynonym
            Return Me.Update(taxonomySynonym(0), taxonomySynonym(1), taxonomySynonym(2), taxonomySynonym(3), taxonomySynonym(4), taxonomySynonym(5), taxonomySynonym(6), taxonomySynonym(7), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySynonym(ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer) As EntitySet.TaxonomySynonymSet
            Return Sprocs.eosp_SelectTaxonomySynonym(synonymSource:=Nothing, synonymID:=Nothing, Index_AcceptedKingdomID:=[acceptedKingdomID], Index_AcceptedTaxonID:=[acceptedTaxonID], Index_AcceptedTaxonTypeID:=[acceptedTaxonTypeID], Index_SynonymKingdomID:=Nothing, Index_SynonymTaxonID:=Nothing, Index_SynonymTaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySynonym(ByVal acceptedKingdomID As Integer, ByVal acceptedTaxonID As Integer, ByVal acceptedTaxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySynonymSet
            Return Sprocs.eosp_SelectTaxonomySynonym(synonymSource:=Nothing, synonymID:=Nothing, Index_AcceptedKingdomID:=[acceptedKingdomID], Index_AcceptedTaxonID:=[acceptedTaxonID], Index_AcceptedTaxonTypeID:=[acceptedTaxonTypeID], Index_SynonymKingdomID:=Nothing, Index_SynonymTaxonID:=Nothing, Index_SynonymTaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySynonym_1(ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer) As EntitySet.TaxonomySynonymSet
            Return Sprocs.eosp_SelectTaxonomySynonym(synonymSource:=Nothing, synonymID:=Nothing, Index_SynonymKingdomID:=[synonymKingdomID], Index_SynonymTaxonID:=[synonymTaxonID], Index_SynonymTaxonTypeID:=[synonymTaxonTypeID], Index_AcceptedKingdomID:=Nothing, Index_AcceptedTaxonID:=Nothing, Index_AcceptedTaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySynonym_1(ByVal synonymKingdomID As Integer, ByVal synonymTaxonID As Integer, ByVal synonymTaxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySynonymSet
            Return Sprocs.eosp_SelectTaxonomySynonym(synonymSource:=Nothing, synonymID:=Nothing, Index_SynonymKingdomID:=[synonymKingdomID], Index_SynonymTaxonID:=[synonymTaxonID], Index_SynonymTaxonTypeID:=[synonymTaxonTypeID], Index_AcceptedKingdomID:=Nothing, Index_AcceptedTaxonID:=Nothing, Index_AcceptedTaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomySynonym
            
            IX_TaxonomySynonym_1
            
            
        End Enum
    End Class
End Namespace
