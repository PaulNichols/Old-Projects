'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'Cheque'
    '*DO NOT* modify this file.
    'Add new properties and methods to Cheque instead.
    Public MustInherit Class ChequeBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal chequeId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(chequeId, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal chequeId As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(chequeId).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property ChequeId As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property PaymentId As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(8)>  _
        Public Property BankSortCode As String
            Get
                If (Me.IsBankSortCodeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),String)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(8)>  _
        Public Property BankAccountNumber As String
            Get
                If (Me.IsBankAccountNumberNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(3),String)
                End If
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(15)>  _
        Public Property SerialNumber As String
            Get
                If (Me.IsSerialNumberNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(4),String)
                End If
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(50)>  _
        Public Property AccountName As String
            Get
                If (Me.IsAccountNameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(5),String)
                End If
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                If (Me.IsAmountNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),Decimal)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.ChequeService
            Get
                Return CType(GetServiceObject(GetType(Service.ChequeService)),Service.ChequeService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsBankSortCodeNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetBankSortCodeToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsBankAccountNumberNull() As Boolean
            Return Me.IsNull(3)
        End Function
        
        Public Sub SetBankAccountNumberToNull()
            Me(3) = System.DBNull.Value
        End Sub
        
        Public Function IsSerialNumberNull() As Boolean
            Return Me.IsNull(4)
        End Function
        
        Public Sub SetSerialNumberToNull()
            Me(4) = System.DBNull.Value
        End Sub
        
        Public Function IsAccountNameNull() As Boolean
            Return Me.IsNull(5)
        End Function
        
        Public Sub SetAccountNameToNull()
            Me(5) = System.DBNull.Value
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(6)
        End Function
        
        Public Sub SetAmountToNull()
            Me(6) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(8)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.ChequeSet
            Return ChequeBase.GetAll(false, false, ChequeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.ChequeSet
            Return ChequeBase.GetAll(includeHyphen, false, ChequeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As ChequeServiceBase.OrderBy) As EntitySet.ChequeSet
            Dim service As Service.ChequeService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As ChequeServiceBase.OrderBy) As EntitySet.ChequeSet
            Return ChequeBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal chequeId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.Cheque
            Dim service As Service.ChequeService
            service = ServiceObject
            Return service.GetById(ChequeId, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal chequeId As Integer) As Entity.Cheque
            Dim service As Service.ChequeService
            service = ServiceObject
            Return service.GetById(ChequeId)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal chequeId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.ChequeService
            service = ServiceObject
            Return service.DeleteById(chequeId, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal chequeId As Integer) As Boolean
            Return ChequeBase.DeleteById(chequeId, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal chequeId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return ChequeBase.DeleteById(chequeId, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForPayment(ByVal paymentId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.ChequeSet
            Dim service As Service.ChequeService
            service = ServiceObject
            Return service.GetForPayment(paymentId, tran)
        End Function
        
        Public Overloads Shared Function GetForPayment(ByVal paymentId As Integer) As EntitySet.ChequeSet
            Return ChequeBase.GetForPayment(paymentId, Nothing)
        End Function
        
        Public Shared Function Insert(ByVal paymentId As Integer, ByVal bankSortCode As Object, ByVal bankAccountNumber As Object, ByVal serialNumber As Object, ByVal accountName As Object, ByVal amount As Object) As Entity.Cheque
            Return Entity.Cheque.ServiceObject.Insert(paymentId, bankSortCode, bankAccountNumber, serialNumber, accountName, amount)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim paymentIdParam As Integer = Me.PaymentId
            Dim bankSortCodeParam As Object
            If (Me.IsBankSortCodeNull = false) Then
                bankSortCodeParam = Me.BankSortCode
            Else
                bankSortCodeParam = System.DBNull.Value
            End If
            Dim bankAccountNumberParam As Object
            If (Me.IsBankAccountNumberNull = false) Then
                bankAccountNumberParam = EnterpriseObjects.Common.ParseSQLText(Me.BankAccountNumber)
            Else
                bankAccountNumberParam = System.DBNull.Value
            End If
            Dim serialNumberParam As Object
            If (Me.IsSerialNumberNull = false) Then
                serialNumberParam = EnterpriseObjects.Common.ParseSQLText(Me.SerialNumber)
            Else
                serialNumberParam = System.DBNull.Value
            End If
            Dim accountNameParam As Object
            If (Me.IsAccountNameNull = false) Then
                accountNameParam = EnterpriseObjects.Common.ParseSQLText(Me.AccountName)
            Else
                accountNameParam = System.DBNull.Value
            End If
            Dim amountParam As Object
            If (Me.IsAmountNull = false) Then
                amountParam = Me.Amount
            Else
                amountParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.Cheque.ServiceObject.Update(Me.Id, paymentIdParam, bankSortCodeParam, bankAccountNumberParam, serialNumberParam, accountNameParam, amountParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
