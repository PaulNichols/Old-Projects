'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomyTaxonType'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomyTaxonTypeServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll, EnterpriseObjects.IServiceId
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomyTaxonTypeSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomyTaxonTypeSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomyTaxonType", GetType(EntitySet.TaxonomyTaxonTypeSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomyTaxonTypeSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomyTaxonTypeSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyTaxonTypeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyTaxonTypeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomyTaxonTypeSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return CType(MyBase.GetById("eosp_SelectTaxonomyTaxonType", "ID", iD, GetType(EntitySet.TaxonomyTaxonTypeSet), tran),Entity.TaxonomyTaxonType)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal iD As Integer) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return Me.GetById(iD, Nothing)
        End Function
        
        Public Overloads Function GetById(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return CType(MyBase.GetById("eosp_SelectTaxonomyTaxonType", "ID", iD, GetType(EntitySet.TaxonomyTaxonTypeSet), tran),Entity.TaxonomyTaxonType)
        End Function
        
        Public Overloads Function GetById(ByVal iD As Integer) As Entity.TaxonomyTaxonType
            Return Me.GetById(iD, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal iD As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(iD, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal iD As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomyTaxonType", "ID", iD, checkSum, transaction)
        End Function
        
        Public Overloads Function Insert(ByVal description As String, ByVal active As Boolean, ByVal displayID As Object, ByVal sortOrder As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return Me.GetById(Sprocs.eosp_CreateTaxonomyTaxonType(description, active, displayID, sortOrder, transaction), transaction)
        End Function
        
        Public Overloads Function Insert(ByVal description As String, ByVal active As Boolean, ByVal displayID As Object, ByVal sortOrder As Object) As Entity.TaxonomyTaxonType
            Return Me.Insert(description, active, displayID, sortOrder, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal taxonomyTaxonType As Entity.TaxonomyTaxonType) As Entity.TaxonomyTaxonType
            Return Me.Insert(taxonomyTaxonType(1), taxonomyTaxonType(2), taxonomyTaxonType(3), taxonomyTaxonType(4))
        End Function
        
        Public Overloads Function Insert(ByVal taxonomyTaxonType As Entity.TaxonomyTaxonType, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return Me.Insert(taxonomyTaxonType(1), taxonomyTaxonType(2), taxonomyTaxonType(3), taxonomyTaxonType(4), transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal displayID As Object, ByVal sortOrder As Object, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return Sprocs.eosp_UpdateTaxonomyTaxonType(id, description, active, displayID, sortOrder, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal displayID As Object, ByVal sortOrder As Object) As Entity.TaxonomyTaxonType
            Return Me.Update(id, description, active, displayID, sortOrder, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal displayID As Object, ByVal sortOrder As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return Me.Update(id, description, active, displayID, sortOrder, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal description As String, ByVal active As Boolean, ByVal displayID As Object, ByVal sortOrder As Object, ByVal checkSum As Integer) As Entity.TaxonomyTaxonType
            Return Me.Update(id, description, active, displayID, sortOrder, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxonType As Entity.TaxonomyTaxonType) As Entity.TaxonomyTaxonType
            Return Me.Update(taxonomyTaxonType.id, taxonomyTaxonType(1), taxonomyTaxonType(2), taxonomyTaxonType(3), taxonomyTaxonType(4))
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxonType As Entity.TaxonomyTaxonType, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return Me.Update(taxonomyTaxonType.id, taxonomyTaxonType(1), taxonomyTaxonType(2), taxonomyTaxonType(3), taxonomyTaxonType(4), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxonType As Entity.TaxonomyTaxonType, ByVal checkSum As Integer) As Entity.TaxonomyTaxonType
            Return Me.Update(taxonomyTaxonType.id, taxonomyTaxonType(1), taxonomyTaxonType(2), taxonomyTaxonType(3), taxonomyTaxonType(4), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyTaxonType As Entity.TaxonomyTaxonType, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyTaxonType
            Return Me.Update(taxonomyTaxonType.id, taxonomyTaxonType(1), taxonomyTaxonType(2), taxonomyTaxonType(3), taxonomyTaxonType(4), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxonType(ByVal description As String) As EntitySet.TaxonomyTaxonTypeSet
            Return Sprocs.eosp_SelectTaxonomyTaxonType(iD:=Nothing, Index_Description:=[description], Index_DisplayID:=Nothing, Index_SortOrder:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxonType(ByVal description As String, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyTaxonTypeSet
            Return Sprocs.eosp_SelectTaxonomyTaxonType(iD:=Nothing, Index_Description:=[description], Index_DisplayID:=Nothing, Index_SortOrder:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxonType_DisplayOrder(ByVal displayID As Integer, ByVal sortOrder As Integer) As EntitySet.TaxonomyTaxonTypeSet
            Return Sprocs.eosp_SelectTaxonomyTaxonType(iD:=Nothing, Index_DisplayID:=[displayID], Index_SortOrder:=[sortOrder], Index_Description:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyTaxonType_DisplayOrder(ByVal displayID As Integer, ByVal sortOrder As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyTaxonTypeSet
            Return Sprocs.eosp_SelectTaxonomyTaxonType(iD:=Nothing, Index_DisplayID:=[displayID], Index_SortOrder:=[sortOrder], Index_Description:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomyTaxonType
            
            IX_TaxonomyTaxonType_DisplayOrder
            
            
        End Enum
    End Class
End Namespace
