'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'SeizureToPermitLink'
    '*DO NOT* modify this file.
    'Add new properties and methods to SeizureToPermitLink instead.
    Public MustInherit Class SeizureToPermitLinkBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal seizureNotificationId As Integer, ByVal permitId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(seizureNotificationId, permitId, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal seizureNotificationId As Integer, ByVal permitId As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(seizureNotificationId, permitId).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property SeizureNotificationId As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property PermitId As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),Integer)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.SeizureToPermitLinkService
            Get
                Return CType(GetServiceObject(GetType(Service.SeizureToPermitLinkService)),Service.SeizureToPermitLinkService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(3)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.SeizureToPermitLinkSet
            Return SeizureToPermitLinkBase.GetAll(false, false, SeizureToPermitLinkServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.SeizureToPermitLinkSet
            Return SeizureToPermitLinkBase.GetAll(includeHyphen, false, SeizureToPermitLinkServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As SeizureToPermitLinkServiceBase.OrderBy) As EntitySet.SeizureToPermitLinkSet
            Dim service As Service.SeizureToPermitLinkService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As SeizureToPermitLinkServiceBase.OrderBy) As EntitySet.SeizureToPermitLinkSet
            Return SeizureToPermitLinkBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal seizureNotificationId As Integer, ByVal permitId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.SeizureToPermitLink
            Dim service As Service.SeizureToPermitLinkService
            service = ServiceObject
            Return service.GetById(New Integer() {seizureNotificationId, permitId}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal seizureNotificationId As Integer, ByVal permitId As Integer) As Entity.SeizureToPermitLink
            Dim service As Service.SeizureToPermitLinkService
            service = ServiceObject
            Return service.GetById(New Integer() {seizureNotificationId, permitId})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal seizureNotificationId As Integer, ByVal permitId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.SeizureToPermitLinkService
            service = ServiceObject
            Return service.DeleteById(New Integer() {seizureNotificationId, permitId}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal seizureNotificationId As Integer, ByVal permitId As Integer) As Boolean
            Return SeizureToPermitLinkBase.DeleteById(seizureNotificationId, permitId, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal seizureNotificationId As Integer, ByVal permitId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return SeizureToPermitLinkBase.DeleteById(seizureNotificationId, permitId, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForSeizureNotification(ByVal seizureNotificationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SeizureToPermitLinkSet
            Dim service As Service.SeizureToPermitLinkService
            service = ServiceObject
            Return service.GetForSeizureNotification(seizureNotificationId, tran)
        End Function
        
        Public Overloads Shared Function GetForSeizureNotification(ByVal seizureNotificationId As Integer) As EntitySet.SeizureToPermitLinkSet
            Return SeizureToPermitLinkBase.GetForSeizureNotification(seizureNotificationId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForPermit(ByVal permitId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SeizureToPermitLinkSet
            Dim service As Service.SeizureToPermitLinkService
            service = ServiceObject
            Return service.GetForPermit(permitId, tran)
        End Function
        
        Public Overloads Shared Function GetForPermit(ByVal permitId As Integer) As EntitySet.SeizureToPermitLinkSet
            Return SeizureToPermitLinkBase.GetForPermit(permitId, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal seizureNotificationId As Integer, ByVal permitId As Integer)
            Entity.SeizureToPermitLink.ServiceObject.Insert(seizureNotificationId, permitId)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim seizureNotificationIdParam As Integer = Me.SeizureNotificationId
            Dim permitIdParam As Integer = Me.PermitId
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.SeizureToPermitLink.ServiceObject.Update(seizureNotificationIdParam, permitIdParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
