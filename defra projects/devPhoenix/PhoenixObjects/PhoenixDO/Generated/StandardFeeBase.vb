'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'StandardFee'
    '*DO NOT* modify this file.
    'Add new properties and methods to StandardFee instead.
    <EnterpriseObjects.Attributes.TableDescription("Standard Fee")>  _
    Public MustInherit Class StandardFeeBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal standardFeeID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(standardFeeID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal standardFeeID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(standardFeeID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property StandardFeeID As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property ApplicationTypeCode As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property LinkedApplicationTypeCode As Integer
            Get
                If (Me.IsLinkedApplicationTypeCodeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),Integer)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property PlantOrCoral As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property CommercialPurpose As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldDescription("Bird Fee Level")>  _
        Public Property BirdFeeLevel As Short
            Get
                Return CType(Me(5),Short)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldDescription("Minimum No. (Species or Genera)")>  _
        Public Property MinimumNumberOfSpecies As Integer
            Get
                Return CType(Me(6),Integer)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldDescription("Maximum No. (Species or Genera)")>  _
        Public Property MaximumNumberOfSpecies As Integer
            Get
                If (Me.IsMaximumNumberOfSpeciesNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldDescription("Fee")>  _
        Public Property Fee As Decimal
            Get
                Return CType(Me(8),Decimal)
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Property Active As Boolean
            Get
                Return CType(Me(9),Boolean)
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(10),Integer)
                End If
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.StandardFeeService
            Get
                Return CType(GetServiceObject(GetType(Service.StandardFeeService)),Service.StandardFeeService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsLinkedApplicationTypeCodeNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetLinkedApplicationTypeCodeToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsMaximumNumberOfSpeciesNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetMaximumNumberOfSpeciesToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(10)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(10) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(11)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.StandardFeeSet
            Return StandardFeeBase.GetAll(false, false, StandardFeeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.StandardFeeSet
            Return StandardFeeBase.GetAll(includeHyphen, false, StandardFeeServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As StandardFeeServiceBase.OrderBy) As EntitySet.StandardFeeSet
            Dim service As Service.StandardFeeService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As StandardFeeServiceBase.OrderBy) As EntitySet.StandardFeeSet
            Return StandardFeeBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal standardFeeID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.StandardFee
            Dim service As Service.StandardFeeService
            service = ServiceObject
            Return service.GetById(StandardFeeID, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal standardFeeID As Integer) As Entity.StandardFee
            Dim service As Service.StandardFeeService
            service = ServiceObject
            Return service.GetById(StandardFeeID)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal standardFeeID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.StandardFeeService
            service = ServiceObject
            Return service.DeleteById(standardFeeID, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal standardFeeID As Integer) As Boolean
            Return StandardFeeBase.DeleteById(standardFeeID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal standardFeeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return StandardFeeBase.DeleteById(standardFeeID, 0, transaction)
        End Function
        
        Public Shared Function Insert(ByVal applicationTypeCode As Integer, ByVal linkedApplicationTypeCode As Object, ByVal plantOrCoral As Integer, ByVal commercialPurpose As Integer, ByVal birdFeeLevel As Short, ByVal minimumNumberOfSpecies As Integer, ByVal maximumNumberOfSpecies As Object, ByVal fee As Decimal, ByVal active As Boolean) As Entity.StandardFee
            Return Entity.StandardFee.ServiceObject.Insert(applicationTypeCode, linkedApplicationTypeCode, plantOrCoral, commercialPurpose, birdFeeLevel, minimumNumberOfSpecies, maximumNumberOfSpecies, fee, active)
        End Function
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim applicationTypeCodeParam As Integer = Me.ApplicationTypeCode
            Dim linkedApplicationTypeCodeParam As Object
            If (Me.IsLinkedApplicationTypeCodeNull = false) Then
                linkedApplicationTypeCodeParam = Me.LinkedApplicationTypeCode
            Else
                linkedApplicationTypeCodeParam = System.DBNull.Value
            End If
            Dim plantOrCoralParam As Integer = Me.PlantOrCoral
            Dim commercialPurposeParam As Integer = Me.CommercialPurpose
            Dim birdFeeLevelParam As Short = Me.BirdFeeLevel
            Dim minimumNumberOfSpeciesParam As Integer = Me.MinimumNumberOfSpecies
            Dim maximumNumberOfSpeciesParam As Object
            If (Me.IsMaximumNumberOfSpeciesNull = false) Then
                maximumNumberOfSpeciesParam = Me.MaximumNumberOfSpecies
            Else
                maximumNumberOfSpeciesParam = System.DBNull.Value
            End If
            Dim feeParam As Decimal = Me.Fee
            Dim activeParam As Boolean = Me.Active
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.StandardFee.ServiceObject.Update(Me.Id, applicationTypeCodeParam, linkedApplicationTypeCodeParam, plantOrCoralParam, commercialPurposeParam, birdFeeLevelParam, minimumNumberOfSpeciesParam, maximumNumberOfSpeciesParam, feeParam, activeParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
