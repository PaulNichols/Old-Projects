'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomySpeciesBRUDistribution'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomySpeciesBRUDistributionServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomySpeciesBRUDistribution", GetType(EntitySet.TaxonomySpeciesBRUDistributionSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomySpeciesBRUDistributionSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomySpeciesBRUDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomySpeciesBRUDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesBRUDistribution
            Return CType(MyBase.GetById("eosp_SelectTaxonomySpeciesBRUDistribution", New String() {"Source", "SpeciesBRUDistributionID"}, idColumns, GetType(EntitySet.TaxonomySpeciesBRUDistributionSet), tran),Entity.TaxonomySpeciesBRUDistribution)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomySpeciesBRUDistribution", New String() {"Source", "SpeciesBRUDistributionID"}, idColumns, checkSum, transaction)
        End Function
        
        'GetForSourceTaxonomySpeciesCountryDistribution - links to the TaxonomySpeciesCountryDistribution table...
        Public Overloads Function GetForSourceTaxonomySpeciesCountryDistribution(ByVal Source As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomySpeciesBRUDistribution wher"& _ 
"e Source=" + Source.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomySpeciesBRUDistributionSet), tran),EntitySet.TaxonomySpeciesBRUDistributionSet)
        End Function
        
        'GetForSourceTaxonomySpeciesCountryDistribution - links to the TaxonomySpeciesCountryDistribution table...
        Public Overloads Function GetForSourceTaxonomySpeciesCountryDistribution(ByVal Source As Integer) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetForSourceTaxonomySpeciesCountryDistribution(Source, Nothing)
        End Function
        
        'GetForCountryDistributionIDTaxonomySpeciesCountryDistribution - links to the TaxonomySpeciesCountryDistribution table...
        Public Overloads Function GetForCountryDistributionIDTaxonomySpeciesCountryDistribution(ByVal CountryDistributionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomySpeciesBRUDistribution wher"& _ 
"e CountryDistributionID=" + CountryDistributionID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomySpeciesBRUDistributionSet), tran),EntitySet.TaxonomySpeciesBRUDistributionSet)
        End Function
        
        'GetForCountryDistributionIDTaxonomySpeciesCountryDistribution - links to the TaxonomySpeciesCountryDistribution table...
        Public Overloads Function GetForCountryDistributionIDTaxonomySpeciesCountryDistribution(ByVal CountryDistributionID As Integer) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetForCountryDistributionIDTaxonomySpeciesCountryDistribution(CountryDistributionID, Nothing)
        End Function
        
        'GetForNote - links to the Notes table...
        Public Overloads Function GetForNote(ByVal NoteId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomySpeciesBRUDistribution wher"& _ 
"e NoteID=" + NoteId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomySpeciesBRUDistributionSet), tran),EntitySet.TaxonomySpeciesBRUDistributionSet)
        End Function
        
        'GetForNote - links to the Notes table...
        Public Overloads Function GetForNote(ByVal NoteId As Integer) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Me.GetForNote(NoteId, Nothing)
        End Function
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal speciesBRUDistributionID As Integer, ByVal countryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal bRUID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomySpeciesBRUDistribution(source, speciesBRUDistributionID, countryDistributionID, kingdomID, taxonID, taxonTypeID, bRUID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal speciesBRUDistributionID As Integer, ByVal countryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal bRUID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object)
            Me.Insert(source, speciesBRUDistributionID, countryDistributionID, kingdomID, taxonID, taxonTypeID, bRUID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomySpeciesBRUDistribution As Entity.TaxonomySpeciesBRUDistribution)
            Me.Insert(taxonomySpeciesBRUDistribution(0), taxonomySpeciesBRUDistribution(1), taxonomySpeciesBRUDistribution(2), taxonomySpeciesBRUDistribution(3), taxonomySpeciesBRUDistribution(4), taxonomySpeciesBRUDistribution(5), taxonomySpeciesBRUDistribution(6), taxonomySpeciesBRUDistribution(7), taxonomySpeciesBRUDistribution(8), taxonomySpeciesBRUDistribution(9), taxonomySpeciesBRUDistribution(10), taxonomySpeciesBRUDistribution(11), taxonomySpeciesBRUDistribution(12), taxonomySpeciesBRUDistribution(13))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomySpeciesBRUDistribution As Entity.TaxonomySpeciesBRUDistribution, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomySpeciesBRUDistribution(0), taxonomySpeciesBRUDistribution(1), taxonomySpeciesBRUDistribution(2), taxonomySpeciesBRUDistribution(3), taxonomySpeciesBRUDistribution(4), taxonomySpeciesBRUDistribution(5), taxonomySpeciesBRUDistribution(6), taxonomySpeciesBRUDistribution(7), taxonomySpeciesBRUDistribution(8), taxonomySpeciesBRUDistribution(9), taxonomySpeciesBRUDistribution(10), taxonomySpeciesBRUDistribution(11), taxonomySpeciesBRUDistribution(12), taxonomySpeciesBRUDistribution(13), transaction)
        End Sub
        
        Public Overloads Function Update( _
                    ByVal source As Integer,  _
                    ByVal speciesBRUDistributionID As Integer,  _
                    ByVal countryDistributionID As Integer,  _
                    ByVal kingdomID As Integer,  _
                    ByVal taxonID As Integer,  _
                    ByVal taxonTypeID As Integer,  _
                    ByVal bRUID As Integer,  _
                    ByVal certain As String,  _
                    ByVal extinct As String,  _
                    ByVal introduced As String,  _
                    ByVal reIntroduced As String,  _
                    ByVal breeding As String,  _
                    ByVal vagrant As String,  _
                    ByVal noteID As Object,  _
                    ByVal checkSum As Integer,  _
                    ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesBRUDistribution
            Return Sprocs.eosp_UpdateTaxonomySpeciesBRUDistribution(source, speciesBRUDistributionID, countryDistributionID, kingdomID, taxonID, taxonTypeID, bRUID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesBRUDistributionID As Integer, ByVal countryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal bRUID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(source, speciesBRUDistributionID, countryDistributionID, kingdomID, taxonID, taxonTypeID, bRUID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesBRUDistributionID As Integer, ByVal countryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal bRUID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(source, speciesBRUDistributionID, countryDistributionID, kingdomID, taxonID, taxonTypeID, bRUID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesBRUDistributionID As Integer, ByVal countryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal bRUID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal checkSum As Integer) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(source, speciesBRUDistributionID, countryDistributionID, kingdomID, taxonID, taxonTypeID, bRUID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesBRUDistribution As Entity.TaxonomySpeciesBRUDistribution) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(taxonomySpeciesBRUDistribution(0), taxonomySpeciesBRUDistribution(1), taxonomySpeciesBRUDistribution(2), taxonomySpeciesBRUDistribution(3), taxonomySpeciesBRUDistribution(4), taxonomySpeciesBRUDistribution(5), taxonomySpeciesBRUDistribution(6), taxonomySpeciesBRUDistribution(7), taxonomySpeciesBRUDistribution(8), taxonomySpeciesBRUDistribution(9), taxonomySpeciesBRUDistribution(10), taxonomySpeciesBRUDistribution(11), taxonomySpeciesBRUDistribution(12), taxonomySpeciesBRUDistribution(13))
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesBRUDistribution As Entity.TaxonomySpeciesBRUDistribution, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(taxonomySpeciesBRUDistribution(0), taxonomySpeciesBRUDistribution(1), taxonomySpeciesBRUDistribution(2), taxonomySpeciesBRUDistribution(3), taxonomySpeciesBRUDistribution(4), taxonomySpeciesBRUDistribution(5), taxonomySpeciesBRUDistribution(6), taxonomySpeciesBRUDistribution(7), taxonomySpeciesBRUDistribution(8), taxonomySpeciesBRUDistribution(9), taxonomySpeciesBRUDistribution(10), taxonomySpeciesBRUDistribution(11), taxonomySpeciesBRUDistribution(12), taxonomySpeciesBRUDistribution(13), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesBRUDistribution As Entity.TaxonomySpeciesBRUDistribution, ByVal checkSum As Integer) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(taxonomySpeciesBRUDistribution(0), taxonomySpeciesBRUDistribution(1), taxonomySpeciesBRUDistribution(2), taxonomySpeciesBRUDistribution(3), taxonomySpeciesBRUDistribution(4), taxonomySpeciesBRUDistribution(5), taxonomySpeciesBRUDistribution(6), taxonomySpeciesBRUDistribution(7), taxonomySpeciesBRUDistribution(8), taxonomySpeciesBRUDistribution(9), taxonomySpeciesBRUDistribution(10), taxonomySpeciesBRUDistribution(11), taxonomySpeciesBRUDistribution(12), taxonomySpeciesBRUDistribution(13), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesBRUDistribution As Entity.TaxonomySpeciesBRUDistribution, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesBRUDistribution
            Return Me.Update(taxonomySpeciesBRUDistribution(0), taxonomySpeciesBRUDistribution(1), taxonomySpeciesBRUDistribution(2), taxonomySpeciesBRUDistribution(3), taxonomySpeciesBRUDistribution(4), taxonomySpeciesBRUDistribution(5), taxonomySpeciesBRUDistribution(6), taxonomySpeciesBRUDistribution(7), taxonomySpeciesBRUDistribution(8), taxonomySpeciesBRUDistribution(9), taxonomySpeciesBRUDistribution(10), taxonomySpeciesBRUDistribution(11), taxonomySpeciesBRUDistribution(12), taxonomySpeciesBRUDistribution(13), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesBRUDistribution(ByVal source As Integer, ByVal countryDistributionID As Integer) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesBRUDistribution(source:=Nothing, speciesBRUDistributionID:=Nothing, Index_Source:=[source], Index_CountryDistributionID:=[countryDistributionID], Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, Index_BRUID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesBRUDistribution(ByVal source As Integer, ByVal countryDistributionID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesBRUDistribution(source:=Nothing, speciesBRUDistributionID:=Nothing, Index_Source:=[source], Index_CountryDistributionID:=[countryDistributionID], Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, Index_BRUID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesBRUDistribution_1(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesBRUDistribution(source:=Nothing, speciesBRUDistributionID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_Source:=Nothing, Index_CountryDistributionID:=Nothing, Index_BRUID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesBRUDistribution_1(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesBRUDistribution(source:=Nothing, speciesBRUDistributionID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_Source:=Nothing, Index_CountryDistributionID:=Nothing, Index_BRUID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesBRUDistribution_2(ByVal bRUID As Integer) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesBRUDistribution(source:=Nothing, speciesBRUDistributionID:=Nothing, Index_BRUID:=[bRUID], Index_Source:=Nothing, Index_CountryDistributionID:=Nothing, Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesBRUDistribution_2(ByVal bRUID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesBRUDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesBRUDistribution(source:=Nothing, speciesBRUDistributionID:=Nothing, Index_BRUID:=[bRUID], Index_Source:=Nothing, Index_CountryDistributionID:=Nothing, Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomySpeciesBRUDistribution
            
            IX_TaxonomySpeciesBRUDistribution_1
            
            IX_TaxonomySpeciesBRUDistribution_2
            
            
        End Enum
    End Class
End Namespace
