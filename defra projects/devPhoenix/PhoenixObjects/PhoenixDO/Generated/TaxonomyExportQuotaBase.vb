'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyExportQuota'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyExportQuota instead.
    Public MustInherit Class TaxonomyExportQuotaBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(source, iD, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal iD As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(source, iD).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property Source As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property ID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property KingdomID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property QuotaYear As Short
            Get
                If (Me.IsQuotaYearNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(5),Short)
                End If
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(30)>  _
        Public Property QuotaVolume As String
            Get
                If (Me.IsQuotaVolumeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),String)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(50)>  _
        Public Property QuotaUnit As String
            Get
                If (Me.IsQuotaUnitNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),String)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property ExportQuotaNotificationID As Integer
            Get
                If (Me.IsExportQuotaNotificationIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(8),Integer)
                End If
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Property CountryID As Integer
            Get
                If (Me.IsCountryIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Integer)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Property ExportQuotaTermID As Integer
            Get
                If (Me.IsExportQuotaTermIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(10),Integer)
                End If
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        Public Property ExportQuotaSourceID As Integer
            Get
                If (Me.IsExportQuotaSourceIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(11),Integer)
                End If
            End Get
            Set
                Me(11) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                If (Me.IsNoteNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(12),String)
                End If
            End Get
            Set
                Me(12) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(13),Integer)
                End If
            End Get
            Set
                Me(13) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyExportQuotaService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyExportQuotaService)),Service.TaxonomyExportQuotaService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsQuotaYearNull() As Boolean
            Return Me.IsNull(5)
        End Function
        
        Public Sub SetQuotaYearToNull()
            Me(5) = System.DBNull.Value
        End Sub
        
        Public Function IsQuotaVolumeNull() As Boolean
            Return Me.IsNull(6)
        End Function
        
        Public Sub SetQuotaVolumeToNull()
            Me(6) = System.DBNull.Value
        End Sub
        
        Public Function IsQuotaUnitNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetQuotaUnitToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Function IsExportQuotaNotificationIDNull() As Boolean
            Return Me.IsNull(8)
        End Function
        
        Public Sub SetExportQuotaNotificationIDToNull()
            Me(8) = System.DBNull.Value
        End Sub
        
        Public Function IsCountryIDNull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetCountryIDToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Function IsExportQuotaTermIDNull() As Boolean
            Return Me.IsNull(10)
        End Function
        
        Public Sub SetExportQuotaTermIDToNull()
            Me(10) = System.DBNull.Value
        End Sub
        
        Public Function IsExportQuotaSourceIDNull() As Boolean
            Return Me.IsNull(11)
        End Function
        
        Public Sub SetExportQuotaSourceIDToNull()
            Me(11) = System.DBNull.Value
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(12)
        End Function
        
        Public Sub SetNoteToNull()
            Me(12) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(13)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(13) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(14)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetAll(false, false, TaxonomyExportQuotaServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetAll(includeHyphen, false, TaxonomyExportQuotaServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyExportQuotaServiceBase.OrderBy) As EntitySet.TaxonomyExportQuotaSet
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyExportQuotaServiceBase.OrderBy) As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyExportQuota
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetById(New Integer() {source, iD}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal iD As Integer) As Entity.TaxonomyExportQuota
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetById(New Integer() {source, iD})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal iD As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.DeleteById(New Integer() {source, iD}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal iD As Integer) As Boolean
            Return TaxonomyExportQuotaBase.DeleteById(source, iD, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal iD As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyExportQuotaBase.DeleteById(source, iD, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyCITESNotification(ByVal cITESNotificationID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyExportQuotaSet
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetForTaxonomyCITESNotification(cITESNotificationID, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyCITESNotification(ByVal cITESNotificationID As Integer) As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetForTaxonomyCITESNotification(cITESNotificationID, Nothing)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyExportQuotaSet
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetForCountry(countryId, tran)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer) As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetForCountry(countryId, Nothing)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyExportQuotaTerm(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyExportQuotaSet
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetForTaxonomyExportQuotaTerm(iD, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyExportQuotaTerm(ByVal iD As Integer) As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetForTaxonomyExportQuotaTerm(iD, Nothing)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyExportQuotaSource(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyExportQuotaSet
            Dim service As Service.TaxonomyExportQuotaService
            service = ServiceObject
            Return service.GetForTaxonomyExportQuotaSource(iD, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyExportQuotaSource(ByVal iD As Integer) As EntitySet.TaxonomyExportQuotaSet
            Return TaxonomyExportQuotaBase.GetForTaxonomyExportQuotaSource(iD, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal source As Integer, ByVal iD As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal quotaYear As Object, ByVal quotaVolume As Object, ByVal quotaUnit As Object, ByVal exportQuotaNotificationID As Object, ByVal countryID As Object, ByVal exportQuotaTermID As Object, ByVal exportQuotaSourceID As Object, ByVal note As Object)
            Entity.TaxonomyExportQuota.ServiceObject.Insert(source, iD, kingdomID, taxonID, taxonTypeID, quotaYear, quotaVolume, quotaUnit, exportQuotaNotificationID, countryID, exportQuotaTermID, exportQuotaSourceID, note)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim sourceParam As Integer = Me.Source
            Dim iDParam As Integer = Me.ID
            Dim kingdomIDParam As Integer = Me.KingdomID
            Dim taxonIDParam As Integer = Me.TaxonID
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim quotaYearParam As Object
            If (Me.IsQuotaYearNull = false) Then
                quotaYearParam = Me.QuotaYear
            Else
                quotaYearParam = System.DBNull.Value
            End If
            Dim quotaVolumeParam As Object
            If (Me.IsQuotaVolumeNull = false) Then
                quotaVolumeParam = EnterpriseObjects.Common.ParseSQLText(Me.QuotaVolume)
            Else
                quotaVolumeParam = System.DBNull.Value
            End If
            Dim quotaUnitParam As Object
            If (Me.IsQuotaUnitNull = false) Then
                quotaUnitParam = EnterpriseObjects.Common.ParseSQLText(Me.QuotaUnit)
            Else
                quotaUnitParam = System.DBNull.Value
            End If
            Dim exportQuotaNotificationIDParam As Object
            If (Me.IsExportQuotaNotificationIDNull = false) Then
                exportQuotaNotificationIDParam = Me.ExportQuotaNotificationID
            Else
                exportQuotaNotificationIDParam = System.DBNull.Value
            End If
            Dim countryIDParam As Object
            If (Me.IsCountryIDNull = false) Then
                countryIDParam = Me.CountryID
            Else
                countryIDParam = System.DBNull.Value
            End If
            Dim exportQuotaTermIDParam As Object
            If (Me.IsExportQuotaTermIDNull = false) Then
                exportQuotaTermIDParam = Me.ExportQuotaTermID
            Else
                exportQuotaTermIDParam = System.DBNull.Value
            End If
            Dim exportQuotaSourceIDParam As Object
            If (Me.IsExportQuotaSourceIDNull = false) Then
                exportQuotaSourceIDParam = Me.ExportQuotaSourceID
            Else
                exportQuotaSourceIDParam = System.DBNull.Value
            End If
            Dim noteParam As Object
            If (Me.IsNoteNull = false) Then
                noteParam = Me.Note
            Else
                noteParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyExportQuota.ServiceObject.Update(sourceParam, iDParam, kingdomIDParam, taxonIDParam, taxonTypeIDParam, quotaYearParam, quotaVolumeParam, quotaUnitParam, exportQuotaNotificationIDParam, countryIDParam, exportQuotaTermIDParam, exportQuotaSourceIDParam, noteParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
