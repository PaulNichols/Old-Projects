'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'BirdNotification'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class BirdNotificationServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll, EnterpriseObjects.IServiceId
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.BirdNotificationSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.BirdNotificationSet
            Return CType(MyBase.GetAll("eosp_SelectBirdNotification", GetType(EntitySet.BirdNotificationSet), includeHyphen, includeInactive, orderBy),EntitySet.BirdNotificationSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.BirdNotificationSet
            Return Me.GetAll(includeHyphen, includeInactive, BirdNotificationServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, BirdNotificationServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal birdNotificationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return CType(MyBase.GetById("eosp_SelectBirdNotification", "BirdNotificationId", birdNotificationId, GetType(EntitySet.BirdNotificationSet), tran),Entity.BirdNotification)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal birdNotificationId As Integer) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return Me.GetById(birdNotificationId, Nothing)
        End Function
        
        Public Overloads Function GetById(ByVal birdNotificationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return CType(MyBase.GetById("eosp_SelectBirdNotification", "BirdNotificationId", birdNotificationId, GetType(EntitySet.BirdNotificationSet), tran),Entity.BirdNotification)
        End Function
        
        Public Overloads Function GetById(ByVal birdNotificationId As Integer) As Entity.BirdNotification
            Return Me.GetById(birdNotificationId, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal birdNotificationId As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(birdNotificationId, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal birdNotificationId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteBirdNotification", "BirdNotificationId", birdNotificationId, checkSum, transaction)
        End Function
        
        'GetForApplication - links to the Application table...
        Public Overloads Function GetForApplication(ByVal ApplicationId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.BirdNotificationSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from BirdNotification where ApplicationI"& _ 
"d=" + ApplicationId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.BirdNotificationSet), tran),EntitySet.BirdNotificationSet)
        End Function
        
        'GetForApplication - links to the Application table...
        Public Overloads Function GetForApplication(ByVal ApplicationId As Integer) As EntitySet.BirdNotificationSet
            Return Me.GetForApplication(ApplicationId, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal provisionalXML As String, ByVal applicationId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return Me.GetById(Sprocs.eosp_CreateBirdNotification(provisionalXML, applicationId, transaction), transaction)
        End Function
        
        Public Overloads Function Insert(ByVal provisionalXML As String, ByVal applicationId As Integer) As Entity.BirdNotification
            Return Me.Insert(provisionalXML, applicationId, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal birdNotification As Entity.BirdNotification) As Entity.BirdNotification
            Return Me.Insert(birdNotification(1), birdNotification(2))
        End Function
        
        Public Overloads Function Insert(ByVal birdNotification As Entity.BirdNotification, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return Me.Insert(birdNotification(1), birdNotification(2), transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal provisionalXML As String, ByVal applicationId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return Sprocs.eosp_UpdateBirdNotification(id, provisionalXML, applicationId, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal provisionalXML As String, ByVal applicationId As Integer) As Entity.BirdNotification
            Return Me.Update(id, provisionalXML, applicationId, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal provisionalXML As String, ByVal applicationId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return Me.Update(id, provisionalXML, applicationId, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal provisionalXML As String, ByVal applicationId As Integer, ByVal checkSum As Integer) As Entity.BirdNotification
            Return Me.Update(id, provisionalXML, applicationId, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal birdNotification As Entity.BirdNotification) As Entity.BirdNotification
            Return Me.Update(birdNotification.id, birdNotification(1), birdNotification(2))
        End Function
        
        Public Overloads Function Update(ByVal birdNotification As Entity.BirdNotification, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return Me.Update(birdNotification.id, birdNotification(1), birdNotification(2), transaction)
        End Function
        
        Public Overloads Function Update(ByVal birdNotification As Entity.BirdNotification, ByVal checkSum As Integer) As Entity.BirdNotification
            Return Me.Update(birdNotification.id, birdNotification(1), birdNotification(2), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal birdNotification As Entity.BirdNotification, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.BirdNotification
            Return Me.Update(birdNotification.id, birdNotification(1), birdNotification(2), checkSum, transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
        End Enum
    End Class
End Namespace
