'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyCommonName'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyCommonName instead.
    Public MustInherit Class TaxonomyCommonNameBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(sourceTable, commonNameID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal sourceTable As Integer, ByVal commonNameID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(sourceTable, commonNameID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property SourceTable As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property CommonNameID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(500)>  _
        Public Property Name As String
            Get
                Return CType(Me(2),String)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property ProductIndicator As Boolean
            Get
                Return CType(Me(3),Boolean)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property KingdomID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property TaxonId As Integer
            Get
                Return CType(Me(5),Integer)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(6),Integer)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property AreaOfUseID As Integer
            Get
                Return CType(Me(7),Integer)
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property Active As Boolean
            Get
                Return CType(Me(8),Boolean)
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Integer)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyCommonNameService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyCommonNameService)),Service.TaxonomyCommonNameService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(10)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyCommonNameSet
            Return TaxonomyCommonNameBase.GetAll(false, false, TaxonomyCommonNameServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyCommonNameSet
            Return TaxonomyCommonNameBase.GetAll(includeHyphen, false, TaxonomyCommonNameServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyCommonNameServiceBase.OrderBy) As EntitySet.TaxonomyCommonNameSet
            Dim service As Service.TaxonomyCommonNameService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyCommonNameServiceBase.OrderBy) As EntitySet.TaxonomyCommonNameSet
            Return TaxonomyCommonNameBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyCommonName
            Dim service As Service.TaxonomyCommonNameService
            service = ServiceObject
            Return service.GetById(New Integer() {sourceTable, commonNameID}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal sourceTable As Integer, ByVal commonNameID As Integer) As Entity.TaxonomyCommonName
            Dim service As Service.TaxonomyCommonNameService
            service = ServiceObject
            Return service.GetById(New Integer() {sourceTable, commonNameID})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyCommonNameService
            service = ServiceObject
            Return service.DeleteById(New Integer() {sourceTable, commonNameID}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal sourceTable As Integer, ByVal commonNameID As Integer) As Boolean
            Return TaxonomyCommonNameBase.DeleteById(sourceTable, commonNameID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyCommonNameBase.DeleteById(sourceTable, commonNameID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyAreaOfUse(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyCommonNameSet
            Dim service As Service.TaxonomyCommonNameService
            service = ServiceObject
            Return service.GetForTaxonomyAreaOfUse(iD, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyAreaOfUse(ByVal iD As Integer) As EntitySet.TaxonomyCommonNameSet
            Return TaxonomyCommonNameBase.GetForTaxonomyAreaOfUse(iD, Nothing)
        End Function
        
        Public Overloads Function GetRelatedCommonNameIDSpecie(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SpecieSet
            Return Entity.Specie.GetForCommonNameIDTaxonomyCommonName(Me.SourceTable, tran)
        End Function
        
        Public Overloads Function GetRelatedCommonNameIDSpecie() As EntitySet.SpecieSet
            Return Me.GetRelatedCommonNameIDSpecie(Nothing)
        End Function
        
        Public Overloads Function GetRelatedCommonNameSourceSpecie(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SpecieSet
            Return Entity.Specie.GetForCommonNameSourceTaxonomyCommonName(Me.SourceTable, tran)
        End Function
        
        Public Overloads Function GetRelatedCommonNameSourceSpecie() As EntitySet.SpecieSet
            Return Me.GetRelatedCommonNameSourceSpecie(Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean)
            Entity.TaxonomyCommonName.ServiceObject.Insert(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim sourceTableParam As Integer = Me.SourceTable
            Dim commonNameIDParam As Integer = Me.CommonNameID
            Dim nameParam As String = Me.Name
            Dim productIndicatorParam As Boolean = Me.ProductIndicator
            Dim kingdomIDParam As Integer = Me.KingdomID
            Dim taxonIdParam As Integer = Me.TaxonId
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim areaOfUseIDParam As Integer = Me.AreaOfUseID
            Dim activeParam As Boolean = Me.Active
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyCommonName.ServiceObject.Update(sourceTableParam, commonNameIDParam, nameParam, productIndicatorParam, kingdomIDParam, taxonIdParam, taxonTypeIDParam, areaOfUseIDParam, activeParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
