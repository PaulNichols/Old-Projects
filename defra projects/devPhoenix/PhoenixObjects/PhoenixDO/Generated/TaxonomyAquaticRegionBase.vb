'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyAquaticRegion'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyAquaticRegion instead.
    Public MustInherit Class TaxonomyAquaticRegionBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal aquaticRegionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(aquaticRegionID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal aquaticRegionID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(aquaticRegionID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property AquaticRegionID As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(100)>  _
        Public Property RegionName As String
            Get
                If (Me.IsRegionNameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(1),String)
                End If
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(60)>  _
        Public Property RegionSubName As String
            Get
                If (Me.IsRegionSubNameNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(2),String)
                End If
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(15)>  _
        Public Property RegionType As String
            Get
                If (Me.IsRegionTypeNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(3),String)
                End If
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property AquaticRegionNoteID As Integer
            Get
                If (Me.IsAquaticRegionNoteIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(4),Integer)
                End If
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(5),Integer)
                End If
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyAquaticRegionService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyAquaticRegionService)),Service.TaxonomyAquaticRegionService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsRegionNameNull() As Boolean
            Return Me.IsNull(1)
        End Function
        
        Public Sub SetRegionNameToNull()
            Me(1) = System.DBNull.Value
        End Sub
        
        Public Function IsRegionSubNameNull() As Boolean
            Return Me.IsNull(2)
        End Function
        
        Public Sub SetRegionSubNameToNull()
            Me(2) = System.DBNull.Value
        End Sub
        
        Public Function IsRegionTypeNull() As Boolean
            Return Me.IsNull(3)
        End Function
        
        Public Sub SetRegionTypeToNull()
            Me(3) = System.DBNull.Value
        End Sub
        
        Public Function IsAquaticRegionNoteIDNull() As Boolean
            Return Me.IsNull(4)
        End Function
        
        Public Sub SetAquaticRegionNoteIDToNull()
            Me(4) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(5)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(5) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(6)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyAquaticRegionSet
            Return TaxonomyAquaticRegionBase.GetAll(false, false, TaxonomyAquaticRegionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyAquaticRegionSet
            Return TaxonomyAquaticRegionBase.GetAll(includeHyphen, false, TaxonomyAquaticRegionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyAquaticRegionServiceBase.OrderBy) As EntitySet.TaxonomyAquaticRegionSet
            Dim service As Service.TaxonomyAquaticRegionService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyAquaticRegionServiceBase.OrderBy) As EntitySet.TaxonomyAquaticRegionSet
            Return TaxonomyAquaticRegionBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal aquaticRegionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyAquaticRegion
            Dim service As Service.TaxonomyAquaticRegionService
            service = ServiceObject
            Return service.GetById(AquaticRegionID, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal aquaticRegionID As Integer) As Entity.TaxonomyAquaticRegion
            Dim service As Service.TaxonomyAquaticRegionService
            service = ServiceObject
            Return service.GetById(AquaticRegionID)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal aquaticRegionID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyAquaticRegionService
            service = ServiceObject
            Return service.DeleteById(aquaticRegionID, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal aquaticRegionID As Integer) As Boolean
            Return TaxonomyAquaticRegionBase.DeleteById(aquaticRegionID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal aquaticRegionID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyAquaticRegionBase.DeleteById(aquaticRegionID, 0, transaction)
        End Function
        
        Public Overloads Function GetRelatedTaxonomySpeciesAquaticDistribution(ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Return Entity.TaxonomySpeciesAquaticDistribution.GetForTaxonomyAquaticRegion(Me.AquaticRegionID, tran)
        End Function
        
        Public Overloads Function GetRelatedTaxonomySpeciesAquaticDistribution() As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Return Me.GetRelatedTaxonomySpeciesAquaticDistribution(Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal aquaticRegionID As Integer, ByVal regionName As Object, ByVal regionSubName As Object, ByVal regionType As Object, ByVal aquaticRegionNoteID As Object)
            Entity.TaxonomyAquaticRegion.ServiceObject.Insert(aquaticRegionID, regionName, regionSubName, regionType, aquaticRegionNoteID)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim regionNameParam As Object
            If (Me.IsRegionNameNull = false) Then
                regionNameParam = Me.RegionName
            Else
                regionNameParam = System.DBNull.Value
            End If
            Dim regionSubNameParam As Object
            If (Me.IsRegionSubNameNull = false) Then
                regionSubNameParam = Me.RegionSubName
            Else
                regionSubNameParam = System.DBNull.Value
            End If
            Dim regionTypeParam As Object
            If (Me.IsRegionTypeNull = false) Then
                regionTypeParam = EnterpriseObjects.Common.ParseSQLText(Me.RegionType)
            Else
                regionTypeParam = System.DBNull.Value
            End If
            Dim aquaticRegionNoteIDParam As Object
            If (Me.IsAquaticRegionNoteIDNull = false) Then
                aquaticRegionNoteIDParam = Me.AquaticRegionNoteID
            Else
                aquaticRegionNoteIDParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyAquaticRegion.ServiceObject.Update(Me.Id, regionNameParam, regionSubNameParam, regionTypeParam, aquaticRegionNoteIDParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
