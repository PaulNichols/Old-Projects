'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyUsage'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyUsage instead.
    Public MustInherit Class TaxonomyUsageBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal usageID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(source, usageID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal usageID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(source, usageID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property Source As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property UsageID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property KingdomID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property UsageTypeID As Integer
            Get
                If (Me.IsUsageTypeIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(5),Integer)
                End If
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property PartID As Integer
            Get
                If (Me.IsPartIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),Integer)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        Public Property LevelOfUseID As Integer
            Get
                If (Me.IsLevelOfUseIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(7),Integer)
                End If
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property Note As String
            Get
                If (Me.IsNoteNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(8),String)
                End If
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Integer)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyUsageService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyUsageService)),Service.TaxonomyUsageService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsUsageTypeIDNull() As Boolean
            Return Me.IsNull(5)
        End Function
        
        Public Sub SetUsageTypeIDToNull()
            Me(5) = System.DBNull.Value
        End Sub
        
        Public Function IsPartIDNull() As Boolean
            Return Me.IsNull(6)
        End Function
        
        Public Sub SetPartIDToNull()
            Me(6) = System.DBNull.Value
        End Sub
        
        Public Function IsLevelOfUseIDNull() As Boolean
            Return Me.IsNull(7)
        End Function
        
        Public Sub SetLevelOfUseIDToNull()
            Me(7) = System.DBNull.Value
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(8)
        End Function
        
        Public Sub SetNoteToNull()
            Me(8) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(10)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyUsageSet
            Return TaxonomyUsageBase.GetAll(false, false, TaxonomyUsageServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyUsageSet
            Return TaxonomyUsageBase.GetAll(includeHyphen, false, TaxonomyUsageServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyUsageServiceBase.OrderBy) As EntitySet.TaxonomyUsageSet
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyUsageServiceBase.OrderBy) As EntitySet.TaxonomyUsageSet
            Return TaxonomyUsageBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal usageID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyUsage
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.GetById(New Integer() {source, usageID}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal usageID As Integer) As Entity.TaxonomyUsage
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.GetById(New Integer() {source, usageID})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal usageID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.DeleteById(New Integer() {source, usageID}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal usageID As Integer) As Boolean
            Return TaxonomyUsageBase.DeleteById(source, usageID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal usageID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyUsageBase.DeleteById(source, usageID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyUsageType(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.GetForTaxonomyUsageType(iD, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyUsageType(ByVal iD As Integer) As EntitySet.TaxonomyUsageSet
            Return TaxonomyUsageBase.GetForTaxonomyUsageType(iD, Nothing)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyPart(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.GetForTaxonomyPart(iD, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyPart(ByVal iD As Integer) As EntitySet.TaxonomyUsageSet
            Return TaxonomyUsageBase.GetForTaxonomyPart(iD, Nothing)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyLevelOfUse(ByVal iD As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyUsageSet
            Dim service As Service.TaxonomyUsageService
            service = ServiceObject
            Return service.GetForTaxonomyLevelOfUse(iD, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyLevelOfUse(ByVal iD As Integer) As EntitySet.TaxonomyUsageSet
            Return TaxonomyUsageBase.GetForTaxonomyLevelOfUse(iD, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal source As Integer, ByVal usageID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal usageTypeID As Object, ByVal partID As Object, ByVal levelOfUseID As Object, ByVal note As Object)
            Entity.TaxonomyUsage.ServiceObject.Insert(source, usageID, kingdomID, taxonID, taxonTypeID, usageTypeID, partID, levelOfUseID, note)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim sourceParam As Integer = Me.Source
            Dim usageIDParam As Integer = Me.UsageID
            Dim kingdomIDParam As Integer = Me.KingdomID
            Dim taxonIDParam As Integer = Me.TaxonID
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim usageTypeIDParam As Object
            If (Me.IsUsageTypeIDNull = false) Then
                usageTypeIDParam = Me.UsageTypeID
            Else
                usageTypeIDParam = System.DBNull.Value
            End If
            Dim partIDParam As Object
            If (Me.IsPartIDNull = false) Then
                partIDParam = Me.PartID
            Else
                partIDParam = System.DBNull.Value
            End If
            Dim levelOfUseIDParam As Object
            If (Me.IsLevelOfUseIDNull = false) Then
                levelOfUseIDParam = Me.LevelOfUseID
            Else
                levelOfUseIDParam = System.DBNull.Value
            End If
            Dim noteParam As Object
            If (Me.IsNoteNull = false) Then
                noteParam = Me.Note
            Else
                noteParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyUsage.ServiceObject.Update(sourceParam, usageIDParam, kingdomIDParam, taxonIDParam, taxonTypeIDParam, usageTypeIDParam, partIDParam, levelOfUseIDParam, noteParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
