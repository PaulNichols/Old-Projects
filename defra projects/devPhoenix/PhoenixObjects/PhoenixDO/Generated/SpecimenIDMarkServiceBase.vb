'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'SpecimenIDMark'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class SpecimenIDMarkServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll, EnterpriseObjects.IServiceId
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.SpecimenIDMarkSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.SpecimenIDMarkSet
            Return CType(MyBase.GetAll("eosp_SelectSpecimenIDMark", GetType(EntitySet.SpecimenIDMarkSet), includeHyphen, includeInactive, orderBy),EntitySet.SpecimenIDMarkSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.SpecimenIDMarkSet
            Return Me.GetAll(includeHyphen, includeInactive, SpecimenIDMarkServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, SpecimenIDMarkServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.SpecimenIDMarkSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal specimenMarkId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return CType(MyBase.GetById("eosp_SelectSpecimenIDMark", "SpecimenMarkId", specimenMarkId, GetType(EntitySet.SpecimenIDMarkSet), tran),Entity.SpecimenIDMark)
        End Function
        
        Public Overloads Overridable Function GetByIdInternal(ByVal specimenMarkId As Integer) As EnterpriseObjects.Entity Implements EnterpriseObjects.IServiceId.GetByIdInternal
            Return Me.GetById(specimenMarkId, Nothing)
        End Function
        
        Public Overloads Function GetById(ByVal specimenMarkId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return CType(MyBase.GetById("eosp_SelectSpecimenIDMark", "SpecimenMarkId", specimenMarkId, GetType(EntitySet.SpecimenIDMarkSet), tran),Entity.SpecimenIDMark)
        End Function
        
        Public Overloads Function GetById(ByVal specimenMarkId As Integer) As Entity.SpecimenIDMark
            Return Me.GetById(specimenMarkId, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal specimenMarkId As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(specimenMarkId, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal specimenMarkId As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteSpecimenIDMark", "SpecimenMarkId", specimenMarkId, checkSum, transaction)
        End Function
        
        'GetForIDMarkType - links to the IDMarkType table...
        Public Overloads Function GetForIDMarkType(ByVal IDMarkTypeID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SpecimenIDMarkSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from SpecimenIDMark where IDMarkTypeId=" + IDMarkTypeID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.SpecimenIDMarkSet), tran),EntitySet.SpecimenIDMarkSet)
        End Function
        
        'GetForIDMarkType - links to the IDMarkType table...
        Public Overloads Function GetForIDMarkType(ByVal IDMarkTypeID As Integer) As EntitySet.SpecimenIDMarkSet
            Return Me.GetForIDMarkType(IDMarkTypeID, Nothing)
        End Function
        
        'GetForSpecimen - links to the Specimen table...
        Public Overloads Function GetForSpecimen(ByVal SpecimenId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SpecimenIDMarkSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from SpecimenIDMark where SpecimenId=" + SpecimenId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.SpecimenIDMarkSet), tran),EntitySet.SpecimenIDMarkSet)
        End Function
        
        'GetForSpecimen - links to the Specimen table...
        Public Overloads Function GetForSpecimen(ByVal SpecimenId As Integer) As EntitySet.SpecimenIDMarkSet
            Return Me.GetForSpecimen(SpecimenId, Nothing)
        End Function
        
        'GetForDEFRARingFate - links to the DEFRARingFate table...
        Public Overloads Function GetForDEFRARingFate(ByVal DEFRARingFate As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.SpecimenIDMarkSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from SpecimenIDMark where IdMarkFateId=" + DEFRARingFate.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.SpecimenIDMarkSet), tran),EntitySet.SpecimenIDMarkSet)
        End Function
        
        'GetForDEFRARingFate - links to the DEFRARingFate table...
        Public Overloads Function GetForDEFRARingFate(ByVal DEFRARingFate As Integer) As EntitySet.SpecimenIDMarkSet
            Return Me.GetForDEFRARingFate(DEFRARingFate, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal iDMarkTypeId As Integer, ByVal specimenId As Integer, ByVal idMark As String, ByVal idMarkFateId As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return Me.GetById(Sprocs.eosp_CreateSpecimenIDMark(iDMarkTypeId, specimenId, idMark, idMarkFateId, transaction), transaction)
        End Function
        
        Public Overloads Function Insert(ByVal iDMarkTypeId As Integer, ByVal specimenId As Integer, ByVal idMark As String, ByVal idMarkFateId As Object) As Entity.SpecimenIDMark
            Return Me.Insert(iDMarkTypeId, specimenId, idMark, idMarkFateId, Nothing)
        End Function
        
        Public Overloads Function Insert(ByVal specimenIDMark As Entity.SpecimenIDMark) As Entity.SpecimenIDMark
            Return Me.Insert(specimenIDMark(1), specimenIDMark(2), specimenIDMark(3), specimenIDMark(4))
        End Function
        
        Public Overloads Function Insert(ByVal specimenIDMark As Entity.SpecimenIDMark, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return Me.Insert(specimenIDMark(1), specimenIDMark(2), specimenIDMark(3), specimenIDMark(4), transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal iDMarkTypeId As Integer, ByVal specimenId As Integer, ByVal idMark As String, ByVal idMarkFateId As Object, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return Sprocs.eosp_UpdateSpecimenIDMark(id, iDMarkTypeId, specimenId, idMark, idMarkFateId, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal iDMarkTypeId As Integer, ByVal specimenId As Integer, ByVal idMark As String, ByVal idMarkFateId As Object) As Entity.SpecimenIDMark
            Return Me.Update(id, iDMarkTypeId, specimenId, idMark, idMarkFateId, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal iDMarkTypeId As Integer, ByVal specimenId As Integer, ByVal idMark As String, ByVal idMarkFateId As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return Me.Update(id, iDMarkTypeId, specimenId, idMark, idMarkFateId, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal id As Integer, ByVal iDMarkTypeId As Integer, ByVal specimenId As Integer, ByVal idMark As String, ByVal idMarkFateId As Object, ByVal checkSum As Integer) As Entity.SpecimenIDMark
            Return Me.Update(id, iDMarkTypeId, specimenId, idMark, idMarkFateId, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal specimenIDMark As Entity.SpecimenIDMark) As Entity.SpecimenIDMark
            Return Me.Update(specimenIDMark.id, specimenIDMark(1), specimenIDMark(2), specimenIDMark(3), specimenIDMark(4))
        End Function
        
        Public Overloads Function Update(ByVal specimenIDMark As Entity.SpecimenIDMark, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return Me.Update(specimenIDMark.id, specimenIDMark(1), specimenIDMark(2), specimenIDMark(3), specimenIDMark(4), transaction)
        End Function
        
        Public Overloads Function Update(ByVal specimenIDMark As Entity.SpecimenIDMark, ByVal checkSum As Integer) As Entity.SpecimenIDMark
            Return Me.Update(specimenIDMark.id, specimenIDMark(1), specimenIDMark(2), specimenIDMark(3), specimenIDMark(4), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal specimenIDMark As Entity.SpecimenIDMark, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.SpecimenIDMark
            Return Me.Update(specimenIDMark.id, specimenIDMark(1), specimenIDMark(2), specimenIDMark(3), specimenIDMark(4), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IdMarkAndType(ByVal idMark As String, ByVal iDMarkTypeId As Integer) As EntitySet.SpecimenIDMarkSet
            Return Sprocs.eosp_SelectSpecimenIDMark(specimenMarkId:=Nothing, Index_IdMark:=[idMark], Index_IDMarkTypeId:=[iDMarkTypeId], transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IdMarkAndType(ByVal idMark As String, ByVal iDMarkTypeId As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.SpecimenIDMarkSet
            Return Sprocs.eosp_SelectSpecimenIDMark(specimenMarkId:=Nothing, Index_IdMark:=[idMark], Index_IDMarkTypeId:=[iDMarkTypeId], sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IdMarkAndType
            
            
        End Enum
    End Class
End Namespace
