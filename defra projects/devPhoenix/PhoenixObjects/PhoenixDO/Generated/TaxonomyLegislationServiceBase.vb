'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomyLegislation'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomyLegislationServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomyLegislationSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomyLegislationSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomyLegislation", GetType(EntitySet.TaxonomyLegislationSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomyLegislationSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomyLegislationSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyLegislationServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyLegislationServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomyLegislationSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyLegislation
            Return CType(MyBase.GetById("eosp_SelectTaxonomyLegislation", New String() {"Source", "LegislationID"}, idColumns, GetType(EntitySet.TaxonomyLegislationSet), tran),Entity.TaxonomyLegislation)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomyLegislation
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomyLegislation", New String() {"Source", "LegislationID"}, idColumns, checkSum, transaction)
        End Function
        
        'GetForTaxonomyLegislationName - links to the TaxonomyLegislationName table...
        Public Overloads Function GetForTaxonomyLegislationName(ByVal LegislationNameID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyLegislationSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyLegislation where Legislati"& _ 
"onNameID=" + LegislationNameID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyLegislationSet), tran),EntitySet.TaxonomyLegislationSet)
        End Function
        
        'GetForTaxonomyLegislationName - links to the TaxonomyLegislationName table...
        Public Overloads Function GetForTaxonomyLegislationName(ByVal LegislationNameID As Integer) As EntitySet.TaxonomyLegislationSet
            Return Me.GetForTaxonomyLegislationName(LegislationNameID, Nothing)
        End Function
        
        'GetForCountry - links to the Country table...
        Public Overloads Function GetForCountry(ByVal CountryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyLegislationSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyLegislation where ISO2Count"& _ 
"ryID=" + CountryId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyLegislationSet), tran),EntitySet.TaxonomyLegislationSet)
        End Function
        
        'GetForCountry - links to the Country table...
        Public Overloads Function GetForCountry(ByVal CountryId As Integer) As EntitySet.TaxonomyLegislationSet
            Return Me.GetForCountry(CountryId, Nothing)
        End Function
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomyLegislation(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object)
            Me.Insert(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyLegislation As Entity.TaxonomyLegislation)
            Me.Insert(taxonomyLegislation(0), taxonomyLegislation(1), taxonomyLegislation(2), taxonomyLegislation(3), taxonomyLegislation(4), taxonomyLegislation(5), taxonomyLegislation(6), taxonomyLegislation(7), taxonomyLegislation(8), taxonomyLegislation(9), taxonomyLegislation(10), taxonomyLegislation(11), taxonomyLegislation(12))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyLegislation As Entity.TaxonomyLegislation, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomyLegislation(0), taxonomyLegislation(1), taxonomyLegislation(2), taxonomyLegislation(3), taxonomyLegislation(4), taxonomyLegislation(5), taxonomyLegislation(6), taxonomyLegislation(7), taxonomyLegislation(8), taxonomyLegislation(9), taxonomyLegislation(10), taxonomyLegislation(11), taxonomyLegislation(12), transaction)
        End Sub
        
        Public Overloads Function Update(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyLegislation
            Return Sprocs.eosp_UpdateTaxonomyLegislation(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object) As Entity.TaxonomyLegislation
            Return Me.Update(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyLegislation
            Return Me.Update(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object, ByVal checkSum As Integer) As Entity.TaxonomyLegislation
            Return Me.Update(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyLegislation As Entity.TaxonomyLegislation) As Entity.TaxonomyLegislation
            Return Me.Update(taxonomyLegislation(0), taxonomyLegislation(1), taxonomyLegislation(2), taxonomyLegislation(3), taxonomyLegislation(4), taxonomyLegislation(5), taxonomyLegislation(6), taxonomyLegislation(7), taxonomyLegislation(8), taxonomyLegislation(9), taxonomyLegislation(10), taxonomyLegislation(11), taxonomyLegislation(12))
        End Function
        
        Public Overloads Function Update(ByVal taxonomyLegislation As Entity.TaxonomyLegislation, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyLegislation
            Return Me.Update(taxonomyLegislation(0), taxonomyLegislation(1), taxonomyLegislation(2), taxonomyLegislation(3), taxonomyLegislation(4), taxonomyLegislation(5), taxonomyLegislation(6), taxonomyLegislation(7), taxonomyLegislation(8), taxonomyLegislation(9), taxonomyLegislation(10), taxonomyLegislation(11), taxonomyLegislation(12), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyLegislation As Entity.TaxonomyLegislation, ByVal checkSum As Integer) As Entity.TaxonomyLegislation
            Return Me.Update(taxonomyLegislation(0), taxonomyLegislation(1), taxonomyLegislation(2), taxonomyLegislation(3), taxonomyLegislation(4), taxonomyLegislation(5), taxonomyLegislation(6), taxonomyLegislation(7), taxonomyLegislation(8), taxonomyLegislation(9), taxonomyLegislation(10), taxonomyLegislation(11), taxonomyLegislation(12), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyLegislation As Entity.TaxonomyLegislation, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyLegislation
            Return Me.Update(taxonomyLegislation(0), taxonomyLegislation(1), taxonomyLegislation(2), taxonomyLegislation(3), taxonomyLegislation(4), taxonomyLegislation(5), taxonomyLegislation(6), taxonomyLegislation(7), taxonomyLegislation(8), taxonomyLegislation(9), taxonomyLegislation(10), taxonomyLegislation(11), taxonomyLegislation(12), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyLegislation(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomyLegislationSet
            Return Sprocs.eosp_SelectTaxonomyLegislation(source:=Nothing, legislationID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_LegislationNameID:=Nothing, Index_Listing:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyLegislation(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyLegislationSet
            Return Sprocs.eosp_SelectTaxonomyLegislation(source:=Nothing, legislationID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_LegislationNameID:=Nothing, Index_Listing:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyLegislation_1(ByVal legislationNameID As Integer, ByVal listing As String) As EntitySet.TaxonomyLegislationSet
            Return Sprocs.eosp_SelectTaxonomyLegislation(source:=Nothing, legislationID:=Nothing, Index_LegislationNameID:=[legislationNameID], Index_Listing:=[listing], Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyLegislation_1(ByVal legislationNameID As Integer, ByVal listing As String, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyLegislationSet
            Return Sprocs.eosp_SelectTaxonomyLegislation(source:=Nothing, legislationID:=Nothing, Index_LegislationNameID:=[legislationNameID], Index_Listing:=[listing], Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomyLegislation
            
            IX_TaxonomyLegislation_1
            
            
        End Enum
    End Class
End Namespace
