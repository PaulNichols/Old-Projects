'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomyCommonName'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomyCommonNameServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomyCommonNameSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomyCommonNameSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomyCommonName", GetType(EntitySet.TaxonomyCommonNameSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomyCommonNameSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomyCommonNameSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyCommonNameServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomyCommonNameServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomyCommonNameSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyCommonName
            Return CType(MyBase.GetById("eosp_SelectTaxonomyCommonName", New String() {"SourceTable", "CommonNameID"}, idColumns, GetType(EntitySet.TaxonomyCommonNameSet), tran),Entity.TaxonomyCommonName)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomyCommonName
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomyCommonName", New String() {"SourceTable", "CommonNameID"}, idColumns, checkSum, transaction)
        End Function
        
        'GetForTaxonomyAreaOfUse - links to the TaxonomyAreaOfUse table...
        Public Overloads Function GetForTaxonomyAreaOfUse(ByVal ID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyCommonNameSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomyCommonName where AreaOfUseI"& _ 
"D=" + ID.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomyCommonNameSet), tran),EntitySet.TaxonomyCommonNameSet)
        End Function
        
        'GetForTaxonomyAreaOfUse - links to the TaxonomyAreaOfUse table...
        Public Overloads Function GetForTaxonomyAreaOfUse(ByVal ID As Integer) As EntitySet.TaxonomyCommonNameSet
            Return Me.GetForTaxonomyAreaOfUse(ID, Nothing)
        End Function
        
        Public Overloads Sub Insert(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomyCommonName(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean)
            Me.Insert(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyCommonName As Entity.TaxonomyCommonName)
            Me.Insert(taxonomyCommonName(0), taxonomyCommonName(1), taxonomyCommonName(2), taxonomyCommonName(3), taxonomyCommonName(4), taxonomyCommonName(5), taxonomyCommonName(6), taxonomyCommonName(7), taxonomyCommonName(8))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomyCommonName As Entity.TaxonomyCommonName, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomyCommonName(0), taxonomyCommonName(1), taxonomyCommonName(2), taxonomyCommonName(3), taxonomyCommonName(4), taxonomyCommonName(5), taxonomyCommonName(6), taxonomyCommonName(7), taxonomyCommonName(8), transaction)
        End Sub
        
        Public Overloads Function Update(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyCommonName
            Return Sprocs.eosp_UpdateTaxonomyCommonName(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean) As Entity.TaxonomyCommonName
            Return Me.Update(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyCommonName
            Return Me.Update(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal sourceTable As Integer, ByVal commonNameID As Integer, ByVal name As String, ByVal productIndicator As Boolean, ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal areaOfUseID As Integer, ByVal active As Boolean, ByVal checkSum As Integer) As Entity.TaxonomyCommonName
            Return Me.Update(sourceTable, commonNameID, name, productIndicator, kingdomID, taxonId, taxonTypeID, areaOfUseID, active, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyCommonName As Entity.TaxonomyCommonName) As Entity.TaxonomyCommonName
            Return Me.Update(taxonomyCommonName(0), taxonomyCommonName(1), taxonomyCommonName(2), taxonomyCommonName(3), taxonomyCommonName(4), taxonomyCommonName(5), taxonomyCommonName(6), taxonomyCommonName(7), taxonomyCommonName(8))
        End Function
        
        Public Overloads Function Update(ByVal taxonomyCommonName As Entity.TaxonomyCommonName, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyCommonName
            Return Me.Update(taxonomyCommonName(0), taxonomyCommonName(1), taxonomyCommonName(2), taxonomyCommonName(3), taxonomyCommonName(4), taxonomyCommonName(5), taxonomyCommonName(6), taxonomyCommonName(7), taxonomyCommonName(8), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyCommonName As Entity.TaxonomyCommonName, ByVal checkSum As Integer) As Entity.TaxonomyCommonName
            Return Me.Update(taxonomyCommonName(0), taxonomyCommonName(1), taxonomyCommonName(2), taxonomyCommonName(3), taxonomyCommonName(4), taxonomyCommonName(5), taxonomyCommonName(6), taxonomyCommonName(7), taxonomyCommonName(8), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomyCommonName As Entity.TaxonomyCommonName, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyCommonName
            Return Me.Update(taxonomyCommonName(0), taxonomyCommonName(1), taxonomyCommonName(2), taxonomyCommonName(3), taxonomyCommonName(4), taxonomyCommonName(5), taxonomyCommonName(6), taxonomyCommonName(7), taxonomyCommonName(8), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyCommonName(ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomyCommonNameSet
            Return Sprocs.eosp_SelectTaxonomyCommonName(sourceTable:=Nothing, commonNameID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonId:=[taxonId], Index_TaxonTypeID:=[taxonTypeID], Index_AreaOfUseID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyCommonName(ByVal kingdomID As Integer, ByVal taxonId As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyCommonNameSet
            Return Sprocs.eosp_SelectTaxonomyCommonName(sourceTable:=Nothing, commonNameID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonId:=[taxonId], Index_TaxonTypeID:=[taxonTypeID], Index_AreaOfUseID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyCommonName_1(ByVal areaOfUseID As Integer) As EntitySet.TaxonomyCommonNameSet
            Return Sprocs.eosp_SelectTaxonomyCommonName(sourceTable:=Nothing, commonNameID:=Nothing, Index_AreaOfUseID:=[areaOfUseID], Index_KingdomID:=Nothing, Index_TaxonId:=Nothing, Index_TaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomyCommonName_1(ByVal areaOfUseID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyCommonNameSet
            Return Sprocs.eosp_SelectTaxonomyCommonName(sourceTable:=Nothing, commonNameID:=Nothing, Index_AreaOfUseID:=[areaOfUseID], Index_KingdomID:=Nothing, Index_TaxonId:=Nothing, Index_TaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomyCommonName
            
            IX_TaxonomyCommonName_1
            
            
        End Enum
    End Class
End Namespace
