'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomyLegislation'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomyLegislation instead.
    Public MustInherit Class TaxonomyLegislationBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal legislationID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(source, legislationID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal source As Integer, ByVal legislationID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(source, legislationID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property Source As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property LegislationID As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property KingdomID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        Public Property LegislationNameID As Integer
            Get
                Return CType(Me(5),Integer)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        Public Property DateListed As Date
            Get
                If (Me.IsDateListedNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(6),Date)
                End If
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(10)>  _
        Public Property Listing As String
            Get
                Return CType(Me(7),String)
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        Public Property IsSplitListed As Boolean
            Get
                Return CType(Me(8),Boolean)
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Property HasHigherTaxonomyProtection As Boolean
            Get
                Return CType(Me(9),Boolean)
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Property ISO2CountryID As Integer
            Get
                If (Me.IsISO2CountryIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(10),Integer)
                End If
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(20)>  _
        Public Property Miscellaneous As String
            Get
                If (Me.IsMiscellaneousNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(11),String)
                End If
            End Get
            Set
                Me(11) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(4000)>  _
        Public Property Note As String
            Get
                If (Me.IsNoteNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(12),String)
                End If
            End Get
            Set
                Me(12) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(13),Integer)
                End If
            End Get
            Set
                Me(13) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomyLegislationService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomyLegislationService)),Service.TaxonomyLegislationService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsDateListedNull() As Boolean
            Return Me.IsNull(6)
        End Function
        
        Public Sub SetDateListedToNull()
            Me(6) = System.DBNull.Value
        End Sub
        
        Public Function IsISO2CountryIDNull() As Boolean
            Return Me.IsNull(10)
        End Function
        
        Public Sub SetISO2CountryIDToNull()
            Me(10) = System.DBNull.Value
        End Sub
        
        Public Function IsMiscellaneousNull() As Boolean
            Return Me.IsNull(11)
        End Function
        
        Public Sub SetMiscellaneousToNull()
            Me(11) = System.DBNull.Value
        End Sub
        
        Public Function IsNoteNull() As Boolean
            Return Me.IsNull(12)
        End Function
        
        Public Sub SetNoteToNull()
            Me(12) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(13)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(13) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(14)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomyLegislationSet
            Return TaxonomyLegislationBase.GetAll(false, false, TaxonomyLegislationServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomyLegislationSet
            Return TaxonomyLegislationBase.GetAll(includeHyphen, false, TaxonomyLegislationServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomyLegislationServiceBase.OrderBy) As EntitySet.TaxonomyLegislationSet
            Dim service As Service.TaxonomyLegislationService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomyLegislationServiceBase.OrderBy) As EntitySet.TaxonomyLegislationSet
            Return TaxonomyLegislationBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal legislationID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomyLegislation
            Dim service As Service.TaxonomyLegislationService
            service = ServiceObject
            Return service.GetById(New Integer() {source, legislationID}, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal source As Integer, ByVal legislationID As Integer) As Entity.TaxonomyLegislation
            Dim service As Service.TaxonomyLegislationService
            service = ServiceObject
            Return service.GetById(New Integer() {source, legislationID})
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal legislationID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomyLegislationService
            service = ServiceObject
            Return service.DeleteById(New Integer() {source, legislationID}, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal legislationID As Integer) As Boolean
            Return TaxonomyLegislationBase.DeleteById(source, legislationID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal source As Integer, ByVal legislationID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomyLegislationBase.DeleteById(source, legislationID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyLegislationName(ByVal legislationNameID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyLegislationSet
            Dim service As Service.TaxonomyLegislationService
            service = ServiceObject
            Return service.GetForTaxonomyLegislationName(legislationNameID, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyLegislationName(ByVal legislationNameID As Integer) As EntitySet.TaxonomyLegislationSet
            Return TaxonomyLegislationBase.GetForTaxonomyLegislationName(legislationNameID, Nothing)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomyLegislationSet
            Dim service As Service.TaxonomyLegislationService
            service = ServiceObject
            Return service.GetForCountry(countryId, tran)
        End Function
        
        Public Overloads Shared Function GetForCountry(ByVal countryId As Integer) As EntitySet.TaxonomyLegislationSet
            Return TaxonomyLegislationBase.GetForCountry(countryId, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal source As Integer, ByVal legislationID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal legislationNameID As Integer, ByVal dateListed As Object, ByVal listing As String, ByVal isSplitListed As Boolean, ByVal hasHigherTaxonomyProtection As Boolean, ByVal iSO2CountryID As Object, ByVal miscellaneous As Object, ByVal note As Object)
            Entity.TaxonomyLegislation.ServiceObject.Insert(source, legislationID, kingdomID, taxonID, taxonTypeID, legislationNameID, dateListed, listing, isSplitListed, hasHigherTaxonomyProtection, iSO2CountryID, miscellaneous, note)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim sourceParam As Integer = Me.Source
            Dim legislationIDParam As Integer = Me.LegislationID
            Dim kingdomIDParam As Integer = Me.KingdomID
            Dim taxonIDParam As Integer = Me.TaxonID
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim legislationNameIDParam As Integer = Me.LegislationNameID
            Dim dateListedParam As Object
            If (Me.IsDateListedNull = false) Then
                dateListedParam = Me.DateListed
            Else
                dateListedParam = System.DBNull.Value
            End If
            Dim listingParam As String = Me.Listing
            Dim isSplitListedParam As Boolean = Me.IsSplitListed
            Dim hasHigherTaxonomyProtectionParam As Boolean = Me.HasHigherTaxonomyProtection
            Dim iSO2CountryIDParam As Object
            If (Me.IsISO2CountryIDNull = false) Then
                iSO2CountryIDParam = Me.ISO2CountryID
            Else
                iSO2CountryIDParam = System.DBNull.Value
            End If
            Dim miscellaneousParam As Object
            If (Me.IsMiscellaneousNull = false) Then
                miscellaneousParam = EnterpriseObjects.Common.ParseSQLText(Me.Miscellaneous)
            Else
                miscellaneousParam = System.DBNull.Value
            End If
            Dim noteParam As Object
            If (Me.IsNoteNull = false) Then
                noteParam = Me.Note
            Else
                noteParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomyLegislation.ServiceObject.Update(sourceParam, legislationIDParam, kingdomIDParam, taxonIDParam, taxonTypeIDParam, legislationNameIDParam, dateListedParam, listingParam, isSplitListedParam, hasHigherTaxonomyProtectionParam, iSO2CountryIDParam, miscellaneousParam, noteParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
