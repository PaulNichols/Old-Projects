'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Base entity implementation for table 'TaxonomySpeciesAquaticDistribution'
    '*DO NOT* modify this file.
    'Add new properties and methods to TaxonomySpeciesAquaticDistribution instead.
    Public MustInherit Class TaxonomySpeciesAquaticDistributionBase
        Inherits EnterpriseObjects.Entity
        Implements EnterpriseObjects.IUpdatable
        
        Private mRawDataset As System.Data.DataSet
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
        End Sub
        
        Public Sub New(ByVal speciesAquaticDistributionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction)
            MyBase.New
            MyBase.Populate(Me.GetById(speciesAquaticDistributionID, tran).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Sub New(ByVal speciesAquaticDistributionID As Integer)
            MyBase.New
            MyBase.Populate(Me.GetById(speciesAquaticDistributionID).RawDataset.Tables(0).Rows(0))
        End Sub
        
        Public Property SpeciesAquaticDistributionID As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Overrides Property Id As Integer
            Get
                Return CType(Me(0),Integer)
            End Get
            Set
                Me(0) = value
            End Set
        End Property
        
        Public Property KingdomId As Integer
            Get
                Return CType(Me(1),Integer)
            End Get
            Set
                Me(1) = value
            End Set
        End Property
        
        Public Property TaxonID As Integer
            Get
                Return CType(Me(2),Integer)
            End Get
            Set
                Me(2) = value
            End Set
        End Property
        
        Public Property TaxonTypeID As Integer
            Get
                Return CType(Me(3),Integer)
            End Get
            Set
                Me(3) = value
            End Set
        End Property
        
        Public Property AquaticRegionID As Integer
            Get
                Return CType(Me(4),Integer)
            End Get
            Set
                Me(4) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Certain As String
            Get
                Return CType(Me(5),String)
            End Get
            Set
                Me(5) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Extinct As String
            Get
                Return CType(Me(6),String)
            End Get
            Set
                Me(6) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property Introduced As String
            Get
                Return CType(Me(7),String)
            End Get
            Set
                Me(7) = value
            End Set
        End Property
        
        <EnterpriseObjects.Attributes.FieldSize(1)>  _
        Public Property ReIntroduced As String
            Get
                Return CType(Me(8),String)
            End Get
            Set
                Me(8) = value
            End Set
        End Property
        
        Public Property SpeciesAquaticDistributionNoteID As Integer
            Get
                If (Me.IsSpeciesAquaticDistributionNoteIDNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(9),Integer)
                End If
            End Get
            Set
                Me(9) = value
            End Set
        End Property
        
        Public Overrides Property CheckSum As Integer Implements EnterpriseObjects.IUpdatable.CheckSum
            Get
                If (Me.IsCheckSumNull = true) Then
                    Return Nothing
                Else
                    Return CType(Me(10),Integer)
                End If
            End Get
            Set
                Me(10) = value
            End Set
        End Property
        
        Public Shared ReadOnly Property ServiceObject As Service.TaxonomySpeciesAquaticDistributionService
            Get
                Return CType(GetServiceObject(GetType(Service.TaxonomySpeciesAquaticDistributionService)),Service.TaxonomySpeciesAquaticDistributionService)
            End Get
        End Property
        
        Public Overridable Property RawDataset As System.Data.DataSet Implements EnterpriseObjects.IUpdatable.RawDataset
            Get
                Return mRawDataset
            End Get
            Set
                mRawDataset = value
            End Set
        End Property
        
        Public Overrides Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.GetObjectData(info, context)
        End Sub
        
        Public Function IsSpeciesAquaticDistributionNoteIDNull() As Boolean
            Return Me.IsNull(9)
        End Function
        
        Public Sub SetSpeciesAquaticDistributionNoteIDToNull()
            Me(9) = System.DBNull.Value
        End Sub
        
        Public Function IsCheckSumNull() As Boolean
            Return Me.IsNull(10)
        End Function
        
        Public Sub SetCheckSumToNull()
            Me(10) = System.DBNull.Value
        End Sub
        
        Public Overrides Sub CreateEmptyEntity()
            MyBase.CreateEmpty(11)
        End Sub
        
        Public Overloads Shared Function GetAll() As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Return TaxonomySpeciesAquaticDistributionBase.GetAll(false, false, TaxonomySpeciesAquaticDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean) As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Return TaxonomySpeciesAquaticDistributionBase.GetAll(includeHyphen, false, TaxonomySpeciesAquaticDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As TaxonomySpeciesAquaticDistributionServiceBase.OrderBy) As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Dim service As Service.TaxonomySpeciesAquaticDistributionService
            service = ServiceObject
            Return service.GetAll(includeHyphen, includeInactive, orderBy)
        End Function
        
        Public Overloads Shared Function GetAll(ByVal orderBy As TaxonomySpeciesAquaticDistributionServiceBase.OrderBy) As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Return TaxonomySpeciesAquaticDistributionBase.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Shared Function GetById(ByVal speciesAquaticDistributionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesAquaticDistribution
            Dim service As Service.TaxonomySpeciesAquaticDistributionService
            service = ServiceObject
            Return service.GetById(SpeciesAquaticDistributionID, tran)
        End Function
        
        Public Overloads Shared Function GetById(ByVal speciesAquaticDistributionID As Integer) As Entity.TaxonomySpeciesAquaticDistribution
            Dim service As Service.TaxonomySpeciesAquaticDistributionService
            service = ServiceObject
            Return service.GetById(SpeciesAquaticDistributionID)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal speciesAquaticDistributionID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Dim service As Service.TaxonomySpeciesAquaticDistributionService
            service = ServiceObject
            Return service.DeleteById(speciesAquaticDistributionID, checkSum, transaction)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal speciesAquaticDistributionID As Integer) As Boolean
            Return TaxonomySpeciesAquaticDistributionBase.DeleteById(speciesAquaticDistributionID, 0, Nothing)
        End Function
        
        Public Overloads Shared Function DeleteById(ByVal speciesAquaticDistributionID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return TaxonomySpeciesAquaticDistributionBase.DeleteById(speciesAquaticDistributionID, 0, transaction)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyAquaticRegion(ByVal aquaticRegionID As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Dim service As Service.TaxonomySpeciesAquaticDistributionService
            service = ServiceObject
            Return service.GetForTaxonomyAquaticRegion(aquaticRegionID, tran)
        End Function
        
        Public Overloads Shared Function GetForTaxonomyAquaticRegion(ByVal aquaticRegionID As Integer) As EntitySet.TaxonomySpeciesAquaticDistributionSet
            Return TaxonomySpeciesAquaticDistributionBase.GetForTaxonomyAquaticRegion(aquaticRegionID, Nothing)
        End Function
        
        Public Shared Sub Insert(ByVal speciesAquaticDistributionID As Integer, ByVal kingdomId As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal aquaticRegionID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal speciesAquaticDistributionNoteID As Object)
            Entity.TaxonomySpeciesAquaticDistribution.ServiceObject.Insert(speciesAquaticDistributionID, kingdomId, taxonID, taxonTypeID, aquaticRegionID, certain, extinct, introduced, reIntroduced, speciesAquaticDistributionNoteID)
        End Sub
        
        Public Overridable Function SaveChanges() As Boolean Implements EnterpriseObjects.IUpdatable.SaveChanges
            'line up the update params...
            Dim kingdomIdParam As Integer = Me.KingdomId
            Dim taxonIDParam As Integer = Me.TaxonID
            Dim taxonTypeIDParam As Integer = Me.TaxonTypeID
            Dim aquaticRegionIDParam As Integer = Me.AquaticRegionID
            Dim certainParam As String = Me.Certain
            Dim extinctParam As String = Me.Extinct
            Dim introducedParam As String = Me.Introduced
            Dim reIntroducedParam As String = Me.ReIntroduced
            Dim speciesAquaticDistributionNoteIDParam As Object
            If (Me.IsSpeciesAquaticDistributionNoteIDNull = false) Then
                speciesAquaticDistributionNoteIDParam = Me.SpeciesAquaticDistributionNoteID
            Else
                speciesAquaticDistributionNoteIDParam = System.DBNull.Value
            End If
            Dim checkSum As Integer
            If (Me.UseConcurrency = true) Then
                checkSum = Me.CheckSum
            Else
                checkSum = 0
            End If
            Dim Result As uk.gov.defra.EnterpriseObjects.Entity = Entity.TaxonomySpeciesAquaticDistribution.ServiceObject.Update(Me.Id, kingdomIdParam, taxonIDParam, taxonTypeIDParam, aquaticRegionIDParam, certainParam, extinctParam, introducedParam, reIntroducedParam, speciesAquaticDistributionNoteIDParam, checkSum)
            If (Me.UseConcurrency = true) Then
                Me.CheckSum = Result.checkSum
            End If
            Return (Not (Result) Is Nothing)
        End Function
    End Class
End Namespace
