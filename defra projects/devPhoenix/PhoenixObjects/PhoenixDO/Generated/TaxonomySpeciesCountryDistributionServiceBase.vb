'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace DataObjects.Base
    
    'Service base implementation for table 'TaxonomySpeciesCountryDistribution'
    '*DO NOT* add your modifications to this file
    Public MustInherit Class TaxonomySpeciesCountryDistributionServiceBase
        Inherits EnterpriseObjects.Service
        Implements EnterpriseObjects.IServiceAll
        
        Protected Overrides ReadOnly Property HasStates As Boolean
            Get
                Return false
            End Get
        End Property
        
        Public Overloads Overridable Function GetAll() As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Me.GetAll(false, false, OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean, ByVal orderBy As OrderBy) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return CType(MyBase.GetAll("eosp_SelectTaxonomySpeciesCountryDistribution", GetType(EntitySet.TaxonomySpeciesCountryDistributionSet), includeHyphen, includeInactive, orderBy),EntitySet.TaxonomySpeciesCountryDistributionSet)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomySpeciesCountryDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAllInternal(ByVal includeHyphen As Boolean, ByVal includeInactive As Boolean) As EnterpriseObjects.EntitySet Implements EnterpriseObjects.IServiceAll.GetAllInternal
            Return Me.GetAll(includeHyphen, includeInactive, TaxonomySpeciesCountryDistributionServiceBase.OrderBy.DefaultOrder)
        End Function
        
        Public Overloads Overridable Function GetAll(ByVal orderBy As OrderBy) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Me.GetAll(false, false, orderBy)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesCountryDistribution
            Return CType(MyBase.GetById("eosp_SelectTaxonomySpeciesCountryDistribution", New String() {"Source", "SpeciesCountryDistributionID"}, idColumns, GetType(EntitySet.TaxonomySpeciesCountryDistributionSet), tran),Entity.TaxonomySpeciesCountryDistribution)
        End Function
        
        Public Overloads Function GetById(ByVal idColumns() As Integer) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.GetById(idColumns, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer) As Boolean
            Return Me.DeleteById(idColumns, checkSum, Nothing)
        End Function
        
        Public Overloads Function DeleteById(ByVal idColumns() As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Boolean
            Return MyBase.DeleteById("eosp_DeleteTaxonomySpeciesCountryDistribution", New String() {"Source", "SpeciesCountryDistributionID"}, idColumns, checkSum, transaction)
        End Function
        
        'GetForCountry - links to the Country table...
        Public Overloads Function GetForCountry(ByVal CountryId As Integer, ByVal tran As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Dim sql As String
            sql = ("select *, binary_checksum(*) As checkSum from TaxonomySpeciesCountryDistribution "& _ 
"where CountryID=" + CountryId.ToString)
            Return CType(Me.GetEntitySet(sql, GetType(EntitySet.TaxonomySpeciesCountryDistributionSet), tran),EntitySet.TaxonomySpeciesCountryDistributionSet)
        End Function
        
        'GetForCountry - links to the Country table...
        Public Overloads Function GetForCountry(ByVal CountryId As Integer) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Me.GetForCountry(CountryId, Nothing)
        End Function
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Sprocs.eosp_CreateTaxonomySpeciesCountryDistribution(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID, transaction)
        End Sub
        
        Public Overloads Sub Insert(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer)
            Me.Insert(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID, Nothing)
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomySpeciesCountryDistribution As Entity.TaxonomySpeciesCountryDistribution)
            Me.Insert(taxonomySpeciesCountryDistribution(0), taxonomySpeciesCountryDistribution(1), taxonomySpeciesCountryDistribution(2), taxonomySpeciesCountryDistribution(3), taxonomySpeciesCountryDistribution(4), taxonomySpeciesCountryDistribution(5), taxonomySpeciesCountryDistribution(6), taxonomySpeciesCountryDistribution(7), taxonomySpeciesCountryDistribution(8), taxonomySpeciesCountryDistribution(9), taxonomySpeciesCountryDistribution(10), taxonomySpeciesCountryDistribution(11), taxonomySpeciesCountryDistribution(12))
        End Sub
        
        Public Overloads Sub Insert(ByVal taxonomySpeciesCountryDistribution As Entity.TaxonomySpeciesCountryDistribution, ByVal transaction As System.Data.SqlClient.SqlTransaction)
            Me.Insert(taxonomySpeciesCountryDistribution(0), taxonomySpeciesCountryDistribution(1), taxonomySpeciesCountryDistribution(2), taxonomySpeciesCountryDistribution(3), taxonomySpeciesCountryDistribution(4), taxonomySpeciesCountryDistribution(5), taxonomySpeciesCountryDistribution(6), taxonomySpeciesCountryDistribution(7), taxonomySpeciesCountryDistribution(8), taxonomySpeciesCountryDistribution(9), taxonomySpeciesCountryDistribution(10), taxonomySpeciesCountryDistribution(11), taxonomySpeciesCountryDistribution(12), transaction)
        End Sub
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesCountryDistribution
            Return Sprocs.eosp_UpdateTaxonomySpeciesCountryDistribution(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID, checkSum, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID, 0, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID, 0, transaction)
        End Function
        
        Public Overloads Function Update(ByVal source As Integer, ByVal speciesCountryDistributionID As Integer, ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal certain As String, ByVal extinct As String, ByVal introduced As String, ByVal reIntroduced As String, ByVal breeding As String, ByVal vagrant As String, ByVal noteID As Object, ByVal countryID As Integer, ByVal checkSum As Integer) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(source, speciesCountryDistributionID, kingdomID, taxonID, taxonTypeID, certain, extinct, introduced, reIntroduced, breeding, vagrant, noteID, countryID, checkSum, Nothing)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesCountryDistribution As Entity.TaxonomySpeciesCountryDistribution) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(taxonomySpeciesCountryDistribution(0), taxonomySpeciesCountryDistribution(1), taxonomySpeciesCountryDistribution(2), taxonomySpeciesCountryDistribution(3), taxonomySpeciesCountryDistribution(4), taxonomySpeciesCountryDistribution(5), taxonomySpeciesCountryDistribution(6), taxonomySpeciesCountryDistribution(7), taxonomySpeciesCountryDistribution(8), taxonomySpeciesCountryDistribution(9), taxonomySpeciesCountryDistribution(10), taxonomySpeciesCountryDistribution(11), taxonomySpeciesCountryDistribution(12))
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesCountryDistribution As Entity.TaxonomySpeciesCountryDistribution, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(taxonomySpeciesCountryDistribution(0), taxonomySpeciesCountryDistribution(1), taxonomySpeciesCountryDistribution(2), taxonomySpeciesCountryDistribution(3), taxonomySpeciesCountryDistribution(4), taxonomySpeciesCountryDistribution(5), taxonomySpeciesCountryDistribution(6), taxonomySpeciesCountryDistribution(7), taxonomySpeciesCountryDistribution(8), taxonomySpeciesCountryDistribution(9), taxonomySpeciesCountryDistribution(10), taxonomySpeciesCountryDistribution(11), taxonomySpeciesCountryDistribution(12), transaction)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesCountryDistribution As Entity.TaxonomySpeciesCountryDistribution, ByVal checkSum As Integer) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(taxonomySpeciesCountryDistribution(0), taxonomySpeciesCountryDistribution(1), taxonomySpeciesCountryDistribution(2), taxonomySpeciesCountryDistribution(3), taxonomySpeciesCountryDistribution(4), taxonomySpeciesCountryDistribution(5), taxonomySpeciesCountryDistribution(6), taxonomySpeciesCountryDistribution(7), taxonomySpeciesCountryDistribution(8), taxonomySpeciesCountryDistribution(9), taxonomySpeciesCountryDistribution(10), taxonomySpeciesCountryDistribution(11), taxonomySpeciesCountryDistribution(12), checkSum)
        End Function
        
        Public Overloads Function Update(ByVal taxonomySpeciesCountryDistribution As Entity.TaxonomySpeciesCountryDistribution, ByVal checkSum As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As Entity.TaxonomySpeciesCountryDistribution
            Return Me.Update(taxonomySpeciesCountryDistribution(0), taxonomySpeciesCountryDistribution(1), taxonomySpeciesCountryDistribution(2), taxonomySpeciesCountryDistribution(3), taxonomySpeciesCountryDistribution(4), taxonomySpeciesCountryDistribution(5), taxonomySpeciesCountryDistribution(6), taxonomySpeciesCountryDistribution(7), taxonomySpeciesCountryDistribution(8), taxonomySpeciesCountryDistribution(9), taxonomySpeciesCountryDistribution(10), taxonomySpeciesCountryDistribution(11), taxonomySpeciesCountryDistribution(12), checkSum, transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesCountryDistribution(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesCountryDistribution(source:=Nothing, speciesCountryDistributionID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_CountryID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesCountryDistribution(ByVal kingdomID As Integer, ByVal taxonID As Integer, ByVal taxonTypeID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesCountryDistribution(source:=Nothing, speciesCountryDistributionID:=Nothing, Index_KingdomID:=[kingdomID], Index_TaxonID:=[taxonID], Index_TaxonTypeID:=[taxonTypeID], Index_CountryID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesCountryDistribution_1(ByVal countryID As Integer) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesCountryDistribution(source:=Nothing, speciesCountryDistributionID:=Nothing, Index_CountryID:=[countryID], Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, transaction:=Nothing, sortOrder:=0)
        End Function
        
        Public Overloads Function GetByIndex_IX_TaxonomySpeciesCountryDistribution_1(ByVal countryID As Integer, ByVal transaction As System.Data.SqlClient.SqlTransaction) As EntitySet.TaxonomySpeciesCountryDistributionSet
            Return Sprocs.eosp_SelectTaxonomySpeciesCountryDistribution(source:=Nothing, speciesCountryDistributionID:=Nothing, Index_CountryID:=[countryID], Index_KingdomID:=Nothing, Index_TaxonID:=Nothing, Index_TaxonTypeID:=Nothing, sortOrder:=0, transaction:=transaction)
        End Function
        
        Public Enum OrderBy
            
            DefaultOrder
            
            IX_TaxonomySpeciesCountryDistribution
            
            IX_TaxonomySpeciesCountryDistribution_1
            
            
        End Enum
    End Class
End Namespace
