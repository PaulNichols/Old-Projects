//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace CMS {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ServiceElementsDS : DataSet {
        
        private ElementDataTable tableElement;
        
        private SLADetailDataTable tableSLADetail;
        
        public ServiceElementsDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ServiceElementsDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Element"] != null)) {
                    this.Tables.Add(new ElementDataTable(ds.Tables["Element"]));
                }
                if ((ds.Tables["SLADetail"] != null)) {
                    this.Tables.Add(new SLADetailDataTable(ds.Tables["SLADetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ElementDataTable Element {
            get {
                return this.tableElement;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SLADetailDataTable SLADetail {
            get {
                return this.tableSLADetail;
            }
        }
        
        public override DataSet Clone() {
            ServiceElementsDS cln = ((ServiceElementsDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Element"] != null)) {
                this.Tables.Add(new ElementDataTable(ds.Tables["Element"]));
            }
            if ((ds.Tables["SLADetail"] != null)) {
                this.Tables.Add(new SLADetailDataTable(ds.Tables["SLADetail"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableElement = ((ElementDataTable)(this.Tables["Element"]));
            if ((this.tableElement != null)) {
                this.tableElement.InitVars();
            }
            this.tableSLADetail = ((SLADetailDataTable)(this.Tables["SLADetail"]));
            if ((this.tableSLADetail != null)) {
                this.tableSLADetail.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ServiceElementsDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableElement = new ElementDataTable();
            this.Tables.Add(this.tableElement);
            this.tableSLADetail = new SLADetailDataTable();
            this.Tables.Add(this.tableSLADetail);
        }
        
        private bool ShouldSerializeElement() {
            return false;
        }
        
        private bool ShouldSerializeSLADetail() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ElementRowChangeEventHandler(object sender, ElementRowChangeEvent e);
        
        public delegate void SLADetailRowChangeEventHandler(object sender, SLADetailRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnElementId;
            
            private DataColumn columnRef;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLastMonth;
            
            private DataColumn columnParentElementId;
            
            private DataColumn columnCommentary;
            
            private DataColumn columnThisMonth;
            
            private DataColumn columnNextMonth;
            
            private DataColumn columnSLADetailId;
            
            private DataColumn columnLevelDescription;
            
            private DataColumn columnGThreshold;
            
            private DataColumn columnAThreshold;
            
            private DataColumn columnRThreshold;
            
            private DataColumn columnRTLastMonth;
            
            private DataColumn columnRTThisMonth;
            
            private DataColumn columnTarget;
            
            private DataColumn columnLevel;
            
            internal ElementDataTable() : 
                    base("Element") {
                this.InitClass();
            }
            
            internal ElementDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ElementIdColumn {
                get {
                    return this.columnElementId;
                }
            }
            
            internal DataColumn RefColumn {
                get {
                    return this.columnRef;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LastMonthColumn {
                get {
                    return this.columnLastMonth;
                }
            }
            
            internal DataColumn ParentElementIdColumn {
                get {
                    return this.columnParentElementId;
                }
            }
            
            internal DataColumn CommentaryColumn {
                get {
                    return this.columnCommentary;
                }
            }
            
            internal DataColumn ThisMonthColumn {
                get {
                    return this.columnThisMonth;
                }
            }
            
            internal DataColumn NextMonthColumn {
                get {
                    return this.columnNextMonth;
                }
            }
            
            internal DataColumn SLADetailIdColumn {
                get {
                    return this.columnSLADetailId;
                }
            }
            
            internal DataColumn LevelDescriptionColumn {
                get {
                    return this.columnLevelDescription;
                }
            }
            
            internal DataColumn GThresholdColumn {
                get {
                    return this.columnGThreshold;
                }
            }
            
            internal DataColumn AThresholdColumn {
                get {
                    return this.columnAThreshold;
                }
            }
            
            internal DataColumn RThresholdColumn {
                get {
                    return this.columnRThreshold;
                }
            }
            
            internal DataColumn RTLastMonthColumn {
                get {
                    return this.columnRTLastMonth;
                }
            }
            
            internal DataColumn RTThisMonthColumn {
                get {
                    return this.columnRTThisMonth;
                }
            }
            
            internal DataColumn TargetColumn {
                get {
                    return this.columnTarget;
                }
            }
            
            internal DataColumn LevelColumn {
                get {
                    return this.columnLevel;
                }
            }
            
            public ElementRow this[int index] {
                get {
                    return ((ElementRow)(this.Rows[index]));
                }
            }
            
            public event ElementRowChangeEventHandler ElementRowChanged;
            
            public event ElementRowChangeEventHandler ElementRowChanging;
            
            public event ElementRowChangeEventHandler ElementRowDeleted;
            
            public event ElementRowChangeEventHandler ElementRowDeleting;
            
            public void AddElementRow(ElementRow row) {
                this.Rows.Add(row);
            }
            
            public ElementRow AddElementRow(
                        string Ref, 
                        string Description, 
                        System.Decimal LastMonth, 
                        System.Decimal ParentElementId, 
                        string Commentary, 
                        System.Decimal ThisMonth, 
                        System.Decimal NextMonth, 
                        int SLADetailId, 
                        string LevelDescription, 
                        System.Decimal GThreshold, 
                        System.Decimal AThreshold, 
                        System.Decimal RThreshold, 
                        bool RTLastMonth, 
                        bool RTThisMonth, 
                        System.Decimal Target, 
                        int Level) {
                ElementRow rowElementRow = ((ElementRow)(this.NewRow()));
                rowElementRow.ItemArray = new object[] {
                        null,
                        Ref,
                        Description,
                        LastMonth,
                        ParentElementId,
                        Commentary,
                        ThisMonth,
                        NextMonth,
                        SLADetailId,
                        LevelDescription,
                        GThreshold,
                        AThreshold,
                        RThreshold,
                        RTLastMonth,
                        RTThisMonth,
                        Target,
                        Level};
                this.Rows.Add(rowElementRow);
                return rowElementRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ElementDataTable cln = ((ElementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ElementDataTable();
            }
            
            internal void InitVars() {
                this.columnElementId = this.Columns["ElementId"];
                this.columnRef = this.Columns["Ref"];
                this.columnDescription = this.Columns["Description"];
                this.columnLastMonth = this.Columns["LastMonth"];
                this.columnParentElementId = this.Columns["ParentElementId"];
                this.columnCommentary = this.Columns["Commentary"];
                this.columnThisMonth = this.Columns["ThisMonth"];
                this.columnNextMonth = this.Columns["NextMonth"];
                this.columnSLADetailId = this.Columns["SLADetailId"];
                this.columnLevelDescription = this.Columns["LevelDescription"];
                this.columnGThreshold = this.Columns["GThreshold"];
                this.columnAThreshold = this.Columns["AThreshold"];
                this.columnRThreshold = this.Columns["RThreshold"];
                this.columnRTLastMonth = this.Columns["RTLastMonth"];
                this.columnRTThisMonth = this.Columns["RTThisMonth"];
                this.columnTarget = this.Columns["Target"];
                this.columnLevel = this.Columns["Level"];
            }
            
            private void InitClass() {
                this.columnElementId = new DataColumn("ElementId", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnElementId);
                this.columnRef = new DataColumn("Ref", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRef);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnLastMonth = new DataColumn("LastMonth", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLastMonth);
                this.columnParentElementId = new DataColumn("ParentElementId", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnParentElementId);
                this.columnCommentary = new DataColumn("Commentary", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCommentary);
                this.columnThisMonth = new DataColumn("ThisMonth", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnThisMonth);
                this.columnNextMonth = new DataColumn("NextMonth", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnNextMonth);
                this.columnSLADetailId = new DataColumn("SLADetailId", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSLADetailId);
                this.columnLevelDescription = new DataColumn("LevelDescription", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLevelDescription);
                this.columnGThreshold = new DataColumn("GThreshold", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnGThreshold);
                this.columnAThreshold = new DataColumn("AThreshold", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAThreshold);
                this.columnRThreshold = new DataColumn("RThreshold", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRThreshold);
                this.columnRTLastMonth = new DataColumn("RTLastMonth", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRTLastMonth);
                this.columnRTThisMonth = new DataColumn("RTThisMonth", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRTThisMonth);
                this.columnTarget = new DataColumn("Target", typeof(System.Decimal), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTarget);
                this.columnLevel = new DataColumn("Level", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLevel);
                this.columnElementId.AutoIncrement = true;
                this.columnElementId.AutoIncrementSeed = 1;
                this.columnElementId.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnRef.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnDescription.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnLastMonth.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnParentElementId.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnCommentary.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnThisMonth.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnNextMonth.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnSLADetailId.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnLevelDescription.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnGThreshold.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnAThreshold.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnRThreshold.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnRTLastMonth.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnRTThisMonth.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnTarget.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
                this.columnLevel.Namespace = "http://tempuri.org/ServiceElementsDS.xsd";
            }
            
            public ElementRow NewElementRow() {
                return ((ElementRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ElementRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ElementRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ElementRowChanged != null)) {
                    this.ElementRowChanged(this, new ElementRowChangeEvent(((ElementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ElementRowChanging != null)) {
                    this.ElementRowChanging(this, new ElementRowChangeEvent(((ElementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ElementRowDeleted != null)) {
                    this.ElementRowDeleted(this, new ElementRowChangeEvent(((ElementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ElementRowDeleting != null)) {
                    this.ElementRowDeleting(this, new ElementRowChangeEvent(((ElementRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveElementRow(ElementRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementRow : DataRow {
            
            private ElementDataTable tableElement;
            
            internal ElementRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableElement = ((ElementDataTable)(this.Table));
            }
            
            public int ElementId {
                get {
                    try {
                        return ((int)(this[this.tableElement.ElementIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.ElementIdColumn] = value;
                }
            }
            
            public string Ref {
                get {
                    try {
                        return ((string)(this[this.tableElement.RefColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.RefColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableElement.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.DescriptionColumn] = value;
                }
            }
            
            public System.Decimal LastMonth {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.LastMonthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.LastMonthColumn] = value;
                }
            }
            
            public System.Decimal ParentElementId {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.ParentElementIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.ParentElementIdColumn] = value;
                }
            }
            
            public string Commentary {
                get {
                    try {
                        return ((string)(this[this.tableElement.CommentaryColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.CommentaryColumn] = value;
                }
            }
            
            public System.Decimal ThisMonth {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.ThisMonthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.ThisMonthColumn] = value;
                }
            }
            
            public System.Decimal NextMonth {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.NextMonthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.NextMonthColumn] = value;
                }
            }
            
            public int SLADetailId {
                get {
                    try {
                        return ((int)(this[this.tableElement.SLADetailIdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.SLADetailIdColumn] = value;
                }
            }
            
            public string LevelDescription {
                get {
                    try {
                        return ((string)(this[this.tableElement.LevelDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.LevelDescriptionColumn] = value;
                }
            }
            
            public System.Decimal GThreshold {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.GThresholdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.GThresholdColumn] = value;
                }
            }
            
            public System.Decimal AThreshold {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.AThresholdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.AThresholdColumn] = value;
                }
            }
            
            public System.Decimal RThreshold {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.RThresholdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.RThresholdColumn] = value;
                }
            }
            
            public bool RTLastMonth {
                get {
                    try {
                        return ((bool)(this[this.tableElement.RTLastMonthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.RTLastMonthColumn] = value;
                }
            }
            
            public bool RTThisMonth {
                get {
                    try {
                        return ((bool)(this[this.tableElement.RTThisMonthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.RTThisMonthColumn] = value;
                }
            }
            
            public System.Decimal Target {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableElement.TargetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.TargetColumn] = value;
                }
            }
            
            public int Level {
                get {
                    try {
                        return ((int)(this[this.tableElement.LevelColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableElement.LevelColumn] = value;
                }
            }
            
            public bool IsElementIdNull() {
                return this.IsNull(this.tableElement.ElementIdColumn);
            }
            
            public void SetElementIdNull() {
                this[this.tableElement.ElementIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRefNull() {
                return this.IsNull(this.tableElement.RefColumn);
            }
            
            public void SetRefNull() {
                this[this.tableElement.RefColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableElement.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableElement.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLastMonthNull() {
                return this.IsNull(this.tableElement.LastMonthColumn);
            }
            
            public void SetLastMonthNull() {
                this[this.tableElement.LastMonthColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentElementIdNull() {
                return this.IsNull(this.tableElement.ParentElementIdColumn);
            }
            
            public void SetParentElementIdNull() {
                this[this.tableElement.ParentElementIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsCommentaryNull() {
                return this.IsNull(this.tableElement.CommentaryColumn);
            }
            
            public void SetCommentaryNull() {
                this[this.tableElement.CommentaryColumn] = System.Convert.DBNull;
            }
            
            public bool IsThisMonthNull() {
                return this.IsNull(this.tableElement.ThisMonthColumn);
            }
            
            public void SetThisMonthNull() {
                this[this.tableElement.ThisMonthColumn] = System.Convert.DBNull;
            }
            
            public bool IsNextMonthNull() {
                return this.IsNull(this.tableElement.NextMonthColumn);
            }
            
            public void SetNextMonthNull() {
                this[this.tableElement.NextMonthColumn] = System.Convert.DBNull;
            }
            
            public bool IsSLADetailIdNull() {
                return this.IsNull(this.tableElement.SLADetailIdColumn);
            }
            
            public void SetSLADetailIdNull() {
                this[this.tableElement.SLADetailIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelDescriptionNull() {
                return this.IsNull(this.tableElement.LevelDescriptionColumn);
            }
            
            public void SetLevelDescriptionNull() {
                this[this.tableElement.LevelDescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsGThresholdNull() {
                return this.IsNull(this.tableElement.GThresholdColumn);
            }
            
            public void SetGThresholdNull() {
                this[this.tableElement.GThresholdColumn] = System.Convert.DBNull;
            }
            
            public bool IsAThresholdNull() {
                return this.IsNull(this.tableElement.AThresholdColumn);
            }
            
            public void SetAThresholdNull() {
                this[this.tableElement.AThresholdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRThresholdNull() {
                return this.IsNull(this.tableElement.RThresholdColumn);
            }
            
            public void SetRThresholdNull() {
                this[this.tableElement.RThresholdColumn] = System.Convert.DBNull;
            }
            
            public bool IsRTLastMonthNull() {
                return this.IsNull(this.tableElement.RTLastMonthColumn);
            }
            
            public void SetRTLastMonthNull() {
                this[this.tableElement.RTLastMonthColumn] = System.Convert.DBNull;
            }
            
            public bool IsRTThisMonthNull() {
                return this.IsNull(this.tableElement.RTThisMonthColumn);
            }
            
            public void SetRTThisMonthNull() {
                this[this.tableElement.RTThisMonthColumn] = System.Convert.DBNull;
            }
            
            public bool IsTargetNull() {
                return this.IsNull(this.tableElement.TargetColumn);
            }
            
            public void SetTargetNull() {
                this[this.tableElement.TargetColumn] = System.Convert.DBNull;
            }
            
            public bool IsLevelNull() {
                return this.IsNull(this.tableElement.LevelColumn);
            }
            
            public void SetLevelNull() {
                this[this.tableElement.LevelColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ElementRowChangeEvent : EventArgs {
            
            private ElementRow eventRow;
            
            private DataRowAction eventAction;
            
            public ElementRowChangeEvent(ElementRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ElementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SLADetailDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnSLADetailId;
            
            internal SLADetailDataTable() : 
                    base("SLADetail") {
                this.InitClass();
            }
            
            internal SLADetailDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn SLADetailIdColumn {
                get {
                    return this.columnSLADetailId;
                }
            }
            
            public SLADetailRow this[int index] {
                get {
                    return ((SLADetailRow)(this.Rows[index]));
                }
            }
            
            public event SLADetailRowChangeEventHandler SLADetailRowChanged;
            
            public event SLADetailRowChangeEventHandler SLADetailRowChanging;
            
            public event SLADetailRowChangeEventHandler SLADetailRowDeleted;
            
            public event SLADetailRowChangeEventHandler SLADetailRowDeleting;
            
            public void AddSLADetailRow(SLADetailRow row) {
                this.Rows.Add(row);
            }
            
            public SLADetailRow AddSLADetailRow(int SLADetailId) {
                SLADetailRow rowSLADetailRow = ((SLADetailRow)(this.NewRow()));
                rowSLADetailRow.ItemArray = new object[] {
                        SLADetailId};
                this.Rows.Add(rowSLADetailRow);
                return rowSLADetailRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SLADetailDataTable cln = ((SLADetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SLADetailDataTable();
            }
            
            internal void InitVars() {
                this.columnSLADetailId = this.Columns["SLADetailId"];
            }
            
            private void InitClass() {
                this.columnSLADetailId = new DataColumn("SLADetailId", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSLADetailId);
                this.columnSLADetailId.AllowDBNull = false;
            }
            
            public SLADetailRow NewSLADetailRow() {
                return ((SLADetailRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SLADetailRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SLADetailRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SLADetailRowChanged != null)) {
                    this.SLADetailRowChanged(this, new SLADetailRowChangeEvent(((SLADetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SLADetailRowChanging != null)) {
                    this.SLADetailRowChanging(this, new SLADetailRowChangeEvent(((SLADetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SLADetailRowDeleted != null)) {
                    this.SLADetailRowDeleted(this, new SLADetailRowChangeEvent(((SLADetailRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SLADetailRowDeleting != null)) {
                    this.SLADetailRowDeleting(this, new SLADetailRowChangeEvent(((SLADetailRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSLADetailRow(SLADetailRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SLADetailRow : DataRow {
            
            private SLADetailDataTable tableSLADetail;
            
            internal SLADetailRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSLADetail = ((SLADetailDataTable)(this.Table));
            }
            
            public int SLADetailId {
                get {
                    return ((int)(this[this.tableSLADetail.SLADetailIdColumn]));
                }
                set {
                    this[this.tableSLADetail.SLADetailIdColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SLADetailRowChangeEvent : EventArgs {
            
            private SLADetailRow eventRow;
            
            private DataRowAction eventAction;
            
            public SLADetailRowChangeEvent(SLADetailRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SLADetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
