var timerId = null; var previousMenuItemId = null; var clicked = false; var scrollIntervalId = null; var previousControlId = null; var SCROLL_INTERVAL = 100; var ROOT_ID = "00";  function displayMouseOver(menuItemId, orientation, expandDelay, itemOverClass, status, offsetX, offsetY) {  var menuItem = document.getElementById(menuItemId);  displayCommonMouseOver(menuItem, itemOverClass, status);    refreshMenu(menuItem, orientation, expandDelay, offsetX, offsetY); }  function displayRootMouseOver(rootItemId, openOnClick, orientation, expandDelay, itemOverClass, status, offsetX, offsetY) {  var rootItem = document.getElementById(rootItemId);  displayCommonMouseOver(rootItem , itemOverClass , status);  checkPreviousControl(rootItem);    if((openOnClick && clicked) || !openOnClick)   refreshMenu(rootItem, orientation, expandDelay, offsetX, offsetY); }  function openLink(href, target) {  window.open(href, target); }   function openMenu(rootItemId, orientation, expandDelay, itemOverClass, status, offsetX, offsetY) {  if (!clicked)  {   var rootItem = document.getElementById(rootItemId);   clicked = true;   refreshMenu(rootItem, orientation, expandDelay, offsetX, offsetY);  } }   function displayMouseOut(menuItemId, normalItemClass) {  var menuItem = document.getElementById(menuItemId);  menuItem.className = normalItemClass;  window.status = ""; }    function scroll(scrollId, direction, itemOverClass) {  var scrollItem = document.getElementById(scrollId);    displayCommonMouseOver(scrollItem, itemOverClass, status);    var menuGroup = findParentGroup(scrollItem);   if(scrollId != previousMenuItemId)  {   hideMenu(menuGroup);   previousMenuItemId = scrollId;  }     if(scrollIntervalId == null)   scrollIntervalId = setInterval("scrollGroup( '" + menuGroup.id + "', '" + direction + "')", SCROLL_INTERVAL); }     function displayScrollOut(scrollId, normalItemClass) {  displayMouseOut(scrollId, normalItemClass);    cancelScroll(); } function refreshMenu(menuItem, orientation, expandDelay, offsetX, offsetY) {   if(previousMenuItemId != menuItem.id)  {   var parentGroup = findParentGroup(menuItem);   hideMenu(parentGroup, menuItem);      previousMenuItemId = menuItem.id;      var childGroup= findChildGroup(menuItem);       if(childGroup != null)   {     if(childGroup.style.visibility == "hidden")     setTimeout("displayMenu( '" + menuItem.id + "', '"+ childGroup.id + "', " + orientation + ", " + offsetX + ", " + offsetY + ")", expandDelay);   }  } }   function displayMenu(menuItemId, menuGroupId, orientation, offsetX, offsetY) {  displayMenuTimerId = null;     if(menuItemId == previousMenuItemId)  {   var menuGroup = document.getElementById(menuGroupId);      positionLeft(menuGroup, orientation, offsetX);   positionTop(menuGroup, orientation, offsetY);       displaySelectElements(menuGroup, "hidden");    if(menuGroup.filters[1] == null)   {    menuGroup.style.visibility = "visible";    setScrollVisibility(menuGroup, "visible");   }   else    displayEffect(menuGroup);  } }    function positionLeft(menuGroup, orientation, offsetX) {  var proposedOffsetLeft;  var previousGroup = findPreviousGroup(menuGroup);     var menuWidth = menuGroup.offsetWidth;  var parentContainerLeft = findParentContainerLeft(menuGroup);  var windowWidth = document.body.clientWidth;  var visibleLeft = document.body.scrollLeft;    if(((orientation == 0) && isRootGroup(previousGroup)) || (orientation == 2))  {   var parentItem = findParentItem(menuGroup);      var parentItemLeft = findParentItemLeft(previousGroup, parentItem);   var parentItemWidth = parentItem.offsetWidth;      proposedOffsetLeft = parentItemLeft - menuGroup.clientLeft;    if(orientation == 2)    proposedOffsetLeft += offsetX;      if(tooFarRight(proposedOffsetLeft, menuWidth, parentContainerLeft, visibleLeft, windowWidth))   {     proposedOffsetLeft = parentItemLeft + parentItemWidth - menuWidth + menuGroup.clientLeft;         if(orientation == 2)     proposedOffsetLeft -= offsetX;        if(tooFarLeft(proposedOffsetLeft, visibleLeft, parentContainerLeft))     proposedOffsetLeft = parentContainerLeft * -1 + visibleLeft;   }  }  else  {     var previousOffsetLeft = previousGroup.offsetLeft;   var previousWidth = previousGroup.offsetWidth;    proposedOffsetLeft = previousOffsetLeft + previousWidth + offsetX;      if(tooFarRight(proposedOffsetLeft, menuWidth, parentContainerLeft, visibleLeft, windowWidth))   {     proposedOffsetLeft = previousOffsetLeft - menuWidth - offsetX;        if(tooFarLeft(proposedOffsetLeft, visibleLeft, parentContainerLeft))     proposedOffsetLeft = parentContainerLeft * -1 + visibleLeft;   }  }    menuGroup.style.left = proposedOffsetLeft;    positionScrollLeft(menuGroup, proposedOffsetLeft); }   function tooFarRight(proposedOffsetLeft, menuWidth, parentContainerLeft, visibleLeft, windowWidth) {  return((proposedOffsetLeft + menuWidth + parentContainerLeft - visibleLeft) > windowWidth); }   function tooFarLeft(proposedOffsetLeft, visibleLeft, parentContainerLeft) {  return (proposedOffsetLeft + parentContainerLeft - visibleLeft < 0); }   function findParentItemLeft(previousGroup, parentItem) {  var parentItemLeft = previousGroup.offsetLeft + previousGroup.clientLeft;   var menuItems = findItems(previousGroup);   for(var i = 0; i < menuItems.length; i++)  {   if(menuItems[i] == parentItem)    break;   else   {    var currentItemWidth = parseInt(menuItems[i].offsetWidth);    parentItemLeft += currentItemWidth;   }  }    return parentItemLeft; }  function positionTop(menuGroup, orientation, offsetY) {  var parentItem = findParentItem(menuGroup);  var previousGroup = findPreviousGroup(menuGroup);    var proposedOffsetTop;  var proposedScrollUpTop;  var proposedScrollDownTop;    var scrollHeight = getScrollHeight(menuGroup);  var parentContainerTop = findParentContainerTop(menuGroup);  var menuHeight = menuGroup.offsetHeight;    if(((orientation == 0) && isRootGroup(previousGroup)) || (orientation == 2))  {   var previousGroupHeight = previousGroup.offsetHeight;   var previousGroupTop = previousGroup.offsetTop;      proposedOffsetTop = previousGroupHeight + previousGroupTop + scrollHeight;    if(orientation == 2)    proposedOffsetTop += offsetY;      proposedScrollUpTop = previousGroupHeight + previousGroupTop;   proposedScrollDownTop = proposedOffsetTop + menuHeight;  }  else  {   var windowHeight = document.body.clientHeight;   var parentItemHeight = parentItem.offsetHeight;   var parentItemTop = findParentItemTop(previousGroup, parentItem);   var visibleTop = document.body.scrollTop;      proposedOffsetTop = parentItemTop - findTopBorderWidth(menuGroup) + scrollHeight + offsetY;       if(tooFarDown(proposedOffsetTop, menuHeight, parentContainerTop, windowHeight, scrollHeight, visibleTop))   {    proposedOffsetTop = parentItemTop + parentItemHeight - menuHeight + findTopBorderWidth(menuGroup) - scrollHeight - offsetY;        if(tooFarUp(proposedOffsetTop, parentContainerTop, scrollHeight, visibleTop))     proposedOffsetTop = parentContainerTop * -1 + scrollHeight + visibleTop;   }      proposedScrollUpTop = proposedOffsetTop - scrollHeight;   proposedScrollDownTop = proposedOffsetTop + menuHeight;  }  menuGroup.style.top = proposedOffsetTop;  menuGroup.scrollTop = 0;  positionScrollTop(menuGroup, proposedScrollUpTop, proposedScrollDownTop); }  function tooFarDown(proposedOffsetTop, menuHeight, parentContainerTop, windowHeight, scrollHeight, visibleTop) {  return(proposedOffsetTop + menuHeight + parentContainerTop + scrollHeight - visibleTop > windowHeight); }  function tooFarUp(proposedOffsetTop, parentContainerTop, scrollHeight, visibleTop) {  return(proposedOffsetTop - scrollHeight + parentContainerTop - visibleTop < 0); }   function findParentItemTop(previousGroup, parentItem) {  var parentItemTop = previousGroup.offsetTop + previousGroup.clientTop - previousGroup.scrollTop;  var menuItems = findItems(previousGroup);    for(var i = 0; i < menuItems.length; i++)  {   if(menuItems[i] == parentItem)    break;   else   {    var currentItemHeight = menuItems[i].offsetHeight;    parentItemTop += currentItemHeight;   }  }   return parentItemTop; }   function findParentContainerLeft(menuGroup) {  var container = menuGroup.offsetParent;  var containerLeft = container.offsetLeft;    if(container.border != null)   containerLeft += parseInt(container.border);     return containerLeft; }   function findParentContainerTop(menuGroup) {  var container = menuGroup.offsetParent;  var containerTop = container.offsetTop;    if(container.border != null)   containerTop += parseInt(container.border);    return containerTop; } function hideMenu(currentGroup, currentItem) {  if(previousMenuItemId != null)  {   var previousMenuItem = document.getElementById(previousMenuItemId);   var previousMenuItemParent = findParentGroup(previousMenuItem);      if(previousMenuItemParent == currentGroup)    hideChildGroup(previousMenuItem);   else   {    var parentItem = findParentItem(currentGroup);     if(parentItem != previousMenuItem)    {     hideChildGroup(previousMenuItem);          hideParentGroups(previousMenuItem, currentGroup, currentItem);    }   }  } }    function cancelHideAllMenus() {  if(timerId != null)   clearTimeout(timerId);     timerId = null; }    function hideAllMenus() {  var rootGroup = findRootGroup();  clicked = false;  hideMenu(rootGroup);  previousMenuItemId = null;    showSelectElements(); }     function setHideMenuTimeout(hideDelay) {  if(timerId == null)   timerId = setTimeout("hideAllMenus()", hideDelay); }    function currentItemIsHeader(currentItem, currentGroup) {  if(currentItem != null)  {   var childGroup = findChildGroup(currentItem);   return(childGroup == currentGroup);  }  else   return false; }   function hideChildGroup(previousMenuItem) {  var childGroup = findChildGroup(previousMenuItem);      if(childGroup != null)  {   childGroup.style.visibility = "hidden";   setScrollVisibility(childGroup, "hidden");  } }    function hideParentGroups(previousMenuItem, currentGroup, currentItem) {  var parentGroup = findParentGroup(previousMenuItem);        while(parentGroup != currentGroup)  {   if(!currentItemIsHeader(currentItem, parentGroup))   {    parentGroup.style.visibility = "hidden";    setScrollVisibility(parentGroup, "hidden");   }      parentGroup = findPreviousGroup(parentGroup);  } }    function findPreviousGroup(menuGroup) {  var menuGroupId = new String(menuGroup.id);  var previousGroupId = menuGroupId.substring(0, menuGroupId.length - 2);  var previousGroup = document.getElementById(previousGroupId);  return previousGroup; }  function findParentItem(menuGroup) {  var menuGroupId = new String(menuGroup.id);  var parentItemId = menuGroupId.substring(0, menuGroupId.length - 2) + "_" + menuGroupId.substring(menuGroupId.length - 2, menuGroupId.length);  var parentItem = document.getElementById(parentItemId);  return parentItem; }   function findParentGroup(menuItem) {  var menuItemId = new String(menuItem.id);  var underscorePosition = menuItemId.lastIndexOf("_");  var parentId = menuItemId.substring(0, underscorePosition);  var parentGroup = document.getElementById(parentId);  return parentGroup;  }   function findChildGroup(menuItem) {  var menuItemId = new String(menuItem.id);  var underscorePosition = menuItemId.lastIndexOf("_");  var childGroupId = menuItemId.substring(0, underscorePosition) + menuItemId.substring(underscorePosition + 1, menuItemId.length);  var childGroup = document.getElementById(childGroupId);  return childGroup; }   function isRootGroup(menuGroup) {  var rootGroup = findRootGroup();  return (menuGroup == rootGroup); }   function findRootGroup() {  var rootGroup = document.getElementById(previousControlId + "_" + ROOT_ID);  return rootGroup; }    function findControl(menuItem) {  var parentGroup = findParentGroup(menuItem);  var parentGroupId = new String(parentGroup.id);  var underscorePosition = parentGroupId.lastIndexOf("_");  var controlId = parentGroupId.substring(0, underscorePosition);  var control = document.getElementById(controlId);  return control; }    function findItems(menuGroup) {  var menuGroupId = menuGroup.id;  var count = 0;  var menuItems = new Array();  var currItem = document.getElementById(menuGroupId + "_00");    while(currItem != null)  {   menuItems[count] = currItem;   count ++;      if(count < 10)    currItem = document.getElementById(menuGroupId + "_0" + count);   else    currItem = document.getElementById(menuGroupId + "_" + count);  }    return menuItems; }   function findScrollUp(menuGroupId) {  var scrollUpId = menuGroupId + "_Up";  var scrollUp = document.getElementById(scrollUpId);  return scrollUp; }    function findScrollDown(menuGroupId) {  var scrollDownId = menuGroupId + "_Down";  var scrollDown = document.getElementById(scrollDownId);  return scrollDown; }   function setScrollVisibility(menuGroup, visibility) {  var scrollUp = findScrollUp(menuGroup.id);  var scrollDown = findScrollDown(menuGroup.id);    if(scrollUp != null && scrollDown != null)   scrollUp.style.visibility = scrollDown.style.visibility = visibility; }  function positionScrollLeft(menuGroup, menuGroupOffsetLeft) {  var scrollUp = findScrollUp(menuGroup.id);  var scrollDown = findScrollDown(menuGroup.id);    if(scrollUp != null && scrollDown != null)   scrollUp.style.left = scrollDown.style.left = menuGroupOffsetLeft; }   function positionScrollTop(menuGroup, proposedScrollUpTop, proposedScrollDownTop) {  var scrollUp = findScrollUp(menuGroup.id);  var scrollDown = findScrollDown(menuGroup.id);    if(scrollUp != null)   scrollUp.style.top = proposedScrollUpTop;   if(scrollDown != null)   scrollDown.style.top = proposedScrollDownTop; }   function scrollGroup(menuGroupId, direction) {  var menuGroup = document.getElementById(menuGroupId);  var scrollDirection = "scrollbar" + direction;    menuGroup.doScroll(scrollDirection);  }   function getScrollHeight(menuGroup) {  var scrollUp = findScrollUp(menuGroup.id);   if(scrollUp != null)   return scrollUp.offsetHeight;  else   return 0; }   function cancelScroll() {  if(scrollIntervalId != null)   clearInterval(scrollIntervalId);     scrollIntervalId = null; }   function resetGlobals() {  if(previousControlId != null)  {    var rootGroup = findRootGroup();   var previousControl = document.getElementById(previousControlId);      clicked = false;   cancelHideAllMenus();   cancelScroll();   hideMenu(rootGroup);   previousMenuItemId = null;      showSelectElements();      previousControl.style.zIndex = "998";  } }   function checkPreviousControl(menuItem) {  var control = findControl(menuItem);    if(previousControlId != control.id)  {   resetGlobals();   previousControlId = control.id;   control.style.zIndex="999";    } }    function displayCommonMouseOver(menuItem, itemOverClass, status) {  menuItem.className = itemOverClass;      if(status != null && status != "")   window.status = status; }   function findTopBorderWidth(menuGroup) {  var scrollUpItem = findScrollUp(menuGroup.id);    if(scrollUpItem != null)   return scrollUpItem.clientTop;  else   return menuGroup.clientTop; }   function setupSpan(controlId) {  var rootGroup = document.getElementById(controlId + "_" + ROOT_ID);    if(rootGroup != null)  {   rootGroup.style.visibility = "visible";   displaySelectElements(rootGroup, "hidden");  } }   function displayEffect(menuGroup) {  menuGroup.filters[1].apply();  menuGroup.style.visibility = "visible";  menuGroup.filters[1].play(); }  function displaySelectElements(menuGroup, visibility) {  var parentContainerLeft = findParentContainerLeft(menuGroup);  var parentContainerTop = findParentContainerTop(menuGroup);  var selectElements = document.getElementsByTagName("SELECT");    for(var i = 0; i < selectElements.length; i++)  {   var leftPositionOk = true;   var currentSelectElement = selectElements[i];      var selectParentContainerLeft = findSelectContainerLeft(currentSelectElement);   var selectParentContainerTop = findSelectContainerTop(currentSelectElement);         if(currentSelectElement.offsetLeft + selectParentContainerLeft <= parentContainerLeft + menuGroup.offsetLeft + menuGroup.offsetWidth)   {    if(currentSelectElement.offsetLeft + currentSelectElement.offsetWidth + selectParentContainerLeft >= menuGroup.offsetLeft + parentContainerLeft)    {     leftPositionOk = false;     }   }        if(!leftPositionOk)   {    if(currentSelectElement.offsetTop + selectParentContainerTop <= parentContainerTop + menuGroup.offsetTop + menuGroup.offsetHeight)    {     if(currentSelectElement.offsetTop + currentSelectElement.offsetHeight + selectParentContainerTop >= menuGroup.offsetTop + parentContainerTop)     {      currentSelectElement.style.visibility = visibility;      }    }    }  } }    function showSelectElements() {  var selectElements = document.getElementsByTagName("SELECT");    for(var i = 0; i < selectElements.length; i++){   selectElements[i].style.visibility = "visible"; } }    function findSelectContainerLeft(selectElement) {  var container = selectElement.offsetParent;  var containerLeft = 0;    while(container != null)  {   containerLeft += container.offsetLeft;   container = container.offsetParent;  }     return containerLeft; }   function findSelectContainerTop(selectElement) {  var container = selectElement.offsetParent;  var containerTop = 0;    while(container != null)  {   containerTop += container.offsetTop;   container = container.offsetParent;  }     return containerTop; }