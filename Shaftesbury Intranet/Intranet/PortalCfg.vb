'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.209
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class SiteConfiguration
    Inherits DataSet
    
    Private tableGlobal As GlobalDataTable
    
    Private tableTab As TabDataTable
    
    Private table_Module As _ModuleDataTable
    
    Private tableSettings As SettingsDataTable
    
    Private tableSetting As SettingDataTable
    
    Private tableModuleDefinition As ModuleDefinitionDataTable
    
    Private relationSettings_Setting As DataRelation
    
    Private relationModule_Settings As DataRelation
    
    Private relationTab_Module As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Global")) Is Nothing) Then
                Me.Tables.Add(New GlobalDataTable(ds.Tables("Global")))
            End If
            If (Not (ds.Tables("Tab")) Is Nothing) Then
                Me.Tables.Add(New TabDataTable(ds.Tables("Tab")))
            End If
            If (Not (ds.Tables("Module")) Is Nothing) Then
                Me.Tables.Add(New _ModuleDataTable(ds.Tables("Module")))
            End If
            If (Not (ds.Tables("Settings")) Is Nothing) Then
                Me.Tables.Add(New SettingsDataTable(ds.Tables("Settings")))
            End If
            If (Not (ds.Tables("Setting")) Is Nothing) Then
                Me.Tables.Add(New SettingDataTable(ds.Tables("Setting")))
            End If
            If (Not (ds.Tables("ModuleDefinition")) Is Nothing) Then
                Me.Tables.Add(New ModuleDefinitionDataTable(ds.Tables("ModuleDefinition")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Global As GlobalDataTable
        Get
            Return Me.tableGlobal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tab As TabDataTable
        Get
            Return Me.tableTab
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _Module As _ModuleDataTable
        Get
            Return Me.table_Module
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Settings As SettingsDataTable
        Get
            Return Me.tableSettings
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Setting As SettingDataTable
        Get
            Return Me.tableSetting
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ModuleDefinition As ModuleDefinitionDataTable
        Get
            Return Me.tableModuleDefinition
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As SiteConfiguration = CType(MyBase.Clone,SiteConfiguration)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Global")) Is Nothing) Then
            Me.Tables.Add(New GlobalDataTable(ds.Tables("Global")))
        End If
        If (Not (ds.Tables("Tab")) Is Nothing) Then
            Me.Tables.Add(New TabDataTable(ds.Tables("Tab")))
        End If
        If (Not (ds.Tables("Module")) Is Nothing) Then
            Me.Tables.Add(New _ModuleDataTable(ds.Tables("Module")))
        End If
        If (Not (ds.Tables("Settings")) Is Nothing) Then
            Me.Tables.Add(New SettingsDataTable(ds.Tables("Settings")))
        End If
        If (Not (ds.Tables("Setting")) Is Nothing) Then
            Me.Tables.Add(New SettingDataTable(ds.Tables("Setting")))
        End If
        If (Not (ds.Tables("ModuleDefinition")) Is Nothing) Then
            Me.Tables.Add(New ModuleDefinitionDataTable(ds.Tables("ModuleDefinition")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableGlobal = CType(Me.Tables("Global"),GlobalDataTable)
        If (Not (Me.tableGlobal) Is Nothing) Then
            Me.tableGlobal.InitVars
        End If
        Me.tableTab = CType(Me.Tables("Tab"),TabDataTable)
        If (Not (Me.tableTab) Is Nothing) Then
            Me.tableTab.InitVars
        End If
        Me.table_Module = CType(Me.Tables("Module"),_ModuleDataTable)
        If (Not (Me.table_Module) Is Nothing) Then
            Me.table_Module.InitVars
        End If
        Me.tableSettings = CType(Me.Tables("Settings"),SettingsDataTable)
        If (Not (Me.tableSettings) Is Nothing) Then
            Me.tableSettings.InitVars
        End If
        Me.tableSetting = CType(Me.Tables("Setting"),SettingDataTable)
        If (Not (Me.tableSetting) Is Nothing) Then
            Me.tableSetting.InitVars
        End If
        Me.tableModuleDefinition = CType(Me.Tables("ModuleDefinition"),ModuleDefinitionDataTable)
        If (Not (Me.tableModuleDefinition) Is Nothing) Then
            Me.tableModuleDefinition.InitVars
        End If
        Me.relationSettings_Setting = Me.Relations("Settings_Setting")
        Me.relationModule_Settings = Me.Relations("Module_Settings")
        Me.relationTab_Module = Me.Relations("Tab_Module")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "SiteConfiguration"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PortalCfg.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = false
        Me.tableGlobal = New GlobalDataTable
        Me.Tables.Add(Me.tableGlobal)
        Me.tableTab = New TabDataTable
        Me.Tables.Add(Me.tableTab)
        Me.table_Module = New _ModuleDataTable
        Me.Tables.Add(Me.table_Module)
        Me.tableSettings = New SettingsDataTable
        Me.Tables.Add(Me.tableSettings)
        Me.tableSetting = New SettingDataTable
        Me.Tables.Add(Me.tableSetting)
        Me.tableModuleDefinition = New ModuleDefinitionDataTable
        Me.Tables.Add(Me.tableModuleDefinition)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("Tab_Module", New DataColumn() {Me.tableTab.TabIdColumn}, New DataColumn() {Me.table_Module.TabIdColumn})
        Me.table_Module.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Module_Settings", New DataColumn() {Me.table_Module.ModuleIdColumn}, New DataColumn() {Me.tableSettings.ModuleIdColumn})
        Me.tableSettings.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        fkc = New ForeignKeyConstraint("Settings_Setting", New DataColumn() {Me.tableSettings.Settings_IdColumn}, New DataColumn() {Me.tableSetting.Settings_IdColumn})
        Me.tableSetting.Constraints.Add(fkc)
        fkc.AcceptRejectRule = AcceptRejectRule.None
        fkc.DeleteRule = Rule.Cascade
        fkc.UpdateRule = Rule.Cascade
        Me.relationSettings_Setting = New DataRelation("Settings_Setting", New DataColumn() {Me.tableSettings.Settings_IdColumn}, New DataColumn() {Me.tableSetting.Settings_IdColumn}, false)
        Me.relationSettings_Setting.Nested = true
        Me.Relations.Add(Me.relationSettings_Setting)
        Me.relationModule_Settings = New DataRelation("Module_Settings", New DataColumn() {Me.table_Module.ModuleIdColumn}, New DataColumn() {Me.tableSettings.ModuleIdColumn}, false)
        Me.relationModule_Settings.Nested = true
        Me.Relations.Add(Me.relationModule_Settings)
        Me.relationTab_Module = New DataRelation("Tab_Module", New DataColumn() {Me.tableTab.TabIdColumn}, New DataColumn() {Me.table_Module.TabIdColumn}, false)
        Me.relationTab_Module.Nested = true
        Me.Relations.Add(Me.relationTab_Module)
    End Sub
    
    Private Function ShouldSerializeGlobal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeTab() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerialize_Module() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSettings() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSetting() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeModuleDefinition() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub GlobalRowChangeEventHandler(ByVal sender As Object, ByVal e As GlobalRowChangeEvent)
    
    Public Delegate Sub TabRowChangeEventHandler(ByVal sender As Object, ByVal e As TabRowChangeEvent)
    
    Public Delegate Sub _ModuleRowChangeEventHandler(ByVal sender As Object, ByVal e As _ModuleRowChangeEvent)
    
    Public Delegate Sub SettingsRowChangeEventHandler(ByVal sender As Object, ByVal e As SettingsRowChangeEvent)
    
    Public Delegate Sub SettingRowChangeEventHandler(ByVal sender As Object, ByVal e As SettingRowChangeEvent)
    
    Public Delegate Sub ModuleDefinitionRowChangeEventHandler(ByVal sender As Object, ByVal e As ModuleDefinitionRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlobalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPortalId As DataColumn
        
        Private columnPortalName As DataColumn
        
        Private columnAlwaysShowEditButton As DataColumn
        
        Friend Sub New()
            MyBase.New("Global")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property PortalIdColumn As DataColumn
            Get
                Return Me.columnPortalId
            End Get
        End Property
        
        Friend ReadOnly Property PortalNameColumn As DataColumn
            Get
                Return Me.columnPortalName
            End Get
        End Property
        
        Friend ReadOnly Property AlwaysShowEditButtonColumn As DataColumn
            Get
                Return Me.columnAlwaysShowEditButton
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GlobalRow
            Get
                Return CType(Me.Rows(index),GlobalRow)
            End Get
        End Property
        
        Public Event GlobalRowChanged As GlobalRowChangeEventHandler
        
        Public Event GlobalRowChanging As GlobalRowChangeEventHandler
        
        Public Event GlobalRowDeleted As GlobalRowChangeEventHandler
        
        Public Event GlobalRowDeleting As GlobalRowChangeEventHandler
        
        Public Overloads Sub AddGlobalRow(ByVal row As GlobalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGlobalRow(ByVal PortalId As Long, ByVal PortalName As String, ByVal AlwaysShowEditButton As Boolean) As GlobalRow
            Dim rowGlobalRow As GlobalRow = CType(Me.NewRow,GlobalRow)
            rowGlobalRow.ItemArray = New Object() {PortalId, PortalName, AlwaysShowEditButton}
            Me.Rows.Add(rowGlobalRow)
            Return rowGlobalRow
        End Function
        
        Public Function FindByPortalId(ByVal PortalId As Long) As GlobalRow
            Return CType(Me.Rows.Find(New Object() {PortalId}),GlobalRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As GlobalDataTable = CType(MyBase.Clone,GlobalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New GlobalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPortalId = Me.Columns("PortalId")
            Me.columnPortalName = Me.Columns("PortalName")
            Me.columnAlwaysShowEditButton = Me.Columns("AlwaysShowEditButton")
        End Sub
        
        Private Sub InitClass()
            Me.columnPortalId = New DataColumn("PortalId", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPortalId)
            Me.columnPortalName = New DataColumn("PortalName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPortalName)
            Me.columnAlwaysShowEditButton = New DataColumn("AlwaysShowEditButton", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnAlwaysShowEditButton)
            Me.Constraints.Add(New UniqueConstraint("PortalId", New DataColumn() {Me.columnPortalId}, true))
            Me.columnPortalId.AllowDBNull = false
            Me.columnPortalId.Unique = true
            Me.columnPortalId.Namespace = ""
            Me.columnPortalName.Namespace = ""
            Me.columnAlwaysShowEditButton.Namespace = ""
        End Sub
        
        Public Function NewGlobalRow() As GlobalRow
            Return CType(Me.NewRow,GlobalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New GlobalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GlobalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GlobalRowChangedEvent) Is Nothing) Then
                RaiseEvent GlobalRowChanged(Me, New GlobalRowChangeEvent(CType(e.Row,GlobalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GlobalRowChangingEvent) Is Nothing) Then
                RaiseEvent GlobalRowChanging(Me, New GlobalRowChangeEvent(CType(e.Row,GlobalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GlobalRowDeletedEvent) Is Nothing) Then
                RaiseEvent GlobalRowDeleted(Me, New GlobalRowChangeEvent(CType(e.Row,GlobalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GlobalRowDeletingEvent) Is Nothing) Then
                RaiseEvent GlobalRowDeleting(Me, New GlobalRowChangeEvent(CType(e.Row,GlobalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGlobalRow(ByVal row As GlobalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlobalRow
        Inherits DataRow
        
        Private tableGlobal As GlobalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableGlobal = CType(Me.Table,GlobalDataTable)
        End Sub
        
        Public Property PortalId As Long
            Get
                Return CType(Me(Me.tableGlobal.PortalIdColumn),Long)
            End Get
            Set
                Me(Me.tableGlobal.PortalIdColumn) = value
            End Set
        End Property
        
        Public Property PortalName As String
            Get
                Try 
                    Return CType(Me(Me.tableGlobal.PortalNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGlobal.PortalNameColumn) = value
            End Set
        End Property
        
        Public Property AlwaysShowEditButton As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableGlobal.AlwaysShowEditButtonColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGlobal.AlwaysShowEditButtonColumn) = value
            End Set
        End Property
        
        Public Function IsPortalNameNull() As Boolean
            Return Me.IsNull(Me.tableGlobal.PortalNameColumn)
        End Function
        
        Public Sub SetPortalNameNull()
            Me(Me.tableGlobal.PortalNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlwaysShowEditButtonNull() As Boolean
            Return Me.IsNull(Me.tableGlobal.AlwaysShowEditButtonColumn)
        End Function
        
        Public Sub SetAlwaysShowEditButtonNull()
            Me(Me.tableGlobal.AlwaysShowEditButtonColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GlobalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As GlobalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As GlobalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As GlobalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TabDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTabId As DataColumn
        
        Private columnTabName As DataColumn
        
        Private columnAccessRoles As DataColumn
        
        Private columnTabOrder As DataColumn
        
        Private columnShowMobile As DataColumn
        
        Private columnMobileTabName As DataColumn
        
        Friend Sub New()
            MyBase.New("Tab")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TabIdColumn As DataColumn
            Get
                Return Me.columnTabId
            End Get
        End Property
        
        Friend ReadOnly Property TabNameColumn As DataColumn
            Get
                Return Me.columnTabName
            End Get
        End Property
        
        Friend ReadOnly Property AccessRolesColumn As DataColumn
            Get
                Return Me.columnAccessRoles
            End Get
        End Property
        
        Friend ReadOnly Property TabOrderColumn As DataColumn
            Get
                Return Me.columnTabOrder
            End Get
        End Property
        
        Friend ReadOnly Property ShowMobileColumn As DataColumn
            Get
                Return Me.columnShowMobile
            End Get
        End Property
        
        Friend ReadOnly Property MobileTabNameColumn As DataColumn
            Get
                Return Me.columnMobileTabName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As TabRow
            Get
                Return CType(Me.Rows(index),TabRow)
            End Get
        End Property
        
        Public Event TabRowChanged As TabRowChangeEventHandler
        
        Public Event TabRowChanging As TabRowChangeEventHandler
        
        Public Event TabRowDeleted As TabRowChangeEventHandler
        
        Public Event TabRowDeleting As TabRowChangeEventHandler
        
        Public Overloads Sub AddTabRow(ByVal row As TabRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddTabRow(ByVal TabId As Long, ByVal TabName As String, ByVal AccessRoles As String, ByVal TabOrder As Long, ByVal ShowMobile As Boolean, ByVal MobileTabName As String) As TabRow
            Dim rowTabRow As TabRow = CType(Me.NewRow,TabRow)
            rowTabRow.ItemArray = New Object() {TabId, TabName, AccessRoles, TabOrder, ShowMobile, MobileTabName}
            Me.Rows.Add(rowTabRow)
            Return rowTabRow
        End Function
        
        Public Function FindByTabId(ByVal TabId As Long) As TabRow
            Return CType(Me.Rows.Find(New Object() {TabId}),TabRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As TabDataTable = CType(MyBase.Clone,TabDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New TabDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTabId = Me.Columns("TabId")
            Me.columnTabName = Me.Columns("TabName")
            Me.columnAccessRoles = Me.Columns("AccessRoles")
            Me.columnTabOrder = Me.Columns("TabOrder")
            Me.columnShowMobile = Me.Columns("ShowMobile")
            Me.columnMobileTabName = Me.Columns("MobileTabName")
        End Sub
        
        Private Sub InitClass()
            Me.columnTabId = New DataColumn("TabId", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTabId)
            Me.columnTabName = New DataColumn("TabName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTabName)
            Me.columnAccessRoles = New DataColumn("AccessRoles", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnAccessRoles)
            Me.columnTabOrder = New DataColumn("TabOrder", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnTabOrder)
            Me.columnShowMobile = New DataColumn("ShowMobile", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnShowMobile)
            Me.columnMobileTabName = New DataColumn("MobileTabName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnMobileTabName)
            Me.Constraints.Add(New UniqueConstraint("TabId", New DataColumn() {Me.columnTabId}, true))
            Me.columnTabId.AllowDBNull = false
            Me.columnTabId.Unique = true
            Me.columnTabId.Namespace = ""
            Me.columnTabName.Namespace = ""
            Me.columnAccessRoles.Namespace = ""
            Me.columnTabOrder.Namespace = ""
            Me.columnShowMobile.Namespace = ""
            Me.columnMobileTabName.Namespace = ""
        End Sub
        
        Public Function NewTabRow() As TabRow
            Return CType(Me.NewRow,TabRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New TabRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TabRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TabRowChangedEvent) Is Nothing) Then
                RaiseEvent TabRowChanged(Me, New TabRowChangeEvent(CType(e.Row,TabRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TabRowChangingEvent) Is Nothing) Then
                RaiseEvent TabRowChanging(Me, New TabRowChangeEvent(CType(e.Row,TabRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TabRowDeletedEvent) Is Nothing) Then
                RaiseEvent TabRowDeleted(Me, New TabRowChangeEvent(CType(e.Row,TabRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TabRowDeletingEvent) Is Nothing) Then
                RaiseEvent TabRowDeleting(Me, New TabRowChangeEvent(CType(e.Row,TabRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveTabRow(ByVal row As TabRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TabRow
        Inherits DataRow
        
        Private tableTab As TabDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableTab = CType(Me.Table,TabDataTable)
        End Sub
        
        Public Property TabId As Long
            Get
                Return CType(Me(Me.tableTab.TabIdColumn),Long)
            End Get
            Set
                Me(Me.tableTab.TabIdColumn) = value
            End Set
        End Property
        
        Public Property TabName As String
            Get
                Try 
                    Return CType(Me(Me.tableTab.TabNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTab.TabNameColumn) = value
            End Set
        End Property
        
        Public Property AccessRoles As String
            Get
                Try 
                    Return CType(Me(Me.tableTab.AccessRolesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTab.AccessRolesColumn) = value
            End Set
        End Property
        
        Public Property TabOrder As Long
            Get
                Try 
                    Return CType(Me(Me.tableTab.TabOrderColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTab.TabOrderColumn) = value
            End Set
        End Property
        
        Public Property ShowMobile As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTab.ShowMobileColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTab.ShowMobileColumn) = value
            End Set
        End Property
        
        Public Property MobileTabName As String
            Get
                Try 
                    Return CType(Me(Me.tableTab.MobileTabNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTab.MobileTabNameColumn) = value
            End Set
        End Property
        
        Public Function IsTabNameNull() As Boolean
            Return Me.IsNull(Me.tableTab.TabNameColumn)
        End Function
        
        Public Sub SetTabNameNull()
            Me(Me.tableTab.TabNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccessRolesNull() As Boolean
            Return Me.IsNull(Me.tableTab.AccessRolesColumn)
        End Function
        
        Public Sub SetAccessRolesNull()
            Me(Me.tableTab.AccessRolesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTabOrderNull() As Boolean
            Return Me.IsNull(Me.tableTab.TabOrderColumn)
        End Function
        
        Public Sub SetTabOrderNull()
            Me(Me.tableTab.TabOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShowMobileNull() As Boolean
            Return Me.IsNull(Me.tableTab.ShowMobileColumn)
        End Function
        
        Public Sub SetShowMobileNull()
            Me(Me.tableTab.ShowMobileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobileTabNameNull() As Boolean
            Return Me.IsNull(Me.tableTab.MobileTabNameColumn)
        End Function
        
        Public Sub SetMobileTabNameNull()
            Me(Me.tableTab.MobileTabNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetModuleRows() As _ModuleRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Tab_Module")),_ModuleRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class TabRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As TabRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As TabRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As TabRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ModuleDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnModuleId As DataColumn
        
        Private columnModuleTitle As DataColumn
        
        Private columnEditRoles As DataColumn
        
        Private columnModuleDefId As DataColumn
        
        Private columnPaneName As DataColumn
        
        Private columnCacheTimeout As DataColumn
        
        Private columnModuleOrder As DataColumn
        
        Private columnShowMobile As DataColumn
        
        Private columnTabId As DataColumn
        
        Friend Sub New()
            MyBase.New("Module")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ModuleIdColumn As DataColumn
            Get
                Return Me.columnModuleId
            End Get
        End Property
        
        Friend ReadOnly Property ModuleTitleColumn As DataColumn
            Get
                Return Me.columnModuleTitle
            End Get
        End Property
        
        Friend ReadOnly Property EditRolesColumn As DataColumn
            Get
                Return Me.columnEditRoles
            End Get
        End Property
        
        Friend ReadOnly Property ModuleDefIdColumn As DataColumn
            Get
                Return Me.columnModuleDefId
            End Get
        End Property
        
        Friend ReadOnly Property PaneNameColumn As DataColumn
            Get
                Return Me.columnPaneName
            End Get
        End Property
        
        Friend ReadOnly Property CacheTimeoutColumn As DataColumn
            Get
                Return Me.columnCacheTimeout
            End Get
        End Property
        
        Friend ReadOnly Property ModuleOrderColumn As DataColumn
            Get
                Return Me.columnModuleOrder
            End Get
        End Property
        
        Friend ReadOnly Property ShowMobileColumn As DataColumn
            Get
                Return Me.columnShowMobile
            End Get
        End Property
        
        Friend ReadOnly Property TabIdColumn As DataColumn
            Get
                Return Me.columnTabId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As _ModuleRow
            Get
                Return CType(Me.Rows(index),_ModuleRow)
            End Get
        End Property
        
        Public Event _ModuleRowChanged As _ModuleRowChangeEventHandler
        
        Public Event _ModuleRowChanging As _ModuleRowChangeEventHandler
        
        Public Event _ModuleRowDeleted As _ModuleRowChangeEventHandler
        
        Public Event _ModuleRowDeleting As _ModuleRowChangeEventHandler
        
        Public Overloads Sub Add_ModuleRow(ByVal row As _ModuleRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Add_ModuleRow(ByVal ModuleId As Long, ByVal ModuleTitle As String, ByVal EditRoles As String, ByVal ModuleDefId As Long, ByVal PaneName As String, ByVal CacheTimeout As Long, ByVal ModuleOrder As Long, ByVal ShowMobile As Boolean, ByVal parentTabRowByTab_Module As TabRow) As _ModuleRow
            Dim row_ModuleRow As _ModuleRow = CType(Me.NewRow,_ModuleRow)
            row_ModuleRow.ItemArray = New Object() {ModuleId, ModuleTitle, EditRoles, ModuleDefId, PaneName, CacheTimeout, ModuleOrder, ShowMobile, parentTabRowByTab_Module(0)}
            Me.Rows.Add(row_ModuleRow)
            Return row_ModuleRow
        End Function
        
        Public Function FindByModuleId(ByVal ModuleId As Long) As _ModuleRow
            Return CType(Me.Rows.Find(New Object() {ModuleId}),_ModuleRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As _ModuleDataTable = CType(MyBase.Clone,_ModuleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New _ModuleDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnModuleId = Me.Columns("ModuleId")
            Me.columnModuleTitle = Me.Columns("ModuleTitle")
            Me.columnEditRoles = Me.Columns("EditRoles")
            Me.columnModuleDefId = Me.Columns("ModuleDefId")
            Me.columnPaneName = Me.Columns("PaneName")
            Me.columnCacheTimeout = Me.Columns("CacheTimeout")
            Me.columnModuleOrder = Me.Columns("ModuleOrder")
            Me.columnShowMobile = Me.Columns("ShowMobile")
            Me.columnTabId = Me.Columns("TabId")
        End Sub
        
        Private Sub InitClass()
            Me.columnModuleId = New DataColumn("ModuleId", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnModuleId)
            Me.columnModuleTitle = New DataColumn("ModuleTitle", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnModuleTitle)
            Me.columnEditRoles = New DataColumn("EditRoles", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnEditRoles)
            Me.columnModuleDefId = New DataColumn("ModuleDefId", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnModuleDefId)
            Me.columnPaneName = New DataColumn("PaneName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnPaneName)
            Me.columnCacheTimeout = New DataColumn("CacheTimeout", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnCacheTimeout)
            Me.columnModuleOrder = New DataColumn("ModuleOrder", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnModuleOrder)
            Me.columnShowMobile = New DataColumn("ShowMobile", GetType(System.Boolean), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnShowMobile)
            Me.columnTabId = New DataColumn("TabId", GetType(System.Int64), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnTabId)
            Me.Constraints.Add(New UniqueConstraint("ModuleId", New DataColumn() {Me.columnModuleId}, true))
            Me.columnModuleId.AllowDBNull = false
            Me.columnModuleId.Unique = true
            Me.columnModuleId.Namespace = ""
            Me.columnModuleTitle.Namespace = ""
            Me.columnEditRoles.Namespace = ""
            Me.columnModuleDefId.Namespace = ""
            Me.columnPaneName.Namespace = ""
            Me.columnCacheTimeout.Namespace = ""
            Me.columnModuleOrder.Namespace = ""
            Me.columnShowMobile.Namespace = ""
        End Sub
        
        Public Function New_ModuleRow() As _ModuleRow
            Return CType(Me.NewRow,_ModuleRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New _ModuleRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(_ModuleRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ModuleRowChangedEvent) Is Nothing) Then
                RaiseEvent _ModuleRowChanged(Me, New _ModuleRowChangeEvent(CType(e.Row,_ModuleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ModuleRowChangingEvent) Is Nothing) Then
                RaiseEvent _ModuleRowChanging(Me, New _ModuleRowChangeEvent(CType(e.Row,_ModuleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ModuleRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ModuleRowDeleted(Me, New _ModuleRowChangeEvent(CType(e.Row,_ModuleRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ModuleRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ModuleRowDeleting(Me, New _ModuleRowChangeEvent(CType(e.Row,_ModuleRow), e.Action))
            End If
        End Sub
        
        Public Sub Remove_ModuleRow(ByVal row As _ModuleRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ModuleRow
        Inherits DataRow
        
        Private table_Module As _ModuleDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.table_Module = CType(Me.Table,_ModuleDataTable)
        End Sub
        
        Public Property ModuleId As Long
            Get
                Return CType(Me(Me.table_Module.ModuleIdColumn),Long)
            End Get
            Set
                Me(Me.table_Module.ModuleIdColumn) = value
            End Set
        End Property
        
        Public Property ModuleTitle As String
            Get
                Try 
                    Return CType(Me(Me.table_Module.ModuleTitleColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.ModuleTitleColumn) = value
            End Set
        End Property
        
        Public Property EditRoles As String
            Get
                Try 
                    Return CType(Me(Me.table_Module.EditRolesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.EditRolesColumn) = value
            End Set
        End Property
        
        Public Property ModuleDefId As Long
            Get
                Try 
                    Return CType(Me(Me.table_Module.ModuleDefIdColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.ModuleDefIdColumn) = value
            End Set
        End Property
        
        Public Property PaneName As String
            Get
                Try 
                    Return CType(Me(Me.table_Module.PaneNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.PaneNameColumn) = value
            End Set
        End Property
        
        Public Property CacheTimeout As Long
            Get
                Try 
                    Return CType(Me(Me.table_Module.CacheTimeoutColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.CacheTimeoutColumn) = value
            End Set
        End Property
        
        Public Property ModuleOrder As Long
            Get
                Try 
                    Return CType(Me(Me.table_Module.ModuleOrderColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.ModuleOrderColumn) = value
            End Set
        End Property
        
        Public Property ShowMobile As Boolean
            Get
                Try 
                    Return CType(Me(Me.table_Module.ShowMobileColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.table_Module.ShowMobileColumn) = value
            End Set
        End Property
        
        Public Property TabRow As TabRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Tab_Module")),TabRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Tab_Module"))
            End Set
        End Property
        
        Public Function IsModuleTitleNull() As Boolean
            Return Me.IsNull(Me.table_Module.ModuleTitleColumn)
        End Function
        
        Public Sub SetModuleTitleNull()
            Me(Me.table_Module.ModuleTitleColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEditRolesNull() As Boolean
            Return Me.IsNull(Me.table_Module.EditRolesColumn)
        End Function
        
        Public Sub SetEditRolesNull()
            Me(Me.table_Module.EditRolesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModuleDefIdNull() As Boolean
            Return Me.IsNull(Me.table_Module.ModuleDefIdColumn)
        End Function
        
        Public Sub SetModuleDefIdNull()
            Me(Me.table_Module.ModuleDefIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPaneNameNull() As Boolean
            Return Me.IsNull(Me.table_Module.PaneNameColumn)
        End Function
        
        Public Sub SetPaneNameNull()
            Me(Me.table_Module.PaneNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCacheTimeoutNull() As Boolean
            Return Me.IsNull(Me.table_Module.CacheTimeoutColumn)
        End Function
        
        Public Sub SetCacheTimeoutNull()
            Me(Me.table_Module.CacheTimeoutColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsModuleOrderNull() As Boolean
            Return Me.IsNull(Me.table_Module.ModuleOrderColumn)
        End Function
        
        Public Sub SetModuleOrderNull()
            Me(Me.table_Module.ModuleOrderColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsShowMobileNull() As Boolean
            Return Me.IsNull(Me.table_Module.ShowMobileColumn)
        End Function
        
        Public Sub SetShowMobileNull()
            Me(Me.table_Module.ShowMobileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetSettingsRows() As SettingsRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Module_Settings")),SettingsRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class _ModuleRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As _ModuleRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As _ModuleRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As _ModuleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSettings_Id As DataColumn
        
        Private columnModuleId As DataColumn
        
        Friend Sub New()
            MyBase.New("Settings")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Settings_IdColumn As DataColumn
            Get
                Return Me.columnSettings_Id
            End Get
        End Property
        
        Friend ReadOnly Property ModuleIdColumn As DataColumn
            Get
                Return Me.columnModuleId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SettingsRow
            Get
                Return CType(Me.Rows(index),SettingsRow)
            End Get
        End Property
        
        Public Event SettingsRowChanged As SettingsRowChangeEventHandler
        
        Public Event SettingsRowChanging As SettingsRowChangeEventHandler
        
        Public Event SettingsRowDeleted As SettingsRowChangeEventHandler
        
        Public Event SettingsRowDeleting As SettingsRowChangeEventHandler
        
        Public Overloads Sub AddSettingsRow(ByVal row As SettingsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSettingsRow(ByVal parent_ModuleRowByModule_Settings As _ModuleRow) As SettingsRow
            Dim rowSettingsRow As SettingsRow = CType(Me.NewRow,SettingsRow)
            rowSettingsRow.ItemArray = New Object() {Nothing, parent_ModuleRowByModule_Settings(0)}
            Me.Rows.Add(rowSettingsRow)
            Return rowSettingsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SettingsDataTable = CType(MyBase.Clone,SettingsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SettingsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSettings_Id = Me.Columns("Settings_Id")
            Me.columnModuleId = Me.Columns("ModuleId")
        End Sub
        
        Private Sub InitClass()
            Me.columnSettings_Id = New DataColumn("Settings_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSettings_Id)
            Me.columnModuleId = New DataColumn("ModuleId", GetType(System.Int64), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnModuleId)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnSettings_Id}, true))
            Me.columnSettings_Id.AutoIncrement = true
            Me.columnSettings_Id.AllowDBNull = false
            Me.columnSettings_Id.Unique = true
        End Sub
        
        Public Function NewSettingsRow() As SettingsRow
            Return CType(Me.NewRow,SettingsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SettingsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SettingsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SettingsRowChangedEvent) Is Nothing) Then
                RaiseEvent SettingsRowChanged(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SettingsRowChangingEvent) Is Nothing) Then
                RaiseEvent SettingsRowChanging(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SettingsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SettingsRowDeleted(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SettingsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SettingsRowDeleting(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSettingsRow(ByVal row As SettingsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingsRow
        Inherits DataRow
        
        Private tableSettings As SettingsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSettings = CType(Me.Table,SettingsDataTable)
        End Sub
        
        Public Property _ModuleRow As _ModuleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Module_Settings")),_ModuleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Module_Settings"))
            End Set
        End Property
        
        Public Function GetSettingRows() As SettingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("Settings_Setting")),SettingRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SettingsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SettingsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SettingsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnName As DataColumn
        
        Private columnSetting_Text As DataColumn
        
        Private columnSettings_Id As DataColumn
        
        Friend Sub New()
            MyBase.New("Setting")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn As DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property Setting_TextColumn As DataColumn
            Get
                Return Me.columnSetting_Text
            End Get
        End Property
        
        Friend ReadOnly Property Settings_IdColumn As DataColumn
            Get
                Return Me.columnSettings_Id
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As SettingRow
            Get
                Return CType(Me.Rows(index),SettingRow)
            End Get
        End Property
        
        Public Event SettingRowChanged As SettingRowChangeEventHandler
        
        Public Event SettingRowChanging As SettingRowChangeEventHandler
        
        Public Event SettingRowDeleted As SettingRowChangeEventHandler
        
        Public Event SettingRowDeleting As SettingRowChangeEventHandler
        
        Public Overloads Sub AddSettingRow(ByVal row As SettingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSettingRow(ByVal Name As String, ByVal Setting_Text As String, ByVal parentSettingsRowBySettings_Setting As SettingsRow) As SettingRow
            Dim rowSettingRow As SettingRow = CType(Me.NewRow,SettingRow)
            rowSettingRow.ItemArray = New Object() {Name, Setting_Text, parentSettingsRowBySettings_Setting(0)}
            Me.Rows.Add(rowSettingRow)
            Return rowSettingRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As SettingDataTable = CType(MyBase.Clone,SettingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New SettingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnName = Me.Columns("Name")
            Me.columnSetting_Text = Me.Columns("Setting_Text")
            Me.columnSettings_Id = Me.Columns("Settings_Id")
        End Sub
        
        Private Sub InitClass()
            Me.columnName = New DataColumn("Name", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnName)
            Me.columnSetting_Text = New DataColumn("Setting_Text", GetType(System.String), Nothing, System.Data.MappingType.SimpleContent)
            Me.Columns.Add(Me.columnSetting_Text)
            Me.columnSettings_Id = New DataColumn("Settings_Id", GetType(System.Int32), Nothing, System.Data.MappingType.Hidden)
            Me.Columns.Add(Me.columnSettings_Id)
            Me.columnName.Namespace = ""
        End Sub
        
        Public Function NewSettingRow() As SettingRow
            Return CType(Me.NewRow,SettingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New SettingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SettingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SettingRowChangedEvent) Is Nothing) Then
                RaiseEvent SettingRowChanged(Me, New SettingRowChangeEvent(CType(e.Row,SettingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SettingRowChangingEvent) Is Nothing) Then
                RaiseEvent SettingRowChanging(Me, New SettingRowChangeEvent(CType(e.Row,SettingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SettingRowDeletedEvent) Is Nothing) Then
                RaiseEvent SettingRowDeleted(Me, New SettingRowChangeEvent(CType(e.Row,SettingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SettingRowDeletingEvent) Is Nothing) Then
                RaiseEvent SettingRowDeleting(Me, New SettingRowChangeEvent(CType(e.Row,SettingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSettingRow(ByVal row As SettingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingRow
        Inherits DataRow
        
        Private tableSetting As SettingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSetting = CType(Me.Table,SettingDataTable)
        End Sub
        
        Public Property Name As String
            Get
                Try 
                    Return CType(Me(Me.tableSetting.NameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetting.NameColumn) = value
            End Set
        End Property
        
        Public Property Setting_Text As String
            Get
                Try 
                    Return CType(Me(Me.tableSetting.Setting_TextColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetting.Setting_TextColumn) = value
            End Set
        End Property
        
        Public Property SettingsRow As SettingsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Settings_Setting")),SettingsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Settings_Setting"))
            End Set
        End Property
        
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableSetting.NameColumn)
        End Function
        
        Public Sub SetNameNull()
            Me(Me.tableSetting.NameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSetting_TextNull() As Boolean
            Return Me.IsNull(Me.tableSetting.Setting_TextColumn)
        End Function
        
        Public Sub SetSetting_TextNull()
            Me(Me.tableSetting.Setting_TextColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class SettingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As SettingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As SettingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As SettingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModuleDefinitionDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFriendlyName As DataColumn
        
        Private columnMobileSourceFile As DataColumn
        
        Private columnDesktopSourceFile As DataColumn
        
        Private columnModuleDefId As DataColumn
        
        Friend Sub New()
            MyBase.New("ModuleDefinition")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FriendlyNameColumn As DataColumn
            Get
                Return Me.columnFriendlyName
            End Get
        End Property
        
        Friend ReadOnly Property MobileSourceFileColumn As DataColumn
            Get
                Return Me.columnMobileSourceFile
            End Get
        End Property
        
        Friend ReadOnly Property DesktopSourceFileColumn As DataColumn
            Get
                Return Me.columnDesktopSourceFile
            End Get
        End Property
        
        Friend ReadOnly Property ModuleDefIdColumn As DataColumn
            Get
                Return Me.columnModuleDefId
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModuleDefinitionRow
            Get
                Return CType(Me.Rows(index),ModuleDefinitionRow)
            End Get
        End Property
        
        Public Event ModuleDefinitionRowChanged As ModuleDefinitionRowChangeEventHandler
        
        Public Event ModuleDefinitionRowChanging As ModuleDefinitionRowChangeEventHandler
        
        Public Event ModuleDefinitionRowDeleted As ModuleDefinitionRowChangeEventHandler
        
        Public Event ModuleDefinitionRowDeleting As ModuleDefinitionRowChangeEventHandler
        
        Public Overloads Sub AddModuleDefinitionRow(ByVal row As ModuleDefinitionRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddModuleDefinitionRow(ByVal FriendlyName As String, ByVal MobileSourceFile As String, ByVal DesktopSourceFile As String, ByVal ModuleDefId As Long) As ModuleDefinitionRow
            Dim rowModuleDefinitionRow As ModuleDefinitionRow = CType(Me.NewRow,ModuleDefinitionRow)
            rowModuleDefinitionRow.ItemArray = New Object() {FriendlyName, MobileSourceFile, DesktopSourceFile, ModuleDefId}
            Me.Rows.Add(rowModuleDefinitionRow)
            Return rowModuleDefinitionRow
        End Function
        
        Public Function FindByModuleDefId(ByVal ModuleDefId As Long) As ModuleDefinitionRow
            Return CType(Me.Rows.Find(New Object() {ModuleDefId}),ModuleDefinitionRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ModuleDefinitionDataTable = CType(MyBase.Clone,ModuleDefinitionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ModuleDefinitionDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFriendlyName = Me.Columns("FriendlyName")
            Me.columnMobileSourceFile = Me.Columns("MobileSourceFile")
            Me.columnDesktopSourceFile = Me.Columns("DesktopSourceFile")
            Me.columnModuleDefId = Me.Columns("ModuleDefId")
        End Sub
        
        Private Sub InitClass()
            Me.columnFriendlyName = New DataColumn("FriendlyName", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnFriendlyName)
            Me.columnMobileSourceFile = New DataColumn("MobileSourceFile", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnMobileSourceFile)
            Me.columnDesktopSourceFile = New DataColumn("DesktopSourceFile", GetType(System.String), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnDesktopSourceFile)
            Me.columnModuleDefId = New DataColumn("ModuleDefId", GetType(System.Int64), Nothing, System.Data.MappingType.Attribute)
            Me.Columns.Add(Me.columnModuleDefId)
            Me.Constraints.Add(New UniqueConstraint("ModuleDefId", New DataColumn() {Me.columnModuleDefId}, true))
            Me.columnFriendlyName.Namespace = ""
            Me.columnMobileSourceFile.Namespace = ""
            Me.columnDesktopSourceFile.Namespace = ""
            Me.columnModuleDefId.AllowDBNull = false
            Me.columnModuleDefId.Unique = true
            Me.columnModuleDefId.Namespace = ""
        End Sub
        
        Public Function NewModuleDefinitionRow() As ModuleDefinitionRow
            Return CType(Me.NewRow,ModuleDefinitionRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ModuleDefinitionRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ModuleDefinitionRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModuleDefinitionRowChangedEvent) Is Nothing) Then
                RaiseEvent ModuleDefinitionRowChanged(Me, New ModuleDefinitionRowChangeEvent(CType(e.Row,ModuleDefinitionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModuleDefinitionRowChangingEvent) Is Nothing) Then
                RaiseEvent ModuleDefinitionRowChanging(Me, New ModuleDefinitionRowChangeEvent(CType(e.Row,ModuleDefinitionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModuleDefinitionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModuleDefinitionRowDeleted(Me, New ModuleDefinitionRowChangeEvent(CType(e.Row,ModuleDefinitionRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModuleDefinitionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModuleDefinitionRowDeleting(Me, New ModuleDefinitionRowChangeEvent(CType(e.Row,ModuleDefinitionRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveModuleDefinitionRow(ByVal row As ModuleDefinitionRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModuleDefinitionRow
        Inherits DataRow
        
        Private tableModuleDefinition As ModuleDefinitionDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableModuleDefinition = CType(Me.Table,ModuleDefinitionDataTable)
        End Sub
        
        Public Property FriendlyName As String
            Get
                Try 
                    Return CType(Me(Me.tableModuleDefinition.FriendlyNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModuleDefinition.FriendlyNameColumn) = value
            End Set
        End Property
        
        Public Property MobileSourceFile As String
            Get
                Try 
                    Return CType(Me(Me.tableModuleDefinition.MobileSourceFileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModuleDefinition.MobileSourceFileColumn) = value
            End Set
        End Property
        
        Public Property DesktopSourceFile As String
            Get
                Try 
                    Return CType(Me(Me.tableModuleDefinition.DesktopSourceFileColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableModuleDefinition.DesktopSourceFileColumn) = value
            End Set
        End Property
        
        Public Property ModuleDefId As Long
            Get
                Return CType(Me(Me.tableModuleDefinition.ModuleDefIdColumn),Long)
            End Get
            Set
                Me(Me.tableModuleDefinition.ModuleDefIdColumn) = value
            End Set
        End Property
        
        Public Function IsFriendlyNameNull() As Boolean
            Return Me.IsNull(Me.tableModuleDefinition.FriendlyNameColumn)
        End Function
        
        Public Sub SetFriendlyNameNull()
            Me(Me.tableModuleDefinition.FriendlyNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMobileSourceFileNull() As Boolean
            Return Me.IsNull(Me.tableModuleDefinition.MobileSourceFileColumn)
        End Function
        
        Public Sub SetMobileSourceFileNull()
            Me(Me.tableModuleDefinition.MobileSourceFileColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDesktopSourceFileNull() As Boolean
            Return Me.IsNull(Me.tableModuleDefinition.DesktopSourceFileColumn)
        End Function
        
        Public Sub SetDesktopSourceFileNull()
            Me(Me.tableModuleDefinition.DesktopSourceFileColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ModuleDefinitionRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ModuleDefinitionRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ModuleDefinitionRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ModuleDefinitionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
