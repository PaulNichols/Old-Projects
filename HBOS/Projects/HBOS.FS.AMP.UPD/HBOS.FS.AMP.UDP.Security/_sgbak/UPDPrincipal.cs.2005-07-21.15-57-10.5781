using System;
using System.Data;
using System.Globalization;
using System.Security;
using System.Security.Principal;
using HBOS.FS.AMP.UPD.Controllers;

namespace HBOS.FS.AMP.UPD.Security
{
	/// <summary>
	/// Allows code to check the group membership of an AMP user.
	/// </summary>
	public sealed class UPDPrincipal : IPrincipal
	{
		private UPDIdentity updIdentity;
		private string[] roles;
		private string company;


		/// <summary>
		/// Initializes a new instance of the UPDPrincipal class from an <see cref="UPDIdentity"/> object.
		/// </summary>
		/// <param name="identity">The <see cref="UPDIdentity"/> object from which to construct the new instance of <see cref="UPDPrincipal"/></param>
		/// <param name="companyId">The company for which permissions should be loaded.</param>
		/// <example>
		/// The following example creates a new <see cref="UPDPrincipal"/> object from a new <see cref="UPDIdentity"/> object.
		/// <code lang="c#">
		/// AMPIdentity ampIdentity = new AMPIdentity();
		/// AMPPrincipal ampPrincipal = new AMPPrincipal(ampIdentity. "Leeds");
		/// </code>
		/// The following example can be used to set the principle of the application domain so any resultant
		/// threads will inherit the same principle.
		/// <code lang="c#">
		/// AppDomain.CurrentDomain.SetThreadPrincipal(new UPDPrincipal(new UPDIdentity(dbConnection)));
		/// </code>
		/// To attach the principle to the current thread use
		/// <code lang="c#">
		/// Thread.CurrentPrincipal = New UPDPrincipal(new UPDIdentity(dbConnection)))
		/// </code>
		/// Once the principle is set, a permission demand or link demand can evaluate the properties of the 
		/// security principal for the execution context.
		/// <code lang="c#">
		/// [SecurityPermission(SecurityAction.Demand, Role="Administrator")]
		/// public MyMethod()
		/// {
		///     ....
		/// }
		/// </code>
		/// </example>
		public UPDPrincipal(UPDIdentity identity, string companyId)
		{
			if (identity != null)
			{
				this.updIdentity = identity;
				if (updIdentity.IsAuthenticated)
				{
					// Load Permissions from the database
					try
					{
						DataSet rolesDS = new DataSet();
						this.company = companyId;

						rolesDS = UserController.UserPermissions(this.updIdentity.SqlConnectionString, companyId);

						// Check that we have the permissions row back again
						if (rolesDS != null && rolesDS.Tables.Count == 1 &&
							rolesDS.Tables[0].Rows.Count > 0)
						{
							// Now in order to be flexible, so we don't have to change the Principal
							// each time a new row is added we will fill our roles array using the
							// names of the bit columns returned from the stored procedure.
							lock (rolesDS.Tables[0].Columns.SyncRoot)
							{
								this.roles = new string[rolesDS.Tables[0].Columns.Count];
								int permissionsPosition = 0;
								foreach (DataColumn column in rolesDS.Tables[0].Columns)
								{
									if (typeof (Boolean) == column.DataType)
									{
										if (Convert.ToBoolean(rolesDS.Tables[0].Rows[0][column.ColumnName], CultureInfo.InvariantCulture))
										{
											this.roles[permissionsPosition] = column.ColumnName;
											permissionsPosition++;
										}
									}
								}
							}
						}
						else
						{
							this.roles = null;
							throw new SecurityException("This User has no permissions for the specified Company.");
						}
					}
					catch
					{
						throw;
					}
				}
			}
		}

		/// <summary>
		/// Gets the company code the current principle was retrieved for.
		/// </summary>
		/// <value>The company code the current principle was retrieved for.</value>
		public string CompanyCode
		{
			get { return this.company; }
		}

		#region IPrincipal Members

		/// <summary>
		/// Gets the identity of the current principal.
		/// </summary>
		/// <value>The <see cref="UPDIdentity"/> object of the current principal</value>
		public IIdentity Identity
		{
			get { return (this.updIdentity); }
		}

		/// <summary>
		/// Determines whether the current principal belongs to a specified AMP user group.
		/// </summary>
		/// <param name="role">The name of the AMP program role for which to check membership.</param>
		/// <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
		public bool IsInRole(string role)
		{
			if (null != role &&
				null != this.roles)
			{
				for (int i = 0; i < this.roles.Length; i++)
				{
					if ((null != this.roles[i]) &&
						(string.Compare(this.roles[i], role, true, CultureInfo.InvariantCulture) == 0))
					{
						return true;
					}
				}
			}
			return false;
		}

		#endregion
	}
}