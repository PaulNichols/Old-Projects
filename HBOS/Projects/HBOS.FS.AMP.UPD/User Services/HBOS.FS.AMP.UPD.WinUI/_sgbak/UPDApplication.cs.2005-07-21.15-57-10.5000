using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using HBOS.FS.AMP.ExceptionManagement;
using HBOS.FS.AMP.UPD.Controllers;
using HBOS.FS.AMP.UPD.Exceptions;
using HBOS.FS.AMP.UPD.Security;
using HBOS.FS.AMP.UPD.WinUI.Forms;
using HBOS.FS.Common.ExceptionManagement;
using HBOS.FS.Support.Tex;

namespace HBOS.FS.AMP.UPD.WinUI
{
	/// <summary>
	/// Summary description for UPDApplication.
	/// </summary>
	public class UPDApplication
	{
		// Our main UI form
		private static Main mainForm;
//
//        /// <summary>
//        /// Application Interface constructor
//        /// </summary>
//        public UPDApplication()
//        {
//            T.Initialise();
//        }

		#region Application Interface Entry Point

		/// <summary>
		/// The main entry point into the Application Interface.
		/// </summary>
		[STAThread]
		public static void Main()
		{
			T.E();

			//
			// TODO: Add NUnit stuff for the Application interface entry point
			//

			// Check there isn't another instance of the program running.
			Process instance = runningInstance();
			if (instance == null)
			{
				// Add trace statements
				T.Log("Application entry point");

				// Establish application environment
				//
				// Note. EnableVisualStyles() can cause issues with some controls, primarily
				//       the date picker control when ran under XP, fine with NT.
				//       So, if a datepicker is used and works unexpectidly, comment this out!
				//
				// IB: Turned off Visual Styles  as it was causing an SEHException when closing some modal dialogs.
				// See http://www.codeguru.com/forum/showthread.php?p=1036531 for an example.
				// Note: Application.DoEvents does not fix the problem in this situation.
				// Application.EnableVisualStyles();
				//Application.DoEvents();

				// Make sure we capture any unhandled exceptions
				T.Log("Bind Exception Handler");
				Application.ThreadException += new ThreadExceptionEventHandler(Application_ThreadException);

				// Check we can actually attach to the SQL server before we do anything else
				bool canConnect = false;
				T.Log("SQL Connection Checks");
				using (SqlConnection connection = new SqlConnection(ConfigurationSettings.AppSettings["connectionString"]))
				{
					T.Log("Attempting connection cycle");
					try
					{
						connection.Open();
						T.Log("Connection Opened");
						connection.Close();
						T.Log("Connection Closed");
						canConnect = true;

					}
					catch (SqlException exception)
					{
						T.Log("Caught a SQL exception", exception.Errors[0].Message);
						switch (exception.Errors[0].Number)
						{
							case (int) DatabaseError.SQLServerDoesNotExist:
								ExceptionManager.Publish(exception);
								MessageBoxHelper.Show("SqlServerDoesNotExist", "DatabaseErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Error);
								UPDApplication.ExitApplication();
								break;
							case (int) DatabaseError.LoginFailed:
								ExceptionManager.Publish(exception);
								MessageBoxHelper.Show("LoginFailed", "DatabaseErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Error);
								UPDApplication.ExitApplication();
								break;
							case (int) DatabaseError.NoDatabaseAccess:
								ExceptionManager.Publish(exception);
								MessageBoxHelper.Show("NoDatabaseAccess", "DatabaseErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Error);
								UPDApplication.ExitApplication();
								break;
							case (int) DatabaseError.LoginFailedNotAssociatedWithTrustedConnection:
								ExceptionManager.Publish(exception);
								MessageBoxHelper.Show("LoginFailedNotAssociatedWithTrustedConnection",
								                      "DatabaseErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Error);
								UPDApplication.ExitApplication();
								break;
							default:
								T.Log("Unknown SQL Exception", exception.Errors[0].Message);
								ExceptionManager.Publish(exception);
								UPDApplication.ExitApplication();
								break;
						}
					}
					catch (Exception exception)
					{
						T.Log("Unknown Exception", exception.Message);
						ExceptionManager.Publish(exception);
						ErrorDialog.Show(exception);
						UPDApplication.ExitApplication();
					}
				}
				T.Log("After SQL Connection checks");

				if (canConnect)
				{
					// Validate the client date time
					T.Log("Date/Time checks");
					bool validDesktopDate = validateDesktopDateTime();

					if (validDesktopDate == false)
					{
						MessageBoxHelper.Show("TimeErrorBody", "TimeErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Stop);
					}
					else
					{
						T.Log("Authentication Checks");
						UPDIdentity updID = new UPDIdentity(ConfigurationSettings.AppSettings["connectionString"]);

						if (!updID.IsAuthenticated)
						{
							MessageBoxHelper.Show("AuthenticationErrorBody", "AuthenticationErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Stop);
						}
						else
						{
							// Get last working company for the user, if any
							string lastCompanyCode = string.Empty;
							try
							{
								lastCompanyCode = UserController.GetLastCompany(ConfigurationSettings.AppSettings["connectionString"]);


								if (lastCompanyCode == null || lastCompanyCode.Length == 0)
								{
									MessageBoxHelper.Show("PermissionsErrorBody", "PermissionsErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Stop);
								}
								else
								{
									try
									{
										T.Log("Principal Setup");

										try
										{
											AppDomain.CurrentDomain.SetThreadPrincipal(
												new UPDPrincipal(updID, lastCompanyCode));


											// Display main user entry form...
											bool changedCompany = true;
											int x, y, height, width;
											x = y = height = width = -1;

											while (changedCompany)
											{
												// Create a static instance of the main form
												T.Log("Load Main UI Form");
												UPDApplication.mainForm = new Main();
												if (x != -1)
												{
													// We've come here from a previous form instance where we had switched company,
													// so set the new form position and size to match the old form
													UPDApplication.mainForm.Show();
													UPDApplication.mainForm.Left = x;
													UPDApplication.mainForm.Top = y;
													UPDApplication.mainForm.Height = height;
													UPDApplication.mainForm.Width = width;
												}
												else
												{
#if ( DEBUG )

#else
													SplashScreen.ShowSplashScreen();
													Application.DoEvents();
													SplashScreen.SetStatus("Loading Application ...", true);
													Thread.Sleep(1000);
													SplashScreen.SetStatus("Loading Application ...", true);
													Thread.Sleep(1000);
													SplashScreen.SetStatus("Loading Application ...", true);
													Thread.Sleep(500);
#endif
												}
												// Start the message loop on the form
												T.Log("Application.Run");


												Application.Run(UPDApplication.mainForm);

												// The form was closed, lets see why
												changedCompany = UPDApplication.mainForm.ChangedCompany;

												if (changedCompany)
												{
													T.Log("Company changed, close form and loop");
													// Save the position and size so we can set the new form under the new company
													// permissions to match.
													x = UPDApplication.mainForm.Left;
													y = UPDApplication.mainForm.Top;
													height = UPDApplication.mainForm.Height;
													width = UPDApplication.mainForm.Width;
													// Close the old form and tell the GC it's done with.
													UPDApplication.mainForm.Close();
													UPDApplication.mainForm.Dispose();
												}
											}
										}
										catch
										{
											MessageBoxHelper.Show("PermissionsErrorBody", "PermissionsErrorTitle", MessageBoxButtons.OK, MessageBoxIcon.Stop);
										}
									}
									catch (Exception exception)
									{
										T.Log("Exception thrown", exception.Message);
										ExceptionManager.Publish(exception);
										ErrorDialog.Show(exception);
									}
								}
							}
							catch (SqlException)
							{
							}
						}
					}
				}

			}
			else
			{
				handleRunningInstance(instance);
			}

			T.X();

		}

		#endregion

		#region Application Exit Point

		/// <summary>
		/// Main exit point for the application interface
		/// </summary>
		public static void ExitApplication()
		{
			//
			// TODO: Add NUnit stuff for the Application interface exit point
			//

			// Add trace statements
			T.E("Application exit point");

			//
			// TODO: Add any application tidy code here
			//

			if (UPDApplication.mainForm != null)
			{
				UPDApplication.mainForm.Close();
				UPDApplication.mainForm.Dispose();
			}

			// SJR - Not sure how the Application.Exit() works, will any
			//       code be executed after the call?
			T.X();
			Application.Exit();

		}

		#endregion

		#region Instance Handler

		/// <summary>
		/// Get the process the application is running on
		/// </summary>
		/// <returns></returns>
		private static Process runningInstance()
		{
			T.E();

			try
			{
				Process current = Process.GetCurrentProcess();
				Process[] processes = Process.GetProcessesByName(current.ProcessName);

				//Loop through the running processes in with the same name
				foreach (Process process in processes)
				{
					//Ignore the current process
					if (process.Id != current.Id)
					{
						//Make sure that the process is running from the exe file.
						if (Assembly.GetExecutingAssembly().Location.Replace("/", "\\") ==
							current.MainModule.FileName)
						{
							//Return the other process instance.
							return process;
						}
					}
				}

				//No other instance was found, return null.
				return null;
			}
			finally
			{
				T.X();
			}
		}


		/// <summary>
		/// Application is already running so set the focus to it.
		/// </summary>
		/// <param name="instance"></param>
		private static void handleRunningInstance(Process instance)
		{
			T.E();

			try
			{
				//Make sure the window is not minimized or maximized
				ShowWindowAsync(instance.MainWindowHandle, WS_SHOWNORMAL);

				//Set the real intance to foreground window
				SetForegroundWindow(instance.MainWindowHandle);
			}
			finally
			{
				T.X();
			}
		}

		[DllImport("User32.dll")]
		private static extern bool ShowWindowAsync(IntPtr hWnd, int cmdShow);

		[DllImport("User32.dll")]
		private static extern bool SetForegroundWindow(IntPtr hWnd);

		private const int WS_SHOWNORMAL = 1;

		#endregion

		#region Private Helper Methods

		/// <summary>
		/// Handle a thread exception
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private static void Application_ThreadException(object sender, ThreadExceptionEventArgs e)
		{
			T.E();

			try
			{
				ExceptionManager.Publish(e.Exception);
				T.DumpException(e.Exception);
				ErrorDialog.Show(e.Exception);
			}
			finally
			{
				T.X();
			}
		}

		/// <summary>
		/// Validate the Desktop Date Time
		/// </summary>
		/// <returns>Valid or Invalid indicator</returns>
		private static bool validateDesktopDateTime()
		{
			T.E();

			try
			{
				bool returnValue = true;

				// Check Date/Time difference between server and client
				DateTime sqlServerDate = SystemController.GetServerDateTime(ConfigurationSettings.AppSettings["connectionString"]);


				TimeSpan difference = DateTime.Now.Subtract(sqlServerDate);
				if (difference.TotalHours > 1.5 || difference.TotalHours < -1.5)
				{
					returnValue = false;
				}

				return returnValue;
			}
			finally
			{
				T.X();
			}
		}

		#endregion
	}
}