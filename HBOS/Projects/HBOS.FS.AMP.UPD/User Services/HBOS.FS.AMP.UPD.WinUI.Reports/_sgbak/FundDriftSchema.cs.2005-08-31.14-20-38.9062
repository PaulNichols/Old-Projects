//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HBOS.FS.AMP.UPD.WinUI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class FundDriftDataset : DataSet {
        
        private AssetFundDataTable tableAssetFund;
        
        public FundDriftDataset() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected FundDriftDataset(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["AssetFund"] != null)) {
                    this.Tables.Add(new AssetFundDataTable(ds.Tables["AssetFund"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetFundDataTable AssetFund {
            get {
                return this.tableAssetFund;
            }
        }
        
        public override DataSet Clone() {
            FundDriftDataset cln = ((FundDriftDataset)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["AssetFund"] != null)) {
                this.Tables.Add(new AssetFundDataTable(ds.Tables["AssetFund"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAssetFund = ((AssetFundDataTable)(this.Tables["AssetFund"]));
            if ((this.tableAssetFund != null)) {
                this.tableAssetFund.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "FundDriftDataset";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Dataset1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAssetFund = new AssetFundDataTable();
            this.Tables.Add(this.tableAssetFund);
        }
        
        private bool ShouldSerializeAssetFund() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void AssetFundRowChangeEventHandler(object sender, AssetFundRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssetFundDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFundCode;
            
            private DataColumn columnFundName;
            
            private DataColumn columnSumOfEffect;
            
            private DataColumn columnSumOfProportion;
            
            private DataColumn columnEffect;
            
            private DataColumn columnCurrencyMovement;
            
            private DataColumn columnCurrentBenchmarkCurrencyRate;
            
            private DataColumn columnPreviousBenchmarkCurrencyRate;
            
            private DataColumn columnBenchmarkMovement;
            
            private DataColumn columnAssetFundCurrency;
            
            private DataColumn columnCurrentAssetCurrencyRate;
            
            private DataColumn columnPreviousAssetCurrencyRate;
            
            private DataColumn columnCurrentBenchmarkValue;
            
            private DataColumn columnPreviousBenchmarkValue;
            
            private DataColumn columnProportion;
            
            private DataColumn columnBenchMarkName;
            
            private DataColumn columnFundGroupName;
            
            internal AssetFundDataTable() : 
                    base("AssetFund") {
                this.InitClass();
            }
            
            internal AssetFundDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FundCodeColumn {
                get {
                    return this.columnFundCode;
                }
            }
            
            internal DataColumn FundNameColumn {
                get {
                    return this.columnFundName;
                }
            }
            
            internal DataColumn SumOfEffectColumn {
                get {
                    return this.columnSumOfEffect;
                }
            }
            
            internal DataColumn SumOfProportionColumn {
                get {
                    return this.columnSumOfProportion;
                }
            }
            
            internal DataColumn EffectColumn {
                get {
                    return this.columnEffect;
                }
            }
            
            internal DataColumn CurrencyMovementColumn {
                get {
                    return this.columnCurrencyMovement;
                }
            }
            
            internal DataColumn CurrentBenchmarkCurrencyRateColumn {
                get {
                    return this.columnCurrentBenchmarkCurrencyRate;
                }
            }
            
            internal DataColumn PreviousBenchmarkCurrencyRateColumn {
                get {
                    return this.columnPreviousBenchmarkCurrencyRate;
                }
            }
            
            internal DataColumn BenchmarkMovementColumn {
                get {
                    return this.columnBenchmarkMovement;
                }
            }
            
            internal DataColumn AssetFundCurrencyColumn {
                get {
                    return this.columnAssetFundCurrency;
                }
            }
            
            internal DataColumn CurrentAssetCurrencyRateColumn {
                get {
                    return this.columnCurrentAssetCurrencyRate;
                }
            }
            
            internal DataColumn PreviousAssetCurrencyRateColumn {
                get {
                    return this.columnPreviousAssetCurrencyRate;
                }
            }
            
            internal DataColumn CurrentBenchmarkValueColumn {
                get {
                    return this.columnCurrentBenchmarkValue;
                }
            }
            
            internal DataColumn PreviousBenchmarkValueColumn {
                get {
                    return this.columnPreviousBenchmarkValue;
                }
            }
            
            internal DataColumn ProportionColumn {
                get {
                    return this.columnProportion;
                }
            }
            
            internal DataColumn BenchMarkNameColumn {
                get {
                    return this.columnBenchMarkName;
                }
            }
            
            internal DataColumn FundGroupNameColumn {
                get {
                    return this.columnFundGroupName;
                }
            }
            
            public AssetFundRow this[int index] {
                get {
                    return ((AssetFundRow)(this.Rows[index]));
                }
            }
            
            public event AssetFundRowChangeEventHandler AssetFundRowChanged;
            
            public event AssetFundRowChangeEventHandler AssetFundRowChanging;
            
            public event AssetFundRowChangeEventHandler AssetFundRowDeleted;
            
            public event AssetFundRowChangeEventHandler AssetFundRowDeleting;
            
            public void AddAssetFundRow(AssetFundRow row) {
                this.Rows.Add(row);
            }
            
            public AssetFundRow AddAssetFundRow(
                        string FundCode, 
                        string FundName, 
                        string SumOfEffect, 
                        string SumOfProportion, 
                        string Effect, 
                        string CurrencyMovement, 
                        string CurrentBenchmarkCurrencyRate, 
                        string PreviousBenchmarkCurrencyRate, 
                        string BenchmarkMovement, 
                        string AssetFundCurrency, 
                        string CurrentAssetCurrencyRate, 
                        string PreviousAssetCurrencyRate, 
                        string CurrentBenchmarkValue, 
                        string PreviousBenchmarkValue, 
                        string Proportion, 
                        string BenchMarkName, 
                        string FundGroupName) {
                AssetFundRow rowAssetFundRow = ((AssetFundRow)(this.NewRow()));
                rowAssetFundRow.ItemArray = new object[] {
                        FundCode,
                        FundName,
                        SumOfEffect,
                        SumOfProportion,
                        Effect,
                        CurrencyMovement,
                        CurrentBenchmarkCurrencyRate,
                        PreviousBenchmarkCurrencyRate,
                        BenchmarkMovement,
                        AssetFundCurrency,
                        CurrentAssetCurrencyRate,
                        PreviousAssetCurrencyRate,
                        CurrentBenchmarkValue,
                        PreviousBenchmarkValue,
                        Proportion,
                        BenchMarkName,
                        FundGroupName};
                this.Rows.Add(rowAssetFundRow);
                return rowAssetFundRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AssetFundDataTable cln = ((AssetFundDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new AssetFundDataTable();
            }
            
            internal void InitVars() {
                this.columnFundCode = this.Columns["FundCode"];
                this.columnFundName = this.Columns["FundName"];
                this.columnSumOfEffect = this.Columns["SumOfEffect"];
                this.columnSumOfProportion = this.Columns["SumOfProportion"];
                this.columnEffect = this.Columns["Effect"];
                this.columnCurrencyMovement = this.Columns["CurrencyMovement"];
                this.columnCurrentBenchmarkCurrencyRate = this.Columns["CurrentBenchmarkCurrencyRate"];
                this.columnPreviousBenchmarkCurrencyRate = this.Columns["PreviousBenchmarkCurrencyRate"];
                this.columnBenchmarkMovement = this.Columns["BenchmarkMovement"];
                this.columnAssetFundCurrency = this.Columns["AssetFundCurrency"];
                this.columnCurrentAssetCurrencyRate = this.Columns["CurrentAssetCurrencyRate"];
                this.columnPreviousAssetCurrencyRate = this.Columns["PreviousAssetCurrencyRate"];
                this.columnCurrentBenchmarkValue = this.Columns["CurrentBenchmarkValue"];
                this.columnPreviousBenchmarkValue = this.Columns["PreviousBenchmarkValue"];
                this.columnProportion = this.Columns["Proportion"];
                this.columnBenchMarkName = this.Columns["BenchMarkName"];
                this.columnFundGroupName = this.Columns["FundGroupName"];
            }
            
            private void InitClass() {
                this.columnFundCode = new DataColumn("FundCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFundCode);
                this.columnFundName = new DataColumn("FundName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFundName);
                this.columnSumOfEffect = new DataColumn("SumOfEffect", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSumOfEffect);
                this.columnSumOfProportion = new DataColumn("SumOfProportion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSumOfProportion);
                this.columnEffect = new DataColumn("Effect", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEffect);
                this.columnCurrencyMovement = new DataColumn("CurrencyMovement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrencyMovement);
                this.columnCurrentBenchmarkCurrencyRate = new DataColumn("CurrentBenchmarkCurrencyRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentBenchmarkCurrencyRate);
                this.columnPreviousBenchmarkCurrencyRate = new DataColumn("PreviousBenchmarkCurrencyRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousBenchmarkCurrencyRate);
                this.columnBenchmarkMovement = new DataColumn("BenchmarkMovement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBenchmarkMovement);
                this.columnAssetFundCurrency = new DataColumn("AssetFundCurrency", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAssetFundCurrency);
                this.columnCurrentAssetCurrencyRate = new DataColumn("CurrentAssetCurrencyRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentAssetCurrencyRate);
                this.columnPreviousAssetCurrencyRate = new DataColumn("PreviousAssetCurrencyRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousAssetCurrencyRate);
                this.columnCurrentBenchmarkValue = new DataColumn("CurrentBenchmarkValue", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentBenchmarkValue);
                this.columnPreviousBenchmarkValue = new DataColumn("PreviousBenchmarkValue", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousBenchmarkValue);
                this.columnProportion = new DataColumn("Proportion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnProportion);
                this.columnBenchMarkName = new DataColumn("BenchMarkName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBenchMarkName);
                this.columnFundGroupName = new DataColumn("FundGroupName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFundGroupName);
                this.columnFundCode.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnFundName.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnSumOfEffect.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnSumOfProportion.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnEffect.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnCurrencyMovement.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnCurrentBenchmarkCurrencyRate.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnPreviousBenchmarkCurrencyRate.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnBenchmarkMovement.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnAssetFundCurrency.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnCurrentAssetCurrencyRate.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnPreviousAssetCurrencyRate.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnCurrentBenchmarkValue.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnPreviousBenchmarkValue.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnProportion.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnBenchMarkName.Namespace = "http://tempuri.org/Dataset1.xsd";
                this.columnFundGroupName.Namespace = "http://tempuri.org/Dataset1.xsd";
            }
            
            public AssetFundRow NewAssetFundRow() {
                return ((AssetFundRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AssetFundRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AssetFundRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetFundRowChanged != null)) {
                    this.AssetFundRowChanged(this, new AssetFundRowChangeEvent(((AssetFundRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetFundRowChanging != null)) {
                    this.AssetFundRowChanging(this, new AssetFundRowChangeEvent(((AssetFundRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetFundRowDeleted != null)) {
                    this.AssetFundRowDeleted(this, new AssetFundRowChangeEvent(((AssetFundRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetFundRowDeleting != null)) {
                    this.AssetFundRowDeleting(this, new AssetFundRowChangeEvent(((AssetFundRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAssetFundRow(AssetFundRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssetFundRow : DataRow {
            
            private AssetFundDataTable tableAssetFund;
            
            internal AssetFundRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetFund = ((AssetFundDataTable)(this.Table));
            }
            
            public string FundCode {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.FundCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.FundCodeColumn] = value;
                }
            }
            
            public string FundName {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.FundNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.FundNameColumn] = value;
                }
            }
            
            public string SumOfEffect {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.SumOfEffectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.SumOfEffectColumn] = value;
                }
            }
            
            public string SumOfProportion {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.SumOfProportionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.SumOfProportionColumn] = value;
                }
            }
            
            public string Effect {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.EffectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.EffectColumn] = value;
                }
            }
            
            public string CurrencyMovement {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.CurrencyMovementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.CurrencyMovementColumn] = value;
                }
            }
            
            public string CurrentBenchmarkCurrencyRate {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.CurrentBenchmarkCurrencyRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.CurrentBenchmarkCurrencyRateColumn] = value;
                }
            }
            
            public string PreviousBenchmarkCurrencyRate {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.PreviousBenchmarkCurrencyRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.PreviousBenchmarkCurrencyRateColumn] = value;
                }
            }
            
            public string BenchmarkMovement {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.BenchmarkMovementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.BenchmarkMovementColumn] = value;
                }
            }
            
            public string AssetFundCurrency {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.AssetFundCurrencyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.AssetFundCurrencyColumn] = value;
                }
            }
            
            public string CurrentAssetCurrencyRate {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.CurrentAssetCurrencyRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.CurrentAssetCurrencyRateColumn] = value;
                }
            }
            
            public string PreviousAssetCurrencyRate {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.PreviousAssetCurrencyRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.PreviousAssetCurrencyRateColumn] = value;
                }
            }
            
            public string CurrentBenchmarkValue {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.CurrentBenchmarkValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.CurrentBenchmarkValueColumn] = value;
                }
            }
            
            public string PreviousBenchmarkValue {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.PreviousBenchmarkValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.PreviousBenchmarkValueColumn] = value;
                }
            }
            
            public string Proportion {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.ProportionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.ProportionColumn] = value;
                }
            }
            
            public string BenchMarkName {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.BenchMarkNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.BenchMarkNameColumn] = value;
                }
            }
            
            public string FundGroupName {
                get {
                    try {
                        return ((string)(this[this.tableAssetFund.FundGroupNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetFund.FundGroupNameColumn] = value;
                }
            }
            
            public bool IsFundCodeNull() {
                return this.IsNull(this.tableAssetFund.FundCodeColumn);
            }
            
            public void SetFundCodeNull() {
                this[this.tableAssetFund.FundCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFundNameNull() {
                return this.IsNull(this.tableAssetFund.FundNameColumn);
            }
            
            public void SetFundNameNull() {
                this[this.tableAssetFund.FundNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumOfEffectNull() {
                return this.IsNull(this.tableAssetFund.SumOfEffectColumn);
            }
            
            public void SetSumOfEffectNull() {
                this[this.tableAssetFund.SumOfEffectColumn] = System.Convert.DBNull;
            }
            
            public bool IsSumOfProportionNull() {
                return this.IsNull(this.tableAssetFund.SumOfProportionColumn);
            }
            
            public void SetSumOfProportionNull() {
                this[this.tableAssetFund.SumOfProportionColumn] = System.Convert.DBNull;
            }
            
            public bool IsEffectNull() {
                return this.IsNull(this.tableAssetFund.EffectColumn);
            }
            
            public void SetEffectNull() {
                this[this.tableAssetFund.EffectColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyMovementNull() {
                return this.IsNull(this.tableAssetFund.CurrencyMovementColumn);
            }
            
            public void SetCurrencyMovementNull() {
                this[this.tableAssetFund.CurrencyMovementColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentBenchmarkCurrencyRateNull() {
                return this.IsNull(this.tableAssetFund.CurrentBenchmarkCurrencyRateColumn);
            }
            
            public void SetCurrentBenchmarkCurrencyRateNull() {
                this[this.tableAssetFund.CurrentBenchmarkCurrencyRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousBenchmarkCurrencyRateNull() {
                return this.IsNull(this.tableAssetFund.PreviousBenchmarkCurrencyRateColumn);
            }
            
            public void SetPreviousBenchmarkCurrencyRateNull() {
                this[this.tableAssetFund.PreviousBenchmarkCurrencyRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsBenchmarkMovementNull() {
                return this.IsNull(this.tableAssetFund.BenchmarkMovementColumn);
            }
            
            public void SetBenchmarkMovementNull() {
                this[this.tableAssetFund.BenchmarkMovementColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssetFundCurrencyNull() {
                return this.IsNull(this.tableAssetFund.AssetFundCurrencyColumn);
            }
            
            public void SetAssetFundCurrencyNull() {
                this[this.tableAssetFund.AssetFundCurrencyColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentAssetCurrencyRateNull() {
                return this.IsNull(this.tableAssetFund.CurrentAssetCurrencyRateColumn);
            }
            
            public void SetCurrentAssetCurrencyRateNull() {
                this[this.tableAssetFund.CurrentAssetCurrencyRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousAssetCurrencyRateNull() {
                return this.IsNull(this.tableAssetFund.PreviousAssetCurrencyRateColumn);
            }
            
            public void SetPreviousAssetCurrencyRateNull() {
                this[this.tableAssetFund.PreviousAssetCurrencyRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentBenchmarkValueNull() {
                return this.IsNull(this.tableAssetFund.CurrentBenchmarkValueColumn);
            }
            
            public void SetCurrentBenchmarkValueNull() {
                this[this.tableAssetFund.CurrentBenchmarkValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousBenchmarkValueNull() {
                return this.IsNull(this.tableAssetFund.PreviousBenchmarkValueColumn);
            }
            
            public void SetPreviousBenchmarkValueNull() {
                this[this.tableAssetFund.PreviousBenchmarkValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsProportionNull() {
                return this.IsNull(this.tableAssetFund.ProportionColumn);
            }
            
            public void SetProportionNull() {
                this[this.tableAssetFund.ProportionColumn] = System.Convert.DBNull;
            }
            
            public bool IsBenchMarkNameNull() {
                return this.IsNull(this.tableAssetFund.BenchMarkNameColumn);
            }
            
            public void SetBenchMarkNameNull() {
                this[this.tableAssetFund.BenchMarkNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFundGroupNameNull() {
                return this.IsNull(this.tableAssetFund.FundGroupNameColumn);
            }
            
            public void SetFundGroupNameNull() {
                this[this.tableAssetFund.FundGroupNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssetFundRowChangeEvent : EventArgs {
            
            private AssetFundRow eventRow;
            
            private DataRowAction eventAction;
            
            public AssetFundRowChangeEvent(AssetFundRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AssetFundRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
