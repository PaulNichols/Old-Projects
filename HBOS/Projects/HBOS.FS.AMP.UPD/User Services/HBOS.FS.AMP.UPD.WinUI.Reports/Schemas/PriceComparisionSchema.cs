//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HBOS.FS.AMP.UPD.WinUI.Reports.Schemas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PriceComparisionSchema : DataSet {
        
        private ComparisionDetailsDataTable tableComparisionDetails;
        
        public PriceComparisionSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PriceComparisionSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ComparisionDetails"] != null)) {
                    this.Tables.Add(new ComparisionDetailsDataTable(ds.Tables["ComparisionDetails"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComparisionDetailsDataTable ComparisionDetails {
            get {
                return this.tableComparisionDetails;
            }
        }
        
        public override DataSet Clone() {
            PriceComparisionSchema cln = ((PriceComparisionSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ComparisionDetails"] != null)) {
                this.Tables.Add(new ComparisionDetailsDataTable(ds.Tables["ComparisionDetails"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableComparisionDetails = ((ComparisionDetailsDataTable)(this.Tables["ComparisionDetails"]));
            if ((this.tableComparisionDetails != null)) {
                this.tableComparisionDetails.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PriceComparisionSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableComparisionDetails = new ComparisionDetailsDataTable();
            this.Tables.Add(this.tableComparisionDetails);
        }
        
        private bool ShouldSerializeComparisionDetails() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ComparisionDetailsRowChangeEventHandler(object sender, ComparisionDetailsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComparisionDetailsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFundFullName;
            
            private DataColumn columnAssetFundFullName;
            
            private DataColumn columnFundType;
            
            private DataColumn columnImportedPriceValuationDate;
            
            private DataColumn columnAuthorisedPriceValuationDate;
            
            private DataColumn columnAuthorisedPriceType;
            
            private DataColumn columnPriceMovement;
            
            private DataColumn columnImportedPrice;
            
            private DataColumn columnAuthorisedPrice;
            
            internal ComparisionDetailsDataTable() : 
                    base("ComparisionDetails") {
                this.InitClass();
            }
            
            internal ComparisionDetailsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FundFullNameColumn {
                get {
                    return this.columnFundFullName;
                }
            }
            
            internal DataColumn AssetFundFullNameColumn {
                get {
                    return this.columnAssetFundFullName;
                }
            }
            
            internal DataColumn FundTypeColumn {
                get {
                    return this.columnFundType;
                }
            }
            
            internal DataColumn ImportedPriceValuationDateColumn {
                get {
                    return this.columnImportedPriceValuationDate;
                }
            }
            
            internal DataColumn AuthorisedPriceValuationDateColumn {
                get {
                    return this.columnAuthorisedPriceValuationDate;
                }
            }
            
            internal DataColumn AuthorisedPriceTypeColumn {
                get {
                    return this.columnAuthorisedPriceType;
                }
            }
            
            internal DataColumn PriceMovementColumn {
                get {
                    return this.columnPriceMovement;
                }
            }
            
            internal DataColumn ImportedPriceColumn {
                get {
                    return this.columnImportedPrice;
                }
            }
            
            internal DataColumn AuthorisedPriceColumn {
                get {
                    return this.columnAuthorisedPrice;
                }
            }
            
            public ComparisionDetailsRow this[int index] {
                get {
                    return ((ComparisionDetailsRow)(this.Rows[index]));
                }
            }
            
            public event ComparisionDetailsRowChangeEventHandler ComparisionDetailsRowChanged;
            
            public event ComparisionDetailsRowChangeEventHandler ComparisionDetailsRowChanging;
            
            public event ComparisionDetailsRowChangeEventHandler ComparisionDetailsRowDeleted;
            
            public event ComparisionDetailsRowChangeEventHandler ComparisionDetailsRowDeleting;
            
            public void AddComparisionDetailsRow(ComparisionDetailsRow row) {
                this.Rows.Add(row);
            }
            
            public ComparisionDetailsRow AddComparisionDetailsRow(string FundFullName, string AssetFundFullName, string FundType, System.DateTime ImportedPriceValuationDate, string AuthorisedPriceValuationDate, string AuthorisedPriceType, string PriceMovement, string ImportedPrice, string AuthorisedPrice) {
                ComparisionDetailsRow rowComparisionDetailsRow = ((ComparisionDetailsRow)(this.NewRow()));
                rowComparisionDetailsRow.ItemArray = new object[] {
                        FundFullName,
                        AssetFundFullName,
                        FundType,
                        ImportedPriceValuationDate,
                        AuthorisedPriceValuationDate,
                        AuthorisedPriceType,
                        PriceMovement,
                        ImportedPrice,
                        AuthorisedPrice};
                this.Rows.Add(rowComparisionDetailsRow);
                return rowComparisionDetailsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ComparisionDetailsDataTable cln = ((ComparisionDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ComparisionDetailsDataTable();
            }
            
            internal void InitVars() {
                this.columnFundFullName = this.Columns["FundFullName"];
                this.columnAssetFundFullName = this.Columns["AssetFundFullName"];
                this.columnFundType = this.Columns["FundType"];
                this.columnImportedPriceValuationDate = this.Columns["ImportedPriceValuationDate"];
                this.columnAuthorisedPriceValuationDate = this.Columns["AuthorisedPriceValuationDate"];
                this.columnAuthorisedPriceType = this.Columns["AuthorisedPriceType"];
                this.columnPriceMovement = this.Columns["PriceMovement"];
                this.columnImportedPrice = this.Columns["ImportedPrice"];
                this.columnAuthorisedPrice = this.Columns["AuthorisedPrice"];
            }
            
            private void InitClass() {
                this.columnFundFullName = new DataColumn("FundFullName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFundFullName);
                this.columnAssetFundFullName = new DataColumn("AssetFundFullName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAssetFundFullName);
                this.columnFundType = new DataColumn("FundType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFundType);
                this.columnImportedPriceValuationDate = new DataColumn("ImportedPriceValuationDate", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnImportedPriceValuationDate);
                this.columnAuthorisedPriceValuationDate = new DataColumn("AuthorisedPriceValuationDate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAuthorisedPriceValuationDate);
                this.columnAuthorisedPriceType = new DataColumn("AuthorisedPriceType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAuthorisedPriceType);
                this.columnPriceMovement = new DataColumn("PriceMovement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPriceMovement);
                this.columnImportedPrice = new DataColumn("ImportedPrice", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnImportedPrice);
                this.columnAuthorisedPrice = new DataColumn("AuthorisedPrice", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAuthorisedPrice);
                this.columnFundFullName.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnAssetFundFullName.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnFundType.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnImportedPriceValuationDate.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnAuthorisedPriceValuationDate.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnAuthorisedPriceType.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnPriceMovement.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnImportedPrice.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
                this.columnAuthorisedPrice.Namespace = "http://tempuri.org/PriceComparisionSchema.xsd";
            }
            
            public ComparisionDetailsRow NewComparisionDetailsRow() {
                return ((ComparisionDetailsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ComparisionDetailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ComparisionDetailsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComparisionDetailsRowChanged != null)) {
                    this.ComparisionDetailsRowChanged(this, new ComparisionDetailsRowChangeEvent(((ComparisionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComparisionDetailsRowChanging != null)) {
                    this.ComparisionDetailsRowChanging(this, new ComparisionDetailsRowChangeEvent(((ComparisionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComparisionDetailsRowDeleted != null)) {
                    this.ComparisionDetailsRowDeleted(this, new ComparisionDetailsRowChangeEvent(((ComparisionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComparisionDetailsRowDeleting != null)) {
                    this.ComparisionDetailsRowDeleting(this, new ComparisionDetailsRowChangeEvent(((ComparisionDetailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveComparisionDetailsRow(ComparisionDetailsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComparisionDetailsRow : DataRow {
            
            private ComparisionDetailsDataTable tableComparisionDetails;
            
            internal ComparisionDetailsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableComparisionDetails = ((ComparisionDetailsDataTable)(this.Table));
            }
            
            public string FundFullName {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.FundFullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.FundFullNameColumn] = value;
                }
            }
            
            public string AssetFundFullName {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.AssetFundFullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.AssetFundFullNameColumn] = value;
                }
            }
            
            public string FundType {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.FundTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.FundTypeColumn] = value;
                }
            }
            
            public System.DateTime ImportedPriceValuationDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableComparisionDetails.ImportedPriceValuationDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.ImportedPriceValuationDateColumn] = value;
                }
            }
            
            public string AuthorisedPriceValuationDate {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.AuthorisedPriceValuationDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.AuthorisedPriceValuationDateColumn] = value;
                }
            }
            
            public string AuthorisedPriceType {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.AuthorisedPriceTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.AuthorisedPriceTypeColumn] = value;
                }
            }
            
            public string PriceMovement {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.PriceMovementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.PriceMovementColumn] = value;
                }
            }
            
            public string ImportedPrice {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.ImportedPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.ImportedPriceColumn] = value;
                }
            }
            
            public string AuthorisedPrice {
                get {
                    try {
                        return ((string)(this[this.tableComparisionDetails.AuthorisedPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableComparisionDetails.AuthorisedPriceColumn] = value;
                }
            }
            
            public bool IsFundFullNameNull() {
                return this.IsNull(this.tableComparisionDetails.FundFullNameColumn);
            }
            
            public void SetFundFullNameNull() {
                this[this.tableComparisionDetails.FundFullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssetFundFullNameNull() {
                return this.IsNull(this.tableComparisionDetails.AssetFundFullNameColumn);
            }
            
            public void SetAssetFundFullNameNull() {
                this[this.tableComparisionDetails.AssetFundFullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFundTypeNull() {
                return this.IsNull(this.tableComparisionDetails.FundTypeColumn);
            }
            
            public void SetFundTypeNull() {
                this[this.tableComparisionDetails.FundTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsImportedPriceValuationDateNull() {
                return this.IsNull(this.tableComparisionDetails.ImportedPriceValuationDateColumn);
            }
            
            public void SetImportedPriceValuationDateNull() {
                this[this.tableComparisionDetails.ImportedPriceValuationDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAuthorisedPriceValuationDateNull() {
                return this.IsNull(this.tableComparisionDetails.AuthorisedPriceValuationDateColumn);
            }
            
            public void SetAuthorisedPriceValuationDateNull() {
                this[this.tableComparisionDetails.AuthorisedPriceValuationDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAuthorisedPriceTypeNull() {
                return this.IsNull(this.tableComparisionDetails.AuthorisedPriceTypeColumn);
            }
            
            public void SetAuthorisedPriceTypeNull() {
                this[this.tableComparisionDetails.AuthorisedPriceTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriceMovementNull() {
                return this.IsNull(this.tableComparisionDetails.PriceMovementColumn);
            }
            
            public void SetPriceMovementNull() {
                this[this.tableComparisionDetails.PriceMovementColumn] = System.Convert.DBNull;
            }
            
            public bool IsImportedPriceNull() {
                return this.IsNull(this.tableComparisionDetails.ImportedPriceColumn);
            }
            
            public void SetImportedPriceNull() {
                this[this.tableComparisionDetails.ImportedPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsAuthorisedPriceNull() {
                return this.IsNull(this.tableComparisionDetails.AuthorisedPriceColumn);
            }
            
            public void SetAuthorisedPriceNull() {
                this[this.tableComparisionDetails.AuthorisedPriceColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ComparisionDetailsRowChangeEvent : EventArgs {
            
            private ComparisionDetailsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ComparisionDetailsRowChangeEvent(ComparisionDetailsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ComparisionDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
