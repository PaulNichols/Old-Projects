//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HBOS.FS.AMP.UPD.WinUI.Reports.Schemas {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class PredictedPriceSchema : DataSet {
        
        private FundDataTable tableFund;
        
        public PredictedPriceSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected PredictedPriceSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Fund"] != null)) {
                    this.Tables.Add(new FundDataTable(ds.Tables["Fund"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FundDataTable Fund {
            get {
                return this.tableFund;
            }
        }
        
        public override DataSet Clone() {
            PredictedPriceSchema cln = ((PredictedPriceSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Fund"] != null)) {
                this.Tables.Add(new FundDataTable(ds.Tables["Fund"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableFund = ((FundDataTable)(this.Tables["Fund"]));
            if ((this.tableFund != null)) {
                this.tableFund.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "PredictedPriceSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFund = new FundDataTable();
            this.Tables.Add(this.tableFund);
        }
        
        private bool ShouldSerializeFund() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FundRowChangeEventHandler(object sender, FundRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FundDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFullName;
            
            private DataColumn columnHiPortfolioCode;
            
            private DataColumn columnValuationPoint;
            
            private DataColumn columnPredictedPrice;
            
            private DataColumn columnImportedPrice;
            
            private DataColumn columnPreviousPrice;
            
            private DataColumn columnAssetFundName;
            
            private DataColumn columnAssetFundCode;
            
            private DataColumn columnFundCurrencyCode;
            
            private DataColumn columnRevaluationFactor;
            
            private DataColumn columnScalingFactor;
            
            private DataColumn columnTaxProvisionFactor;
            
            private DataColumn columnValuationBasis;
            
            private DataColumn columnXfactor;
            
            private DataColumn columnUpperTolerance;
            
            private DataColumn columnLowerTolerance;
            
            private DataColumn columnAMTolerance;
            
            private DataColumn columnPriceIncreaseOnly;
            
            private DataColumn columnBenchmarkName;
            
            private DataColumn columnProportion;
            
            private DataColumn columnCurrencyCode;
            
            private DataColumn columnBenchmarkMovement;
            
            private DataColumn columnCurrencyMovement;
            
            private DataColumn columnTotalMovement;
            
            private DataColumn columnEffect;
            
            private DataColumn columnAvailability;
            
            private DataColumn columnPreviousBenchmarkValue;
            
            private DataColumn columnCurrentBenchmarkValue;
            
            private DataColumn columnPreviousAssetFundExchangeRate;
            
            private DataColumn columnCurrentAssetFundExchangeRate;
            
            private DataColumn columnPreviousBenchmarkExchangeRate;
            
            private DataColumn columnCurrentBenchmarkExchangeRate;
            
            internal FundDataTable() : 
                    base("Fund") {
                this.InitClass();
            }
            
            internal FundDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            internal DataColumn HiPortfolioCodeColumn {
                get {
                    return this.columnHiPortfolioCode;
                }
            }
            
            internal DataColumn ValuationPointColumn {
                get {
                    return this.columnValuationPoint;
                }
            }
            
            internal DataColumn PredictedPriceColumn {
                get {
                    return this.columnPredictedPrice;
                }
            }
            
            internal DataColumn ImportedPriceColumn {
                get {
                    return this.columnImportedPrice;
                }
            }
            
            internal DataColumn PreviousPriceColumn {
                get {
                    return this.columnPreviousPrice;
                }
            }
            
            internal DataColumn AssetFundNameColumn {
                get {
                    return this.columnAssetFundName;
                }
            }
            
            internal DataColumn AssetFundCodeColumn {
                get {
                    return this.columnAssetFundCode;
                }
            }
            
            internal DataColumn FundCurrencyCodeColumn {
                get {
                    return this.columnFundCurrencyCode;
                }
            }
            
            internal DataColumn RevaluationFactorColumn {
                get {
                    return this.columnRevaluationFactor;
                }
            }
            
            internal DataColumn ScalingFactorColumn {
                get {
                    return this.columnScalingFactor;
                }
            }
            
            internal DataColumn TaxProvisionFactorColumn {
                get {
                    return this.columnTaxProvisionFactor;
                }
            }
            
            internal DataColumn ValuationBasisColumn {
                get {
                    return this.columnValuationBasis;
                }
            }
            
            internal DataColumn XfactorColumn {
                get {
                    return this.columnXfactor;
                }
            }
            
            internal DataColumn UpperToleranceColumn {
                get {
                    return this.columnUpperTolerance;
                }
            }
            
            internal DataColumn LowerToleranceColumn {
                get {
                    return this.columnLowerTolerance;
                }
            }
            
            internal DataColumn AMToleranceColumn {
                get {
                    return this.columnAMTolerance;
                }
            }
            
            internal DataColumn PriceIncreaseOnlyColumn {
                get {
                    return this.columnPriceIncreaseOnly;
                }
            }
            
            internal DataColumn BenchmarkNameColumn {
                get {
                    return this.columnBenchmarkName;
                }
            }
            
            internal DataColumn ProportionColumn {
                get {
                    return this.columnProportion;
                }
            }
            
            internal DataColumn CurrencyCodeColumn {
                get {
                    return this.columnCurrencyCode;
                }
            }
            
            internal DataColumn BenchmarkMovementColumn {
                get {
                    return this.columnBenchmarkMovement;
                }
            }
            
            internal DataColumn CurrencyMovementColumn {
                get {
                    return this.columnCurrencyMovement;
                }
            }
            
            internal DataColumn TotalMovementColumn {
                get {
                    return this.columnTotalMovement;
                }
            }
            
            internal DataColumn EffectColumn {
                get {
                    return this.columnEffect;
                }
            }
            
            internal DataColumn AvailabilityColumn {
                get {
                    return this.columnAvailability;
                }
            }
            
            internal DataColumn PreviousBenchmarkValueColumn {
                get {
                    return this.columnPreviousBenchmarkValue;
                }
            }
            
            internal DataColumn CurrentBenchmarkValueColumn {
                get {
                    return this.columnCurrentBenchmarkValue;
                }
            }
            
            internal DataColumn PreviousAssetFundExchangeRateColumn {
                get {
                    return this.columnPreviousAssetFundExchangeRate;
                }
            }
            
            internal DataColumn CurrentAssetFundExchangeRateColumn {
                get {
                    return this.columnCurrentAssetFundExchangeRate;
                }
            }
            
            internal DataColumn PreviousBenchmarkExchangeRateColumn {
                get {
                    return this.columnPreviousBenchmarkExchangeRate;
                }
            }
            
            internal DataColumn CurrentBenchmarkExchangeRateColumn {
                get {
                    return this.columnCurrentBenchmarkExchangeRate;
                }
            }
            
            public FundRow this[int index] {
                get {
                    return ((FundRow)(this.Rows[index]));
                }
            }
            
            public event FundRowChangeEventHandler FundRowChanged;
            
            public event FundRowChangeEventHandler FundRowChanging;
            
            public event FundRowChangeEventHandler FundRowDeleted;
            
            public event FundRowChangeEventHandler FundRowDeleting;
            
            public void AddFundRow(FundRow row) {
                this.Rows.Add(row);
            }
            
            public FundRow AddFundRow(
                        string FullName, 
                        string HiPortfolioCode, 
                        string ValuationPoint, 
                        string PredictedPrice, 
                        string ImportedPrice, 
                        string PreviousPrice, 
                        string AssetFundName, 
                        string AssetFundCode, 
                        string FundCurrencyCode, 
                        string RevaluationFactor, 
                        string ScalingFactor, 
                        string TaxProvisionFactor, 
                        string ValuationBasis, 
                        string Xfactor, 
                        string UpperTolerance, 
                        string LowerTolerance, 
                        string AMTolerance, 
                        string PriceIncreaseOnly, 
                        string BenchmarkName, 
                        string Proportion, 
                        string CurrencyCode, 
                        string BenchmarkMovement, 
                        string CurrencyMovement, 
                        string TotalMovement, 
                        string Effect, 
                        string Availability, 
                        string PreviousBenchmarkValue, 
                        string CurrentBenchmarkValue, 
                        string PreviousAssetFundExchangeRate, 
                        string CurrentAssetFundExchangeRate, 
                        string PreviousBenchmarkExchangeRate, 
                        string CurrentBenchmarkExchangeRate) {
                FundRow rowFundRow = ((FundRow)(this.NewRow()));
                rowFundRow.ItemArray = new object[] {
                        FullName,
                        HiPortfolioCode,
                        ValuationPoint,
                        PredictedPrice,
                        ImportedPrice,
                        PreviousPrice,
                        AssetFundName,
                        AssetFundCode,
                        FundCurrencyCode,
                        RevaluationFactor,
                        ScalingFactor,
                        TaxProvisionFactor,
                        ValuationBasis,
                        Xfactor,
                        UpperTolerance,
                        LowerTolerance,
                        AMTolerance,
                        PriceIncreaseOnly,
                        BenchmarkName,
                        Proportion,
                        CurrencyCode,
                        BenchmarkMovement,
                        CurrencyMovement,
                        TotalMovement,
                        Effect,
                        Availability,
                        PreviousBenchmarkValue,
                        CurrentBenchmarkValue,
                        PreviousAssetFundExchangeRate,
                        CurrentAssetFundExchangeRate,
                        PreviousBenchmarkExchangeRate,
                        CurrentBenchmarkExchangeRate};
                this.Rows.Add(rowFundRow);
                return rowFundRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FundDataTable cln = ((FundDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FundDataTable();
            }
            
            internal void InitVars() {
                this.columnFullName = this.Columns["FullName"];
                this.columnHiPortfolioCode = this.Columns["HiPortfolioCode"];
                this.columnValuationPoint = this.Columns["ValuationPoint"];
                this.columnPredictedPrice = this.Columns["PredictedPrice"];
                this.columnImportedPrice = this.Columns["ImportedPrice"];
                this.columnPreviousPrice = this.Columns["PreviousPrice"];
                this.columnAssetFundName = this.Columns["AssetFundName"];
                this.columnAssetFundCode = this.Columns["AssetFundCode"];
                this.columnFundCurrencyCode = this.Columns["FundCurrencyCode"];
                this.columnRevaluationFactor = this.Columns["RevaluationFactor"];
                this.columnScalingFactor = this.Columns["ScalingFactor"];
                this.columnTaxProvisionFactor = this.Columns["TaxProvisionFactor"];
                this.columnValuationBasis = this.Columns["ValuationBasis"];
                this.columnXfactor = this.Columns["Xfactor"];
                this.columnUpperTolerance = this.Columns["UpperTolerance"];
                this.columnLowerTolerance = this.Columns["LowerTolerance"];
                this.columnAMTolerance = this.Columns["AMTolerance"];
                this.columnPriceIncreaseOnly = this.Columns["PriceIncreaseOnly"];
                this.columnBenchmarkName = this.Columns["BenchmarkName"];
                this.columnProportion = this.Columns["Proportion"];
                this.columnCurrencyCode = this.Columns["CurrencyCode"];
                this.columnBenchmarkMovement = this.Columns["BenchmarkMovement"];
                this.columnCurrencyMovement = this.Columns["CurrencyMovement"];
                this.columnTotalMovement = this.Columns["TotalMovement"];
                this.columnEffect = this.Columns["Effect"];
                this.columnAvailability = this.Columns["Availability"];
                this.columnPreviousBenchmarkValue = this.Columns["PreviousBenchmarkValue"];
                this.columnCurrentBenchmarkValue = this.Columns["CurrentBenchmarkValue"];
                this.columnPreviousAssetFundExchangeRate = this.Columns["PreviousAssetFundExchangeRate"];
                this.columnCurrentAssetFundExchangeRate = this.Columns["CurrentAssetFundExchangeRate"];
                this.columnPreviousBenchmarkExchangeRate = this.Columns["PreviousBenchmarkExchangeRate"];
                this.columnCurrentBenchmarkExchangeRate = this.Columns["CurrentBenchmarkExchangeRate"];
            }
            
            private void InitClass() {
                this.columnFullName = new DataColumn("FullName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFullName);
                this.columnHiPortfolioCode = new DataColumn("HiPortfolioCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnHiPortfolioCode);
                this.columnValuationPoint = new DataColumn("ValuationPoint", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValuationPoint);
                this.columnPredictedPrice = new DataColumn("PredictedPrice", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPredictedPrice);
                this.columnImportedPrice = new DataColumn("ImportedPrice", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnImportedPrice);
                this.columnPreviousPrice = new DataColumn("PreviousPrice", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousPrice);
                this.columnAssetFundName = new DataColumn("AssetFundName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAssetFundName);
                this.columnAssetFundCode = new DataColumn("AssetFundCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAssetFundCode);
                this.columnFundCurrencyCode = new DataColumn("FundCurrencyCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFundCurrencyCode);
                this.columnRevaluationFactor = new DataColumn("RevaluationFactor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRevaluationFactor);
                this.columnScalingFactor = new DataColumn("ScalingFactor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnScalingFactor);
                this.columnTaxProvisionFactor = new DataColumn("TaxProvisionFactor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTaxProvisionFactor);
                this.columnValuationBasis = new DataColumn("ValuationBasis", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnValuationBasis);
                this.columnXfactor = new DataColumn("Xfactor", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnXfactor);
                this.columnUpperTolerance = new DataColumn("UpperTolerance", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUpperTolerance);
                this.columnLowerTolerance = new DataColumn("LowerTolerance", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnLowerTolerance);
                this.columnAMTolerance = new DataColumn("AMTolerance", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAMTolerance);
                this.columnPriceIncreaseOnly = new DataColumn("PriceIncreaseOnly", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPriceIncreaseOnly);
                this.columnBenchmarkName = new DataColumn("BenchmarkName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBenchmarkName);
                this.columnProportion = new DataColumn("Proportion", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnProportion);
                this.columnCurrencyCode = new DataColumn("CurrencyCode", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrencyCode);
                this.columnBenchmarkMovement = new DataColumn("BenchmarkMovement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBenchmarkMovement);
                this.columnCurrencyMovement = new DataColumn("CurrencyMovement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrencyMovement);
                this.columnTotalMovement = new DataColumn("TotalMovement", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnTotalMovement);
                this.columnEffect = new DataColumn("Effect", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnEffect);
                this.columnAvailability = new DataColumn("Availability", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnAvailability);
                this.columnPreviousBenchmarkValue = new DataColumn("PreviousBenchmarkValue", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousBenchmarkValue);
                this.columnCurrentBenchmarkValue = new DataColumn("CurrentBenchmarkValue", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentBenchmarkValue);
                this.columnPreviousAssetFundExchangeRate = new DataColumn("PreviousAssetFundExchangeRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousAssetFundExchangeRate);
                this.columnCurrentAssetFundExchangeRate = new DataColumn("CurrentAssetFundExchangeRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentAssetFundExchangeRate);
                this.columnPreviousBenchmarkExchangeRate = new DataColumn("PreviousBenchmarkExchangeRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnPreviousBenchmarkExchangeRate);
                this.columnCurrentBenchmarkExchangeRate = new DataColumn("CurrentBenchmarkExchangeRate", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCurrentBenchmarkExchangeRate);
                this.columnFullName.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnHiPortfolioCode.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnValuationPoint.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnPredictedPrice.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnImportedPrice.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnPreviousPrice.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnAssetFundName.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnAssetFundCode.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnFundCurrencyCode.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnRevaluationFactor.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnScalingFactor.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnTaxProvisionFactor.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnValuationBasis.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnXfactor.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnUpperTolerance.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnLowerTolerance.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnAMTolerance.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnPriceIncreaseOnly.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnBenchmarkName.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnProportion.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnCurrencyCode.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnBenchmarkMovement.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnCurrencyMovement.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnTotalMovement.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnEffect.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnAvailability.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnPreviousBenchmarkValue.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnCurrentBenchmarkValue.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnPreviousAssetFundExchangeRate.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnCurrentAssetFundExchangeRate.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnPreviousBenchmarkExchangeRate.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
                this.columnCurrentBenchmarkExchangeRate.Namespace = "http://tempuri.org/PredictedPriceSchema.xsd";
            }
            
            public FundRow NewFundRow() {
                return ((FundRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FundRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FundRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FundRowChanged != null)) {
                    this.FundRowChanged(this, new FundRowChangeEvent(((FundRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FundRowChanging != null)) {
                    this.FundRowChanging(this, new FundRowChangeEvent(((FundRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FundRowDeleted != null)) {
                    this.FundRowDeleted(this, new FundRowChangeEvent(((FundRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FundRowDeleting != null)) {
                    this.FundRowDeleting(this, new FundRowChangeEvent(((FundRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFundRow(FundRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FundRow : DataRow {
            
            private FundDataTable tableFund;
            
            internal FundRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFund = ((FundDataTable)(this.Table));
            }
            
            public string FullName {
                get {
                    try {
                        return ((string)(this[this.tableFund.FullNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.FullNameColumn] = value;
                }
            }
            
            public string HiPortfolioCode {
                get {
                    try {
                        return ((string)(this[this.tableFund.HiPortfolioCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.HiPortfolioCodeColumn] = value;
                }
            }
            
            public string ValuationPoint {
                get {
                    try {
                        return ((string)(this[this.tableFund.ValuationPointColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.ValuationPointColumn] = value;
                }
            }
            
            public string PredictedPrice {
                get {
                    try {
                        return ((string)(this[this.tableFund.PredictedPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.PredictedPriceColumn] = value;
                }
            }
            
            public string ImportedPrice {
                get {
                    try {
                        return ((string)(this[this.tableFund.ImportedPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.ImportedPriceColumn] = value;
                }
            }
            
            public string PreviousPrice {
                get {
                    try {
                        return ((string)(this[this.tableFund.PreviousPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.PreviousPriceColumn] = value;
                }
            }
            
            public string AssetFundName {
                get {
                    try {
                        return ((string)(this[this.tableFund.AssetFundNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.AssetFundNameColumn] = value;
                }
            }
            
            public string AssetFundCode {
                get {
                    try {
                        return ((string)(this[this.tableFund.AssetFundCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.AssetFundCodeColumn] = value;
                }
            }
            
            public string FundCurrencyCode {
                get {
                    try {
                        return ((string)(this[this.tableFund.FundCurrencyCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.FundCurrencyCodeColumn] = value;
                }
            }
            
            public string RevaluationFactor {
                get {
                    try {
                        return ((string)(this[this.tableFund.RevaluationFactorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.RevaluationFactorColumn] = value;
                }
            }
            
            public string ScalingFactor {
                get {
                    try {
                        return ((string)(this[this.tableFund.ScalingFactorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.ScalingFactorColumn] = value;
                }
            }
            
            public string TaxProvisionFactor {
                get {
                    try {
                        return ((string)(this[this.tableFund.TaxProvisionFactorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.TaxProvisionFactorColumn] = value;
                }
            }
            
            public string ValuationBasis {
                get {
                    try {
                        return ((string)(this[this.tableFund.ValuationBasisColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.ValuationBasisColumn] = value;
                }
            }
            
            public string Xfactor {
                get {
                    try {
                        return ((string)(this[this.tableFund.XfactorColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.XfactorColumn] = value;
                }
            }
            
            public string UpperTolerance {
                get {
                    try {
                        return ((string)(this[this.tableFund.UpperToleranceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.UpperToleranceColumn] = value;
                }
            }
            
            public string LowerTolerance {
                get {
                    try {
                        return ((string)(this[this.tableFund.LowerToleranceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.LowerToleranceColumn] = value;
                }
            }
            
            public string AMTolerance {
                get {
                    try {
                        return ((string)(this[this.tableFund.AMToleranceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.AMToleranceColumn] = value;
                }
            }
            
            public string PriceIncreaseOnly {
                get {
                    try {
                        return ((string)(this[this.tableFund.PriceIncreaseOnlyColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.PriceIncreaseOnlyColumn] = value;
                }
            }
            
            public string BenchmarkName {
                get {
                    try {
                        return ((string)(this[this.tableFund.BenchmarkNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.BenchmarkNameColumn] = value;
                }
            }
            
            public string Proportion {
                get {
                    try {
                        return ((string)(this[this.tableFund.ProportionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.ProportionColumn] = value;
                }
            }
            
            public string CurrencyCode {
                get {
                    try {
                        return ((string)(this[this.tableFund.CurrencyCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.CurrencyCodeColumn] = value;
                }
            }
            
            public string BenchmarkMovement {
                get {
                    try {
                        return ((string)(this[this.tableFund.BenchmarkMovementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.BenchmarkMovementColumn] = value;
                }
            }
            
            public string CurrencyMovement {
                get {
                    try {
                        return ((string)(this[this.tableFund.CurrencyMovementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.CurrencyMovementColumn] = value;
                }
            }
            
            public string TotalMovement {
                get {
                    try {
                        return ((string)(this[this.tableFund.TotalMovementColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.TotalMovementColumn] = value;
                }
            }
            
            public string Effect {
                get {
                    try {
                        return ((string)(this[this.tableFund.EffectColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.EffectColumn] = value;
                }
            }
            
            public string Availability {
                get {
                    try {
                        return ((string)(this[this.tableFund.AvailabilityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.AvailabilityColumn] = value;
                }
            }
            
            public string PreviousBenchmarkValue {
                get {
                    try {
                        return ((string)(this[this.tableFund.PreviousBenchmarkValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.PreviousBenchmarkValueColumn] = value;
                }
            }
            
            public string CurrentBenchmarkValue {
                get {
                    try {
                        return ((string)(this[this.tableFund.CurrentBenchmarkValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.CurrentBenchmarkValueColumn] = value;
                }
            }
            
            public string PreviousAssetFundExchangeRate {
                get {
                    try {
                        return ((string)(this[this.tableFund.PreviousAssetFundExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.PreviousAssetFundExchangeRateColumn] = value;
                }
            }
            
            public string CurrentAssetFundExchangeRate {
                get {
                    try {
                        return ((string)(this[this.tableFund.CurrentAssetFundExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.CurrentAssetFundExchangeRateColumn] = value;
                }
            }
            
            public string PreviousBenchmarkExchangeRate {
                get {
                    try {
                        return ((string)(this[this.tableFund.PreviousBenchmarkExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.PreviousBenchmarkExchangeRateColumn] = value;
                }
            }
            
            public string CurrentBenchmarkExchangeRate {
                get {
                    try {
                        return ((string)(this[this.tableFund.CurrentBenchmarkExchangeRateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFund.CurrentBenchmarkExchangeRateColumn] = value;
                }
            }
            
            public bool IsFullNameNull() {
                return this.IsNull(this.tableFund.FullNameColumn);
            }
            
            public void SetFullNameNull() {
                this[this.tableFund.FullNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsHiPortfolioCodeNull() {
                return this.IsNull(this.tableFund.HiPortfolioCodeColumn);
            }
            
            public void SetHiPortfolioCodeNull() {
                this[this.tableFund.HiPortfolioCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsValuationPointNull() {
                return this.IsNull(this.tableFund.ValuationPointColumn);
            }
            
            public void SetValuationPointNull() {
                this[this.tableFund.ValuationPointColumn] = System.Convert.DBNull;
            }
            
            public bool IsPredictedPriceNull() {
                return this.IsNull(this.tableFund.PredictedPriceColumn);
            }
            
            public void SetPredictedPriceNull() {
                this[this.tableFund.PredictedPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsImportedPriceNull() {
                return this.IsNull(this.tableFund.ImportedPriceColumn);
            }
            
            public void SetImportedPriceNull() {
                this[this.tableFund.ImportedPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousPriceNull() {
                return this.IsNull(this.tableFund.PreviousPriceColumn);
            }
            
            public void SetPreviousPriceNull() {
                this[this.tableFund.PreviousPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssetFundNameNull() {
                return this.IsNull(this.tableFund.AssetFundNameColumn);
            }
            
            public void SetAssetFundNameNull() {
                this[this.tableFund.AssetFundNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsAssetFundCodeNull() {
                return this.IsNull(this.tableFund.AssetFundCodeColumn);
            }
            
            public void SetAssetFundCodeNull() {
                this[this.tableFund.AssetFundCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsFundCurrencyCodeNull() {
                return this.IsNull(this.tableFund.FundCurrencyCodeColumn);
            }
            
            public void SetFundCurrencyCodeNull() {
                this[this.tableFund.FundCurrencyCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsRevaluationFactorNull() {
                return this.IsNull(this.tableFund.RevaluationFactorColumn);
            }
            
            public void SetRevaluationFactorNull() {
                this[this.tableFund.RevaluationFactorColumn] = System.Convert.DBNull;
            }
            
            public bool IsScalingFactorNull() {
                return this.IsNull(this.tableFund.ScalingFactorColumn);
            }
            
            public void SetScalingFactorNull() {
                this[this.tableFund.ScalingFactorColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaxProvisionFactorNull() {
                return this.IsNull(this.tableFund.TaxProvisionFactorColumn);
            }
            
            public void SetTaxProvisionFactorNull() {
                this[this.tableFund.TaxProvisionFactorColumn] = System.Convert.DBNull;
            }
            
            public bool IsValuationBasisNull() {
                return this.IsNull(this.tableFund.ValuationBasisColumn);
            }
            
            public void SetValuationBasisNull() {
                this[this.tableFund.ValuationBasisColumn] = System.Convert.DBNull;
            }
            
            public bool IsXfactorNull() {
                return this.IsNull(this.tableFund.XfactorColumn);
            }
            
            public void SetXfactorNull() {
                this[this.tableFund.XfactorColumn] = System.Convert.DBNull;
            }
            
            public bool IsUpperToleranceNull() {
                return this.IsNull(this.tableFund.UpperToleranceColumn);
            }
            
            public void SetUpperToleranceNull() {
                this[this.tableFund.UpperToleranceColumn] = System.Convert.DBNull;
            }
            
            public bool IsLowerToleranceNull() {
                return this.IsNull(this.tableFund.LowerToleranceColumn);
            }
            
            public void SetLowerToleranceNull() {
                this[this.tableFund.LowerToleranceColumn] = System.Convert.DBNull;
            }
            
            public bool IsAMToleranceNull() {
                return this.IsNull(this.tableFund.AMToleranceColumn);
            }
            
            public void SetAMToleranceNull() {
                this[this.tableFund.AMToleranceColumn] = System.Convert.DBNull;
            }
            
            public bool IsPriceIncreaseOnlyNull() {
                return this.IsNull(this.tableFund.PriceIncreaseOnlyColumn);
            }
            
            public void SetPriceIncreaseOnlyNull() {
                this[this.tableFund.PriceIncreaseOnlyColumn] = System.Convert.DBNull;
            }
            
            public bool IsBenchmarkNameNull() {
                return this.IsNull(this.tableFund.BenchmarkNameColumn);
            }
            
            public void SetBenchmarkNameNull() {
                this[this.tableFund.BenchmarkNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsProportionNull() {
                return this.IsNull(this.tableFund.ProportionColumn);
            }
            
            public void SetProportionNull() {
                this[this.tableFund.ProportionColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyCodeNull() {
                return this.IsNull(this.tableFund.CurrencyCodeColumn);
            }
            
            public void SetCurrencyCodeNull() {
                this[this.tableFund.CurrencyCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsBenchmarkMovementNull() {
                return this.IsNull(this.tableFund.BenchmarkMovementColumn);
            }
            
            public void SetBenchmarkMovementNull() {
                this[this.tableFund.BenchmarkMovementColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrencyMovementNull() {
                return this.IsNull(this.tableFund.CurrencyMovementColumn);
            }
            
            public void SetCurrencyMovementNull() {
                this[this.tableFund.CurrencyMovementColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalMovementNull() {
                return this.IsNull(this.tableFund.TotalMovementColumn);
            }
            
            public void SetTotalMovementNull() {
                this[this.tableFund.TotalMovementColumn] = System.Convert.DBNull;
            }
            
            public bool IsEffectNull() {
                return this.IsNull(this.tableFund.EffectColumn);
            }
            
            public void SetEffectNull() {
                this[this.tableFund.EffectColumn] = System.Convert.DBNull;
            }
            
            public bool IsAvailabilityNull() {
                return this.IsNull(this.tableFund.AvailabilityColumn);
            }
            
            public void SetAvailabilityNull() {
                this[this.tableFund.AvailabilityColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousBenchmarkValueNull() {
                return this.IsNull(this.tableFund.PreviousBenchmarkValueColumn);
            }
            
            public void SetPreviousBenchmarkValueNull() {
                this[this.tableFund.PreviousBenchmarkValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentBenchmarkValueNull() {
                return this.IsNull(this.tableFund.CurrentBenchmarkValueColumn);
            }
            
            public void SetCurrentBenchmarkValueNull() {
                this[this.tableFund.CurrentBenchmarkValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousAssetFundExchangeRateNull() {
                return this.IsNull(this.tableFund.PreviousAssetFundExchangeRateColumn);
            }
            
            public void SetPreviousAssetFundExchangeRateNull() {
                this[this.tableFund.PreviousAssetFundExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentAssetFundExchangeRateNull() {
                return this.IsNull(this.tableFund.CurrentAssetFundExchangeRateColumn);
            }
            
            public void SetCurrentAssetFundExchangeRateNull() {
                this[this.tableFund.CurrentAssetFundExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPreviousBenchmarkExchangeRateNull() {
                return this.IsNull(this.tableFund.PreviousBenchmarkExchangeRateColumn);
            }
            
            public void SetPreviousBenchmarkExchangeRateNull() {
                this[this.tableFund.PreviousBenchmarkExchangeRateColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentBenchmarkExchangeRateNull() {
                return this.IsNull(this.tableFund.CurrentBenchmarkExchangeRateColumn);
            }
            
            public void SetCurrentBenchmarkExchangeRateNull() {
                this[this.tableFund.CurrentBenchmarkExchangeRateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FundRowChangeEvent : EventArgs {
            
            private FundRow eventRow;
            
            private DataRowAction eventAction;
            
            public FundRowChangeEvent(FundRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FundRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
