using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;
using HBOS.FS.AMP.UPD.Types;
using HBOS.FS.AMP.UPD.Types.AssetFunds;
using HBOS.FS.AMP.UPD.WinUI.Forms;
using HBOS.FS.AMP.UPD.WinUI.UserControls;
using HBOS.FS.AMP.Windows.Controls;
using HBOS.FS.Support.Tex;
using CellDoubleClickedDelegate = HBOS.FS.AMP.Windows.Controls.DataGrid.CellDoubleClickedDelegate;
using DataGrid = HBOS.FS.AMP.Windows.Controls.DataGrid;
using HBOSGrid = HBOS.FS.AMP.Windows.Controls.DataGrid;

namespace HBOS.FS.AMP.UPD.WinUI.Classes
{
	/// <summary>
	/// Display Properties due to grid limitations.
	/// </summary>
	public class AssetFundDecorator
	{
		private string m_FullName;
		private AssetFund.AssetFundTypeEnum m_AssetFundType;
		private bool m_IsDirty;
		private bool m_IsNew;
		private bool m_WithinAssetMovementTolerance;
		private string m_AssetMovementToleranceDisplay;
		private string m_AssetMovementToleranceDisplay2;
		private string m_UnitPriceDisplay;
		private IList m_AssetMovementConstituents;
		private string m_AssetMovementVarianceDisplay;
		private string m_UnitPriceMovementDisplay;
		private string m_PredictedAssetMovementDisplay;
		private string m_WithinAssetMovementToleranceDisplay;
		private  AssetFund assetFund;

		/// <summary>
		/// Creates a decorated object from an Asset Fund.
		/// </summary>
		/// <param name="assetFund">Asset fund.</param>
		/// <returns></returns>
		public static AssetFundDecorator ToDecoratedObject(AssetFund assetFund)
		{
			return new AssetFundDecorator(assetFund);
		}

		/// <summary>
		/// Takes a decorated object and creates an Asset Fund.
		/// </summary>
		/// <param name="decoratedAssetFund">Decorated asset fund.</param>
		/// <returns></returns>
		public static AssetFund FromDecoratedObject(AssetFundDecorator decoratedAssetFund)
		{
			return decoratedAssetFund.AssetFund;
		}

		/// <summary>
		/// Takes a decorated list of objects and returns an AssetFundCollection.
		/// </summary>
		/// <param name="decoratedAssetFunds">Decorated asset funds.</param>
		/// <returns></returns>
		public static AssetFundCollection FromDecoratedList(IList decoratedAssetFunds)
		{
			AssetFundCollection returnAssetFundCollection = new AssetFundCollection();
			foreach (AssetFundDecorator decoratedAssetFund in decoratedAssetFunds)
			{
				returnAssetFundCollection.Add(FromDecoratedObject(decoratedAssetFund));
			}

			return returnAssetFundCollection;
		}

		/// <summary>
		/// Toes the decorated list.
		/// </summary>
		/// <param name="assetFundCollection">Asset fund collection.</param>
		/// <returns></returns>
		public static IList ToDecoratedList(IList assetFundCollection)
		{
			ArrayList returnList = new ArrayList();
			foreach (AssetFund assetFund in assetFundCollection)
			{
				returnList.Add(ToDecoratedObject(assetFund));
			}
			return returnList;
		}


		private AssetFundDecorator(AssetFund assetFund)
		{
			this.AssetFund=assetFund;
			m_FullName = assetFund.FullName;
			m_IsDirty=assetFund.IsDirty;
			this.m_IsNew=assetFund.IsNew;
			m_WithinAssetMovementTolerance=assetFund.WithinAssetMovementTolerance;
			this.m_AssetFundType=assetFund.AssetFundType;
			this.m_AssetMovementToleranceDisplay= DisplayFormat.Percent(assetFund.AssetMovementTolerance, assetFund.AssetMovementToleranceSet);
			this.m_AssetMovementToleranceDisplay2=DisplayFormat.Percent(assetFund.AssetMovementTolerance, true);
			this.m_UnitPriceDisplay=DisplayFormat.Decimal(assetFund.UnitPrice, assetFund.UnitPriceSet);
			this.m_AssetMovementConstituents=AssetMovementConstituentDecorator.FromConstituentListToDecorated(assetFund.AssetMovementConstituents);
			this.m_AssetMovementVarianceDisplay=DisplayFormat.Percent(assetFund.AssetMovementVariance, assetFund.AssetMovementVarianceSet);
			this.m_UnitPriceMovementDisplay=DisplayFormat.Percent(assetFund.UnitPriceMovement, assetFund.UnitPriceMovementSet);
			this.m_PredictedAssetMovementDisplay=DisplayFormat.Percent(assetFund.PredictedAssetMovement, assetFund.PredictedAssetMovementSet);
			this.m_WithinAssetMovementToleranceDisplay=m_WithinAssetMovementTolerance?"Y":"N";
		}

		/// <summary>
		/// Creates a new <see cref="AssetFundDecorator"/> instance.
		/// </summary>
		public AssetFundDecorator()
		{
		}

		#region Display Properties (re-introduced due to grid limitations. TODO - try to resolve and bring back property formatter)

		/// <summary>
		/// Gets the full name.
		/// </summary>
		/// <value></value>
		public string FullName
		{
			get { return m_FullName; }
			set {  m_FullName=value; }
		}

		/// <summary>
		/// Gets the full name.
		/// </summary>
		/// <value></value>
		public AssetFund.AssetFundTypeEnum AssetFundType
		{
			get { return m_AssetFundType; }
			set {  m_AssetFundType=value; }
		}


		/// <summary>
		/// Gets a value indicating whether this instance is dirty.
		/// </summary>
		/// <value>
		/// 	<c>true</c> if this instance is dirty; otherwise, <c>false</c>.
		/// </value>
		public bool IsDirty
		{
			get { return m_IsDirty; }
			set {  m_IsDirty=value; }
		}

		/// <summary>
		/// Gets a value indicating whether this instance is new.
		/// </summary>
		/// <value>
		/// 	<c>true</c> if this instance is new; otherwise, <c>false</c>.
		/// </value>
		public bool IsNew
		{
			get { return m_IsNew; }
			set {  m_IsNew=value; }
		}

		/// <summary>
		/// Gets the full name.
		/// </summary>
		/// <value></value>
		public bool WithinAssetMovementTolerance
		{
			get { return m_WithinAssetMovementTolerance; }
			set {  m_WithinAssetMovementTolerance=value; }
		}

		/// <summary>
		/// This property is here for displaying in the Current Asset Fund Status grid 
		/// </summary>
		public string WithinAssetMovementToleranceDisplay
		{
			get{return m_WithinAssetMovementToleranceDisplay;}
			set {  m_WithinAssetMovementToleranceDisplay=value; }
		}

		/// <summary>
		/// Read only property that returns the AssetMovementTolerance Display string
		/// </summary>
		public string AssetMovementToleranceDisplay
		{
			get { return m_AssetMovementToleranceDisplay; }
			set {  m_AssetMovementToleranceDisplay=value; }
		}

		/// <summary>
		/// as above but displays 0 as opposed to unavailable
		/// </summary>
		public string AssetMovementToleranceDisplay2
		{
			get { return m_AssetMovementToleranceDisplay2; }
			set {  m_AssetMovementToleranceDisplay2=value; }
		}

		/// <summary>
		/// Read only property that returns the Unit Price Display string
		/// </summary>
		public string UnitPriceDisplay
		{
			get { return m_UnitPriceDisplay; }
			set {  m_UnitPriceDisplay=value; }
		}


		/// <summary>
		/// Read only property that returns the Unit Price Movement Display string
		/// </summary>
		public string UnitPriceMovementDisplay
		{
			get { return m_UnitPriceMovementDisplay; }
			set {  m_UnitPriceMovementDisplay=value; }
		}

		/// <summary>
		/// Read only property that returns the Predicted Asset Movement Display string
		/// </summary>
		public virtual string PredictedAssetMovementDisplay
		{
			//return DisplayFormat.Percent(PredictedAssetMovement, AreAllLinkedFundsAuthorised() && PredictedAssetMovementSet);
			get { return m_PredictedAssetMovementDisplay; }
			set {  m_PredictedAssetMovementDisplay=value; }
		}

		/// <summary>
		/// Read only property that returns the Asset Movement Variance Display string
		/// </summary>
		public string AssetMovementVarianceDisplay
		{
			get { return m_AssetMovementVarianceDisplay; }
			set {  m_AssetMovementVarianceDisplay=value; }
		}

		/// <summary>
		/// Gets a decorated asset movement constituents collection.
		/// </summary>
		/// <value></value>
		public IList AssetMovementConstituents
		{
			get { return m_AssetMovementConstituents; }
			set {  m_AssetMovementConstituents=value; }
		}

		/// <summary>
		/// Gets or sets the asset fund.
		/// </summary>
		/// <value></value>
		public AssetFund AssetFund
		{
			get { return assetFund; }
			set { assetFund = value; }
		}

		#endregion
	}

	/// <summary>
	/// Summary description for ReleaseFundViewController.
	/// </summary>
	public class AssetFundStatusController : StatusViewController
	{
		/// <summary>
		/// Creates a new <see cref="ReleaseFundViewController"/> instance.
		/// </summary>
		public AssetFundStatusController(StatusView view, StatusDataManager dataManager) : base(view, dataManager)
		{
			T.E();
			view.RefreshData += new StatusView.RefreshDataDelegate(refreshData);
			T.X();
		}

		#region Overrides

		/// <summary>
		/// Configures the grid.
		/// </summary>
		protected override void configureGrid()
		{
			T.E();
			HBOSGrid grid = view.grid;
			DataGridTableStyle style = new DataGridTableStyle();

			grid.TableStyles.Clear();
			grid.TableStyles.Add(style);
			grid.CellDoubleClicked += new DataGrid.CellDoubleClickedDelegate(this.OnGridCellDoubleClicked);

			style.AlternatingBackColor = Color.WhiteSmoke;
			style.DataGrid = grid;
			style.HeaderForeColor = SystemColors.ControlText;
			style.MappingName = "";

			// Hack to allow for multi-line header rows.
			// This requires a large font (36pt) to be set for grid.HeaderFont through the properties window
			style.HeaderFont = grid.Font;

			const int defaultColWidth = 80;

			//fund columns
			AddTextBoxReadOnlyColumnStyle("FullName", "Fund Name", 220, HorizontalAlignment.Left, "");
			AddTextBoxReadOnlyColumnStyle("AssetFundType", "Type", defaultColWidth, HorizontalAlignment.Left, "");
			AddTextBoxReadOnlyColumnStyle("UnitPriceDisplay", "Imported\nUnit Price", defaultColWidth, HorizontalAlignment.Right, "");
			AddTextBoxReadOnlyColumnStyle("UnitPriceMovementDisplay", "Imported.\nPrice.\nMovement.", defaultColWidth, HorizontalAlignment.Right, "");
			AddTextBoxReadOnlyColumnStyle("PredictedAssetMovementDisplay", "Predicted AM.", defaultColWidth, HorizontalAlignment.Right, "");
			AddTextBoxReadOnlyColumnStyle("AssetMovementVarianceDisplay", "AM Variance.", defaultColWidth, HorizontalAlignment.Right, "");
			AddTextBoxReadOnlyColumnStyle("WithinAssetMovementToleranceDisplay", "Within.\nTolerance.", defaultColWidth, HorizontalAlignment.Left, "");
			T.X();
		}

		/// <summary>
		/// Creates the actions.
		/// </summary>
		protected override StatusAction[] createActions()
		{
			T.E();

			StatusAction[] result = new StatusAction[4];

			result[0] = new StatusAction();
			result[0].Text = "&Refresh";
			result[0].Executed += new EventHandler(refreshExecuted);

			result[1] = new StatusAction();
			result[1].Text = "&Print";
			result[1].Executed += new EventHandler(printExecuted);

			result[2] = new StatusAction();
			result[2].Text = "&Export";
			result[2].Executed += new EventHandler(exportExecuted);

			result[3] = new StatusAction();
			result[3].Text = "Pr&operties";
			result[3].Executed += new EventHandler(PropertiesButtonClicked);

			T.X();
			return result;
		}

		#endregion Overrides

		#region Event Handlers

		private void PropertiesButtonClicked(object sender, EventArgs e)
		{
			int CurrentRowIndex = view.grid.CurrentRowIndex;
			if (CurrentRowIndex >= 0)
			{
				this.displayAssetFundProperties(CurrentRowIndex);
			}
		}

		/// <summary>
		/// hadle that the grid has been double clicked, and possible show the properties dialog
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void OnGridCellDoubleClicked(object sender, CellEventArgs e)
		{
			//KAJ 09/03/2005 - Double clicking header row causes exception
			T.E();
			if (e.RowNumber >= 0)
			{
				displayAssetFundProperties(e.RowNumber);
			}
			T.X();
		}

		private void printExecuted(object sender, EventArgs e)
		{
			printGrid("Current Asset Fund Status");
		}

		private void exportExecuted(object sender, EventArgs e)
		{
			exportGrid("CurrentAssetFundStatus.csv", "HBOS.FS.AMP.UPD.WinUI.UserControls.AssetFundStatus.xslt");
		}

		private void refreshExecuted(object sender, EventArgs e)
		{
			T.E();
			refreshData();
			T.X();
		}

		#endregion Event Handlers

		#region Private Members

		/// <summary>
		/// Display the currently selected fund properties
		/// </summary>
		/// <param name="selectedRow">currently selected grid row number</param>
		private void displayAssetFundProperties(int selectedRow)
		{
			T.E();
			// Make sure we have funds
			if (view.Data.Count > 0)
			{
				// Get the currently selected fund object against 
				// the selected data grid row
				AssetFundDecorator selectedAssetFund = base.assetFundAtRow(selectedRow);

				// Pass the currently selected fund object to the form 
				// and Display its properties
				CurrentAssetFundStatusProperties properties = new CurrentAssetFundStatusProperties(selectedAssetFund);
				properties.Show(); //Dialog(view.Parent);
			}
			T.X();
		}

		#endregion Private Members
	}
}