using System;
using System.Collections;
using System.Windows.Forms;
using System.Threading;

using HBOS.FS.AMP.UPD.Types.Users;
using HBOS.FS.AMP.UPD.Security;
using HBOS.FS.AMP.UPD.WinUI.Classes;
using HBOS.FS.AMP.UPD.WinUI.Helpers;
using HBOS.FS.Support.Tex;
using HBOS.FS.AMP.UPD.Controllers;
using HBOS.FS.AMP.UPD.Exceptions;
using HBOS.FS.AMP.UPD.WinUI.Forms;

namespace HBOS.FS.AMP.UPD.WinUI.UserControls
{
	/// <summary>
	/// Summary description for UserStaticDataEditor.
	/// </summary>
	public class UserStaticDataEditor : StaticDataEditor
	{
		private GroupBox permissionsGroupBox;
		private TreeView permissionsTreeView;
		private TextBox userNameTextBox;
		private Label userNameLabel;
		private TextBox loginIDTextBox;
		private Label loginIDLabel;

		private UPDPrincipal m_loggedOnUser ;
		private bool m_ignoreTreeClick ;
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		/// <summary>
		/// Creates a new <see cref="UserStaticDataEditor"/> instance.
		/// </summary>
		public UserStaticDataEditor()
		{
			// This call is required by the Windows.Forms Form Designer.
			InitializeComponent();
			m_editType = "user";
			m_loggedOnUser = (UPDPrincipal) Thread.CurrentPrincipal;
			BuildTree();
		}

		private User currentUser;
		/// <summary>
		/// Gets or sets the edit user.
		/// </summary>
		/// <value></value>
		public User CurrentUser
		{
			get
			{
				return currentUser;
			}

			set
			{
				bool indexChanged = currentUser != value;
				if (!indexChanged && m_loggedOnUser.Identity.Name == loginIDTextBox.Text)
				{	
					UPDPrincipal currPrincipal = (UPDPrincipal) Thread.CurrentPrincipal;
					//pick up the new roles
					Thread.CurrentPrincipal = new UPDPrincipal( (UPDIdentity)currPrincipal.Identity, currPrincipal.CompanyCode);

					UPDRoleCheckedForm frm = (UPDRoleCheckedForm) this.FindForm();
					frm.ChangedCompany = true;
					frm.Close();
				}
				else
				{
					currentUser = value;

					clearErrors(this);
					displayUser();
					if (indexChanged)
					{
						Changed = false;
					}
				}
			}
		}

		private void BuildTree()
		{
			TreeNode UPDNode=new TreeNode("UPD");
								
			TreeNode importNode=new TreeNode("Import")	;													
			UPDNode.Nodes.Add(importNode);

			importNode.Nodes.Add(new TreeNode("Exchange Rates"));
			importNode.Nodes.Add(new TreeNode("Stock Market Indices"));
			TreeNode pricesNode = new TreeNode("Prices");
			importNode.Nodes.Add(pricesNode);
			
			//if (GlobalRegistry.CompanyCode.Trim()=="HIFM")
				pricesNode.Nodes.Add(new TreeNode("OEIC Prices"));
			//if (GlobalRegistry.CompanyCode.Trim()!="HLL" || GlobalRegistry.CompanyCode.Trim()=="SALA" || GlobalRegistry.CompanyCode.Trim()=="CMIG")
				pricesNode.Nodes.Add(new TreeNode("Linked Prices"));
			//if (GlobalRegistry.CompanyCode.Trim()=="HLL" || GlobalRegistry.CompanyCode.Trim()=="CMIG")
				pricesNode.Nodes.Add(new TreeNode("Composite Prices"));

			//if (GlobalRegistry.CompanyCode.Trim()=="HIFM")
				importNode.Nodes.Add(new TreeNode("Asset Fund Splits"));

			//if (GlobalRegistry.CompanyCode.Trim()=="HLL" || GlobalRegistry.CompanyCode.Trim()=="CMIG" )
				importNode.Nodes.Add(new TreeNode("Composite Fund Splits"));

			UPDNode.Nodes.AddRange(
				new TreeNode[] {
								  new TreeNode("Prices", 
								  new TreeNode[] {
													new TreeNode("Authorise Prices"),
													new TreeNode("Release Prices"),
													new TreeNode("Distribute Prices")}),
													new TreeNode("Static Data", 
													new TreeNode[] {
																		new TreeNode("Funds"),
																		new TreeNode("Asset Funds", 
																		new TreeNode[] {
																							new TreeNode("Factors"),
																							new TreeNode("Indices"),
																							new TreeNode("Tolerances")}),
																		new TreeNode("Fund Groups"),
																		new TreeNode("User Permissions")})});
			this.permissionsTreeView.Nodes.Clear();
			this.permissionsTreeView.Nodes.Add(UPDNode);
			this.permissionsTreeView.ExpandAll();
		}

		/// <summary>
		/// Moves the data from the the CurrentUser entity to the controls
		/// </summary>
		private void displayUser()
		{
			//lock the textbox unless we are adding a new user 
			//to change the login id for a user the user record must be deleted and recreated 

			loginIDTextBox.ReadOnly = !ListManager.SelectedIsNew;
			loginIDTextBox.Text = CurrentUser.LogOnID;
			userNameTextBox.Text = CurrentUser.UserName;

			UserPermissions permissions = CurrentUser.Permissions;

			TreeNode updNode = FindTreeNode ("UPD", permissionsTreeView.Nodes, false);
			TreeNode importNode = FindTreeNode ("Import", updNode.Nodes, false);
			TreeNode pricesNode = FindTreeNode ("Prices", updNode.Nodes, false);
			TreeNode staticDataNode = FindTreeNode ("Static Data", updNode.Nodes, false);
			TreeNode assetFundDataNode = FindTreeNode ("Asset Funds", staticDataNode.Nodes, false);

			m_ignoreTreeClick = true;
			try
			{

				// Imports
				FindTreeNode("Exchange Rates", importNode.Nodes, true).Checked        = permissions.ImportExchangeRates;
				FindTreeNode("Stock Market Indices", importNode.Nodes, true).Checked  = permissions.ImportMarketIndices;
				TreeNode importPricesNode = FindTreeNode("Prices", importNode.Nodes, true);
				TreeNode importOEICPricesNode = FindTreeNode("OEIC Prices", importPricesNode.Nodes, true);
				if (importOEICPricesNode!=null) importOEICPricesNode.Checked  = permissions.CanImportOEICPrices;
				TreeNode importLinkedPricesNode = FindTreeNode("Linked Prices", importPricesNode.Nodes, true);
				if (importLinkedPricesNode!=null) importLinkedPricesNode.Checked  = permissions.CanImportLinkedPrices;
				TreeNode importCompositePricesNode = FindTreeNode("Composite Prices", importPricesNode.Nodes, true);
				if (importCompositePricesNode!=null) importCompositePricesNode.Checked  = permissions.CanImportCompositePrices;
				TreeNode importAFSNode = FindTreeNode("Asset Fund Splits", importNode.Nodes, true);
				if (importAFSNode!=null) importAFSNode.Checked     = permissions.ImportOverSeasFundWeightings;
				TreeNode importCFSNode = FindTreeNode("Composite Fund Splits", importNode.Nodes, true);
				if (importCFSNode!=null) importCFSNode.Checked = permissions.ImportCompositeSplits;


				// Prices
				FindTreeNode("Authorise Prices", pricesNode.Nodes, true).Checked  = permissions.AuthorisePrices;
				FindTreeNode("Release Prices", pricesNode.Nodes, true).Checked    = permissions.ReleasePrices;
				FindTreeNode("Distribute Prices", pricesNode.Nodes, true).Checked = permissions.DistributePrices;

				// Static data
				FindTreeNode("Funds", staticDataNode.Nodes, true).Checked       = permissions.MaintainFundMappings;
				FindTreeNode("Factors", staticDataNode.Nodes, true).Checked     = permissions.MaintainCalculationFactors;
				FindTreeNode("Indices", staticDataNode.Nodes, true).Checked     = permissions.MaintainCalculationIndices;
				FindTreeNode("Tolerances", staticDataNode.Nodes, true).Checked  = permissions.MaintainValidationTolerances;
				FindTreeNode("Fund Groups", staticDataNode.Nodes, true).Checked = permissions.MaintainFundGroups;

				FindTreeNode("User Permissions", updNode.Nodes, true).Checked = permissions.MaintainUserAccess;
			
				importPricesNode.Checked = AllChildNodesChecked(importPricesNode);
				importNode.Checked = AllChildNodesChecked(importNode);
				pricesNode.Checked = AllChildNodesChecked(pricesNode);
				assetFundDataNode.Checked = AllChildNodesChecked(assetFundDataNode);
				staticDataNode.Checked = AllChildNodesChecked(staticDataNode);
				updNode.Checked = AllChildNodesChecked(updNode);

			}
			finally
			{
				m_ignoreTreeClick = false;
			}           
		}

		/// <summary>
		/// Moves the data from the controls to the CurrentUser entity
		/// </summary>
		private void updateUser()
		{	
			if (CurrentUser.LogOnID != loginIDTextBox.Text)
			{
				CurrentUser.LogOnID = loginIDTextBox.Text;
			}
            
			if (CurrentUser.UserName != userNameTextBox.Text)
			{
				CurrentUser.UserName = userNameTextBox.Text;
			}

			UserPermissions permissions = CurrentUser.Permissions;

			TreeNode updNode = FindTreeNode ("UPD", permissionsTreeView.Nodes, false);

			TreeNode importNode = FindTreeNode ("Import", updNode.Nodes, false);

			TreeNode pricesNode = FindTreeNode ("Prices", updNode.Nodes, false);

			TreeNode staticDataNode = FindTreeNode ("Static Data", updNode.Nodes, false);

			// Imports
			permissions.ImportExchangeRates          = FindTreeNode("Exchange Rates", importNode.Nodes, true).Checked;
			permissions.ImportMarketIndices          = FindTreeNode("Stock Market Indices", importNode.Nodes, true).Checked;
			TreeNode importPricesNode =  FindTreeNode("Prices", importNode.Nodes, true);
			//permissions.ImportOverSeasFundWeightings = FindTreeNode("Asset Fund Splits", importNode.Nodes, true).Checked;
			TreeNode compositeFundSplitsNode =FindTreeNode("Composite Fund Splits", importNode.Nodes, true);
			if (compositeFundSplitsNode != null) permissions.ImportCompositeSplits        = compositeFundSplitsNode.Checked;

			TreeNode importOEICPricesNode = FindTreeNode("OEIC Prices", importPricesNode.Nodes, true);
			if (importOEICPricesNode!=null)  permissions.CanImportOEICPrices=importOEICPricesNode.Checked ;

			TreeNode importLinkedPricesNode = FindTreeNode("Linked Prices", importPricesNode.Nodes, true);
			if (importLinkedPricesNode!=null)  permissions.CanImportLinkedPrices=importLinkedPricesNode.Checked ;

			TreeNode importCompositePricesNode = FindTreeNode("Composite Prices", importPricesNode.Nodes, true);
			if (importCompositePricesNode!=null)  permissions.CanImportCompositePrices=importCompositePricesNode.Checked;

			TreeNode importAFSNode = FindTreeNode("Asset Fund Splits", importNode.Nodes, true);
			if (importAFSNode!=null)  permissions.ImportOverSeasFundWeightings=importAFSNode.Checked   ;

			// Prices
			permissions.AuthorisePrices  = FindTreeNode("Authorise Prices", pricesNode.Nodes, true).Checked;
			permissions.ReleasePrices    = FindTreeNode("Release Prices", pricesNode.Nodes, true).Checked;
			permissions.DistributePrices = FindTreeNode("Distribute Prices", pricesNode.Nodes, true).Checked;
			// Static data
			permissions.MaintainFundMappings         = FindTreeNode("Funds", staticDataNode.Nodes, true).Checked;
			permissions.MaintainCalculationFactors   = FindTreeNode("Factors", staticDataNode.Nodes, true).Checked;
			permissions.MaintainCalculationIndices   = FindTreeNode("Indices", staticDataNode.Nodes, true).Checked;
			permissions.MaintainValidationTolerances = FindTreeNode("Tolerances", staticDataNode.Nodes, true).Checked;
			permissions.MaintainFundGroups           = FindTreeNode("Fund Groups", staticDataNode.Nodes, true).Checked;
			permissions.MaintainAssetFunds			 = FindTreeNode("Asset Funds", staticDataNode.Nodes, true).Checked;

			permissions.MaintainUserAccess			 = FindTreeNode("User Permissions", updNode.Nodes, true).Checked;           
		}
		
		/// <summary>
		/// Recursive function to finds a particular tree node, given its label
		/// </summary>
		/// <param name="labelName">Name of the label.</param>
		/// <param name="parentNodes">Root node.</param>
		/// <param name="recursiveCheck">if this is false then only check 1st level of the collection</param>
		/// <returns></returns>
		private TreeNode FindTreeNode(string labelName, TreeNodeCollection parentNodes, bool recursiveCheck)
		{
			TreeNode currentNode;

			for (int i=0; i<parentNodes.Count; i++)
			{
				currentNode = parentNodes[i];
				if (currentNode.Text == labelName)
				{
					return currentNode;
				}
				else if (recursiveCheck)
				{

					TreeNode foundNode = FindTreeNode(labelName, currentNode.Nodes, true);
					if (foundNode != null)
					{
						return foundNode;
					}
				}
			}

			return null;
		}

		private bool AllChildNodesChecked (TreeNode node)
		{
			bool allChecked = true;

			if (node.Nodes != null)
			{

				for (int i=0; i<node.Nodes.Count; i++)
				{
					if (!node.Nodes[i].Checked)
					{
						allChecked = false;
						break;
					}
					else
					{
						allChecked = AllChildNodesChecked (node.Nodes[i]);
					}
				}
			}
			return allChecked;
		}

		private void saveUser()
		{
			T.E();

			try
			{
				UserCollection users = new UserCollection();
				users.Add(CurrentUser);

				UserController.SaveUsers(users,GlobalRegistry.ConnectionString);
				Changed = false;
			}
			catch (ConstraintViolationException ex)
			{
				GUIExceptionHelper.LogAndDisplayException("DuplicateUserBody", "DuplicateUserTitle", ex);
			}
			catch (ConcurrencyViolationException ex)
			{
				GUIExceptionHelper.LogAndDisplayException("UserChangedBody", "UserUnableToSaveTitle", ex);
			}
			catch (Exception ex)
			{
				GUIExceptionHelper.LogAndDisplayException("SystemError", "UserUnableToSaveTitle", ex);
			}
			finally
			{
				T.X();
			}
		}


		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}


		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.permissionsGroupBox = new System.Windows.Forms.GroupBox();
			this.permissionsTreeView = new System.Windows.Forms.TreeView();
			this.userNameTextBox = new System.Windows.Forms.TextBox();
			this.userNameLabel = new System.Windows.Forms.Label();
			this.loginIDTextBox = new System.Windows.Forms.TextBox();
			this.loginIDLabel = new System.Windows.Forms.Label();
			this.permissionsGroupBox.SuspendLayout();
			this.SuspendLayout();
			// 
			// permissionsGroupBox
			// 
			this.permissionsGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
				| System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right)));
			this.permissionsGroupBox.Controls.Add(this.permissionsTreeView);
			this.permissionsGroupBox.ForeColor = System.Drawing.Color.Blue;
			this.permissionsGroupBox.Location = new System.Drawing.Point(16, 80);
			this.permissionsGroupBox.Name = "permissionsGroupBox";
			this.permissionsGroupBox.Size = new System.Drawing.Size(408, 368);
			this.permissionsGroupBox.TabIndex = 15;
			this.permissionsGroupBox.TabStop = false;
			this.permissionsGroupBox.Text = "Permissions";
			// 
			// permissionsTreeView
			// 
			this.permissionsTreeView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
				| System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right)));
			this.permissionsTreeView.CheckBoxes = true;
			this.permissionsTreeView.ImageIndex = -1;
			this.permissionsTreeView.Location = new System.Drawing.Point(16, 24);
			this.permissionsTreeView.Name = "permissionsTreeView";
			this.permissionsTreeView.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {
																							new System.Windows.Forms.TreeNode("UPD", new System.Windows.Forms.TreeNode[] {
																																											 new System.Windows.Forms.TreeNode("Import", new System.Windows.Forms.TreeNode[] {
																																																																 new System.Windows.Forms.TreeNode("Exchange Rates"),
																																																																 new System.Windows.Forms.TreeNode("Stock Market Indices"),
																																																																 new System.Windows.Forms.TreeNode("Prices", new System.Windows.Forms.TreeNode[] {
																																																																																					 new System.Windows.Forms.TreeNode("OEIC Prices"),
																																																																																					 new System.Windows.Forms.TreeNode("Linked Prices"),
																																																																																					 new System.Windows.Forms.TreeNode("Composite Prices")}),
																																																																 new System.Windows.Forms.TreeNode("Asset Fund Splits"),
																																																																 new System.Windows.Forms.TreeNode("Composite Fund Splits")}),
																																											 new System.Windows.Forms.TreeNode("Prices", new System.Windows.Forms.TreeNode[] {
																																																																 new System.Windows.Forms.TreeNode("Authorise Prices"),
																																																																 new System.Windows.Forms.TreeNode("Release Prices"),
																																																																 new System.Windows.Forms.TreeNode("Distribute Prices")}),
																																											 new System.Windows.Forms.TreeNode("Static Data", new System.Windows.Forms.TreeNode[] {
																																																																	  new System.Windows.Forms.TreeNode("Funds"),
																																																																	  new System.Windows.Forms.TreeNode("Asset Funds", new System.Windows.Forms.TreeNode[] {
																																																																																							   new System.Windows.Forms.TreeNode("Factors"),
																																																																																							   new System.Windows.Forms.TreeNode("Indices"),
																																																																																							   new System.Windows.Forms.TreeNode("Tolerances")}),
																																																																	  new System.Windows.Forms.TreeNode("Fund Groups"),
																																																																	  new System.Windows.Forms.TreeNode("User Permissions")})})});
			this.permissionsTreeView.SelectedImageIndex = -1;
			this.permissionsTreeView.Size = new System.Drawing.Size(376, 328);
			this.permissionsTreeView.TabIndex = 11;
			this.permissionsTreeView.AfterCheck += new System.Windows.Forms.TreeViewEventHandler(this.permissionsTreeView_AfterCheck);
			// 
			// userNameTextBox
			// 
			this.userNameTextBox.Location = new System.Drawing.Point(128, 48);
			this.userNameTextBox.Name = "userNameTextBox";
			this.userNameTextBox.Size = new System.Drawing.Size(184, 20);
			this.userNameTextBox.TabIndex = 14;
			this.userNameTextBox.Text = "";
			this.userNameTextBox.TextChanged += new System.EventHandler(this.default_TextChanged);
			// 
			// userNameLabel
			// 
			this.userNameLabel.Location = new System.Drawing.Point(16, 48);
			this.userNameLabel.Name = "userNameLabel";
			this.userNameLabel.Size = new System.Drawing.Size(88, 22);
			this.userNameLabel.TabIndex = 13;
			this.userNameLabel.Text = "User Name:";
			// 
			// loginIDTextBox
			// 
			this.loginIDTextBox.Location = new System.Drawing.Point(128, 16);
			this.loginIDTextBox.Name = "loginIDTextBox";
			this.loginIDTextBox.Size = new System.Drawing.Size(184, 20);
			this.loginIDTextBox.TabIndex = 12;
			this.loginIDTextBox.Text = "";
			this.loginIDTextBox.TextChanged += new System.EventHandler(this.default_TextChanged);
			// 
			// loginIDLabel
			// 
			this.loginIDLabel.Location = new System.Drawing.Point(16, 16);
			this.loginIDLabel.Name = "loginIDLabel";
			this.loginIDLabel.Size = new System.Drawing.Size(88, 22);
			this.loginIDLabel.TabIndex = 11;
			this.loginIDLabel.Text = "Login ID:";
			// 
			// UserStaticDataEditor
			// 
			this.Controls.Add(this.permissionsGroupBox);
			this.Controls.Add(this.userNameTextBox);
			this.Controls.Add(this.userNameLabel);
			this.Controls.Add(this.loginIDTextBox);
			this.Controls.Add(this.loginIDLabel);
			this.Name = "UserStaticDataEditor";
			this.Size = new System.Drawing.Size(440, 464);
			this.permissionsGroupBox.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		#endregion

		/// <summary>
		/// Ensures that all of the child nodes are checked if the parent is
		/// </summary>
		/// <param name="sender">The event sender</param>
		/// <param name="e">The event arguments</param>
		private void permissionsTreeView_AfterCheck(object sender, TreeViewEventArgs e)
		{
			if (!m_ignoreTreeClick)
			{
				TreeNode parent = e.Node;

				if (!e.Node.Checked && parent.Text == "User Permissions" && m_loggedOnUser.Identity.Name == loginIDTextBox.Text)
				{
					switch (MessageBox.Show("Removing user permissions for your own logon id shall result in you being unable to manage any user permissions once changes are saved . Do you wish to continue?", "User Permissions Warning", MessageBoxButtons.YesNoCancel))
					{
						case DialogResult.Yes:
							CheckAll(parent);
							Changed = true;			
							break;

						default:
							parent.Checked = true;
							break;
					}
				}
				else
				{
					CheckAll(parent);
					Changed = true;			
				}
			}
		}

		private void CheckAll(TreeNode parent)
		{
			for (int i=0; i<parent.Nodes.Count; i++)
			{
				TreeNode currentNode = parent.Nodes[i];
				currentNode.Checked = parent.Checked;
				CheckAll(currentNode);
			}
		}

		private void default_TextChanged(object sender, System.EventArgs e)
		{
			Changed = true;
		}


		#region Overrides

		/// <summary>
		/// Gets the data for export
		/// </summary>
		/// <param name="exportColl"></param>
		/// <param name="xsltFiles"></param>
		/// <param name="exportFileNames"></param>
		protected override void getExportData(out IList exportColl, out string[] xsltFiles, out string[] exportFileNames)
		{
			exportColl = (IList)ListManager.Items;
			xsltFiles = new string[] {"HBOS.FS.AMP.UPD.WinUI.Classes.UserStaticData.xslt"};
			exportFileNames = new string[] {makeExportFilename("users")};
		}


		/// <summary>
		/// Handles state change when the entity being viewed in changed
		/// </summary>
		/// <param name="newEntity">The new entity being viewed.</param>
		protected override void entityChanged(object newEntity)
		{
			//TODO
		}

		/// <summary>
		/// Gets the editor for the entity.
		/// </summary>
		/// <returns>A user control to use as the editor</returns>
		protected override UserControl getEntityEditor()
		{
			//TODO
			return null;
		}

		/// <summary>
		/// Gets the entity collection for display. Each entity's ToString() method is used to determine display.
		/// </summary>
		/// <returns></returns>
		protected override IList getEntityCollection()
		{
			//TODO
			return null;
		}

		/// <summary>
		/// Provides a custom initialisation point that can be overriden, does nothing in the default implementation
		/// </summary>
		protected override void customInitialisation()
		{
			//does nothing
		}

		/// <summary>
		/// Gets an array of allowable actions in the GUI, you should hook to the Executed event to
		/// act on the action from the GUI.
		/// </summary>
		protected override StaticDataAction[] getActions()
		{
			//TODO
			return null;
		}

		/// <summary>
		/// Does the delete of the fund.
		/// </summary>
		protected override void doDelete()
		{	
			T.E();
			CurrentUser.Permissions.IsDeleted = true;
			CurrentUser.IsDeleted = true;
			saveUser();

			CurrentUser.IsDirty = false;
			CurrentUser.IsNew = false;

			CurrentUser.Permissions.IsNew = false;
			CurrentUser.Permissions.IsDeleted = false;
			CurrentUser.Permissions.IsDirty = false;
			T.X();
		}

		/// <summary>
		/// Loads the selected user into the editor
		/// </summary>
		protected override void doLoadEntity()
		{
			T.E();
			CurrentUser = (User)ListManager.SelectedItem;
			T.X();
		}

		/// <summary>
		/// Actions to take when user requests new User
		/// </summary>
		protected override void doNew()
		{
			T.E();
			CurrentUser = new User(GlobalRegistry.CompanyCode);
			CurrentUser.LogOnID = "New User Login";
			loginIDTextBox.Focus();
			T.X();
		}

		/// <summary>
		/// Saves the currently edited user
		/// </summary>
		/// <returns></returns>
		protected override bool doSave()
		{
			T.E();

			if (validateUser())
			{
				updateUser();
				saveUser();

				CurrentUser.IsDirty = false;
				CurrentUser.IsNew = false;
				CurrentUser.IsDeleted = false;

				CurrentUser.Permissions.IsNew = false;
				CurrentUser.Permissions.IsDeleted = false;
				CurrentUser.Permissions.IsDirty = false;
				CurrentUser = CurrentUser; //reset user in order to re-display
				Changed = false;

				ListManager.ChangeSelected(CurrentUser);

				T.X();
				return true;
			}
			else
			{
				return false;
			}
		}

		private bool validateUser()
		{
			bool valid = true;
			if (loginIDTextBox.Text == string.Empty)
			{
				loginIDTextBox.Focus();
				setError(loginIDTextBox,"You must specify a login ID");
				valid = false;
			}

			if (userNameTextBox.Text == string.Empty)
			{
				if (valid) userNameTextBox.Focus();
				setError(userNameTextBox,"You must specify a user name");
				valid = false;
			}

			if(!valid)
			{
				showErrorDialog("Cannot save the user");
			}

			return valid;
		}

		/// <summary>
		/// Gets the description of the current user.
		/// </summary>
		/// <value></value>
		protected override string currentEntityDescription
		{
			get
			{
				return CurrentUser.LogOnID;
			}
		}


		#endregion

	}
}
