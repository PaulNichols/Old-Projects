using System;

using HBOS.FS.AMP.UPD.Types.AssetFunds;
using HBOS.FS.AMP.UPD.Types.Factors;

namespace HBOS.FS.AMP.UPD.Types.Funds
{
    /// <summary>
    /// Summary description for OEICFund.
    /// </summary>
    public class OEICFund : Fund
    {
		#region Local variables

        private bool m_isExDividend;
		private byte[] m_oeicTimestamp;

		#endregion

		#region Constructors

        /// <summary>
        /// Default constructor creating an object with all properties initialised to the default values.
        /// </summary>
        public OEICFund() : base()
        {
			this.m_isExDividend = false;
			this.m_oeicTimestamp = new byte[1];
		}

		/// <summary>
		/// Creates a new rehydratred <see cref="OEICFund"/> instance.
		/// </summary>
		/// <param name="hiPortfolioCode"></param>
		/// <param name="fullName"></param>
		/// <param name="shortName"></param>
		/// <param name="classOrSeriesCode"></param>
		/// <param name="onHiPortfolio3"></param>
		/// <param name="parentAssetFund"></param>
		/// <param name="assetMovementTolerance"></param>
		/// <param name="upperTolerance"></param>
		/// <param name="lowerTolerance"></param>
		/// <param name="priceIncreaseOnly"></param>
		/// <param name="tolerancesID"></param>
		/// <param name="price"></param>
		/// <param name="priceSet"></param>
		/// <param name="importedFundPriceID"></param>
		/// <param name="valuationBasisEffect"></param>
		/// <param name="previousPrice"></param>
		/// <param name="previousPriceSet"></param>
		/// <param name="fundStatus"></param>
		/// <param name="statusChangedTime"></param>
		/// <param name="statusChangedTimeSet"></param>
		/// <param name="usePredictedPrice"></param>
		/// <param name="authorisedPriceTimestamp"></param>
		/// <param name="timestamp"></param>
		/// <param name="isExDividend"></param>
		/// <param name="parentAssetFundID"></param>
		/// <param name="companyCode">Used for static data report. Null is acceptable for all other uses</param>
		/// <param name="securityCode"></param>
		/// <param name="factors"></param>
		/// <param name="isBenchmarkable"></param>
		public OEICFund(string hiPortfolioCode, string fullName, string shortName, 
			//ExternalSystemIDCollection systemIDs,
			string classOrSeriesCode, 
			bool onHiPortfolio3, AssetFund parentAssetFund,
			decimal assetMovementTolerance, decimal upperTolerance, decimal lowerTolerance,
			bool priceIncreaseOnly, Int64 tolerancesID, decimal price, bool priceSet,
			long importedFundPriceID, 
			decimal valuationBasisEffect, decimal previousPrice, bool previousPriceSet, FundStatusType fundStatus, DateTime statusChangedTime,
			bool statusChangedTimeSet, bool usePredictedPrice, byte[] authorisedPriceTimestamp,
			byte[] timestamp, bool isExDividend, string parentAssetFundID, string companyCode,
			string securityCode, FactorCollection factors, bool isBenchmarkable)
			: base(hiPortfolioCode, fullName, shortName, //systemIDs,
				classOrSeriesCode, 
				onHiPortfolio3, parentAssetFund, 
				assetMovementTolerance, upperTolerance,
				lowerTolerance, priceIncreaseOnly, tolerancesID, price, priceSet,
				importedFundPriceID, valuationBasisEffect,
				previousPrice, previousPriceSet, fundStatus, statusChangedTime, statusChangedTimeSet,
				usePredictedPrice, authorisedPriceTimestamp, timestamp, parentAssetFundID, companyCode, securityCode, factors, isBenchmarkable)
		{
			this.m_isExDividend = isExDividend;
			this.m_oeicTimestamp = timestamp;
		}

		#endregion

		#region Properties

		/// <summary>
		/// The string representation of the type name used for display and reporting purposes
		/// </summary>
		public override string FundType
		{
			get
			{
				return "OEIC";
			}
			//todo - do we need a set for the grid?
		}

        /// <summary>
        /// Flag to indicate whether the fund is within an ExDivdend period or not.
        /// </summary>
		public bool IsExDividend
        {
            get
            {
                return m_isExDividend;
            }

            set
            {
                m_isExDividend = value;
            }
        }

		/// <summary>
		/// The OEIC fund timestamp.
		/// </summary>
		public byte[] OeicTimestamp
		{
			get
			{
				return this.m_oeicTimestamp;
			}

			set
			{
				this.m_oeicTimestamp = value;
			}
		}

		#endregion

		#region Valuation Basis Factor aggregated properties

        /// <summary>
        /// The valuation basis effect value
        /// </summary>
        public override decimal ValuationBasisEffect
        {
            get
            {
                return 0.0m;
            }
        }

        //
        // TODO: remove during next refactor phase as this is no longer required
        //
        /// <summary>
        /// The ID for the Valuation Basis effect used in the price calculation.
        /// </summary>
        public override int ValuationBasisID
        {
            get
            {
                return 0;
            }
        }

        //
        // TODO: remove during next refactor phase as this is no longer required
        //
        /// <summary>
        /// Flag indicating whether the valuation baisis factor ID holds a valid value or not.
        /// </summary>
        public override bool ValuationBasisIDSet
        {
            get
            {
                return false;
            }
        }

		/// <summary>
		/// returns whether or not current value is valid
		/// </summary>
		/// <returns></returns>
		public bool ValuationBasisValid ()
		{
			return ((IFactor)(this.m_factors.ValuationBasisFctr)).IsValid();
		}

        
        #endregion


    }
}
