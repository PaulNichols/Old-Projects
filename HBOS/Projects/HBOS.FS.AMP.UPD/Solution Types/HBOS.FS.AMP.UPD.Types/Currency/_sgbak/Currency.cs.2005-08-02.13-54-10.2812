namespace HBOS.FS.AMP.UPD.Types.Currency
{
	/// <summary>
	/// Use this class for currency objects
	/// </summary>
	public class Currency
	{
		/// <summary>
		/// Default constructor
		/// </summary>
		/// <param name="currencyCode">The currency code</param>
		/// 
		public Currency(string currencyCode)
		{
			m_currencyCode = currencyCode;
		}



		/// <summary>
		/// Creates a new <see cref="Currency"/> instance.
		/// </summary>
		/// <param name="currencyCode">Currency code.</param>
		/// <param name="currentRate">Current rate.</param>
		/// <param name="previousRate">Previous rate.</param>
		public Currency(string currencyCode, decimal currentRate, decimal previousRate)
		{
			m_currencyCode = currencyCode;
			this.currentRate = currentRate;
			this.previousRate = previousRate;
		}

		private string m_currencyCode;
		private decimal currentRate;
		private decimal previousRate;
		private static Currency globalMarket;
		private static Currency gbPound;

		/// <summary>
		/// The currency code
		/// </summary>
		public string CurrencyCode
		{
			get { return m_currencyCode; }
		}

		/// <summary>
		/// Gets the current rate.
		/// </summary>
		/// <value></value>
		public decimal CurrentRate
		{
			get { return currentRate; }
		}

		/// <summary>
		/// Gets the previous rate.
		/// </summary>
		/// <value></value>
		public decimal PreviousRate
		{
			get { return previousRate; }
		}

		/// <summary>
		/// Gets the gb pound.
		/// </summary>
		/// <value></value>
		public static Currency GbPound
		{
			get
			{
				if (gbPound == null)
				{
					gbPound = new Currency("GBP", 1, 1);
				}
				return gbPound;
			}
		}

		/// <summary>
		/// Gets the global market which can be compared against to 
		/// determine if an object has no Currency.
		/// </summary>
		/// <value></value>
		public static Currency GlobalMarket
		{
			get
			{
				if (globalMarket == null)
				{
					globalMarket = new Currency("", 0, 0);
				}
				return globalMarket;
			}
		}


		/// <summary>
		/// Calculates the movement based on todays conversion rate - the last conversion rate all divided by the last conversion rate.
		/// </summary>
		/// <param name="currencyFrom">Currency from.</param>
		/// <param name="currencyTo">Currency to.</param>
		/// <returns></returns>
		public static decimal CalculateMovement(Currency currencyFrom, Currency currencyTo)
		{
			decimal todaysConversionRate = TodaysConversionRate(currencyFrom, currencyTo);
			return (todaysConversionRate - PreviousConversionRate(currencyFrom, currencyTo))/todaysConversionRate;

		}

		private static decimal PreviousConversionRate(Currency from, Currency to)
		{
			return to.PreviousRate/from.PreviousRate;
		}

		private static decimal TodaysConversionRate(Currency from, Currency to)
		{
			return to.CurrentRate/from.CurrentRate;
		}

		/// <summary>
		/// Overridden to return equality of two currency objects based on the CurrencyCode
		/// </summary>
		/// <param name="obj">Obj.</param>
		/// <returns></returns>
		public override bool Equals(object obj)
		{
			if (!(obj is Currency))
			{
				return false;
			}
			else
			{
				Currency check = (Currency) obj;
				if (check.CurrencyCode == this.CurrencyCode)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
		}

		/// <summary>
		/// Gets the hash code. Overridden to return the has code of the CurrencyCode
		/// </summary>
		/// <returns></returns>
		public override int GetHashCode()
		{
			return m_currencyCode.GetHashCode();
		}


	}
}