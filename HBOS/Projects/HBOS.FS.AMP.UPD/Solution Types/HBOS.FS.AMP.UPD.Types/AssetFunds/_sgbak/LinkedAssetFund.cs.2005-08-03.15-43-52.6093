using System;
using HBOS.FS.AMP.UPD.Types.FundGroups;
using HBOS.FS.AMP.UPD.Types.WeightedIndices;

namespace HBOS.FS.AMP.UPD.Types.AssetFunds
{
	/// <summary>
	/// Summary description for LinkedAssetFund.
	/// </summary>
	public class LinkedAssetFund : AssetFund
	{		
        #region Member variables

        private long m_currencyRateImportID;        // (from db)
        private long m_indexValueImportID;          // (from db)
        private long m_indexWeightingImportID;      // (from db)

        private bool m_currencyRateImportIDSet;
        private bool m_indexValueImportIDSet;
        private bool m_indexWeightingImportIDSet;

        #endregion
        
        #region Constructors

		/// <summary>
		/// Default constructor (which just calls base)
		/// </summary>
		public LinkedAssetFund() : base()
		{
		}

		/// <summary>
		/// Initialises the asset fund with data for static export use only
		/// </summary>
		/// <param name="assetFundCode">The HiPortfolio fund code.</param>
		/// <param name="shortName">The short name of the asset fund</param>
		/// <param name="fullName">The full name of the asset fund</param>
		/// <param name="companyCode">The company code for this asset fund</param>
		/// <param name="assetMovementTolerance">am tolerance derived from child funds</param>
		/// <param name="fundGroups">The collection of fund groups associated with this asset fund</param>
		/// <param name="assetMovementConstituentCollection">The collection of benchmarks and weightings associated with this asset fund</param>
		public LinkedAssetFund(string assetFundCode, string shortName, string fullName, string companyCode, decimal assetMovementTolerance, FundGroupCollection fundGroups, AssetMovementConstituentCollection assetMovementConstituentCollection) 
			:base (assetFundCode, shortName, fullName, companyCode, assetMovementTolerance, fundGroups, assetMovementConstituentCollection)
		{
		}


		/// <summary>
		/// Initialises the asset fund with data for light use only (eg static data)
		/// </summary>
		/// <param name="assetFundCode">The HiPortfolio fund code.</param>
		/// <param name="shortName">The short name of the asset fund</param>
		/// <param name="fullName">The full name of the asset fund</param>
		/// <param name="companyCode"></param>
		/// <param name="lastUpdatedTimeStamp">The database timestamp used for concurrency checking</param>
		/// <param name="fundGroups">The collection of fund groups associated with this asset fund</param>
		/// <param name="assetMovementConstituentCollection">The collection of weighted benchmarks associated with this asset fund</param>
		public LinkedAssetFund(string assetFundCode, string shortName, string fullName, string companyCode, byte[] lastUpdatedTimeStamp, FundGroupCollection fundGroups, AssetMovementConstituentCollection assetMovementConstituentCollection): base(assetFundCode, shortName, fullName, companyCode, lastUpdatedTimeStamp, fundGroups, assetMovementConstituentCollection)
		{
		}

		/// <summary>
		/// Constructor with all params. Jtst passes params onto base
		/// </summary>
		/// <param name="assetFundCode"></param>
		/// <param name="shortName"></param>
		/// <param name="fullName"></param>
		/// <param name="companyCode"></param>
		/// <param name="unitPrice"></param>
		/// <param name="valuationPoint"></param>
		/// <param name="unitPriceMovement"></param>
		/// <param name="previousUnitPrice"></param>
		/// <param name="previousUnitPriceSet"></param>
		/// <param name="authorisedUnitPrice"></param>
		/// <param name="authorisedUnitPriceSet"></param>
		/// <param name="lockedForCalculation"></param>
		/// <param name="AMTolerance"></param>
		/// <param name="unitPriceSet"></param>
		/// <param name="unitPriceMovementSet"></param>
		/// <param name="AMToleranceSet"></param>
		/// <param name="valuationPointSet"></param>
		/// <param name="currencyRateImportID"></param>
		/// <param name="currencyRateImportIDSet"></param>
		/// <param name="indexValueImportID"></param>
		/// <param name="indexValueImportIDSet"></param>
		/// <param name="indexWeightingImportID"></param>
		/// <param name="indexWeightingImportIDSet"></param>
		/// <param name="timeStamp"></param>
		/// <param name="assetFundStatus"></param>
		/// <param name="assetMovementConstituentCollection"></param>
        public LinkedAssetFund(string assetFundCode, string shortName, string fullName, string companyCode
			, decimal unitPrice, DateTime valuationPoint, decimal unitPriceMovement
			, decimal previousUnitPrice, bool previousUnitPriceSet, decimal authorisedUnitPrice, bool authorisedUnitPriceSet
			, bool lockedForCalculation
			, decimal AMTolerance
			, bool unitPriceSet, bool unitPriceMovementSet, bool AMToleranceSet, bool valuationPointSet
			, long currencyRateImportID, bool currencyRateImportIDSet, long indexValueImportID
			, bool indexValueImportIDSet, long indexWeightingImportID, bool indexWeightingImportIDSet
			, byte[] timeStamp, int assetFundStatus, AssetMovementConstituentCollection assetMovementConstituentCollection) 			

			: base (assetFundCode, shortName, fullName, companyCode, unitPrice, valuationPoint, unitPriceMovement
			, previousUnitPrice, previousUnitPriceSet, authorisedUnitPrice, authorisedUnitPriceSet
			, lockedForCalculation, AMTolerance
			, unitPriceSet, unitPriceMovementSet, AMToleranceSet, valuationPointSet
            , timeStamp, assetFundStatus, assetMovementConstituentCollection)
		{
            // Assign import id's
            this.m_currencyRateImportID = currencyRateImportID;
            this.m_currencyRateImportIDSet = currencyRateImportIDSet;
            this.m_indexValueImportID = indexValueImportID;
            this.m_indexValueImportIDSet = indexValueImportIDSet;
            this.m_indexWeightingImportID = indexWeightingImportID;
            this.m_indexWeightingImportIDSet = indexWeightingImportIDSet;
		}
		#endregion

        #region Properties

        /// <summary>
        /// The import ID of the currency import file used for calculations.
        /// </summary>
        public long CurrencyRateImportID
        {
            get
            {
                return this.m_currencyRateImportID;
            }

            
            set
            {
                this.m_currencyRateImportID = value;
                this.m_currencyRateImportIDSet = true;
            }
        }

        /// <summary>
        /// Flag indicating whether the currency rate import ID has been populated from the database or not.
        /// </summary>
        public bool CurrencyRateImportIDSet
        {
            get
            {
                return this.m_currencyRateImportIDSet;
            }

            
            set
            {
                this.m_currencyRateImportIDSet = value;
            }
        }

        /// <summary>
        /// The import ID of the index values import file used for calculations.
        /// </summary>
        public long IndexValueImportID
        {
            get
            {
                return this.m_indexValueImportID;
            }

            
            set
            {
                this.m_indexValueImportID = value;
                this.m_indexValueImportIDSet = true;
            }
        }

        /// <summary>
        /// Flag indicating whether the index value import ID has been populated from the database or not.
        /// </summary>
        public bool IndexValueImportIDSet
        {
            get
            {
                return this.m_indexValueImportIDSet;
            }

            
            set
            {
                this.m_indexValueImportIDSet = value;
            }
        }

        /// <summary>
        /// The import ID of the fund weightings import file used for calculations.
        /// </summary>
        public long IndexWeightingImportID
        {
            get
            {
                return this.m_indexWeightingImportID;
            }

            
            set
            {
                this.m_indexWeightingImportID = value;
                this.m_indexWeightingImportIDSet = true;
            }
        }

        /// <summary>
        /// Flag indicating whether the index weighting import ID has been populated from the database or
        /// not.
        /// </summary>
        public bool IndexWeightingImportIDSet
        {
            get
            {
                return this.m_indexWeightingImportIDSet;
            }

            
            set
            {
                this.m_indexWeightingImportIDSet = value;
            }
        }

        #endregion

        #region Methods

		/// <summary>
		/// The string representation of the type name used for display and reporting purposes
		/// </summary>
		public override string AssetFundType
		{
			get
			{
				return "Linked";
			}
			//todo - do we need a set for the grid?
		}

        #endregion
	}
}
