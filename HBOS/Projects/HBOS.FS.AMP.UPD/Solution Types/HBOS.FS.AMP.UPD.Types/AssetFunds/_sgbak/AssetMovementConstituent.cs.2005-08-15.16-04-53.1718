using HBOS.FS.AMP.UPD.Types.BenchMark;

namespace HBOS.FS.AMP.UPD.Types.AssetFunds
{
	/// <summary>
	/// Summary description for AssetFundConstituent.
	/// </summary>
	public class AssetMovementConstituent: EntityBase
	{
		private  AssetFund parent;
		private  decimal proportion;
		private readonly IBenchMark benchMark;


		
		/// <summary>
		/// Gets the parent asset fund.
		/// </summary>
		/// <value></value>
		public AssetFund ParentAssetFund
		{
			get { return parent; }
			set {  parent=value; }
		}

		/// <summary>
		/// Gets the proportion this benchmark is of the asset fund split.
		/// </summary>
		/// <value></value>
		public decimal Proportion
		{
			get
			{return proportion;}
			set
			{
				if (value<0 || value>1)
				{
					throw new HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException();
				}
				proportion=value;
				this.IsDirty=true;
			}
		}

		/// <summary>
		/// Gets the bench mark.
		/// </summary>
		/// <value></value>
		public IBenchMark BenchMark
		{
			get { return benchMark; }
		}


		/// <summary>
		/// Calculates the movement.
		/// </summary>
		/// <returns></returns>
		public decimal CalculateMovement()
		{
			//throw new NotImplementedException();
			// Switch the sign of the currency rate movement to reflect the move from
			// the perspective of the local currency.
			decimal currencyMovement=0;
				if (ParentAssetFund!=null) currencyMovement=Currency.Currency.CalculateMovement(BenchMark.Currency,ParentAssetFund.Currency);
			decimal movement=(this.Proportion * BenchMark.Movement) + (this.Proportion*currencyMovement);
			return  movement;
		}

		/// <summary>
		/// Creates a new <see cref="AssetMovementConstituent"/> instance.
		/// </summary>
		/// <param name="proportion">Proportion.</param>
		/// <param name="benchMark">Bench mark.</param>
		public AssetMovementConstituent(decimal proportion, IBenchMark benchMark)
		{
			this.parent = null;
			this.proportion = proportion;
			this.benchMark = benchMark;

			IsDirty   = false;
			IsDeleted = false;
			IsNew     = false;
		}


	}
}