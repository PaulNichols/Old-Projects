using HBOS.FS.AMP.UPD.Types.BenchMark;

namespace HBOS.FS.AMP.UPD.Types.StockMarketIndex
{
	/// <summary>
	/// Summary description for StockMarketIndex.
	/// </summary>
	public class StockMarketIndex : IBenchMark
	{
		private string marketName;
		private readonly int marketIndexId;
		private readonly object currentValue;
		private readonly object previousValue;
		private readonly Currency.Currency currency;

		/// <summary>
		/// Creates a new <see cref="StockMarketIndex"/> instance.
		/// </summary>
		public StockMarketIndex(int marketIndexId, string marketName, object currentValue,
		                        object previousValue, Currency.Currency currency)
		{
			this.marketName = marketName;
			this.marketIndexId = marketIndexId;
			this.currentValue = currentValue;
			this.previousValue = previousValue;
			this.currency = currency;

		}

		#region IBenchMark implementation

		/// <summary>
		/// Gets the Benchmark movement.
		/// </summary>
		/// <value></value>
		public decimal Movement
		{
			get { return (CurrentValue - PreviousValue)/PreviousValue; }
		}

		/// <summary>
		/// Gets the Bench Mark currency.
		/// </summary>
		/// <value></value>
		public Currency.Currency Currency
		{
			get { return currency; }
		}

		/// <summary>
		/// Gets the state of availability for the Bench Mark.
		/// </summary>
		/// <value></value>
		public BenchMarkAvailabilityState Availability
		{
			//based on having current and previous imported value
			get
			{
				if (currentValue == null || previousValue == null)
				{
					return BenchMarkAvailabilityState.AvailableWithWarnings;
				}
				else
				{
					return BenchMarkAvailabilityState.Available;
				}

			}
		}

		/// <summary>
		/// Toes the string.
		/// </summary>
		/// <returns></returns>
		public override string ToString()
		{
			return marketName;
		}

		/// <summary>
		/// This message will show more explination for the BenchMarkAvailabilityState status.
		/// </summary>
		/// <value></value>
		public string AvailableMessage
		{
			get
			{
				string returnString = "";
				if (this.Availability == BenchMarkAvailabilityState.AvailableWithWarnings)
				{
					if (previousValue == null)
					{
						returnString = "There was no previous Import for this Market.";
					}
					else if (this.currentValue == null)
					{
						returnString = "There is no current Import for this Market.";
					}
				}
				return returnString;
			}
		}

		/// <summary>
		/// Gets the market index unique id.
		/// </summary>
		/// <value></value>
		public int MarketIndexId
		{
			get { return marketIndexId; }
		}

		#endregion

		private decimal CurrentValue
		{
			get
			{
				return currentValue == null ? 0 : (decimal) currentValue;
				;
			}
		}

		private decimal PreviousValue
		{
			get
			{
				return previousValue == null ? 0 : (decimal) previousValue;
				;
			}
		}
	}
}