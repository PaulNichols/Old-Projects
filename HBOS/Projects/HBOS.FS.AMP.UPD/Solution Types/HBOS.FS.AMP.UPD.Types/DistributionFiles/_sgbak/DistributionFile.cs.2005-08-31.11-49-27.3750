using System.Xml.Xsl;

namespace HBOS.FS.AMP.UPD.Types.DistributionFiles
{
	/// <summary>
	/// Summary description for DistributionFile.
	/// </summary>
	public class DistributionFile : EntityBase
	{
		/// <summary>
		/// Represents a physical file that the system will distribute.
		/// </summary>
		
		#region Locals

		private int m_fileID = 0;
		private string m_fileDescription = string.Empty;
		private string m_fileName = string.Empty;
		private string m_filePath = string.Empty;
		private string m_archiveFolder = string.Empty;
		private string m_companyCode = string.Empty;

		private DistributionFileStatuses m_status = DistributionFileStatuses.Unavailable;
		private readonly int m_distributedCount;
		private readonly int m_distributableCount;
		private readonly int m_totalFundCount;
		private IXsltLoader m_xsltLoader = null;

        /// <summary>
        /// 
        /// </summary>
        public IXsltLoader xsltLoader
        {
            get { return m_xsltLoader;}
            set { m_xsltLoader = value;}
        }

		#endregion

		#region Constructors

		/// <summary>
		/// Create a new Distribution File
		/// </summary>
		public DistributionFile()
		{
			m_fileID = 0;
			m_fileDescription = string.Empty;
			m_fileName = string.Empty;
			m_filePath = string.Empty;
			m_status = DistributionFileStatuses.Unavailable;

			m_archiveFolder = string.Empty;
			m_companyCode = string.Empty;

			//Set up IEntityBase members
			m_isNew = true;
			m_isDeleted = false;
			m_timestamp = new byte[1];
			m_isDirty = true;
		}

		/// <summary>
		/// Create an existing Distribution File for static data maintenance
		/// </summary>
		public DistributionFile(int fileID, string fileDescription,
			string fileName, string filePath, byte[] timeStamp)
		{
			m_fileID = fileID;
			m_fileDescription = fileDescription;
			m_fileName = fileName;
			m_filePath = filePath;
			m_status = DistributionFileStatuses.Unavailable;

			m_archiveFolder = string.Empty;
			m_companyCode = string.Empty;

			//Set up IEntityBase members
			m_isNew = false;
			m_isDeleted = false;
			m_timestamp = timeStamp;
			m_isDirty = false;
		}

		/// <summary>
		/// Create an existing Distribution File for distribution
		/// </summary>
		public DistributionFile(int fileID, string fileDescription,
			string fileName, string filePath, string archiveFolder, 
			string companyCode,DistributionFileStatuses status,
			int distributedCount,int distributableCount,int totalFundCount,
			IXsltLoader xsltLoader, byte[] timeStamp)
		{
			m_fileID = fileID;
			m_fileDescription = fileDescription;
			m_fileName = fileName;
			m_filePath = filePath;
			m_status = status;
			this.m_distributedCount = distributedCount;
			this.m_distributableCount = distributableCount;
			this.m_totalFundCount = totalFundCount;
			m_xsltLoader = xsltLoader;
			m_archiveFolder = archiveFolder;
			m_companyCode = companyCode;

			//Set up IEntityBase members
			m_isNew = false;
			m_isDeleted = false;
			m_timestamp = timeStamp;
			m_isDirty = false;
		}


		#endregion

		#region Methods

		/// <summary>
		/// Override the ToString method to provide useful information.
		/// </summary>
		/// <returns>The FileDescription</returns>
		public override string ToString()
		{
			return this.m_fileDescription;
		}

		/// <summary>
		/// Overridden to check equality based on FileId
		/// </summary>
		/// <param name="obj">Obj.</param>
		/// <returns></returns>
		public override bool Equals(object obj)
		{
			if (obj is DistributionFile)
			{
				DistributionFile df = (DistributionFile)obj;
				return (this.FileID == df.FileID);
			}
			else
			{
				return base.Equals (obj);
			}
		}

		/// <summary>
		/// Gets the hash code.
		/// </summary>
		/// <returns></returns>
		public override int GetHashCode()
		{
			return this.FileID;
		}

		/// <summary>
		/// Loads the XSLT for this distribution.
		/// </summary>
		/// <returns></returns>
		public XslTransform LoadXslt()
		{
			if (m_xsltLoader == null)
			{
				return null;
			}
			else
			{
				return m_xsltLoader.Load();
			}
		}


		#endregion Methods

		#region Public Properties

		/// <summary>
		/// The database unique key for this file.
		/// </summary>
		public int FileID
		{
			set
			{
				m_fileID = value;
				SetDirtyFlag();
			}
			get
			{
				return m_fileID;
			}
		}

		/// <summary>
		/// The description of this file.
		/// </summary>
		public string FileDescription
		{
			set
			{
				m_fileDescription = value;
				SetDirtyFlag();
			}
			get
			{
				return m_fileDescription;
			}
		}

		/// <summary>
		/// The physical file name of this file.
		/// </summary>
		public string FileName
		{
			set
			{
				m_fileName = value;
				SetDirtyFlag();
			}
			get
			{
				return ReplaceTemplateElements(m_fileName);
			}
		}

		private string ReplaceTemplateElements(string stringToAlter)
		{
			return stringToAlter.Replace("[#Date]",string.Format("{0:yyyyMMdd}", System.DateTime.Today)+"_");
		}

		/// <summary>
		/// The physical file path of this file.
		/// </summary>
		public string FilePath
		{
			set
			{
				m_filePath = value;
				SetDirtyFlag();
			}
			get
			{
				return m_filePath;
			}
		}

		/// <summary>
		/// The status for this file
		/// </summary>
		public DistributionFileStatuses Status
		{
			get
			{
				return m_status;
			}
			set
			{
				m_status = value;
				SetDirtyFlag();
			}
		}

		/// <summary>
		/// The folder location to archive this file
		/// </summary>
		public string ArchiveFolder
		{
			get
			{
				return m_archiveFolder;
			}
			set
			{
				m_archiveFolder = value;
				SetDirtyFlag();
			}
		}

		/// <summary>
		/// The company code associated with this files data
		/// </summary>
		/// <remarks>This is used for archiving to attach the company code to the archive filename</remarks>
		public string CompanyCode
		{
			get
			{
				return m_companyCode;
			}
			set
			{
				m_companyCode = value;
				SetDirtyFlag();
			}
		}

		/// <summary>
		/// Gets the count of distributed funds for this file.
		/// </summary>
		/// <value></value>
		public int DistributedCount
		{
			get { return m_distributedCount; }
		}

		/// <summary>
		/// Gets the count of released funds for this file.
		/// </summary>
		/// <value></value>
		public int ReleasedCount
		{
			get { return m_distributableCount; }
		}

		/// <summary>
		/// Gets the total count of funds expected on the output file.
		/// </summary>
		/// <value></value>
		public int TotalFundCount
		{
			get { return m_totalFundCount; }
		}

		#endregion

	}

	/// <summary>
	/// Enumeration of the status for each distribution file
	/// </summary>
	public enum DistributionFileStatuses
	{
		/// <summary>
		/// Not all the funds in this distribution have been released
		/// </summary>
		Unavailable,

        /// <summary>
        /// Not all of the funds in this distribution have been released but partial distributions
        /// are allowed
        /// </summary>
        Partial,

//        /// <summary>
//        /// Not all of the funds in this distribution have been released but partial distributions
//        /// are allowed and a previous partial distrbution has been performed
//        /// </summary>
//        PartiallyDistributed,

		/// <summary>
		/// All funds in the distribution have been released and this distribution can be carried out
		/// </summary>
		Available,
		
		/// <summary>
		/// This distribution has already been distributed, it may be re-distributed
		/// </summary>
		Distributed
	}
}
