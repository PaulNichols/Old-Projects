using System;
using HBOS.FS.AMP.UPD.Types.AssetFunds;
using HBOS.FS.AMP.UPD.Types.FundGroups;
using HBOS.FS.AMP.UPD.Types.Funds;

namespace UT_HBOS.FS.AMP.UPD.Types
{
	/// <summary>
	/// Static helpers for the MVSII calculation tests
	/// </summary>
	public abstract class MVSIICalcHelpers
	{
		/// <summary>
		/// Creates a new <see cref="MVSIICalcHelpers"/> instance.
		/// </summary>
		protected MVSIICalcHelpers()
		{
			//
			// TODO: Add constructor logic here
			//
		}

		/// <summary>
		/// Creates the weighted index.
		/// </summary>
		/// <param name="marketMovement">Market movement.</param>
		/// <param name="currencyMovement">Currency movement.</param>
		/// <param name="proportion">Proportion.</param>
		/// <returns>Suitable IWeightedMovement for OEIC and Linked asset funds</returns>
		public static IWeightedMovement CreateWeightedIndex(decimal marketMovement, decimal currencyMovement, decimal proportion)
		{
			int marketIndexID = 1;
			string assetFundCode = "AFCode";
			string indexName = "Index";
			bool marketMovementSet = true;
			int importedIndexValueSnapshotID = 1;
			bool currencyMovementSet = true;
			int currencyRatesSnapshotID = 1;
			string countryCode = "UK";
			string currencyCode = "GBP";
			string country = "UK";
			bool proportionSet = true;
			int snapshotID = 1;
			bool fromAuthorisedAssetFundDetails = false;
			byte[] timestamp = new byte[1];

			IWeightedMovement weightedMovement = new WeightedIndex(marketIndexID,
			                                                       assetFundCode,
			                                                       indexName,
			                                                       marketMovement,
			                                                       marketMovementSet,
			                                                       importedIndexValueSnapshotID,
			                                                       currencyMovement,
			                                                       currencyMovementSet,
			                                                       currencyRatesSnapshotID,
			                                                       countryCode,
			                                                       currencyCode,
			                                                       country,
			                                                       proportion,
			                                                       proportionSet,
			                                                       snapshotID,
			                                                       fromAuthorisedAssetFundDetails,
			                                                       timestamp);
			return weightedMovement;
		}

		/// <summary>
		/// Creates the composite weighting.
		/// </summary>
		/// <param name="linkedFundMovement">Linked fund movement.</param>
		/// <param name="proportion">Proportion.</param>
		/// <returns></returns>
		public static IWeightedMovement CreateCompositeWeighting(decimal linkedFundMovement, decimal proportion)
		{
			string linkedFundCode = "LinkedFund";

			IWeightedMovement weightedMovement = new CompositeWeighting(linkedFundCode, linkedFundMovement, proportion, true);
			return weightedMovement;
		}

		/// <summary>
		/// Creates the linked asset fund.
		/// </summary>
		/// <param name="unitPrice">Unit price.</param>
		/// <param name="previousUnitPrice">Previous unit price.</param>
		/// <param name="unitPriceMovement">Unit price movement.</param>
		/// <returns>A Linked Asset Fund</returns>
		public static AssetFund CreateLinkedAssetFund(decimal unitPrice, decimal previousUnitPrice, decimal unitPriceMovement)
		{
			string assetFundCode = "AssetFundCode";
			string shortName = "AFShort";
			string fullName = "AFFull";
			string companyCode = "HIFM";
			DateTime valuationPoint = DateTime.Now;
			bool previousUnitPriceSet = true;
			decimal authorisedUnitPrice = 0.0m;
			bool authorisedUnitPriceSet = false;
			bool lockedForCalculation = false;
			decimal assetMovementTolerance = 0.0m;
			AssetFundIndexWeightedCollection marketValueSplits = null;
			AssetFundIndexWeightedCollection weightedMovements = null;
			bool unitPriceSet = true;
			bool unitPriceMovementSet = true;
			bool assetMovementToleranceSet = true;
			bool valuationPointSet = true;
			int currencyRateSnapshotID = 1;
			bool currencyRateSnapshotIDSet = true;
			int indexValueSnapshotID = 1;
			bool indexValueSnapshotIDSet = true;
			int indexWeightingSnapshotID = 1;
			bool indexWeightingSnapshotIDSet = true;
			byte[] timeStamp = new byte[1];
			int assetFundStatus = 1; // Why an int for this and not an enum?

			AssetFund af = new LinkedAssetFund(assetFundCode,
			                                   shortName,
			                                   fullName,
			                                   companyCode,
			                                   unitPrice,
			                                   valuationPoint,
			                                   unitPriceMovement,
			                                   previousUnitPrice,
			                                   previousUnitPriceSet,
			                                   authorisedUnitPrice,
			                                   authorisedUnitPriceSet,
			                                   lockedForCalculation,
			                                   assetMovementTolerance,
			                                   marketValueSplits,
			                                   weightedMovements,
			                                   unitPriceSet,
			                                   unitPriceMovementSet,
			                                   assetMovementToleranceSet,
			                                   valuationPointSet,
			                                   currencyRateSnapshotID,
			                                   currencyRateSnapshotIDSet,
			                                   indexValueSnapshotID,
			                                   indexValueSnapshotIDSet,
			                                   indexWeightingSnapshotID,
			                                   indexWeightingSnapshotIDSet,
			                                   timeStamp,
			                                   assetFundStatus,
			                                   null);
			return af;
		}

		/// <summary>
		/// Creates the composite asset fund.
		/// </summary>
		/// <param name="unitPrice">Unit price.</param>
		/// <param name="previousUnitPrice">Previous unit price.</param>
		/// <param name="unitPriceMovement">Unit price movement.</param>
		/// <returns>A Composite Asset Fund</returns>
		public static AssetFund CreateCompositeAssetFund(decimal unitPrice, decimal previousUnitPrice, decimal unitPriceMovement)
		{
			string assetFundCode = "AssetFundCode";
			string shortName = "AFShort";
			string fullName = "AFFull";
			byte[] timeStamp = new byte[1];
			FundGroupCollection fundGroups = null;
			WeightedMovementCollection weightedMovements = null;

			AssetFund af = new CompositeAssetFund(assetFundCode,
			                                      shortName,
			                                      fullName,
			                                      null,
			                                      timeStamp,
			                                      fundGroups,
			                                      weightedMovements);

			return af;
		}

		/// <summary>
		/// Creates the OEIC asset fund.
		/// </summary>
		/// <param name="unitPrice">Unit price.</param>
		/// <param name="previousUnitPrice">Previous unit price.</param>
		/// <param name="unitPriceMovement">Unit price movement.</param>
		/// <returns>An OEIC Asset Fund</returns>
		public static AssetFund CreateOEICAssetFund(decimal unitPrice, decimal previousUnitPrice, decimal unitPriceMovement)
		{
			string assetFundCode = "AssetFundCode";
			string shortName = "AFShort";
			string fullName = "AFFull";
			string companyCode = "HIFM";
			DateTime valuationPoint = DateTime.Now;
			bool previousUnitPriceSet = true;
			decimal authorisedUnitPrice = 0.0m;
			bool authorisedUnitPriceSet = false;
			bool lockedForCalculation = false;
			decimal assetMovementTolerance = 0.0m;
			AssetFundIndexWeightedCollection marketValueSplits = null;
			AssetFundIndexWeightedCollection weightedMovements = null;
			bool unitPriceSet = true;
			bool unitPriceMovementSet = true;
			bool assetMovementToleranceSet = true;
			bool valuationPointSet = true;
			int currencyRateSnapshotID = 1;
			bool currencyRateSnapshotIDSet = true;
			int indexValueSnapshotID = 1;
			bool indexValueSnapshotIDSet = true;
			int indexWeightingSnapshotID = 1;
			bool indexWeightingSnapshotIDSet = true;
			byte[] timeStamp = new byte[1];
			int assetFundStatus = 1; // Why an int for this and not an enum?

			AssetFund af = new OEICAssetFund(assetFundCode,
			                                 shortName,
			                                 fullName,
			                                 companyCode,
			                                 unitPrice,
			                                 valuationPoint,
			                                 unitPriceMovement,
			                                 previousUnitPrice,
			                                 previousUnitPriceSet,
			                                 authorisedUnitPrice,
			                                 authorisedUnitPriceSet,
			                                 lockedForCalculation,
			                                 assetMovementTolerance,
			                                 marketValueSplits,
			                                 weightedMovements,
			                                 unitPriceSet,
			                                 unitPriceMovementSet,
			                                 assetMovementToleranceSet,
			                                 valuationPointSet,
			                                 currencyRateSnapshotID,
			                                 currencyRateSnapshotIDSet,
			                                 indexValueSnapshotID,
			                                 indexValueSnapshotIDSet,
			                                 indexWeightingSnapshotID,
			                                 indexWeightingSnapshotIDSet,
			                                 timeStamp,
			                                 assetFundStatus,
			                                 null);

			return af;
		}


		/// <summary>
		/// Creates the linked fund.
		/// </summary>
		/// <param name="price">Price.</param>
		/// <param name="previousPrice">Previous price.</param>
		/// <param name="parentAssetFund">The parent asset fund.</param>
		/// <returns>An initialised linked fund instance</returns>
		public static Fund CreateLinkedFund(decimal price, decimal previousPrice, AssetFund parentAssetFund)
		{
			/*
            string hiPortfolioCode = "hiPortfolioCode";
            string fullName = "fullName";
            string shortName = "shortName";
            string classOrSeriesCode = "class";
            bool useMidPriceAsBidPrice = false;
            bool onHiPortfolio3 = true;
            bool isDualPrice = true;

            decimal taxProvisionEstimate = 0.0m;
            int taxProvisionFactorID = 1;
            bool taxProvisionFactorIDSet = true;
            DateTime taxProvisionEffectiveDate = DateTime.Now;
            bool taxProvisionEffectiveDateSet = true;
            
            DateTime revaluationEffectiveDate = System.DateTime.Now;
            decimal revaluationRatioValue = 0.0m;
            DateTime revaluationEndDate = DateTime.Now;
            bool revaluationEndDateSet = true;
            int revalutionFactorID = 1;
            
            decimal scalingFactor = 0.0m;
            int scalingFactorID = 1;
            DateTime scalingFactorEffectiveDate = System.DateTime.Now;
            bool scalingFactorEffectiveDateSet = true;
            
            decimal xFactor = 0.0m; 
            int xFactorID = 1;
            DateTime xFactorEffectiveDate = System.DateTime.Now;
            string xFactorDescription = "XFACTOR";
            
            decimal assetMovementTolerance = 0.0m;
            decimal upperTolerance = 0.0m;
            decimal lowerTolerance = 0.0m;
            bool priceIncreaseOnly = false;
            int tolerancesID = 1;
            bool tolerancesIDSet = true;
            bool priceSet = true;
            
            long importedFundPriceID = 1;
            decimal valuationBasisEffect = 0.0m;
            bool previousPriceSet = true;
            Fund.FundStatusType fundStatus = Fund.FundStatusType.Imported;
            DateTime statusChangedTime = DateTime.Now;
            bool statusChangedTimeSet = true;
            bool usePredictedPrice = false;
            byte[] authorisedPriceTimestamp = new byte[1];
            byte[] timestamp = new byte[1];
            bool isLife = true;
            bool isInitialUnits = true;
            byte[] revaluationFactorTimestamp = new byte[1];
            byte[] scalingFactorTimestamp = new byte[1];
            byte[] taxProvisionEstimateTimestamp = new byte[1];
            byte[] xFactorTimestamp = new byte[1];
            string parentAssetFundID = "AF1";
            
			*/

			Fund newFund = new LinkedFund();

			/* TODO
			(hiPortfolioCode,
                                        fullName,
                                        shortName,
                                        classOrSeriesCode,
                                        useMidPriceAsBidPrice,
                                        onHiPortfolio3,
                                        isDualPrice,
                                        parentAssetFund,
                                        taxProvisionEstimate,
                                        taxProvisionFactorID,
                                        taxProvisionFactorIDSet,
                                        taxProvisionEffectiveDate,
                                        taxProvisionEffectiveDateSet,
                                        revaluationEffectiveDate,
                                        revaluationEffectiveDateSet,
                                        revaluationRatioValue,
                                        revaluationEndDate,
                                        revaluationEndDateSet,
                                        revalutionFactorID,
                                        revaluationFactorIDSet,
                                        scalingFactor,
                                        scalingFactorID,
                                        scalingFactorIDSet,
                                        scalingFactorEffectiveDate,
                                        scalingFactorEffectiveDateSet,
                                        xFactor, 
                                        xFactorID,
                                        xFactorIDSet,
                                        xFactorEffectiveDate,
                                        xFactorEffectiveDateSet,
                                        xFactorDescription,
                                        assetMovementTolerance,
                                        upperTolerance,
                                        lowerTolerance,
                                        priceIncreaseOnly,
                                        tolerancesID,
                                        tolerancesIDSet,
                                        price,
                                        priceSet,
                                        importedFundPriceID,
                                        importedFundPriceIDSet,
                                        valuationBasisEffect,
                                        valuationBasisEffectSet,
                                        valuationBasisID,
                                        valuationBasisIDSet,
                                        previousPrice,
                                        previousPriceSet,
                                        fundStatus,
                                        statusChangedTime,
                                        statusChangedTimeSet,
                                        usePredictedPrice,
                                        authorisedPriceTimestamp,
                                        timestamp,
                                        isLife,
                                        isInitialUnits,
                                        revaluationFactorTimestamp,
                                        scalingFactorTimestamp,
                                        taxProvisionEstimateTimestamp,
                                        xFactorTimestamp,
                                        parentAssetFundID, null, null);
										*/
			return newFund;
		}

		/// <summary>
		/// Creates an OEIC fund.
		/// </summary>
		/// <param name="price">Price.</param>
		/// <param name="previousPrice">Previous price.</param>
		/// <param name="parentAssetFund">The parent asset fund.</param>
		/// <returns>An initialised OEIC fund instance</returns>
		public static Fund CreateOEICFund(decimal price, decimal previousPrice, AssetFund parentAssetFund)
		{
			/*
            string hiPortfolioCode = "hiPortfolioCode";
            string fullName = "fullName";
            string shortName = "shortName";
            string classOrSeriesCode = "class";
            bool onHiPortfolio3 = true;

            decimal taxProvision = 0.0m;
            int taxProvisionFactorID = 1;
            bool taxProvisionFactorIDSet = true;

            DateTime scalingFactorEffectiveDate = System.DateTime.Now;
            
            decimal xFactor = 0.0m; 
            int xFactorID = 1;
            bool xFactorIDSet = true;
            DateTime xFactorEffectiveDate = System.DateTime.Now;
            bool xFactorEffectiveDateSet = true;
            string xFactorDescription = "XFACTOR";
            
            decimal assetMovementTolerance = 0.0m;
            decimal upperTolerance = 0.0m;
            decimal lowerTolerance = 0.0m;
            bool priceIncreaseOnly = false;
            int tolerancesID = 1;
            bool tolerancesIDSet = true;
            bool priceSet = true;
            
            long importedFundPriceID = 1;
            bool importedFundPriceIDSet = true;
            decimal valuationBasisEffect = 0.0m;
            bool valuationBasisEffectSet = true;
            int valuationBasisID = 1;
            bool valuationBasisIDSet = true;
            bool previousPriceSet = true;
            Fund.FundStatusType fundStatus = Fund.FundStatusType.Imported;
            DateTime statusChangedTime = DateTime.Now;
            bool statusChangedTimeSet = true;
            bool usePredictedPrice = false;
            byte[] authorisedPriceTimestamp = new byte[1];
            byte[] timestamp = new byte[1];
            bool isExDividend = true;
            byte[] xFactorTimestamp = new byte[1];
            byte[] oeicTimestamp = new byte[1];
            string parentAssetFundID = "AF1";
            */
			Fund newFund = new OEICFund();
			/* TODO
			hiPortfolioCode,
                                    fullName,
                                    shortName,
                                    classOrSeriesCode,
                                    onHiPortfolio3,
                                    parentAssetFund,
                                    taxProvision, 
                                    taxProvisionFactorID,
                                    taxProvisionFactorIDSet,
                                    xFactor,
                                    xFactorID,
                                    xFactorIDSet,
                                    xFactorEffectiveDate,
                                    xFactorEffectiveDateSet,
                                    xFactorDescription,
                                    assetMovementTolerance,
                                    upperTolerance,
                                    lowerTolerance,
                                    priceIncreaseOnly,
                                    tolerancesID,
                                    tolerancesIDSet,
                                    price,
                                    priceSet,
                                    importedFundPriceID,
                                    importedFundPriceIDSet,
                                    valuationBasisEffect,
                                    valuationBasisEffectSet,
                                    valuationBasisID,
                                    valuationBasisIDSet,
                                    previousPrice,
                                    previousPriceSet,
                                    fundStatus,
                                    statusChangedTime,
                                    statusChangedTimeSet,
                                    usePredictedPrice,
                                    authorisedPriceTimestamp,
                                    timestamp,
                                    isExDividend,
                                    oeicTimestamp,
                                    xFactorTimestamp,
                                    parentAssetFundID, 
									null);
									*/
			return newFund;
		}


		/// <summary>
		/// Creates the composite fund.
		/// </summary>
		/// <param name="price">Price.</param>
		/// <param name="previousPrice">Previous price.</param>
		/// <param name="parentAssetFund">The parent asset fund.</param>
		/// <returns>An initialised composite fund instance</returns>
		public static Fund CreateCompositeFund(decimal price, decimal previousPrice, AssetFund parentAssetFund)
		{
			/*
            string hiPortfolioCode = "hiPortfolioCode";
            string fullName = "fullName";
            string shortName = "shortName";
            string classOrSeriesCode = "class";
            bool useMidPriceAsBidPrice = false;
            bool onHiPortfolio3 = true;
            bool isDualPrice = true;

            decimal taxProvisionEstimate = 0.0m;
            int taxProvisionFactorID = 1;
            bool taxProvisionFactorIDSet = true;
            DateTime taxProvisionEffectiveDate = DateTime.Now;
            bool taxProvisionEffectiveDateSet = true;
            
            DateTime revaluationEffectiveDate = System.DateTime.Now;
            bool revaluationEffectiveDateSet = true; 
            decimal revaluationRatioValue = 0.0m;
            DateTime revaluationEndDate = DateTime.Now;
            bool revaluationEndDateSet = true;
            int revalutionFactorID = 1;
            bool revaluationFactorIDSet = true;
            
            decimal scalingFactor = 0.0m;
            int scalingFactorID = 1;
            bool scalingFactorIDSet = true;
            DateTime scalingFactorEffectiveDate = System.DateTime.Now;
            bool scalingFactorEffectiveDateSet = true;
            
            decimal xFactor = 0.0m; 
            int xFactorID = 1;
            bool xFactorIDSet = true;
            DateTime xFactorEffectiveDate = System.DateTime.Now;
            bool xFactorEffectiveDateSet = true;
            string xFactorDescription = "XFACTOR";
            
            decimal assetMovementTolerance = 0.0m;
            decimal upperTolerance = 0.0m;
            decimal lowerTolerance = 0.0m;
            bool priceIncreaseOnly = false;
            int tolerancesID = 1;
            bool tolerancesIDSet = true;
            bool priceSet = true;
            
            long importedFundPriceID = 1;
            bool importedFundPriceIDSet = true;
            decimal valuationBasisEffect = 0.0m;
            bool valuationBasisEffectSet = true;
            int valuationBasisID = 1;
            bool valuationBasisIDSet = true;
            bool previousPriceSet = true;
            Fund.FundStatusType fundStatus = Fund.FundStatusType.Imported;
            DateTime statusChangedTime = DateTime.Now;
            bool statusChangedTimeSet = true;
            bool usePredictedPrice = false;
            byte[] authorisedPriceTimestamp = new byte[1];
            byte[] timestamp = new byte[1];
            bool isLife = true;
            bool isInitialUnits = true;
            byte[] revaluationFactorTimestamp = new byte[1];
            byte[] scalingFactorTimestamp = new byte[1];
            byte[] taxProvisionEstimateTimestamp = new byte[1];
            byte[] xFactorTimestamp = new byte[1];
            string parentAssetFundID = "AF1";
            */
			Fund newFund = new Composite();
			/*
			(hiPortfolioCode,
                                            fullName,
                                            shortName,
                                            classOrSeriesCode,
                                            useMidPriceAsBidPrice,
                                            onHiPortfolio3,
                                            isDualPrice,
                                            parentAssetFund,
                                            taxProvisionEstimate,
                                            taxProvisionFactorID,
                                            taxProvisionFactorIDSet,
                                            taxProvisionEffectiveDate,
                                            taxProvisionEffectiveDateSet,
                                            revaluationEffectiveDate,
                                            revaluationEffectiveDateSet,
                                            revaluationRatioValue,
                                            revaluationEndDate,
                                            revaluationEndDateSet,
                                            revalutionFactorID,
                                            revaluationFactorIDSet,
                                            scalingFactor,
                                            scalingFactorID,
                                            scalingFactorIDSet,
                                            scalingFactorEffectiveDate,
                                            scalingFactorEffectiveDateSet,
                                            xFactor, 
                                            xFactorID,
                                            xFactorIDSet,
                                            xFactorEffectiveDate,
                                            xFactorEffectiveDateSet,
                                            xFactorDescription,
                                            assetMovementTolerance,
                                            upperTolerance,
                                            lowerTolerance,
                                            priceIncreaseOnly,
                                            tolerancesID,
                                            tolerancesIDSet,
                                            price,
                                            priceSet,
                                            importedFundPriceID,
                                            importedFundPriceIDSet,
                                            valuationBasisEffect,
                                            valuationBasisEffectSet,
                                            valuationBasisID,
                                            valuationBasisIDSet,
                                            previousPrice,
                                            previousPriceSet,
                                            fundStatus,
                                            statusChangedTime,
                                            statusChangedTimeSet,
                                            usePredictedPrice,
                                            authorisedPriceTimestamp,
                                            timestamp,
                                            isLife,
                                            isInitialUnits,
                                            revaluationFactorTimestamp,
                                            scalingFactorTimestamp,
                                            taxProvisionEstimateTimestamp,
                                            xFactorTimestamp,
                                            parentAssetFundID,
											null, null);
											*/
			return newFund;
		}

	}
}