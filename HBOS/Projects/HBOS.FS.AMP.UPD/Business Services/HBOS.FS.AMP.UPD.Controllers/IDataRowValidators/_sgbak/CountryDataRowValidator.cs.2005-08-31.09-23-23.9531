using System;
using System.Data;
using HBOS.FS.AMP.Data.Types;
using HBOS.FS.AMP.Data.Validator.Interface;
using HBOS.FS.AMP.UPD.Types.Countries;
using HBOS.FS.AMP.UPD.Types.Currency;

namespace HBOS.FS.AMP.UPD.Controllers
{
	/// <summary>
	/// CountryDataRowValidator - makes sure a row contains a valid country
	/// </summary>
	public class CountryDataRowValidator : IDataRowValidator
	{
		#region Events

		/// <summary>
		/// Invalid Data Row Event
		/// </summary>
		public event InvalidDataRowDelegate InvalidDataRowEvent;

		#endregion

		#region Variables

		private CountryCollection m_allCountries ;
		private readonly int m_countryColumnPosition;

		#endregion

		#region Constructor

		/// <summary>
		/// Constructor which remembers the countries.
		/// </summary>
		/// <param name="allCountries"></param>
		/// <param name="countryColumnPosition">The position in the text file that the country appears</param>
		public CountryDataRowValidator(CountryCollection allCountries,int countryColumnPosition)
		{
			this.m_allCountries = allCountries;
			this.m_countryColumnPosition = countryColumnPosition;
		}

		#endregion

		#region IDataRowValidator Members

		/// <summary>
		/// Validate the Currency Exchange Rate record
		/// </summary>
		/// <param name="dataRow"></param>
		/// <param name="dataDefinition"></param>
		/// <returns></returns>
		public ValidationErrorSeverity Validate(string[] dataRow, DataTable dataDefinition)
		{
			string countryCode = dataRow[m_countryColumnPosition].ToString();
			Country rowCountry = new Country(countryCode);
			ValidationErrorSeverity returnSeverity = ValidationErrorSeverity.None;

			if (m_allCountries.Contains(rowCountry) == false)
			{
				returnSeverity = ValidationErrorSeverity.High;

				if (this.InvalidDataRowEvent != null)
				{
					InvalidDataRowEvent(this, new InvalidDataRowEventArgs(dataRow, dataDefinition, String.Format("Country Code value of {0} is not valid.", countryCode), ValidationErrorSeverity.High));
				}
			}

			return returnSeverity;
		}

		#endregion
	}
}