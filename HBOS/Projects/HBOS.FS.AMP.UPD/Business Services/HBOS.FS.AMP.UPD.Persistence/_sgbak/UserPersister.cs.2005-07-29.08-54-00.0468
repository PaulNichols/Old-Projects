using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using HBOS.FS.AMP.Entities;
using HBOS.FS.AMP.UPD.Exceptions;
using HBOS.FS.AMP.UPD.Types.Lookups;
using HBOS.FS.AMP.UPD.Types.Users;
using HBOS.FS.Support.Tex;
using Microsoft.ApplicationBlocks.Data;

namespace HBOS.FS.AMP.UPD.Persistence
{
	/// <summary>
	/// This is the persister object for saving/retireing user data from/to the datasource 
	/// </summary>
	public class UserPersister : Persister
	{
		#region Constructors

		/// <summary>
		/// Constructor used to initialise the ConnectionString property
		/// </summary>
		/// <param name="connectionString"></param>
		public UserPersister(string connectionString) : base(connectionString)
		{
		}

		#endregion

		#region Load Methods

		/// <summary>
		/// Loads the export data.
		/// </summary>
		/// <param name="companyCode">Company code.</param>
		/// <returns></returns>
		public DataSet LoadExportData(string companyCode)
		{
			T.E();
			const string Sp = "usp_UsersStaticDataExport";
			SqlParameter[] parameters = new SqlParameter[1];
			DataSet returnData = null;

			try
			{
				// Set up the parameters.
				parameters[0] = new SqlParameter("@CompanyCode", SqlDbType.Char, 50);
				parameters[0].Value = companyCode;

				// Start a new SQL connection
				SqlConnection connection = new SqlConnection(m_connectionString);
				connection.Open();

				returnData = new DataSet();

				// Execute the fill method
				SqlHelper.FillDataset(connection, Sp, returnData, new string[] {"UserPermissions"}, parameters);

				// We close the connection
				connection.Close();
			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, Sp, parameters);
			}
			finally
			{
				T.X();
			}
			return returnData;
		}

		/// <summary>
		/// Loads the a single user by Login ID.
		/// </summary>
		/// <param name="loginId">Login id.</param>
		/// <param name="companyCode">Company code.</param>
		/// <returns></returns>
		public User LoadUser(string loginId, string companyCode)
		{
			T.E();
			const string spName = "usp_UserGetStaticData";
			SqlParameter[] spParameters = new SqlParameter[1];

			// Set up the stored procedure parameters.
			spParameters[0] = new SqlParameter("@loginId", SqlDbType.VarChar, 50);
			spParameters[0].Value = loginId;
			// Create the fund object.
			User user = null;

			try
			{
				user = (User) this.LoadEntity(spName, spParameters);

				// Test for valid object
				if (user == null)
				{
					throw new ArgumentException(string.Format("Failed to load a user with the login Id '{0}'", loginId));
				}
			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, spName, spParameters);
			}
			T.X();
			return user;
		}


		/// <summary>
		/// Loads the all users for company.
		/// </summary>
		/// <param name="companyCode">Company code.</param>
		/// <returns></returns>
		public SimpleStringLookupCollection LoadAllUsersForCompany(string companyCode)
		{
			T.E();

			// Create the users collection.
			SimpleStringLookupCollection usersList = new SimpleStringLookupCollection();

			string spName = "usp_UsersGetAll";

			this.LoadEntityCollection(spName, null, usersList);

			T.X();

			return usersList;
		}

		/// <summary>
		/// Creates a user from the supplied data
		/// </summary>
		/// <param name="reader">The reader containing the data.</param>
		/// <returns></returns>
		protected override object CreateEntity(SafeDataReader reader)
		{
			T.E();
			User newUser = new User(
				reader.GetString("loginID"),
				reader.GetString("userName"),
				reader.GetBoolean("deleted"),
				reader.GetString("LastChangedBy"),
				reader.GetDateTime("LastChangedDate"),
				reader.GetTimestamp("TS")
				);

//			newUser.Permissions = new UserPermissions(
//				reader.GetBoolean("administrator"),
//				reader.GetBoolean("importExchangeRate"),
//				reader.GetBoolean("importMarketIndices"),
//				reader.GetBoolean("importLinkedPrices"),
//				reader.GetBoolean("importCompositePrices"),
//				reader.GetBoolean("importHI3Prices"),
//				reader.GetBoolean("importOverSeasFundWeightings"),
//				reader.GetBoolean("ExportOEICPrices"),
//				reader.GetBoolean("AuthorisePrices"),
//				reader.GetBoolean("ReleasePrices"),
//				reader.GetBoolean("DistributePrices"),
//				reader.GetBoolean("MaintainFundGroups"),
//				reader.GetBoolean("MaintainAssetFunds"),
//				reader.GetBoolean("MaintainFundMappings"),
//				reader.GetBoolean("MaintainDistributionSubscriptions"),
//				reader.GetBoolean("MaintainDistributionMethods"),
//				reader.GetBoolean("MaintainDistributionSubscribers"),
//				reader.GetBoolean("MaintainUserAccess"),
//				reader.GetBoolean("MaintainValidationTolerances"),
//				reader.GetBoolean("MaintainCalculationIndices"),
//				reader.GetBoolean("MaintainCalculationFactors"),
//				reader.GetBoolean("ImportCompositeSplits"),
//				reader.GetBoolean("ReExportPrices"),
//				reader.GetString("companyCode"),
//				reader.GetString("lastChangedBy"),
//				reader.GetDateTime("lastChangedDate"),
//				reader.GetTimestamp("ts")
//				);

			T.X();
			return newUser;
		}

		/// <summary>
		/// Gets the all permissions those granted to the user  will be indeicated.
		/// </summary>
		/// <param name="user">User.</param>
		/// <param name="companyCode">Company code.</param>
		/// <returns></returns>
		public Permission GetAllPermissions(User user, string companyCode)
		{
			user.Permissions = null;

			T.E();
			const string spName = "usp_UserPermissionsGetAll";
			SqlParameter[] spParameters = new SqlParameter[2];

			// Set up the stored procedure parameters.
			spParameters[0] = new SqlParameter("@LoginId", SqlDbType.VarChar, 50);
			spParameters[0].Value = user.LogOnID;
			spParameters[1] = new SqlParameter("@CompanyCode", SqlDbType.VarChar, 10);
			spParameters[1].Value = companyCode;

			try
			{
				using (SqlDataReader dataReader =
					SqlHelper.ExecuteReader(this.ConnectionString, CommandType.StoredProcedure, spName, spParameters))
				{
					// Create the fund collection from the data values.
					SafeDataReader safeReader = new SafeDataReader(dataReader);
					Permission permissionById = null;
					while (dataReader.Read())
					{
						Permission newPermission;
						try
						{
							if (safeReader.GetInt32("ParentId") == 0)
							{
								newPermission = new PermissionGroup(companyCode, safeReader.GetInt32("PermissionId"), safeReader.GetString("DisplayName"));

								user.Permissions = newPermission;
								continue;
							}
							else
							{
								if (safeReader.GetBoolean("IsGroup"))
								{
									newPermission = new PermissionGroup(companyCode, safeReader.GetInt32("PermissionId"), safeReader.GetString("DisplayName"));
								}
								else
								{
									newPermission = new UserPermission(companyCode, safeReader.GetInt32("PermissionId"), safeReader.GetString("DisplayName"), safeReader.GetBoolean("Granted"), safeReader.GetString("UniqueName"));
								}

								if (permissionById == null || permissionById.PermissionId != safeReader.GetInt32("ParentId"))
								{
									permissionById = ((PermissionGroup) user.Permissions)[safeReader.GetInt32("ParentId")];
								}

								if (permissionById is PermissionGroup)
								{
									permissionById.Add(newPermission);
								}

							}


						}
						catch
						{
							throw;
						}
					}
				}

			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, spName, spParameters);
			}
			T.X();

			return user.Permissions;
		}

		#endregion

		#region ExceptionHandling

		/// <summary>
		/// Override the base database exception message
		/// </summary>
		/// <returns>String</returns>
		protected override string GetDatabaseExceptionMessage()
		{
			return "Failed to build the users list";
		}

		#endregion

		#region Update Methods

		/// <summary>
		/// This routine receives a collection of users to be peristed to the datasource
		/// </summary>
		/// <param name="users">List of users to save</param>
		public void Save(UserCollection users)
		{
			this.SaveEntityCollection(users);
		}

		/// <summary>
		/// Insert a new user into the database
		/// </summary>
		/// <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
		/// <param name="entity">Persitee user object</param>
		/// <returns>Success flag</returns>
		protected override void InsertEntity(IEntityBase entity, SqlTransaction transaction)
		{
			T.E();
			if (entity == null) throw new ArgumentNullException("entity", "Cannot insert null User");
			if (!(entity is User)) throw new ArgumentException("Incorrect type, expecting User, was " + entity.GetType().ToString(), "entity");
			User user = (User) entity;

			if (user.LogOnID == string.Empty || user.UserName == string.Empty)
			{
				throw new UsersSaveException("Both the User Name and Login must be populated", user);
			}

//			//pjn added ***************************
//			SqlParameter[] spParams = new SqlParameter[1];
//			spParams[0] = new SqlParameter("@sLoginID", SqlDbType.VarChar, 50);
//			spParams[0].Value = user.LogOnID;
//			int rowCount = (int) SqlHelper.ExecuteScalar(transaction, CommandType.StoredProcedure, "usp_DoesUserExistForLoginID", spParams);
//
//			if (rowCount == 0)
//			{
			//user does not exist so save both the user and permissions

//				// Create parameter object
//				spParams = new SqlParameter[2];
//
//				// This will make adding/moving/copying rows easier!!
//				int paramCounter = 0;
//
//				// Build parameters
//				spParams[paramCounter] = new SqlParameter("@sLoginID", SqlDbType.VarChar, 50);
//				spParams[paramCounter++].Value = user.LogOnID;
//				spParams[paramCounter] = new SqlParameter("@sUserName", SqlDbType.VarChar, 50);
//				spParams[paramCounter++].Value = user.UserName;
//
//
//				// Call create stored procedure
//				try
//				{
//					T.Log("Executing stored procedure: usp_UsersCreate");
//					SqlHelper.ExecuteNonQuery(transaction, CommandType.StoredProcedure, "usp_UsersCreate", spParams);
//
//					// Create parameter permission object
////					spParams = UserPersister.permissionsParameters(user);
////
////					// Call add user permissions for company
////					T.Log("Executing stored procedure: usp_UserPermissionsPerCompanyAdd");
////					SqlHelper.ExecuteNonQuery(transaction, CommandType.StoredProcedure, "usp_UserPermissionsPerCompanyAdd", spParams);
//				}
//				catch (SqlException ex)
//				{
//					this.ThrowDBException(ex, ex.Procedure, spParams);
//				}
//				finally
//				{
//					T.Log("Create user for login id: " + user.LogOnID);
//					T.X();
//				}
//			}
//			else if (rowCount == 1)
//			{
//				//the user exists does it have permisions for the current company
//
//				spParams = new SqlParameter[2];
//				spParams[1] = new SqlParameter("@sCompanyCode", SqlDbType.VarChar, 12);
//				spParams[1].Value = user.Permissions.CompanyCode;
//				spParams[0] = new SqlParameter("@sloginID", SqlDbType.VarChar, 50);
//				spParams[0].Value = user.LogOnID;
//				rowCount = (int) SqlHelper.ExecuteScalar(transaction, CommandType.StoredProcedure, "usp_UserPermissionsPerCompanyListForUserCount", spParams);
//
//				if (rowCount == 1)
//				{
//					//if the user exists with permission for this company then throw an exception
//					throw new Exception("A User with permissions for this company already exists.");
//				}
//				else if (rowCount == 0)
//				{
////					//if the user exists but with no permission for this company then add the permissions to the existing user
////					// Create parameter permission object
////					spParams = UserPersister.permissionsParameters(user);
////
////					// Call add user permissions for company
////					T.Log("Executing stored procedure: usp_UserPermissionsPerCompanyAdd");
////					SqlHelper.ExecuteNonQuery(transaction, CommandType.StoredProcedure, "usp_UserPermissionsPerCompanyAdd", spParams);
//
//				}
//			}
//			else
//			{
//				throw new Exception("Too many Users with the same details were found in the DB.");
//			}
			//*****************************

		}

		/// <summary>
		/// Delete a specified user from the database.
		/// </summary>
		/// <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
		/// <param name="entity">Persitee user object</param>
		/// <returns>Success flag</returns>
		protected override void DeleteEntity(IEntityBase entity, SqlTransaction transaction)
		{
			T.E();
			if (entity == null) throw new ArgumentNullException("entity", "Cannot insert null User");
			if (!(entity is User)) throw new ArgumentException("Incorrect type, expecting User, was " + entity.GetType().ToString(), "entity");
			User user = (User) entity;

			SqlParameter[] spParams = new SqlParameter[2];
			int paramCounter = 0;

			spParams[paramCounter] = new SqlParameter("@sLoginID", SqlDbType.VarChar, 50);
			spParams[paramCounter++].Value = user.LogOnID;
			spParams[paramCounter] = new SqlParameter("@ts", SqlDbType.Timestamp);
			spParams[paramCounter++].Value = user.TimeStamp;

			try
			{
				T.Log("Executing stored procedure: usp_UsersDelete");
				SqlHelper.ExecuteNonQuery(transaction, CommandType.StoredProcedure, "usp_UsersDelete", spParams);
			}
			catch (SqlException ex)
			{
				this.ThrowDBException(ex, ex.Procedure, spParams);
			}
			finally
			{
				T.Log("Delete user: " + user.LogOnID);
				T.X();
			}
		}

		/// <summary>
		/// Update a user in the database
		/// </summary>
		/// <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
		/// <param name="entity">Persitee user object</param>
		protected override void UpdateEntity(IEntityBase entity, SqlTransaction transaction)
		{
			T.E();
			if (entity == null) throw new ArgumentNullException("entity", "Cannot insert null User");
			if (!(entity is User)) throw new ArgumentException("Incorrect type, expecting User, was " + entity.GetType().ToString(), "entity");
			User user = (User) entity;

			SqlParameter[] spParams = new SqlParameter[4];
			int paramCounter = 0;

			spParams[paramCounter] = new SqlParameter("@sLoginID", SqlDbType.VarChar, 50);
			spParams[paramCounter++].Value = user.LogOnID;

			spParams[paramCounter] = new SqlParameter("@sUserName", SqlDbType.VarChar, 50);
			spParams[paramCounter++].Value = user.UserName;

			spParams[paramCounter] = new SqlParameter("@bDeleted", SqlDbType.Bit);
			spParams[paramCounter++].Value = user.IsDeleted;

			spParams[paramCounter] = new SqlParameter("@ts", SqlDbType.Timestamp);
			spParams[paramCounter].Direction = ParameterDirection.InputOutput;
			spParams[paramCounter].Value = user.TimeStamp;

			try
			{
				// Call update stored procedure
				if (user.IsDirty)
				{
					SqlHelper.ExecuteScalar(transaction, CommandType.StoredProcedure, "usp_UsersUpdate", spParams);
					user.TimeStamp = (byte[]) spParams[3].Value;
					user.IsDirty = false;
				}

			}
			catch (SqlException ex)
			{
				this.ThrowDBException(ex, ex.Procedure, spParams);
			}
			finally
			{
				T.Log("Update user: " + user.LogOnID);
				T.X();
			}
		}

		/// <summary>
		/// Overriden to ensure an update if only the permissions have changed
		/// </summary>
		/// <param name="entity">User entity.</param>
		/// <param name="transaction">Transaction.</param>
		protected internal override void SaveEntity(IEntityBase entity, SqlTransaction transaction)
		{
			T.E();
			base.SaveEntity(entity, transaction);

			if (!(entity is User)) throw new ArgumentException("Incorrect type, expecting User, was " + entity.GetType().ToString(), "entity");
			User user = (User) entity;

			try
			{
				PersistPermissions(user.Permissions, transaction, user.LogOnID);
				user.IsDirty = false;
			}
			catch
			{
				throw;
			}
			T.X();
		}

		private void PersistPermissions(Permission userPermissions, SqlTransaction transaction, string logOnID)
		{
			SqlParameter[] spParams = null;

			try
			{
				foreach (Permission permission in userPermissions)
				{
					if (permission is UserPermission)
					{
						if (permission.IsDirty)
						{
							spParams = UserPersister.permissionsParameters(permission, logOnID);
							SqlHelper.ExecuteNonQuery(transaction, CommandType.StoredProcedure, "usp_UserPermissionsUpdate", spParams);
							permission.IsDirty = false;
						}
					}
					else
					{
						PersistPermissions(permission, transaction, logOnID);
					}
				}
			}
			catch (SqlException ex)
			{
				this.ThrowDBException(ex, ex.Procedure, spParams);
			}
		}

		private static SqlParameter[] permissionsParameters(Permission permissionToPersist, string logonId)
		{
//			// This procedure centralises the building of the paramters
//			// for the update/insert of the user permissions
//
//			// we will now add the user permissions inside the same transaction
//			// Create paremeter object
//
			SqlParameter[] spParams = null;
//			// The update procedure also takes the timestamp field
//			if (userToPersist.Permissions.IsDirty && userToPersist.IsNew == false)
//			{
			spParams = new SqlParameter[4];
//			}
//			else
//			{
//				spParams = new SqlParameter[25];
//			}
//
//			// Build parameters
			spParams[0] = new SqlParameter("@loginID", SqlDbType.VarChar, 50);
			spParams[0].Value = logonId;

			spParams[1] = new SqlParameter("@CompanyCode", SqlDbType.VarChar, 10);
			spParams[1].Value = permissionToPersist.CompanyCode;

			spParams[2] = new SqlParameter("@PermissionId", SqlDbType.Int);
			spParams[2].Value = permissionToPersist.PermissionId;

			spParams[3] = new SqlParameter("@Grant", SqlDbType.Int);
			spParams[3].Value = permissionToPersist.Granted;

//			spParams[2] = new SqlParameter("@bAdministrator", SqlDbType.Bit);
//			spParams[2].Value = userToPersist.Permissions.Administrator;
//
//			spParams[3] = new SqlParameter("@bImportExchangeRate", SqlDbType.Bit);
//			spParams[3].Value = userToPersist.Permissions.ImportExchangeRates;
//
//			spParams[4] = new SqlParameter("@bImportMarketIndices", SqlDbType.Bit);
//			spParams[4].Value = userToPersist.Permissions.ImportMarketIndices;
//
//			spParams[5] = new SqlParameter("@bImportHi3Prices", SqlDbType.Bit);
//			spParams[5].Value = userToPersist.Permissions.CanImportOEICPrices;
//
//			spParams[6] = new SqlParameter("@bImportOverseasFundWeightings", SqlDbType.Bit);
//			spParams[6].Value = userToPersist.Permissions.ImportOverSeasFundWeightings;
//
//			spParams[7] = new SqlParameter("@bAuthorisePrices", SqlDbType.Bit);
//			spParams[7].Value = userToPersist.Permissions.AuthorisePrices;
//
//			spParams[8] = new SqlParameter("@bReleasePrices", SqlDbType.Bit);
//			spParams[8].Value = userToPersist.Permissions.ReleasePrices;
//
//			spParams[9] = new SqlParameter("@bDistributePrices", SqlDbType.Bit);
//			spParams[9].Value = userToPersist.Permissions.DistributePrices;
//
//			spParams[10] = new SqlParameter("@bMaintainFundGroups", SqlDbType.Bit);
//			spParams[10].Value = userToPersist.Permissions.MaintainFundGroups;
//
//			spParams[11] = new SqlParameter("@bMaintainAssetFunds", SqlDbType.Bit);
//			spParams[11].Value = userToPersist.Permissions.MaintainAssetFunds;
//
//			spParams[12] = new SqlParameter("@bMaintainFundMappings", SqlDbType.Bit);
//			spParams[12].Value = userToPersist.Permissions.MaintainFundMappings;
//
//			spParams[13] = new SqlParameter("@bMaintainDistributionSubscriptions", SqlDbType.Bit);
//			spParams[13].Value = userToPersist.Permissions.MaintainDistributionSubscriptions;
//
//			spParams[14] = new SqlParameter("@bMaintainDistributionMethods", SqlDbType.Bit);
//			spParams[14].Value = userToPersist.Permissions.MaintainDistributionMethods;
//
//			spParams[15] = new SqlParameter("@bMaintainDistributionSubscribers", SqlDbType.Bit);
//			spParams[15].Value = userToPersist.Permissions.MaintainDistributionSubscribers;
//
//			spParams[16] = new SqlParameter("@bMaintainUserAccess", SqlDbType.Bit);
//			spParams[16].Value = userToPersist.Permissions.MaintainUserAccess;
//
//			spParams[17] = new SqlParameter("@bMaintainValidationTolerances", SqlDbType.Bit);
//			spParams[17].Value = userToPersist.Permissions.MaintainValidationTolerances;
//
//			spParams[18] = new SqlParameter("@bMaintainCalculationIndices", SqlDbType.Bit);
//			spParams[18].Value = userToPersist.Permissions.MaintainCalculationIndices;
//
//			spParams[19] = new SqlParameter("@bMaintainCalculationFactors", SqlDbType.Bit);
//			spParams[19].Value = userToPersist.Permissions.MaintainCalculationFactors;
//
//			spParams[20] = new SqlParameter("@bExportOEICPrices", SqlDbType.Bit);
//			spParams[20].Value = userToPersist.Permissions.ExportOEICSPrices;
//
//			spParams[21] = new SqlParameter("@bImportCompositeSplits", SqlDbType.Bit);
//			spParams[21].Value = userToPersist.Permissions.ImportCompositeSplits;
//
//			spParams[22] = new SqlParameter("@bReExportPrices", SqlDbType.Bit);
//			spParams[22].Value = userToPersist.Permissions.ReExportPrices;
//
//			spParams[23] = new SqlParameter("@bimportLinkedPrices", SqlDbType.Bit);
//			spParams[23].Value = userToPersist.Permissions.CanImportLinkedPrices;
//
//			spParams[24] = new SqlParameter("@bimportCompositePrices", SqlDbType.Bit);
//			spParams[24].Value = userToPersist.Permissions.CanImportCompositePrices;
//
//			// Updates need the timestamp as well - but not for new users
//			if (userToPersist.Permissions.IsDirty && userToPersist.IsNew == false)
//			{
//				spParams[25] = new SqlParameter("@ts", SqlDbType.Timestamp);
//				spParams[25].Direction = ParameterDirection.InputOutput;
//				spParams[25].Value = userToPersist.Permissions.TimeStamp;
//			}
//
			return spParams;
		}

		#endregion

		#region Other public methods

		/// <summary>
		/// Set the last company the user chose
		/// </summary>
		public string GetLastCompany()
		{
			string loadSp = "usp_UsersGetLastCompanyForLoginID";
			try
			{
				using (SqlDataReader companyReader = SqlHelper.ExecuteReader(
					this.ConnectionString,
					loadSp))
				{
					if (companyReader.Read())
						return companyReader["CompanyCode"].ToString();
				}
				return String.Empty;
			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, loadSp, null);
			}
			finally
			{
				T.X();
			}
			return String.Empty;
		}

		/// <summary>
		/// Set the last company the user chose
		/// </summary>
		public void SetLastCompany(string companyCode)
		{
			string loadSp = "usp_UsersSetLastCompanyForLoginID";
			try
			{
				SqlParameter[] spParams = new SqlParameter[1];
				spParams[0] = new SqlParameter("@sCompanyID", SqlDbType.Char, 10);
				spParams[0].Value = companyCode;

				// And finally save the new company code against the user record in the database
				SqlHelper.ExecuteNonQuery(
					this.ConnectionString,
					CommandType.StoredProcedure,
					"usp_UsersSetLastCompanyForLoginID",
					spParams);
			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, loadSp, null);
			}
			finally
			{
				T.X();
			}
		}



		/// <summary>
		/// Return the user permissions for the user and the current company
		/// </summary>
		/// <param name="companyId">Company id.</param>
		/// <param name="logOnId">Log on id.</param>
		/// <returns></returns>
		public Hashtable UserPermissions(string companyId, string logOnId)
		{
			string loadSp = "usp_UserCompanyPermissions";
			Hashtable returnCollection=new Hashtable();

			try
			{
				// Get the permissions record for the combination of 
				// the Identity user and specified company ID
				SqlParameter[] spParameters = new SqlParameter[2];

				// Set up the stored procedure parameters.
				spParameters[0] = new SqlParameter("@LogOnID", SqlDbType.VarChar, 50);
				spParameters[0].Value = logOnId;

				spParameters[1] = new SqlParameter("@CompanyCode", SqlDbType.VarChar, 10);
				spParameters[1].Value = companyId;

				using (SqlDataReader dataReader =
					SqlHelper.ExecuteReader(this.ConnectionString, CommandType.StoredProcedure, loadSp, spParameters))
				{
					// Create the fund collection from the data values.
					SafeDataReader safeReader = new SafeDataReader(dataReader);
					while (dataReader.Read())
					{
						returnCollection.Add(safeReader.GetString("UniqueName"),safeReader.GetString("UniqueName"));
					}
				}
			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, loadSp, null);
			}
			finally
			{
				T.X();
			}
			return returnCollection;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public bool UserIsValid()
		{
			T.E();
			bool isValidUser = false;
			const string loadSp = "usp_userIsValid";
			try
			{
				using (SqlConnection connection = new SqlConnection(this.ConnectionString))
				{
					using (SqlCommand command = new SqlCommand())
					{
						command.Connection = connection;
						command.CommandText = loadSp;
						command.CommandType = CommandType.StoredProcedure;
						connection.Open();
						isValidUser = Convert.ToBoolean(command.ExecuteScalar(),
						                                CultureInfo.InvariantCulture);
						connection.Close();
					}
				}

			}
			catch (SqlException ex)
			{
				ThrowDBException(ex, loadSp, null);
			}
			finally
			{
				T.X();
			}
			return isValidUser;

		}

		#endregion

	
	}
}