<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HBOS.FS.AMP.UPD.Persistence</name>
    </assembly>
    <members>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister">
            <summary>
            ImportExchangeRateSqlPersister - Like SqlWithParentPersister but needs to remember the currencyCode value
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.#ctor(System.String,System.String,System.String,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.String)">
            <summary>
            Create a ImportExchangeRateSqlPersister
            </summary>
            <param name="connectionString"></param>
            <param name="persistingStoredProcedure"></param>
            <param name="parentParameterName"></param>
            <param name="snapshot"></param>
            <param name="companyCode"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.PersistRow(System.String[],System.Data.DataTable)">
            <summary>
            Persist the data row
            </summary>
            <param name="dataRow"></param>
            <param name="schema"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.constructParams">
            <summary>
            Creates the instance level array of Sql Parameters to use when persisting a row
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.ParameterPosition">
            <summary>
            Parameter Positions
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.CurrencyExchangeRateColumnPosition">
            <summary>
            Column Position in the currency exchange rate file
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.CurrencyExchangeRateColumnPosition.ValuationDate">
            <summary>
            Valuation Date (0)
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.CurrencyExchangeRateColumnPosition.ValuationTime">
            <summary>
            Valuation Time (1)
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.CurrencyExchangeRateColumnPosition.CurrencyCode">
            <summary>
            Currency Code (2)
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportExchangeRateSqlPersister.CurrencyExchangeRateColumnPosition.ExchangeRate">
            <summary>
            Exchange Rate (3)
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister">
            <summary>
            ImportHi3PricesSqlPersister - persist some Hi3 Prices
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.#ctor(System.String,System.String,System.String,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Import a Hi3 Price
            </summary>
            <param name="connectionString"></param>
            <param name="persistingStoredProcedure"></param>
            <param name="parentParameterName"></param>
            <param name="snapshot"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.MissingAssetFundsFromPriceImport(System.String,System.String,System.String,System.String,System.Int64)">
            <summary>
            returns a list of missings the asset funds from the price import.
            </summary>
            <param name="extension">Extension.</param>
            <param name="fileName">Name of the file.</param>
            <param name="companyCode">Company code.</param>
            <param name="snapShotId">Snap shot id.</param>
            <param name="connectionString">Connection String</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.PersistRow(System.String[],System.Data.DataTable)">
            <summary>
            Persist the data row
            </summary>
            <param name="dataRow"></param>
            <param name="schema"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.TranslateValuationBasis(System.String)">
            <summary>
            Use to change 1 to B, 2 to M, 3 to O
            </summary>
            <param name="valuationBasisNumber"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.constructParams">
            <summary>
            Creates the instance level array of Sql Parameters to use when persisting a row
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.CalculatePortfolioCode(System.String,System.Int32,System.Boolean)">
            <summary>
            Calculate the portfolio code from the asset fund id
            </summary>
            <param name="assetFundId"></param>
            <param name="seriesNumber">The series number</param>
            <param name="OEICFund">Indicates if this fund is an OEIC</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.CalculateSeriesStartColumnNumber(System.Int32)">
            <summary>
            Calculate the column number for the beginning of the series.
            </summary>
            <returns></returns>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.SeriesNumber">
            <summary>
            Access to the series number
            </summary>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.OEICFund">
            <summary>
            Is it an OEIC fund
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.ParameterPosition">
            <summary>
            Parameter Positions
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition">
            <summary>
            Hi3 Prices Column Position
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetFundId">
            <summary>
            AssetFundId
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationDate">
            <summary>
            ValuationDate
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationTime">
            <summary>
            ValuationTime
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CurrencyCode">
            <summary>
            CurrencyCode
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle1">
            <summary>
            BidOrSingle1
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice1">
            <summary>
            UnroundedBidPrice1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice1">
            <summary>
            UnroundedOfferPrice1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice1">
            <summary>
            OfferPrice1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits1">
            <summary>
            PolicyHolderUnits1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice1">
            <summary>
            AssetUnitPrice1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice1">
            <summary>
            BarePrice1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits1">
            <summary>
            CompositeUnits1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits1">
            <summary>
            EquitableUnits1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield1">
            <summary>
            Yield1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice1">
            <summary>
            Unrounded Initial Price 1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice1">
            <summary>
            Published Initial Price 1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer1">
            <summary>
            Published Initial Offer 1,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis1">
            <summary>
            ValuationBasis 1
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle2">
            <summary>
            BidOrSingle2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice2">
            <summary>
            UnroundedBidPrice2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice2">
            <summary>
            UnroundedOfferPrice2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice2">
            <summary>
            OfferPrice2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits2">
            <summary>
            PolicyHolderUnits2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice2">
            <summary>
            AssetUnitPrice2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice2">
            <summary>
            BarePrice2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits2">
            <summary>
            CompositeUnits2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits2">
            <summary>
            EquitableUnits2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield2">
            <summary>
            Yield2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice2">
            <summary>
            Unrounded Initial Price 2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice2">
            <summary>
            Published Initial Price 2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer2">
            <summary>
            Published Initial Offer 2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis2">
            <summary>
            ValuationBasis 2
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle3">
            <summary>
            BidOrSingle3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice3">
            <summary>
            UnroundedBidPrice3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice3">
            <summary>
            UnroundedOfferPrice3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice3">
            <summary>
            OfferPrice3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits3">
            <summary>
            PolicyHolderUnits3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice3">
            <summary>
            AssetUnitPrice3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice3">
            <summary>
            BarePrice3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits3">
            <summary>
            CompositeUnits3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits3">
            <summary>
            EquitableUnits2,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield3">
            <summary>
            Yield3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice3">
            <summary>
            Unrounded Initial Price 3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice3">
            <summary>
            Published Initial Price 3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer">
            <summary>
            Published Initial Offer 3,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis3">
            <summary>
            ValuationBasis 3
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle4">
            <summary>
            BidOrSingle4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice4">
            <summary>
            UnroundedBidPrice4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice4">
            <summary>
            UnroundedOfferPrice4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice4">
            <summary>
            OfferPrice4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits4">
            <summary>
            PolicyHolderUnits4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice4">
            <summary>
            AssetUnitPrice4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice4">
            <summary>
            BarePrice4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits4">
            <summary>
            CompositeUnits4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits4">
            <summary>
            EquitableUnits4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield4">
            <summary>
            Yield4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice4">
            <summary>
            Unrounded Initial Price 4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice4">
            <summary>
            Published Initial Price 4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer4">
            <summary>
            Published Initial Offer 4,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis4">
            <summary>
            ValuationBasis 4
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle5">
            <summary>
            BidOrSingle5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice5">
            <summary>
            UnroundedBidPrice5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice5">
            <summary>
            UnroundedOfferPrice5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice5">
            <summary>
            OfferPrice5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits5">
            <summary>
            PolicyHolderUnits5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice5">
            <summary>
            AssetUnitPrice5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice5">
            <summary>
            BarePrice5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits5">
            <summary>
            CompositeUnits5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits5">
            <summary>
            EquitableUnits5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield5">
            <summary>
            Yield5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice5">
            <summary>
            Unrounded Initial Price 5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice5">
            <summary>
            Published Initial Price 5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer5">
            <summary>
            Published Initial Offer 5,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis5">
            <summary>
            ValuationBasis 5
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle6">
            <summary>
            BidOrSingle6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice6">
            <summary>
            UnroundedBidPrice6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice6">
            <summary>
            UnroundedOfferPrice6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice6">
            <summary>
            OfferPrice6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits6">
            <summary>
            PolicyHolderUnits6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice6">
            <summary>
            AssetUnitPrice6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice6">
            <summary>
            BarePrice6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits6">
            <summary>
            CompositeUnits6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits6">
            <summary>
            EquitableUnits6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield6">
            <summary>
            Yield6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice6">
            <summary>
            Unrounded Initial Price 6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice6">
            <summary>
            Published Initial Price 6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer6">
            <summary>
            Published Initial Offer 6,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis6">
            <summary>
            ValuationBasis 6
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle7">
            <summary>
            BidOrSingle7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice7">
            <summary>
            UnroundedBidPrice7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice7">
            <summary>
            UnroundedOfferPrice7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice7">
            <summary>
            OfferPrice7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits7">
            <summary>
            PolicyHolderUnits7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice7">
            <summary>
            AssetUnitPrice7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice7">
            <summary>
            BarePrice7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits7">
            <summary>
            CompositeUnits7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits7">
            <summary>
            EquitableUnits7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield7">
            <summary>
            Yield7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice7">
            <summary>
            Unrounded Initial Price 7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice7">
            <summary>
            Published Initial Price 7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer7">
            <summary>
            Published Initial Offer 7,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis7">
            <summary>
            ValuationBasis 7
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle8">
            <summary>
            BidOrSingle8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice8">
            <summary>
            UnroundedBidPrice8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice8">
            <summary>
            UnroundedOfferPrice8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice8">
            <summary>
            OfferPrice8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits8">
            <summary>
            PolicyHolderUnits8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice8">
            <summary>
            AssetUnitPrice8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice8">
            <summary>
            BarePrice8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits8">
            <summary>
            CompositeUnits8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits8">
            <summary>
            EquitableUnits8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield8">
            <summary>
            Yield8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice8">
            <summary>
            Unrounded Initial Price 8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice8">
            <summary>
            Published Initial Price 8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer8">
            <summary>
            Published Initial Offer 8,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis8">
            <summary>
            ValuationBasis 8
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle9">
            <summary>
            BidOrSingle9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice9">
            <summary>
            UnroundedBidPrice9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice9">
            <summary>
            UnroundedOfferPrice9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice9">
            <summary>
            OfferPrice9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits9">
            <summary>
            PolicyHolderUnits9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice9">
            <summary>
            AssetUnitPrice9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice9">
            <summary>
            BarePrice9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits9">
            <summary>
            CompositeUnits9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits9">
            <summary>
            EquitableUnits9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield9">
            <summary>
            Yield9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice9">
            <summary>
            Unrounded Initial Price 9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice9">
            <summary>
            Published Initial Price 9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer9">
            <summary>
            Published Initial Offer 9,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis9">
            <summary>
            ValuationBasis 9
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BidOrSingle10">
            <summary>
            BidOrSingle10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedBidPrice10">
            <summary>
            UnroundedBidPrice10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedOfferPrice10">
            <summary>
            UnroundedOfferPrice10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.OfferPrice10">
            <summary>
            OfferPrice10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PolicyHolderUnits10">
            <summary>
            PolicyHolderUnits10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.AssetUnitPrice10">
            <summary>
            AssetUnitPrice10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.BarePrice10">
            <summary>
            BarePrice10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.CompositeUnits10">
            <summary>
            CompositeUnits10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.EquitableUnits10">
            <summary>
            EquitableUnits10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.Yield10">
            <summary>
            Yield10
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.UnroundedInitialPrice10">
            <summary>
            Unrounded Initial Price 10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialPrice10">
            <summary>
            Published Initial Price 10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.PublishedInitialOffer10">
            <summary>
            Published Initial Offer 10,
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.ImportHi3PricesSqlPersister.Hi3PricesColumnPosition.ValuationBasis10">
            <summary>
            ValuationBasis 1
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportMarketIndexSqlPersister">
            <summary>
            ImportMarketIndexSqlPersister - Likevv SqlWithParentPersister but needs to remember the currencyCode value
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportMarketIndexSqlPersister.#ctor(System.String,System.String,System.String,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.String,System.DateTime)">
            <summary>
            Create a ImportMarketIndexSqlPersister
            </summary>
            <param name="connectionString"></param>
            <param name="persistingStoredProcedure"></param>
            <param name="parentParameterName"></param>
            <param name="snapshot"></param>
            <param name="companyCode"></param>
            <param name="valuationPoint"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportMarketIndexSqlPersister.PersistRow(System.String[],System.Data.DataTable)">
            <summary>
            Persist the data row
            </summary>
            <param name="dataRow"></param>
            <param name="schema"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportMarketIndexSqlPersister.constructParams(System.Data.DataTable)">
            <summary>
            Creates the instance level array of Sql Parameters to use when persisting a row
            </summary>
            <param name="schema"></param>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister">
            <summary>
            Summary description for ImportWorkingSplitTableSqlPersister.
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.tempTran">
            <summary>
            Should be temporary!
            This field has been added to get round the base transaction being readonly
            Due to the way Compsoite split imports needs to loop through the file line by line and only comitt 
            data when the whole composite fund is valid, it was found that posibbly the current methods of 
            persistance couldn't allow the transaction to be "passed around"
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.#ctor(System.String,System.String,System.String,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.PersistRow(System.String[],System.Data.DataTable)">
            <summary>
            Persist the data row
            </summary>
            <param name="dataRow"></param>
            <param name="schema"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.constructParams">
            <summary>
            Creates the instance level array of Sql Parameters to use when persisting a row
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.ParameterPosition">
            <summary>
            Parameter Positions for the temporary table
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.ColumnPosition">
            <summary>
            Standard column positions for Split files
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.ColumnPosition.primaryKey">
            <summary>
            Asset Fund (0)
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.ColumnPosition.secondaryKey">
            <summary>
            LinkedFund Code (1)
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.IDataRowPersisters.ImportWorkingSplitTableSqlPersister.ColumnPosition.importedValue">
            <summary>
            Value (2)
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundBenchMarkPersister">
            <summary>
            Summary description for AssetFundBenchMarkPersister.
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister">
            <summary>
            Summary description for AssetFundPricingPersister.
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister">
            <summary>
            The class to use for persisting or retrieving AssetFund objects and
            AssetFundCollection objects.
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.EntityPersister">
            <summary>
            The base class for all persisters concerned with the persisting of business entities.
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.PersisterBase">
            <summary>
            Base class for all persisters
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.#ctor">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.PersisterBase"/> instance.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.PersisterBase"/> instance.
            </summary>
            <param name="connectionString">Connection string to use for database connections.</param>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.PersisterBase.m_connectionString">
            <summary>
            The member variable for the ConnectionString property.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.ThrowDBException(System.Data.SqlClient.SqlException,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Wraps and throws an existing SqlException.
            Exception message can be customised by overriding one or more of the Get...ExceptionMessage() methods.
            </summary>
            <example>
            string storedProc = "spGetSomeData"
            
            sqlParameters[] spParams = new sqlParameters[1]'
            spParams[0] = new SqlParameter("@sCompanyCode", SqlDbType.VarChar, 10 ); 
            spParams[0].Value = companyCode;
            try
            {
            	using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString,
                       CommandType.StoredProcedure, storedProc, spParams))
                {
                  // do something with the reader
                }
            	
            }
            catch(SqlException ex)
            {
            	this.ThrowDBException(ex,ConnectionString,storedProc,spParams);
            }
            </example>
            <param name="ex">The original SqlException thrown. This is wrapped as the InnerException of the exception thrown</param>
            <param name="commandText">The sql command text that failed.</param>
            <param name="parms">Array of parameters sent to the command.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to insert item as an existing item already exists with unique key OR some other constraint violation has occurred</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Unable to create/update/delete/load items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.ThrowDBException(System.Data.SqlClient.SqlException,System.Data.SqlClient.SqlCommand)">
            <summary>
            Wraps and throws an existing SqlException.
            Exception message can be customised by overriding one or more of the Get...ExceptionMessage() methods.
            </summary>
            <example>
            SqlCommand cmd = new SqlCommand(connection,"spGetSomeData");
            try
            {
            	cmd.ExecuteScalar();
            }
            catch(SqlException ex)
            {
            	this.ThrowDBException(ex,cmd);
            }
            </example>
            <param name="ex">The original SqlException thrown. This is wrapped as the InnerException of the exception thrown</param>
            <param name="cmd">The SqlCommand that failed.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key OR some other constraint violation has occurred</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update/delete/load items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.ThrowDBException(System.Data.SqlClient.SqlException,System.String,System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Wraps and throws an existing SqlException.
            Exception message can be customised by overriding one or more of the Get...ExceptionMessage() methods.
            </summary>
            <example>
            string storedProc = "spGetSomeData"
            
            sqlParameterCollection spParams = new sqlParametersCollection()
            spParams.Add("@sCompanyCode", this.companyCode); 
            try
            {
            	using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString,
                       CommandType.StoredProcedure, storedProc, ConvertParameterCollectionToArray(spParams)))
                {
                  // do something with the reader
                }
            	
            }
            catch(SqlException ex)
            {
            	this.ThrowDBException(ex,ConnectionString,storedProc,spParams);
            }
            </example>
            <param name="ex">The original SqlException thrown. This is wrapped as the InnerException of the exception thrown</param>
            <param name="commandText">The Sql that failed.</param>
            <param name="parameters">Parameter collection used with the query</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key OR some other constraint violation has occurred</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update/delete/load items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.ThrowDBException(System.Data.SqlClient.SqlException,System.String)">
            <summary>
            Wraps and throws an existing SqlException.
            Exception message can be customised by overriding one or more of the Get...ExceptionMessage() methods.
            </summary>
            <example>
            string storedProc = "spGetSomeData"
            try
            {
            	using (SqlDataReader dataReader = SqlHelper.ExecuteReader(ConnectionString,
                       CommandType.StoredProcedure, storedProc))
                {
                  // do something with the reader
                }
            	
            }
            catch(SqlException ex)
            {
            	this.ThrowDBException(ex,ConnectionString,storedProc);
            }
            </example>
            <param name="ex">The original SqlException thrown. This is wrapped as the InnerException of the exception thrown</param>
            <param name="commandText">The Sql that failed.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key OR some other constraint violation has occurred</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update/delete/load items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.GetNullParameterExceptionMessage">
            <summary>
            Gets the exception message for a null parameter condition.
            Override to provide a customised message for your class.
            </summary>
            <returns>The message for the exception</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.GetConstraintViolationExceptionMessage">
            <summary>
            Gets the exception message for a constraint violation condition.
            Override to provide a customised message for your class.
            </summary>
            <returns>The message for the exception</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.GetConstraintViolationDuplicateKeyExceptionMessage">
            <summary>
            Gets the exception message for a duplicate key condition.
            Override to provide a customised message for your class.
            </summary>
            <returns>The message for the exception</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.GetConcurrencyViolationExceptionMessage">
            <summary>
            Gets the exception message for a currency violation condition.
            Override to provide a customised message for your class.
            </summary>
            <returns>The message for the exception</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.GetDatabaseExceptionMessage">
            <summary>
            Gets the exception message for an unspecified database condition.
            Override to provide a customised message for your class.
            </summary>
            <returns>The message for the exception</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PersisterBase.ConvertParameterCollectionToArray(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Converts the parameter collection to array for use with Microsoft Data Application Block.
            </summary>
            <param name="collection">Collection.</param>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.PersisterBase.ConnectionString">
            <summary>
            The connection string to be used for the data access layer.
            </summary>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.PersisterBase.DatabaseInfo">
            <summary>
            Gets the database info string that is used in DatabaseExceptions.
            </summary>
            <value></value>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">
            The connection string to be used for the data access layer.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntityCollection(System.Collections.IEnumerable)">
            <summary>
            Persist the entity collection to the database. The entities must implement IEntityBase
            </summary>
            <param name="list">The list of entities object being persisted.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntityCollection(System.Collections.IEnumerable,System.String)">
            <summary>
            Persist the entity collection to the database. The entities must implement IEntityBase
            </summary>
            <param name="list">The list of entities object being persisted.</param>
            <param name="connectionString">The connection string to use for database access.</param>
            <returns>True if the save is successful.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntityCollection(System.Collections.IEnumerable,System.Data.SqlClient.SqlConnection)">
            <summary>
            Persist the entity collection to the database. The entities must implement IEntityBase
            </summary>
            <param name="list">The list of entities object being persisted.</param>
            <param name="connection">The connection to use for the database access.</param>
            <returns>True if the save is successful.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntityCollection(System.Collections.IEnumerable,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves an entity collection. The entity must implement IEntityBase
            </summary>
            <param name="list">The list of entities to save</param>
            <param name="transaction">The transaction context to save in</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntity(HBOS.FS.AMP.Entities.IEntityBase)">
            <summary>
            Persist the base entity object to the database.
            </summary>
            <param name="entity">The base entity object being persisted.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntity(HBOS.FS.AMP.Entities.IEntityBase,System.String)">
            <summary>
            Persist the base entity object to the database.
            </summary>
            <param name="entity">The base entity object being persisted.</param>
            <param name="connectionString">
            The connection string to use for database access.
            </param>
            <returns>True if the save is successful.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlConnection)">
            <summary>
            Persist the base entity object to the database.
            </summary>
            <param name="entity">The base entity object being persisted.</param>
            <param name="connection">
            The connection to use for the database access.
            </param>
            <returns>True if the save is successful.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.SaveEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves (update/delete/insert) the entity.
            </summary>
            <param name="entity">The entity to save.</param>
            <param name="transaction">The transaction context to save in</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Override to Insert the entity into the database
            </summary>
            <param name="entity">Entity to insert.</param>
            <param name="transaction">The transaction context to save in</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Override to Delete the entity from the database
            </summary>
            <param name="entity">Entity to delete.</param>
            <param name="transaction">The transaction context to save in</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Override to Update the entity in the database
            </summary>
            <param name="entity">Entity to update.</param>
            <param name="transaction">The transaction context to save in</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.LoadEntity(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Loads an entity from db using sp and params provided
            </summary>
            <param name="storedProcName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.LoadEntity(System.String,System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Loads an entity from db using sp and params provided
            </summary>
            <param name="storedProcName"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.LoadEntity(System.String)">
            <summary>
            Loads an entity from db using a stored procedure with no parameters
            </summary>
            <param name="storedProcName"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.LoadEntityCollection(System.String,System.Data.SqlClient.SqlParameter[],System.Collections.IList)">
            <summary>
            Helper method to load an entity collection from a given stored procedured
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">Parameters to pass to the stored procedure.</param>
            <param name="list">The collection that the entities are added to.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.LoadEntityCollection(System.String,System.Data.SqlClient.SqlParameterCollection,System.Collections.IList)">
            <summary>
            Helper method to load an entity collection from a given stored procedured
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="parameters">Parameters to pass to the stored procedure.</param>
            <param name="list">The collection that the entities are added to.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.LoadEntityCollection(System.String,System.Collections.IList)">
            <summary>
            Helper method to load an entity collection from a given stored procedured with no parameters
            </summary>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="list">The collection that the entities are added to.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.EntityPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Override in the derived classes to create the entity from the data in the SafeDataReader.
            </summary>
            <param name="safeReader">Safe reader to get the values from.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.CheckFullNameOrShortNameDuplicationForExistingAssetFund(System.String,System.String,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Checks to see if the updated fullname or shortname already exists in the system for another asset fund
            </summary>
            <param name="assetFundID"></param>
            <param name="fullName"></param>
            <param name="shortName"></param>
            <param name="fullNameExists"></param>
            <param name="shortNameExists"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.CheckAssetFundExistence(System.String,System.String,System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks that no other fund exists with this id, fullname or shortname
            </summary>
            <param name="assetFundID"></param>
            <param name="fullName"></param>
            <param name="shortName"></param>
            <param name="assetFundIDExists"></param>
            <param name="fullNameExists"></param>
            <param name="shortNameExists"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.resolveAssetFundToDBType(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund)">
            <summary>
            takes an asset fund, checks its concrete type and returns db type
            </summary>
            <param name="assetFund"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.resolveDBTypeToAssetFundType(System.String)">
            <summary>
            takes a db string representing asset fund type, and returns an enumerated type.
            </summary>
            <param name="dbAssetFundType"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.resolveAssetFundTypeToDBType(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund.AssetFundTypeEnum)">
            <summary>
            takes an enumerated asset fund type, and returns the type as a string (char 1) suitable for the database.
            </summary>
            <param name="assetFundType"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.logAssetFundLoad(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund)">
            <summary>
            
            </summary>
            <param name="newAssetFund"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPersister.loadMovementConstituents(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assetFundCode"></param>
            <param name="loadForPricing">Indicates whether or not to include benchmark prices</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.Load(System.String)">
            <summary>
            Loads a particular asset fund
            Loads the light object version for static data maintenance
            </summary>
            <param name="assetFundCode">The Hi3 code (??) for the asset fund</param>
            <returns>The requested asset fund</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:System.ArgumentException">Column name not recognised, unexpected data in db, or column list not initialised</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.USPAssetFundDetailsLight(System.String)">
            <summary>
            This method returns a collection of asset funds based upon a particualr key
            Used for the light object collection (no weithing collections etc)
            </summary>
            <param name="assetFundCode"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load items</exception>
            <exception cref="T:System.ArgumentException">Column name not recognised, unexpected data in db, or column list not initialised</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.createEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the light entity.
            </summary>
            <param name="reader">Reader.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.SaveEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves (update/delete/insert) the entity.
            </summary>
            <param name="entity">The entity to save.</param>
            <param name="transaction">The transaction context to save in</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Insert a new user into the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Delete a specified asset fund from the database.
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update a user in the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves a singular asset fund
            </summary>
            <param name="assetFund">the asset fund to save (or delete)</param>
            <param name="txn">a sql transaction within which to enlist</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataPersister.SaveFundGroupAssociations(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund,System.Data.SqlClient.SqlTransaction,System.Boolean)">
            <summary>
            
            </summary>
            <param name="assetFund"></param>
            <param name="txn"></param>
            <param name="forAssetFundInsert">An optimisation - if this is set to true, then there is no need to delete
            existing associations thereby saving a round trip and sql server sp invoke</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentException">Invalid fund group id</exception>
            <exception cref="T:System.NullReferenceException">Asset Fund, Fund group or fund group collection is null</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundBenchMarkPersister.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundBenchMarkPersister.IsBenchmarkRelatedToAssetFund(System.String,System.String)">
            <summary>
            Determines whether [the benchmark is related to the asset fund] [the specified initialAssetFundCode].
            This checks for a circular reference back to the initial asset fund from any related 
            child funds' parent asset fund.
            </summary>
            <param name="initialAssetFundCode">Initial asset fund code.</param>
            <param name="benchmarkFundCode">Benchmark fund code.</param>
            <returns>String: empty when false; populated with relation when true</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundBenchMarkPersister.createEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity.
            </summary>
            <param name="reader">Reader.</param>
            <returns>AssetFund object</returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister">
            <summary>
            The class to use for persisting or retrieving Weightedindex, CompositeWeighting and
            WeightedMovementCollection objects.
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.m_snapshotID">
            <summary>
            the import id
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.m_assetFundCode">
            <summary>
            the unique id for the asset fund needed so we can set on load then pick up again in CreateEntity
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.m_valuationPoint">
            <summary>
            valuation point
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.m_valuationPointSet">
            <summary>
            valuation point set
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetMovementConstituentCollection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This routine receives a collection of indices to be peristed to the datasource
            </summary>
            <param name="movements">List of users to save</param>
            <param name="txn">Sql transaction within which to enlist</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Override to Update the entity in the database
            </summary>
            <param name="entity">Entity to update.</param>
            <param name="transaction">The transaction context to save in</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.ActivateWeightedIndices(System.Data.SqlClient.SqlTransaction,System.Int32)">
            <summary>
            Activate all weighted indices asociated with the parsed import ID
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback</param>
            <param name="snapshotID">Import identifyer to be actiavted</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.AssetFundIndexWeightedPersister.SnapshotID">
            <summary>
            The import ID used when saving modified and new items.
            </summary>
            <remarks>
            We will be mimmicking a data import, so we must hold the Database generated import ID
            </remarks>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister">
            <summary>
            Summary description for AssetFundLookupPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister"/> instance.
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister.LoadAssetFunds(System.Int32)">
            <summary>
            Loads the asset funds releated to this price file.
            </summary>
            <param name="priceFileId">Price file id.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister.LoadForCompany(System.String)">
            <summary>
            Loads a lookup list of funds for the specified company
            </summary>
            <param name="companyCode">Company code.</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:System.ArgumentException">Invalid company code</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister.LoadForCompany(System.String,HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund.AssetFundTypeEnum)">
            <summary>
            Loads a lookup list of funds for the specified company
            </summary>
            <param name="companyCode">Company code.</param>
            <param name="assetFundType">Type of asset fund (Composite, Linked, or OEIC)</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:System.ArgumentException">Invalid company code</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundLookupPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the lookup item from the data
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister">
            <summary>
            Summary description for AssetFundPricingPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister"/> instance.
            </summary>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.Load(System.String,System.Boolean)">
            <summary>
            Loads a particular asset funds pricing data
            </summary>
            <param name="assetFundCode">The Hi3 code (??) for the asset fund</param>
            <param name="currentFactors">Indicates whether to load the current factors</param>
            <returns>The requested asset fund</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.Load(System.Int32,System.Boolean)">
            <summary>
            Returns the collection of Fund objects for the given fund group id.
            Loads the asset fund pricing data
            </summary>
            <param name="fundGroupID">The ID of the fund group for which the funds are to be retrieved</param>
            <param name="currentWeightings">Indicates whether to load the current weightings</param>
            <returns type="AssetFundCollection">A collection of asset funds for the fund group</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.LoadForCompany(System.String,System.Boolean)">
            <summary>
            Returns the collection of Asset Fund objects for the given company.
            Loads the Asset Fund pricing data
            </summary>
            <param name="companyCode">The ID of the company for which the funds are to be retrieved</param>
            <param name="currentWeightings">Indicates whether to load the current weightings</param>
            <returns type="AssetFundCollection">A collection of asset funds for the company</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a user from the supplied data
            </summary>
            <param name="reader">The reader containing the data.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.loadDetails(System.String,System.Int32,System.String)">
            <summary>
            This method returns a collection of asset funds based upon a particualr key
            Used for the light object collection (no weithing collections etc)
            </summary>
            <param name="assetFundCode"></param>
            <param name="fundGroupID"></param>
            <param name="companyCode"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundPricingPersister.createDetailsEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the pricing detail asset fund entity object.
            </summary>
            <param name="reader">Reader.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataExportPersister">
            <summary>
            Summary description for AssetFundPricingPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataExportPersister.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataExportPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetFundStaticDataExportPersister.LoadForCompany(System.String)">
            <summary>
            Returns the collection of Asset Fund objects for the given company.
            Loads the light version only for static data screen (report)
            </summary>
            <param name="companyCode">The ID of the company for which the funds are to be retrieved</param>
            <returns type="AssetFundCollection">A collection of asset funds for the company</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load item</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister">
            <summary>
            Persits Asset movement constiuent parts
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister"/> instance.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.LoadAssetFundMovementConstituentsByGroup(System.Int32)">
            <summary>
            Loads the all available benchmarks for all asset funds beloging to the specified group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.LoadAssetFundMovementConstituents(System.String,System.Boolean)">
            <summary>
            Loads the all available benchmarks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.LoadAllBenchmarks">
            <summary>
            Loads all benchmarks in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data reader.
            </summary>
            <param name="safeReader">Reader to get the data from.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.Clear(System.String,System.Data.SqlClient.SqlTransaction)">
             <summary>
             Associates the constituate parts with the specified Asset fund.
             </summary>
            <param name="assetFundId">Identifier for the Asset Fund whose split is to be cleared</param>
             <param name="txn">Transaction to use</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.AssetMovementConstituentCollection,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Associates the constituate parts with the specified Asset fund.
            </summary>
            <param name="parts">Constituents to save, those marked IsDeleted=true will not be saved</param>
            <param name="snapshot">Snapshot to associate collection with</param>
            <param name="txn">Transaction to use</param>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.AssetMovementConstituentPersister.BenchmarkCache">
            <summary>
            
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister">
            <summary>
            Persister specifically for the authorising and unauthorising of fund prices.  A separate persister
            has been created so that the generic Save method can be used rather than an application-specific
            method on the FundPersister object.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.#ctor(System.String)">
            <summary>
            Constructor initialising the connection string.
            </summary>
            <param name="connectionString">The application connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.Save(HBOS.FS.AMP.UPD.Types.Funds.FundCollection)">
            <summary>
            Update the price authorisation for each fund in the collection.
            </summary>
            <param name="funds">The collection of funds being authorised or unauthorised.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update a fund in the database to be authorised or unauthorised
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.authoriseFund(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update the fund to show that it has been second level authorised.
            </summary>
            <param name="fund">The fund being authorised.</param>
            <param name="transaction">The currently active transaction.</param>
            <returns>True if the operation is successful.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.assignValuesToAuthorisedParameters(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Assigns the values to authorised parameters.
            </summary>
            <param name="fund">Fund.</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.createAuthoriseFundParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates the authorise fund parameters.
            </summary>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.unauthoriseFund(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update the fund to show that the second level authorisation has been reversed.
            </summary>
            <param name="fund">The fund having its second level authorisation reset.</param>
            <param name="transaction">The currently active transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.AuthorisedFundPricePersister.createUnAuthoriseParameters(System.Data.SqlClient.SqlParameter[],HBOS.FS.AMP.UPD.Types.Funds.Fund)">
            <summary>
            Creates the un authorise parameters.
            </summary>
            <param name="parameters">Parameters.</param>
            <param name="fund">Fund.</param>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CacheHelper">
             <summary>
             Provides strongly typed accessors to catched data.
             </summary>
             <remarks>
             In order to expand this class for new cached collections the following steps must be followed
             <list type="ul">
             <item>The object to be cached, and any members in that object must be Serializable".</item>
             <item>A get accessor must be created to retrieve the strongly typed item, checking that the item exists 
             in the cache. If the item does not exist it should be retrieved and cached as appropriate.</item>
             <item>A set accessor must be created to remove any existing cache entry then add the new value back
             into the cache.</item>
             <item>A private method must be created to retrive the item from the database and set the Cache using 
             the public set for the item.</item>
             <item>If the cached item is to be periodically a function must be created to reload the object and 
             set as the <see cref="T:Microsoft.ApplicationBlocks.Cache.CacheItemRemovedCallback"/> parameter during the object addition to the cache.</item>
             <item>Item removal must be added to the Flush method.</item>
            </list>
            </remarks>
            
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.#cctor">
            <summary>
            Constructs a new instance of <see cref="T:HBOS.FS.AMP.UPD.Persistence.CacheHelper"/>.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.getExpiryArrayHourly">
            <summary>
            Returns a standard array of cache expiration policies, containing a single policy expiring 
            in 5 minutes time.
            </summary>
            <returns>A standard array of cache expiration policies, containing a single policy expiring 
            in 5 minutes time.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.getExpiryArrayDaily">
            <summary>
            Returns a standard array of cache expiration policies, containing a single policy expiring 
            in 5 minutes time.
            </summary>
            <returns>A standard array of cache expiration policies, containing a single policy expiring 
            in 5 minutes time.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.refillFundGroupsCacheFromDatabase(System.String,System.String)">
            <summary>
            Retrieves the fund group list from the database and places it in the cache.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.refillHolidaysCacheFromDatabase(System.String)">
            <summary>
            Retrieves the Holidays list from the database and places it in the cache.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.refillCurrenciesCacheFromDatabase(System.String)">
            <summary>
            Retrieves the currencies list from the database and places it in the cache.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.refillCountriesCacheFromDatabase(System.String)">
            <summary>
            Retrieves the countries list from the database and places it in the cache.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.GetHolidays(System.String)">
            <summary>
            A cached Hashtable of Holidays.
            </summary>
            <value>A cached Holidays Hashtable</value>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.GetCurrencies(System.String)">
            <summary>
            A cached CurrencyCollection.
            </summary>
            <value>A cached CurrencyCollection</value>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.GetFundGroups(System.String,System.String)">
            <summary>
            A cached FundGroupCollection.
            </summary>
            <value>A cached FundGroupCollection</value>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.GetCountries(System.String)">
            <summary>
            A cached CountriesCollection.
            </summary>
            <value>A cached CountriesCollection</value>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.SetHolidays(System.Collections.Hashtable)">
            <summary>
            Sets the holidays.
            </summary>
            <param name="holidays">holidays.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.SetFundGroups(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupCollection)">
            <summary>
            Sets the fund groups.
            </summary>
            <param name="fundGroups">Fund groups.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.SetCountries(HBOS.FS.AMP.UPD.Types.Countries.CountryCollection)">
            <summary>
            Sets the countries colection.
            </summary>
            <param name="countries">Countries to persist.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.SetCurrencies(HBOS.FS.AMP.UPD.Types.Currency.CurrencyCollection)">
            <summary>
            Sets the currency colection.
            </summary>
            <param name="currencies">Currencies to persist.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.OnHolidaysRemove(System.String,Microsoft.ApplicationBlocks.Cache.CacheItemRemoveCause)">
            <summary>
            Callback when the "Holidays" cache is emptied.
            </summary>
            <param name="key">Cache key name</param>
            <param name="cause">Removal Cause</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.OnFundGroupsRemove(System.String,Microsoft.ApplicationBlocks.Cache.CacheItemRemoveCause)">
            <summary>
            Callback when the "FundGroups" cache is emptied.
            </summary>
            <param name="key">Cache key name</param>
            <param name="cause">Removal Cause</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.OnCurrenciesRemove(System.String,Microsoft.ApplicationBlocks.Cache.CacheItemRemoveCause)">
            <summary>
            Callback when the "Currencies" cache is emptied.
            </summary>
            <param name="key">Cache key name</param>
            <param name="cause">Removal Cause</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.OnCountriesRemove(System.String,Microsoft.ApplicationBlocks.Cache.CacheItemRemoveCause)">
            <summary>
            Callback when the "Countries" cache is emptied.
            </summary>
            <param name="key">Cache key name</param>
            <param name="cause">Removal Cause</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.FlushFundGroups">
            <summary>
            Flush all helper created caches
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.FlushCountries">
            <summary>
            Flush all helper created caches
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.FlushCurrencies">
            <summary>
            Flush all helper created caches
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CurrencyPersister">
            <summary>
            Persister for the Currency class.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.CurrencyPersister"/> instance.
            </summary>
            <param name="connectionString">Database connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPersister.FlushCurrencies">
            <summary>
            
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPersister.Load">
            <summary>
            Loads the collection of currencies from the database.
            </summary>
            <returns>A collection of all our currencies</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load currency</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data reader.
            </summary>
            <param name="safeReader">Reader to get the data from.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.CurrenciesCachePersister.Load">
            <summary>
            Returns the collection of Currency objects.
            </summary>
            <returns>A collection of matching Currencies.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CountryPersister">
            <summary>
            The class to use for retrieving Country objects
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryPersister.FlushCountries">
            <summary>
            Flush the cach of countries
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryPersister.LoadCountries">
            <summary>
            Loads the collection of countries from the database.
            </summary>
            <remarks>Asset funds are the only entity that will need countries</remarks>
            <returns>A collection of all our countries</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load countries</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a country from the supplied data
            </summary>
            <param name="reader">The reader containing the data.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.CountriesCachePersister.LoadCountries">
            <summary>
            Returns the collection of Country objects.
            </summary>
            <returns>A collection of matching Countries.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister">
            <summary>
            Data persister object used to move fund data asociated with static data
            maintenance to and from the database.
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundPersister">
            <summary>
            The class to use for persisting or retrieving Fund objects and FundCollection objects.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.GetConcurrencyViolationExceptionMessage">
            <summary>
            Gets the concurrency violation exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.GetConstraintViolationDuplicateKeyExceptionMessage">
            <summary>
            Gets the constraint violation duplicate key exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.GetConstraintViolationExceptionMessage">
            <summary>
            Gets the constraint violation exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.GetDatabaseExceptionMessage">
            <summary>
            Gets the database exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.GetNullParameterExceptionMessage">
            <summary>
            Gets the null parameter exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.FundPersister.m_assetFunds">
            <summary>
            
            </summary>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.FundPersister.m_useAssetFundCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.loadAssetFundForFund(System.String)">
            <summary>
            Loads the Parent Asset Fund for the current fund.
            </summary>
            <param name="assetFundID">Asset fund ID.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.LoadParentAssetFund(System.String)">
            <summary>
            Loads the parent asset fund.
            </summary>
            <param name="assetFundID">Asset fund ID.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.ResolveFundType(System.String)">
            <summary>
            Translates the database fund type code to a recognised enum.
            </summary>
            <param name="fundType">The fund type as returned from the database.</param>
            <returns>The FundType enum for the fund type.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.resolveFundType(HBOS.FS.AMP.UPD.Types.Funds.FundFactory.FundType)">
            <summary>
            Translates the enum to a database fund type code.
            </summary>
            <param name="fundType">The fund type enum.</param>
            <returns>The fund type as used in the database.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.resolveFundToDBType(HBOS.FS.AMP.UPD.Types.Funds.Fund)">
            <summary>
            resolves the object to a dbtype (as opposed to the type enum)
            </summary>
            <param name="fund"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.ResolveFundStatus(System.Int32)">
            <summary>
            Translates the database fund status code to a recognised enum.
            </summary>
            <param name="status">The fund status as returned from the database.</param>
            <returns>The fund status enum.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.resolveFundStatus(HBOS.FS.AMP.UPD.Types.Funds.Fund.FundStatusType)">
            <summary>
            Translates the enum to a database recognised status code.
            </summary>
            <param name="status">The fund status enum.</param>
            <returns>The corresponding database code.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.SaveFundGroupAssociations(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupCollection,System.String,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Persist the associated fund groups ids for a given fund
            </summary>
            <param name="fundGroups">the fund group containing the associated with a Fund object</param>
            <param name="fundCode">fund code for the fund groups to be associated with</param>
            <param name="forUpdate">if this is set to false, then there is no need to delete</param>
            <param name="transaction">the transaction within which this association save is enlisted</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Thrown if the record being saved was changed by someone else since being loaded</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Thrown if the constraint violation (primary key, foreign key or check) occurred during the save</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
            <exception cref="T:System.ArgumentException">Invalid fund group id</exception>
            <exception cref="T:System.NullReferenceException">Fund group or fund group collection is null</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.SaveFundFactors(HBOS.FS.AMP.UPD.Types.Factors.FactorCollection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Save a funds factors.
            </summary>
            <param name="factors"></param>
            <param name="fundCode">HiportFolio code</param>
            <param name="transaction">the transaction within which this association save is enlisted</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.SaveAssociatedExternalSystemIDs(HBOS.FS.AMP.UPD.Types.Funds.ExternalSystemIDCollection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Save a funds associated external system ids
            </summary>
            <param name="systemdIDs">associated system id collection</param>
            <param name="transaction">the transaction within which this association save is enlisted</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.SaveTolerances(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update a funds tolerance values
            </summary>
            <remarks>The stored procedure will flag existing tolerances as not in use and then insert the current tolerances</remarks>
            <param name="fund">Object holdong the tolerances</param>
            <param name="transaction">the transaction within which this association save is enlisted</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.LoadExternalSystemIDs(System.String)">
            <summary>
            Load the external system IDs for the current fund
            </summary>
            <returns>ExternalSystemIDCollection</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.LoadFundGroupsForHiportFolioCode(System.String)">
            <summary>
            Load the fund groups associated with the sepcified fund code
            </summary>
            <returns>FundGroupCollection</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.LoadNewFund(HBOS.FS.AMP.UPD.Persistence.SafeDataReader,HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupCollection,HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund,HBOS.FS.AMP.UPD.Types.Funds.ExternalSystemIDCollection)">
            <summary>
            Common method to populate a fund object.
            </summary>
            <remarks>
            This will load the correct level of data fo rthe required fund imformation.
            </remarks>
            <param name="safeReader"></param>
            <param name="fundGroups">The funds associated fund group collection</param>
            <param name="assetFund">The funds parent asset fund object</param>
            <param name="systemIDs">The funds associated external system id collection</param>
            <returns>A populated fund object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.ClearHolidays">
            <summary>
            Clears the cache of holidays
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.LoadHolidays">
            <summary>
            Loads a list of dates that are UK bank holidays
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Delete a specified asset fund from the database.
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.CurrentlyABenchmark(HBOS.FS.AMP.UPD.Types.Funds.Fund)">
            <summary>
            Determines if the Fund is being used as a benchmark by any Asset Funds
            </summary>
            <param name="fund">Fund to check.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.Load(System.String)">
            <summary>
            Retrieves a fund matching the given HiPortfolio code.
            </summary>
            <param name="hiPortfolioCode">The code for the required fund.</param>
            <returns>
            The matching fund object populated with the factors 
            and tolerances associated with its authorised price if it has one 
            or the latest imports if not.
            The returned Fund object will also hold fund group and external systems
            objects.
            </returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.LoadForCompany(System.String)">
            <summary>
            
            </summary>
            <param name="companyCode"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.LoadForAssetFund(System.String)">
            <summary>
            Load a collection of funds for a specified asset fund
            </summary>
            <param name="assetFundCode">Asset fund code</param>
            <returns>Fund collection object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.CheckFundExistence(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks that no other fund exists with this fundid, fullname or shortname
            </summary>
            <param name="fund"></param>
            <param name="hiPortfolioCodeExists"></param>
            <param name="securityCodeExists"></param>
            <param name="fullNameExists"></param>
            <param name="shortNameExists"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.CheckDuplicationForExistingFund(System.String,System.String,System.String,System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Checks to see if the updated fullname or shortname already exists in the system for another fund
            </summary>
            <param name="hiPortfolioCode"></param>
            <param name="fullName"></param>
            <param name="shortName"></param>
            <param name="securityCode"></param>
            <param name="fullNameExists"></param>
            <param name="shortNameExists"></param>
            <param name="securityCodeExists"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.SaveFund(HBOS.FS.AMP.UPD.Types.Funds.Fund)">
            <summary>
            Saves a fund to the database.
            </summary>
            <param name="fund">The fund to save</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.SaveFund(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves a fund to the database.
            </summary>
            <param name="fund">The fund to save</param>
            <param name="transaction">The transaction context to save in</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.SaveFunds(HBOS.FS.AMP.UPD.Types.Funds.FundCollection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Persists a collection of partial funds to the database
            </summary>
            <param name="funds">The collection of funds to save</param>
            <param name="transaction">The transaction context to save in</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update a fund in the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Insert a new partial fund into the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
            <returns>True if the save is successful.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundStaticDataPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a fund object from the supplied data.
            </summary>
            <param name="safeReader">The reader containing the data.</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.FundCachePersister.LoadHolidays">
            <summary>
            Loads a list of dates that are UK bank holidays
            </summary>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister">
            <summary>
            The class to use for persisting or retrieving Fund Group objects and
            Fund Group Collection objects.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.LoadFundGroupsByCompany(System.String)">
            <summary>
            Returns the collection of Fund group objects for the given company.
            </summary>
            <param name="companyCode">The ID of the company for which the fund groups are to be retrieved.</param>
            <returns>A collection of matching fund groups.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.LoadFundGroupsByCompanyAndType(System.String,HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupFactory.FundGroupTypes)">
            <summary>
            Returns fund groups by company and holding fund type (AssetFund or Fund)
            </summary>
            <param name="companyCode">10 char code</param>
            <param name="fundType">The 1 char code for fund group type- "A" for AssetFund, "I" for Individual (Fund)</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.filterByType(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupCollection,HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupFactory.FundGroupTypes)">
            <summary>
            Filters the collection of fundgroupps by type (Asset or Individual).
            </summary>
            <param name="fundGroupCollection">Fund group collection.</param>
            <param name="type">Type.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.LoadDirectFundGroupsByFundCode(System.String)">
            <summary>
            Loads direct fund groups associated with the passed fund code
            </summary>
            <param name="fundCode"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.LoadFundGroupsByAssetFundCode(System.String)">
            <summary>
            Loads a fund group for an asset fund by asset fund id
            </summary>
            <param name="assetFundID"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the FundGroup entity from the database.
            </summary>
            <param name="safeReader">The reader to be used to create the data.</param>
            <returns>The hydrated fund group</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.LoadDistributionFiles(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroup)">
            <summary>
            Loads the distribution files that are associated with this fund group
            </summary>
            <param name="fundGroup"></param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load items</exception>
            <exception cref="T:System.ArgumentException">Invalid fund group id</exception>
            <exception cref="T:System.NullReferenceException">Fund group or fund group collection is null</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.SaveDistributionFileAssociations(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroup,System.Data.SqlClient.SqlTransaction,System.Boolean)">
            <summary>
            Saves the ASSOCIATION to distribution files only, not any data to do with the files themselves.
            Is invoked within a transaction only as associations are saved after the main entity is saved.
            Does this by deleting existing associations then reinserting.
            </summary>
            <param name="fundGroup">the fund group containing the distribution files collection</param>
            <param name="txn">the transaction within which this association save is enlisted</param>
            <param name="forFundGroupInsert">An optimisation - if this is set to true, then there is no need to delete
            existing associateions thereby saving a round trip and sql server sp invoke</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Thrown if the record being saved was changed by someone else since being loaded</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Thrown if the constraint violation (primary key, foreign key or check) occurred during the save</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
            <exception cref="T:System.ArgumentException">Invalid fund group id</exception>
            <exception cref="T:System.NullReferenceException">Fund group or fund group collection is null</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.DeleteDistributionFileAssociations(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroup,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes all distribution file associations for this fund group
            </summary>
            <param name="fundGroup"></param>
            <param name="txn"></param>
            <exception cref="T:System.ArgumentException">Invalid fund group id</exception>
            <exception cref="T:System.NullReferenceException">Fund group or fund group collection is null</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.resolveFundGroupType(System.String)">
            <summary>
            Translates the database fund group type code to a recognised enum.
            </summary>
            <param name="fundGroupType">The fund group type as returned from the database.</param>
            <returns>The FundgroupType enum for the fund grouptype.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.resolveFundGroupType(System.Type)">
            <summary>
            Translates the enum to a database fund group type code.
            </summary>
            <param name="fundGroupType">The fund group type.</param>
            <returns>The fund group type as used in the database.</returns>
        </member>
        <member name="F:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.additionalErrorText">
            <summary>
            Additional error text to concatenate on to error strings
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.GetConcurrencyViolationExceptionMessage">
            <summary>
            Gets the concurrency violation exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.GetConstraintViolationDuplicateKeyExceptionMessage">
            <summary>
            Gets the constraint violation duplicate key exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.GetConstraintViolationExceptionMessage">
            <summary>
            Gets the constraint violation exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.GetDatabaseExceptionMessage">
            <summary>
            Gets the database exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupPersister.GetNullParameterExceptionMessage">
            <summary>
            Gets the null parameter exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CacheHelper.FundGroupCachePersister.LoadFundGroupsByCompany(System.String)">
            <summary>
            Returns the collection of Fund group objects for the given company.
            </summary>
            <param name="companyCode">The ID of the company for which the fund groups are to be retrieved.</param>
            <returns>A collection of matching fund groups.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CompanyLookupPersister">
            <summary>
            The class to use for persisting or retrieving Company objects and
            CompanyCollection objects.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyLookupPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyLookupPersister.LoadCompanies">
            <summary>
            Gets all the companies available to the specified user
            </summary>
            <returns>A strongly-typed collection of the user's companies</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load companies</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
            <exception cref="T:System.ArgumentException">Incorrect type loaded from base class</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyLookupPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity.
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CompanyPersister">
            <summary>
            The class to use for persisting or retrieving Company objects and
            CompanyCollection objects.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.ProgressCompanyValuationDay(System.String)">
            <summary>
            Progresses the company valuation day.
            </summary>
            <param name="companyCode">The code of the company to prgress the valuation day of.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.LoadCompany(System.String)">
            <summary>
            Loads a company object from the database for a given company code
            </summary>
            <param name="companyCode">The company code for the company to load</param>
            <returns>The requested company object</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
            <exception cref="T:System.ArgumentException">Incorrect type loaded from base class</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.LoadCompanyByName(System.String)">
            <summary>
            
            </summary>
            <param name="companyName"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.LoadCompanies">
            <summary>
            Gets all the companies available to the specified user
            </summary>
            <returns>A strongly-typed collection of the user's companies</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load companies</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
            <exception cref="T:System.ArgumentException">Incorrect type loaded from base class</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.GetImportDirectory(System.String)">
            <summary>
            Gets the import directory for the supplied company code
            </summary>
            <param name="CompanyCode">Company Code</param>
            <returns>Import Directory</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.SaveCompany(HBOS.FS.AMP.UPD.Types.Companies.Company)">
            <summary>
            Saves a company to the database.
            </summary>
            <param name="company">The company to save</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.SaveCompanies(HBOS.FS.AMP.UPD.Types.Companies.CompanyCollection)">
            <summary>
            Saves a collection of companies to the database
            </summary>
            <param name="companies">The collection of companies to save</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Insert a new company into the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
            <returns>True if the save is successful.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update a company in the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CompanyPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a company index from the supplied data
            </summary>
            <param name="reader">The reader containing the data.</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister">
            <summary>
            Summary description for CountryStaticDataPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister"/> instance.
            </summary>
            <param name="connectionString">Database connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.Load(System.String)">
            <summary>
            Loads the static data.
            </summary>
            <param name="CountryCode">Country code.</param>
            <returns>A Country object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.Countries.Country)">
            <summary>
            Saves the specified Country.
            </summary>
            <param name="Country">Country.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.Countries.Country,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves the specified Country.
            </summary>
            <param name="Country">Country.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data reader.
            </summary>
            <param name="safeReader">Reader to get the data from.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes the Country item.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The Country object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a Country</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to delete Country item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The Country object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a Country</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to append Country item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CountryStaticDataPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The Country object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a Country</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to update Country item</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister">
            <summary>
            Summary description for CurrencyPricingPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister"/> instance.
            </summary>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister.LoadRates(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Loads the rates from a data reader.
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns>Currency object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister.LoadRates(System.String,System.String)">
            <summary>
            Loads the current an previous currency rates for the specified currency and country codes.
            </summary>
            <param name="currencyCode">Currency code.</param>
            <param name="countryCode">Country code.</param>
            <returns>Currency object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the currency entity object.
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.CurrencyPricingPersister.AllowGlobalMarket">
            <summary>
            Sets a value indicating whether [allow global market].
            </summary>
            <value>
            	<c>true</c> if [allow global market]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister">
            <summary>
            Summary description for CurrencyStaticDataPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister"/> instance.
            </summary>
            <param name="connectionString">Database connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.Load(System.String)">
            <summary>
            Loads the static data.
            </summary>
            <param name="currencyCode">Currency code.</param>
            <returns>A currency object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.Currency.Currency)">
            <summary>
            Saves the specified currency.
            </summary>
            <param name="currency">Currency.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.Currency.Currency,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves the specified currencies.
            </summary>
            <param name="currency">Currency.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data reader.
            </summary>
            <param name="safeReader">Reader to get the data from.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes the currency item.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The currency object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a currency</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to delete currency item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The currency object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a currency</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to append currency item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.CurrencyStaticDataPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The currency object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a currency</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to update currency item</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister">
            <summary>
            The class to use for persisting or retrieving DistributionFile objects.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.#ctor(System.String)">
            <summary>
            Constructor initialising the connection string propperty.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.LoadFilesForFundGroupID(System.Int32)">
            <summary>
            Return all the files associated with the given fund group id
            </summary>
            <param name="fundGroupID">The fund group id for which the files are required.</param>
            <returns>All the Files associated with the given fund group id.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:System.ArgumentException">Column name not recognised or unexpected data in db</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.LoadFilesForCompany(System.String)">
            <summary>
            Loads the collection of all distribution files from the database 
            for the specified company.
            </summary>
            <param name="companyCode">The company</param>
            <returns>A collection of all our files</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.LoadFilesForDistribution(System.String)">
            <summary>
            Loads the files for distribution for a specified company.
            </summary>
            <param name="companyCode">Company code.</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.LoadDistributionDataSet(HBOS.FS.AMP.UPD.Types.DistributionFiles.DistributionFile)">
            <summary>
            Runs a stored procedure associated with a distribution and returns the data
            as an untyped data set. The table is named with the id of the distribution.
            </summary>
            <param name="fileToDistribute">File to distribute.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data in the reader
            </summary>
            <param name="safeReader">The reader to load data from</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.SaveFileAfterDistribution(HBOS.FS.AMP.UPD.Types.DistributionFiles.DistributionFile)">
            <summary>
            Updates the distribution file and the funds associated with that distribution once
            distribution has taken place.
            </summary>
            <param name="fileToUpdate">File to update.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the distribution file after distribution
            </summary>
            <param name="entity">DistributionFile entity to update.</param>
            <param name="transaction">Transaction to use.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.CreateAudit(System.String)">
            <summary>
            Creates an audit record.
            </summary>
            <param name="fileContents">The xml content from the dataset of distribution data.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.DistributionFilePersister.loadDistributionContents(System.Int64)">
            <summary>
            Retrieves data from an audit record.
            </summary>
            <param name="id">id of reord to retrieve</param>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister">
            <summary>
            The class to use for persisting or retrieving ExternalSystemID objects.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.#ctor(System.String)">
            <summary>
            Constructor initialising the connection string propperty.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.LoadSystemIDsForHiPortfolioCode(System.String)">
            <summary>
            Return all the system IDs associated with the given HiPortfolio code.
            </summary>
            <param name="hiPortfolioCode">The fund code for which the system IDs are required.</param>
            <returns>All the system IDs associated with the given fund code.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load system ids</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:System.ArgumentException">Column name not recognised or unexpected data in db</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.LoadSystems(System.String)">
            <summary>
            Loads the collection of all extenal systems from the database.
            </summary>
            <returns>A collection of all our systems</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data in the reader
            </summary>
            <param name="safeReader">The reader to load data from</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.Save(HBOS.FS.AMP.UPD.Types.Funds.ExternalSystemIDCollection)">
            <summary>
            Loops through the systemID collection to update those that have been changed or added.
            </summary>
            <param name="systemIDs">The collection of updated system ID objects.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.Save(HBOS.FS.AMP.UPD.Types.Funds.ExternalSystemIDCollection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Loop through the systemID collection to update those that have been changed or added using the
            current connection and transaction.
            </summary>
            <param name="systemIDs">The collection of updated system ID objects.</param>
            <param name="transaction">The current transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts a new External System ID into databse.
            </summary>
            <param name="entity">Entity to insert.</param>
            <param name="transaction">Transaction to do insert under.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates an existing External System Id in datbase
            </summary>
            <param name="entity">Entity to be updated.</param>
            <param name="transaction">Transaction to use.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ExternalSystemIDPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes an external system id from the database.
            </summary>
            <param name="entity">The entity to be deleted.</param>
            <param name="transaction">Transaction to use.</param>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FactorsPersister">
            <summary>
            Summary description for FactorsPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.Save(HBOS.FS.AMP.UPD.Types.Factors.Factor,System.String)">
            <summary>
            Saves a Factor to the database.
            </summary>
            <param name="factor">The factor object to save</param>
            <param name="fundCode">Asociated fund code</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.Save(HBOS.FS.AMP.UPD.Types.Factors.Factor,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves a Factor to the database.
            </summary>
            <param name="factor">The factor object to save</param>
            <param name="fundCode">Asociated fund code</param>
            <param name="transaction">The transaction context to save in</param>
            <returns>True if successful, otherwise false</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Insert a new fund factor into the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
            <returns>True if the save is successful.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
            <remarks>Any modifications to factors are treated as new so we always Insert.</remarks>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            This always just calls insert, as we never update an existing record,
            we insert a new record and mark all others for this days date as deleted
            </summary>
            <param name="entity">Entity to update.</param>
            <param name="transaction">The transaction context to save in</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.ArgumentNullException">Entity was passed in as a null</exception>
            <exception cref="T:System.ArgumentException">Invalid entity type returned</exception>
            <remarks>Any modifications to factors are treated as new so we always Insert.</remarks>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.insertXFactor(HBOS.FS.AMP.UPD.Types.Factors.XFactor)">
            <summary>
            Persist the XFactor information back to the database.
            </summary>
            <remarks>
            We always create a new factor - the sp sets the deleted flag to the previous value and archives it
            </remarks>
            <param name="factor">X Factor object</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.insertScalingFactor(HBOS.FS.AMP.UPD.Types.Factors.ScalingFactor)">
            <summary>
            Persist the Scaling Factor information back to the database.
            </summary>
            <param name="factor">Scaling Factorr object</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.insertRevaluationFactor(HBOS.FS.AMP.UPD.Types.Factors.RevaluationFactor)">
            <summary>
            Persist the Scaling Factor information back to the database.
            </summary>
            <param name="factor">Scaling Factorr object</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FactorsPersister.insertTaxProvisionFactor(HBOS.FS.AMP.UPD.Types.Factors.TaxProvisionEstimate)">
            <summary>
            Persist the Scaling Factor information back to the database.
            </summary>
            <param name="factor">Scaling Factorr object</param>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundBenchMarkPersister">
            <summary>
            Data persister object used to move fund data asociated with the benchmark split 
            in Asset fund data
            maintenance to and from the database.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundBenchMarkPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundBenchMarkPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a fund object from the supplied data.
            </summary>
            <param name="safeReader">The reader containing the data.</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundBenchMarkPersister.LoadParentAssetFund(System.String)">
            <summary>
            Loads the parent asset fund with the minimum details needed to access 
            the currency code which is needed in the benchmark screen.
            </summary>
            <param name="assetFundID">Asset fund ID.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundBenchMarkPersister.LoadNewFund(HBOS.FS.AMP.UPD.Persistence.SafeDataReader,HBOS.FS.AMP.UPD.Types.AssetFunds.AssetFund)">
            <summary>
            Common method to populate a fund object.
            </summary>
            <remarks>
            This will load the correct level of data fo rthe required fund imformation.
            </remarks>
            <param name="safeReader">Safe reader.</param>
            <param name="assetFund">Asset fund.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister">
            <summary>
            Summary description for FundGroupLookupPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister"/> instance.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister.LoadForCompany(System.String)">
            <summary>
            Loads a lookup list of fund groups for the specified company
            </summary>
            <param name="companyCode">Company code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister.LoadForAssetFund(System.String)">
            <summary>
            Loads a lookup list of fund groups associated with the passed asset fund
            </summary>
            <param name="assetFundID">Unique key of the asset fund</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister.LoadFundGroupsByCompanyAndTypeLookUp(System.String,HBOS.FS.AMP.UPD.Types.FundGroups.FundGroupFactory.FundGroupTypes)">
            <summary>
            Returns the collection of Fund group objects for the passed company
            </summary>
            <param name="companyCode">The ID of the company for which the fund groups are to be retrieved.</param>
            <param name="fundType">The 1 char code for fund group type- "A" for AssetFund, "I" for Individual (Fund)</param>
            <returns>A lookup collection of matching fund groups.</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupLookupPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the lookup item from the data
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister">
            <summary>
            Summary description for FundGroupStaticDataPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister"/> instance.
            </summary>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.Load(System.Int32)">
            <summary>
            Loads the specified fund group for a given id.
            </summary>
            <param name="fundGroupId">Fund group id.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.CheckForDuplication(System.Int32,System.String,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Checks to see if the updated fullname or shortname already exists in the system for another fund group
            </summary>
            <param name="fundGroupID">ID of existing fund group (or zero if new fund group)</param>
            <param name="fullName"></param>
            <param name="shortName"></param>
            <param name="fullNameExists"></param>
            <param name="shortNameExists"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.SaveFundGroup(HBOS.FS.AMP.UPD.Types.FundGroups.FundGroup)">
            <summary>
            Saves a fundgroup to the database.
            </summary>
            <param name="fundGroup">The fund group to save</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the fund group is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the object passed is not a fund group</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Thrown if the record being saved was changed by someone else since being loaded</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Thrown if the constraint violation (primary key, foreign key or check) occurred during the save</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the FundGroup entity into the database.
            </summary>
            <param name="entity">Entity to insert.</param>
            <param name="transaction">Transaction to use.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes the FundGroup entity from the database.
            </summary>
            <param name="entity">Entity to delete.</param>
            <param name="transaction">Transaction to use.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundGroupStaticDataPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the FundGroup entity on the database.
            </summary>
            <param name="entity">Entity to update.</param>
            <param name="transaction">Transaction to use.</param>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundLookUpPersister">
            <summary>
            Summary description for FundLookUpPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundLookUpPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.FundLookUpPersister"/> instance.
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundLookUpPersister.LoadForCompany(System.String)">
            <summary>
            Loads a lookup list of funds for the specified company
            </summary>
            <param name="companyCode">Company code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundLookUpPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the lookup item from the data
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister">
            <summary>
            Summary description for FundPricingPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString">The connection string to use for data access.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.Load(System.Int32)">
            <summary>
            Returns a collection of Fund objects for the given fund group.
            </summary>
            <param name="fundGroupID">The ID of the fund group.</param>
            <returns>All the funds associated with the given fund group.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.Load(System.String)">
            <summary>
            Returns a collection of Fund objects for the given company.
            </summary>
            <param name="companyCode">The code of the company.</param>
            <returns>All the funds associated with the given company.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.LoadSingleFund(System.String)">
            <summary>
            Returns a collection of Fund objects for the given company.
            </summary>
            <param name="hiPortfolioCode">The Hi Portfolio Code to load</param>
            <returns>All the funds associated with the given company.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Thrown if one of the parameters was of the incorrect value, type or length; or was null</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Thrown if other unclassified Sql error occurs</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a fund index from the supplied data
            </summary>
            <param name="safeReader">The reader containing the data.</param>
            <returns>A new fund object</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.SchemaMismatchException">Column missing from data returned by stored procedure</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.GetConcurrencyViolationExceptionMessage">
            <summary>
            Gets the concurrency violation exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.GetConstraintViolationDuplicateKeyExceptionMessage">
            <summary>
            Gets the constraint violation duplicate key exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.GetConstraintViolationExceptionMessage">
            <summary>
            Gets the constraint violation exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.GetDatabaseExceptionMessage">
            <summary>
            Gets the database exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.GetNullParameterExceptionMessage">
            <summary>
            Gets the null parameter exception message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.cacheAssetFunds(System.String)">
            <summary>
            Load all the Asset fund data so fund loading will be done quicker
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.FundPricingPersister.cacheAssetFunds(System.Int32)">
            <summary>
            Load all the Asset fund data so fund loading will be done quicker
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportFundPricePersister">
            <summary>
            Summary description for ImportFundPricePersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportFundPricePersister.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportFundPricePersister.Load">
            <summary>
            Load all the funds on the system for the price import.
            </summary>
            <returns>
            FundCollection.  A partially populated Fund object containing the
            associated asset fund id, the fund status, and the hiPortFolio code
            </returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportFundPricePersister.Load(System.String)">
            <summary>
            Load the funds by company for the price import.
            </summary>
            <param name="companyCode"></param>
            <returns>FundCollection.  A partially populated Fund object containing the
            associated asset fund id, the fund status, and the hiPortFolio code</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportFundPricePersister.Load(System.String,System.String,System.String)">
            <summary>
            Load the funds by company for the price import.
            </summary>
            <param name="companyCode"></param>
            <param name="extension"></param>
            <param name="fileName">File name to filter funds by</param>
            <returns>FundCollection.  A partially populated Fund object containing the
            associated asset fund id, the fund status, and the hiPortFolio code</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportFundPricePersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Called from CreateEntity.  
            Populate the Fund object for the price import.
            </summary>
            <param name="safeReader">The reader containing the data</param>
            <returns>A Fund object</returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportPersister">
            <summary>
            ImportPersister - used to check if this is a fresh file Import
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.ClearWorkingTable(System.Int64,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Clears the working table.
            </summary>
            <param name="snapShotId">Snap shot id.</param>
            <param name="transaction"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.VerifyNewFile(System.String,System.String)">
            <summary>
            Verify that this is a new file (has not been previously saved)
            </summary>
            <param name="importFileName"></param>
            <param name="companyCode"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.CheckForAuthorisedPrices(System.String)">
            <summary>
            Checks the database for authorised prices.
            </summary>
            <param name="CompanyCode">The Company code to check.</param>
            <returns>Whether prices have been authorised or not</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.GetImportedMarketIndices(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Get the imported market indices for this snapshot
            </summary>
            <param name="snapshot"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.GetImportedCurrencyRates(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Get the imported currency rates for this snapshot
            </summary>
            <param name="snapshot"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.GetImportedFundPrices(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Get the imported fund prices for this snapshot
            </summary>
            <param name="snapshot"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.GetImportedAssetFundSplit(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Get the list of imported asset fund splits for an snapshot
            </summary>
            <param name="snapshot"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.GetImportedCompositeFundSplit(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Get the list of imported Composite fund splits for an snapshot
            </summary>
            <param name="snapshot"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.TransferImportedCompositeFundWeightings(System.DateTime,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Transfer the Asset Fund weightings from the temp table to the real table
            </summary>
            <param name="snapshot"></param>
            <param name="transaction"></param>
            <param name="valuationPoint">The valuation point for the file being imported</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.TransferImportedAssetFundWeightings(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Transfer the Asset Fund weightings from the temp table to the real table
            </summary>
            <param name="snapshot"></param>
            <param name="transaction"></param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.LoadAllAssetFundBenchmarks(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Load the list of benchmarks that are active in the system.
            </summary>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.LoadAssetFundSplitsFromTempTable(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Load the list of imported assetfund splits for the given snapshot.
            </summary>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.getImportResults(System.String,HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            retrieves import results
            </summary>
            <param name="sqlCommand"></param>
            <param name="snapshot"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.RemoveFromImportedSplitTempTable(System.String,System.Int64,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Removes from imported split temp table entries that match the given argumants.
            </summary>
            <param name="assetFundId">Asset fund id.</param>
            <param name="snapshotId">Snapshot id.</param>
            <param name="transaction">Transaction.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportPersister.MoreThanOneMarketForACountry(System.Int64,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Checks to see if any of the countries being imported on the market split have been set up in UPD with 
            the proportion spread across more than one market
            </summary>
            <param name="snapshotId">Snapshot id.</param>
            <param name="transaction">Transaction.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ImportStatusPersister">
            <summary>
            Summary description for ImportStatusPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportStatusPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property.
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportStatusPersister.LoadCurrentImportStatus(System.String)">
            <summary>
            Loads the current import status.
            </summary>
            <param name="companyCode">The company code to load the status for.</param>
            <returns>The current status of the import</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportStatusPersister.LoadImportStatusForCompany(System.String)">
            <summary>
            Load details of all the imports for the passed company
            </summary>
            <param name="companyCode"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ImportStatusPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Create an importDetails object
            </summary>
            <param name="safeReader"></param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister">
            <summary>
            Summary description for PriceFileStaticDataPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister"/> instance.
            </summary>
            <param name="connectionString">Database connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.NumberOfRelatedFiles(System.String,System.String,System.String)">
            <summary>
            returns the number of files related to the company for the given file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="companyCode">Company code.</param>
            /// <param name="extension">File extension</param>
            <returns>
            	<c>true</c> if [is file related to company] [the specified fileName]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.LoadPriceFiles(System.String)">
            <summary>
            Loads the price files.
            </summary>
            <param name="companyCode">Code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.Load(System.Int32)">
            <summary>
            Loads the static data.
            </summary>
            <param name="priceFileId">Price File unique id.</param>
            <returns>A PriceFile object</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.PriceFile)">
            <summary>
            Saves the specified PriceFile.
            </summary>
            <param name="PriceFile">PriceFile.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.PriceFile,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves the specified PriceFile.
            </summary>
            <param name="PriceFile">PriceFile.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data reader.
            </summary>
            <param name="safeReader">Reader to get the data from.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes the PriceFile item.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The PriceFile object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a PriceFile</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to delete PriceFile item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The PriceFile object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a PriceFile</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to append PriceFile item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.PriceFileStaticDataPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The PriceFile object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a PriceFile</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to update PriceFile item</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister">
            <summary>
            Persister specifically for the releasing and unreleasing of fund prices.  A separate persister
            has been created so that the generic Save method can be used rather than an application-specific
            method on the FundPersister object.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.#ctor(System.String)">
            <summary>
            Constructor initialising the connection string.
            </summary>
            <param name="connectionString">The application connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.Save(HBOS.FS.AMP.UPD.Types.Funds.FundCollection)">
            <summary>
            Update the fund status for each updated fund in the collection.
            </summary>
            <param name="funds">The collection of funds being released or unreleased.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update the price authorisation for the given fund object.
            </summary>
            <param name="entity">
            The fund for which the price authorisation information is being persisted.
            </param>
            <param name="transaction">The current transaction.</param>
            <returns>True if the operation is successful.</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
            <exception cref="T:System.NullReferenceException">Unable to save as persistee was null</exception>
            <exception cref="T:System.ArgumentException">Unable to save as persistee was not of type 'Fund'</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.releaseFund(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update the fund status to released.
            </summary>
            <param name="fund">The fund being released.</param>
            <param name="transaction">The current transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the lookup item from the data
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.LoadForGroup(System.Int32)">
            <summary>
            Loads a lookup collection for specified group.
            </summary>
            <param name="fundGroupId">Fund group id.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReleasePricePersister.unreleaseFund(HBOS.FS.AMP.UPD.Types.Funds.Fund,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Reverse the released fund status.
            </summary>
            <param name="fund">The fund being unreleased.</param>
            <param name="transaction">The current transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.ReportPersister">
            <summary>
            Summary description for ReportPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReportPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReportPersister.LoadPriceComparisionData(System.DateTime,System.Int64,System.Data.DataSet)">
            <summary>
            Loads the price comparision data for the report.
            </summary>
            <param name="valuationDate">Valuation date to retrieve UPD prices for.</param>
            <param name="snapShotId">The Id of the import to be used in the comparision.</param>
            <param name="datasetToFill">Typed Dataset to populate and return</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReportPersister.PredictedPricesReportByFundGroup(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            This method retrieves the predicted price data for a fund group and date range
            </summary>
            <param name="fundGroupID"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.ReportPersister.PredictedPricesReportByFund(System.String,System.DateTime,System.DateTime)">
            <summary>
            This method retrieves the predicted price data for a fund and date range
            </summary>
            <param name="fundID"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load company</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.SafeDataReader">
            <summary>
            Wraps a data reader so that is returns 'safe' null values for DBNulls
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.#ctor(System.Data.IDataRecord)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.SafeDataReader"/> instance.
            </summary>
            <param name="record">The reader being wrapped</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetString(System.Int32)">
            <summary>
            Gets a column as a string from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetString(System.String)">
            <summary>
            Gets a column as a string from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, string.Empty when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetInt32(System.Int32)">
            <summary>
            Gets a column as an int32 from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column. Zero when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetInt16(System.Int32)">
            <summary>
            Gets a column as an int16 from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column. Zero when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetInt16(System.String)">
            <summary>
            Gets a column as an int32 from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, 0 when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetInt32(System.String)">
            <summary>
            Gets a column as an int32 from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, 0 when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetInt64(System.Int32)">
            <summary>
            Gets a column as an int64 from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column. Zero when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetInt64(System.String)">
            <summary>
            Gets a column as an int64 from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, 0 when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetTimestamp(System.Int32)">
            <summary>
            Gets a column as a timestamp from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetTimestamp(System.String)">
            <summary>
            Gets a column as a TimeStamp (byte[]) from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, byte[0] when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets a column as an bool from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column. false when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetBoolean(System.String)">
            <summary>
            Gets a column as a bool from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, false when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets a column as an DateTime from reader
            </summary>
            <param name="ordinal">The position of the column in the reader</param>
            <returns>The value of the column. Now when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetDateTime(System.String)">
            <summary>
            Gets a column as a DateTime from reader
            </summary>
            <param name="columnName">The name of the column in the reader</param>
            <returns>The value of the column, Now when null</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetDecimal(System.Int32)">
            <summary>
            Returns the decimal value for a given column by ordinal
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.GetDecimal(System.String)">
            <summary>
            Returns the decimal value for a given column by column name
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.IsNull(System.Int32)">
            <summary>
            Checks whether returned value is system.DBNull (by ordinal)
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.IsNull(System.String)">
            <summary>
            Checks whether returned value is system.DBNull (by column name)
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SafeDataReader.ColumnExists(System.String)">
            <summary>
            Determines whether a specified column name exists in a result set
            </summary>
            <param name="columnName">Name of the column to test.</param>
            <returns>bool</returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister">
            <summary>
            Summary description for SnapshotPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister"/> instance.
            </summary>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.Activate(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Activates all the data associated with the provided snapshotID
            </summary>
            <param name="snapshot">The snapshot to activate.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.Activate(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Activates all the data associated with the provided snapshotID using the provided transaction
            </summary>
            <param name="snapshot">The snapshot to activate.</param>
            <param name="txn">Transaction to use</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.Cancel(HBOS.FS.AMP.UPD.Types.Snapshot.Snapshot)">
            <summary>
            Deletes all the data associated with the provided snapshotID and marks the batch as deleted
            </summary>
            <param name="snapshot">The snapshot to cancel.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.NewImportSnapshot(System.String,System.String,HBOS.FS.AMP.UPD.Types.Snapshot.SnapshotProcess)">
            <summary>
            Creates a new snapshot for an import process
            </summary>
            <param name="importFileName"></param>
            <param name="companyCode"></param>
            <param name="process">Specify a value for the Process</param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.NewImportSnapshot(System.String,System.String,HBOS.FS.AMP.UPD.Types.Snapshot.SnapshotProcess,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates a new snapshot for an import process using the passed transaction
            </summary>
            <param name="importFileName"></param>
            <param name="companyCode"></param>
            <param name="process">Specify the process value</param>
            <param name="transaction"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.NewStaticDataSnapshot(System.String)">
            <summary>
            Creates a new snapshot for a static data process
            </summary>
            <param name="companyCode"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.NewStaticDataSnapshot(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Creates a new snapshot for a static data process using the passed transaction
            </summary>
            <param name="companyCode"></param>
            <param name="transaction"></param>
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SnapshotPersister.createNewSnapshot(HBOS.FS.AMP.UPD.Types.Snapshot.SnapshotProcess,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves an Import Source and returns the inserted Identity.
            </summary>
            <param name="importFileName"></param>
            <param name="companyCode"></param>
            <param name="process"></param>
            <param name="transaction">Transaction to use</param> 
            <returns></returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.StockMarketIndexPersister">
            <summary>
            Summary description for StockMarketIndexPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketIndexPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.StockMarketIndexPersister"/> instance.
            </summary>
            <param name="connectionString">Connection string to use.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketIndexPersister.LoadWithPricing(System.Int32,System.String)">
            <summary>
            Loads the specified market index ID with pricing information
            </summary>
            <param name="marketIndexID">Market index ID.</param>
            <param name="assetFundID">Company code to load pricing data for</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketIndexPersister.LoadWithoutPricing(System.Int32)">
            <summary>
            Loads the specified market index ID with pricing information
            </summary>
            <param name="marketIndexID">Market index ID.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketIndexPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the stock market index
            </summary>
            <param name="safeReader">Safe reader.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister">
            <summary>
            Summary description for MarketIndexPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.#ctor(System.String)">
            <summary>
            Use this class for retrieving all Market Index objects
            Default constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.Load(System.Int32)">
            <summary>
            Loads the specified market index.
            </summary>
            <param name="marketIndex">Market index.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.LoadForCountryCode(System.String)">
            <summary>
            Loads all stock markets related to the country code.
            </summary>
            <param name="countryCode">Country code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.LoadMarketIndices">
            <summary>
            Load the collection of market indices from the DB
            </summary>
            <returns type="MarketIndexCollection">A collection of market indices</returns>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to load companies</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.StockMarket)">
            <summary>
            Saves the specified Stock Market.
            </summary>
            <param name="stockMarket">Stock Market to save.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.Save(HBOS.FS.AMP.UPD.Types.AssetFunds.StockMarket,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Saves the specified Country.
            </summary>
            <param name="stockMarket">Stock Market to save.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.InvalidSqlParameterException">Attempt to call stored proc with an invalid parameter</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConstraintViolationException">Unable to insert item as an existing item already exists with unique key</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.ConcurrencyViolationException">Unable to update item as item has been modified since last load</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to create/update or delete items</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Deletes the Stock Market item.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The Stock Market object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a Country</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to delete StockMarket item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Inserts the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The Stock Market object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a Stock Market</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to append StockMarket item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates the entity.
            </summary>
            <param name="entity">Entity.</param>
            <param name="transaction">Transaction.</param>
            <exception cref="T:System.ArgumentNullException">The Country object is NULL</exception>
            <exception cref="T:System.ArgumentException">The entity object is of the wrong type, i.e. not a Country</exception>
            <exception cref="T:HBOS.FS.AMP.UPD.Exceptions.DatabaseException">Unable to update Country item</exception>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.StockMarketPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates the entity from the data in the reader.
            </summary>
            <param name="safeReader">The reader to build the entity from.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.SystemPersister">
            <summary>
            Summary description for SystemPersister.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SystemPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.SystemPersister"/> instance.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SystemPersister.GetServerDateTime">
            <summary>
            Gets the server date time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.SystemPersister.GetNextWorkingDay(System.DateTime)">
            <summary>
            Gets the next working day.
            </summary>
            <param name="today">Today.</param>
            <returns></returns>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.UserPersister">
            <summary>
            This is the persister object for saving/retireiving user data from/to the datasource 
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.#ctor(System.String)">
            <summary>
            Constructor used to initialise the ConnectionString property
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.LoadExportData(System.String)">
            <summary>
            Loads the export data.
            </summary>
            <param name="companyCode">Company code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.LoadUser(System.String,System.String)">
            <summary>
            Loads the a single user by Login ID.
            </summary>
            <param name="loginId">Login id.</param>
            <param name="companyCode">Company code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.LoadAllUsersForCompany(System.String)">
            <summary>
            Loads the all users for company.
            </summary>
            <param name="companyCode">Company code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.CreateEntity(HBOS.FS.AMP.UPD.Persistence.SafeDataReader)">
            <summary>
            Creates a user from the supplied data
            </summary>
            <param name="reader">The reader containing the data.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.GetAllPermissions(HBOS.FS.AMP.UPD.Types.Users.User,System.String)">
            <summary>
            Gets the all permissions those granted to the user  will be indeicated.
            </summary>
            <param name="user">User.</param>
            <param name="companyCode">Company code.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.GetDatabaseExceptionMessage">
            <summary>
            Override the base database exception message
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.Save(HBOS.FS.AMP.UPD.Types.Users.UserCollection)">
            <summary>
            This routine receives a collection of users to be peristed to the datasource
            </summary>
            <param name="users">List of users to save</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.InsertEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Insert a new user into the database
            The permissions are now updated from SaveEntity()
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.DeleteEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Delete a specified user from the database.
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
            <returns>Success flag</returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.UpdateEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Update a user in the database
            </summary>
            <param name="transaction">The transaction used for the persistence, allowing transactional rollback.</param>
            <param name="entity">Persitee user object</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.SaveEntity(HBOS.FS.AMP.Entities.IEntityBase,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Overriden to ensure an update if only the permissions have changed
            </summary>
            <param name="entity">User entity.</param>
            <param name="transaction">Transaction.</param>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.GetLastCompany">
            <summary>
            Set the last company the user chose
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.SetLastCompany(System.String)">
            <summary>
            Set the last company the user chose
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.UserPermissions(System.String,System.String)">
            <summary>
            Return the user permissions for the user and the current company
            </summary>
            <param name="companyId">Company id.</param>
            <param name="logOnId">Log on id.</param>
            <returns></returns>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.UserPersister.UserIsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:HBOS.FS.AMP.UPD.Persistence.UserPersister.CompanyCode">
            <summary>
            Used for deletion of user permissions for a given company
            </summary>
        </member>
        <member name="T:HBOS.FS.AMP.UPD.Persistence.VersionPersister">
            <summary>
            Responsible for retrieving version information from the database
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.VersionPersister.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:HBOS.FS.AMP.UPD.Persistence.VersionPersister"/> instance.
            </summary>
        </member>
        <member name="M:HBOS.FS.AMP.UPD.Persistence.VersionPersister.VerifyVersion(System.Version)">
            <summary>
            Verifies the version against the database.
            </summary>
            <param name="version">Version to verify.</param>
            <returns></returns>
        </member>
    </members>
</doc>
